// haxe
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,setPreloader: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-10000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) this.__onGamepadConnect(gamepad.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) this.__onJoystickConnect(joystick.next());
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(!(preloader == null || preloader.complete)) {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}
			
			if ('performance' in window == false) {
				window.performance = {};
			}
			
			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,handleApplicationEvent: function(__) {
		if(this.parent.__windows[0] != null) {
			this.parent.__windows[0].backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null && this.parent.__renderers[0].context != null) {
				this.parent.__renderers[0].render();
				this.parent.__renderers[0].onRender.dispatch();
				if(!this.parent.__renderers[0].onRender.canceled) {
					this.parent.__renderers[0].flip();
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			switch(event.type) {
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.__windows[0].onClose.dispatch();
					if(this.parent.__windows[0] != null && this.parent.__windows[0].onClose.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				this.parent.__windows[0].backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) cache.buttons.push(data.buttons[_g3++].value);
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) cache.axes.push(data.axes[_g31++]);
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i1 = _g32++;
					value = data.buttons[i1].value;
					if(value != cache.buttons[i1]) {
						if(i1 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i1 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i1);
							} else {
								joystick.onButtonUp.dispatch(i1);
							}
							if(gamepad != null) {
								switch(i1) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i1] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i2 = _g33++;
					if(data.axes[i2] != cache.axes[i2]) {
						joystick.onAxisMove.dispatch(i2,data.axes[i2]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i2,data.axes[i2]);
						}
						cache.axes[i2] = data.axes[i2];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,onUpdate: null
	,window: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			this.addRenderer(new lime_graphics_Renderer(window));
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("catfu",ApplicationMain.create,{ build : "219", company : "MouseMob", file : "catfu", fps : 60, name : "Kitty Catalyst", orientation : "landscape", packageName : "com.mousemob.catalyst", version : "0.1.0", windows : [{ allowHighDPI : false, alwaysOnTop : false, antialiasing : 4, background : 0, borderless : false, colorDepth : 16, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : false, stencilBuffer : true, title : "Kitty Catalyst", vsync : true, width : 0, x : null, y : null}]});
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	app.create(config);
	ManifestResources.init(config);
	var preloader = new openfl_display_Preloader(new haxepunk_Preloader());
	app.setPreloader(preloader);
	var a1 = app.__windows[0].stage;
	var tmp = function() {
		ApplicationMain.start(a1);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		preloader.addLibrary(library);
	}
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraryNames;
	while(_g2 < _g11.length) {
		var name = _g11[_g2];
		++_g2;
		preloader.addLibraryName(name);
	}
	preloader.load();
	app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var haxepunk_Engine = function(width,height,frameRate,fixed) {
	if(fixed == null) {
		fixed = false;
	}
	if(frameRate == null) {
		frameRate = 60;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this._renderer = new haxepunk_graphics_hardware_HardwareRenderer();
	this._frameListSum = 0;
	this._frameLast = 0;
	this._systemTime = 0;
	this._gameTime = 0;
	this._updateTime = 0;
	this._elapsed = 0;
	this._rate = 0;
	this._last = 0;
	this._time = 0;
	this._scenes = [];
	this._scene = new haxepunk_Scene();
	this.onClose = new haxepunk_Signal0();
	this.onSceneSwitch = new haxepunk_Signal0();
	this.onInputReleased = new haxepunk_Signals();
	this.onInputPressed = new haxepunk_Signals();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.maxFrameSkip = 5;
	this.maxElapsed = 0.0333;
	this.paused = false;
	haxepunk_HXP.bounds = new haxepunk_math_Rectangle(0,0,width,height);
	haxepunk_HXP.assignedFrameRate = frameRate;
	haxepunk_HXP.fixed = fixed;
	haxepunk_HXP.engine = this;
	haxepunk_HXP.width = width;
	haxepunk_HXP.height = height;
	haxepunk_HXP.screen = new haxepunk_Screen();
	haxepunk_HXP.app = this.app = this.createApp();
	if(haxepunk_math_Random._seed == 0) {
		haxepunk_math_Random._seed = haxepunk_math_MathUtil.clamp(2147483647 * Math.random() | 0,1.0,2147483646) | 0;
	}
	haxepunk_HXP.entity = new haxepunk_Entity();
	haxepunk_HXP._time = this.app.getTimeMillis();
	this._frameList = [];
	this._iterator = new haxepunk__$Engine_VisibleSceneIterator();
	this.app.init();
};
$hxClasses["haxepunk.Engine"] = haxepunk_Engine;
haxepunk_Engine.__name__ = ["haxepunk","Engine"];
haxepunk_Engine.prototype = {
	console: null
	,paused: null
	,maxElapsed: null
	,maxFrameSkip: null
	,preUpdate: null
	,postUpdate: null
	,preRender: null
	,postRender: null
	,onResize: null
	,onInputPressed: null
	,onInputReleased: null
	,onSceneSwitch: null
	,onClose: null
	,createApp: function() {
		return new haxepunk__$internal_FlashApp(this);
	}
	,init: function() {
	}
	,update: function() {
		if(haxepunk_HXP.needsResize) {
			haxepunk_HXP.resize(haxepunk_HXP.windowWidth,haxepunk_HXP.windowHeight);
		}
		this._scene.updateLists();
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			var o = this._scene;
			Type.getClassName(o == null ? null : js_Boot.getClass(o));
			this._scene.end();
			this._scene.updateLists(false);
			if(this._scene.autoClear && this._scene.get_hasTween()) {
				this._scene.clearTweens();
			}
			this._scene = this._scenes[this._scenes.length - 1];
			var _g = 0;
			var _g1 = this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var o1 = this._scene;
			Type.getClassName(o1 == null ? null : js_Boot.getClass(o1));
			this._scene.assetCache.enable();
			this._scene.updateLists();
			if(this._scene.started) {
				this._scene.resume();
			} else {
				this._scene.begin();
			}
			this._scene.started = true;
			this._scene.updateLists(true);
		}
		var _g2 = 0;
		var _g11 = this.preUpdate.callbacks;
		while(_g2 < _g11.length) {
			var callback1 = _g11[_g2];
			++_g2;
			callback1();
		}
		var _g3 = 0;
		var _g12 = this._scene.preUpdate.callbacks;
		while(_g3 < _g12.length) {
			var callback2 = _g12[_g3];
			++_g3;
			callback2();
		}
		if(haxepunk_HXP.tweener.get_active() && haxepunk_HXP.tweener.get_hasTween()) {
			haxepunk_HXP.tweener.updateTweens(haxepunk_HXP.elapsed);
		}
		if(this._scene.get_active()) {
			if(this._scene.get_hasTween()) {
				this._scene.updateTweens(haxepunk_HXP.elapsed);
			}
			this._scene.update();
		}
		this._scene.updateLists(false);
		var _g4 = 0;
		var _g13 = this._scene.postUpdate.callbacks;
		while(_g4 < _g13.length) {
			var callback3 = _g13[_g4];
			++_g4;
			callback3();
		}
		var _g5 = 0;
		var _g14 = this.postUpdate.callbacks;
		while(_g5 < _g14.length) {
			var callback4 = _g14[_g5];
			++_g5;
			callback4();
		}
	}
	,onRender: function() {
		var t = this.app.getTimeMillis();
		if(this.paused) {
			this._frameLast = t;
			if(haxepunk_HXP.engine.console == null) {
				return;
			}
		}
		if(this._frameLast == 0) {
			this._frameLast = t | 0;
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		this._renderer.startFrame();
		var _g2 = this._iterator.reset(this);
		while(_g2.scenes.length > 0) {
			var scene = _g2.scenes.pop();
			this._renderer.startScene(scene);
			haxepunk_HXP.renderingScene = scene;
			scene.render();
			var commands = scene.batch.iterator();
			while(commands.hasNext()) {
				var commands1 = commands.next();
				this._renderer.render(commands1);
			}
			this._renderer.flushScene(scene);
		}
		haxepunk_HXP.renderingScene = null;
		var _g3 = 0;
		var _g11 = this.postRender.callbacks;
		while(_g3 < _g11.length) {
			var callback1 = _g11[_g3];
			++_g3;
			callback1();
		}
		t = this.app.getTimeMillis();
		var tmp = this._frameList[this._frameList.length] = t - this._frameLast | 0;
		this._frameListSum += tmp;
		if(this._frameList.length > 10) {
			this._frameListSum -= this._frameList.shift();
		}
		haxepunk_HXP.frameRate = 1000 / (this._frameListSum / this._frameList.length);
		this._frameLast = t;
	}
	,onUpdate: function() {
		this._time = this._gameTime = this.app.getTimeMillis();
		haxepunk_HXP._systemTime = this._time - this._systemTime;
		this._updateTime = this._time;
		var elapsed = (this._time - this._last) / 1000;
		if(haxepunk_HXP.fixed) {
			this._elapsed += elapsed;
			haxepunk_HXP.elapsed = 1 / haxepunk_HXP.assignedFrameRate;
			if(this._elapsed > haxepunk_HXP.elapsed * this.maxFrameSkip) {
				this._elapsed = haxepunk_HXP.elapsed * this.maxFrameSkip;
			}
			while(this._elapsed > haxepunk_HXP.elapsed) {
				this._elapsed -= haxepunk_HXP.elapsed;
				this.step();
			}
		} else {
			haxepunk_HXP.elapsed = elapsed;
			if(haxepunk_HXP.elapsed > this.maxElapsed) {
				haxepunk_HXP.elapsed = this.maxElapsed;
			}
			haxepunk_HXP.elapsed *= haxepunk_HXP.rate;
			this.step();
		}
		this._last = this._time;
		this._time = this.app.getTimeMillis();
		haxepunk_HXP._updateTime = this._time - this._updateTime;
		this._time = this._systemTime = this.app.getTimeMillis();
		haxepunk_HXP._gameTime = this._time - this._gameTime;
	}
	,step: function() {
		haxepunk_input_Input.update();
		if(!this.paused) {
			this.update();
		}
		if(this.console != null) {
			this.console.update();
		}
		haxepunk_input_Input.postUpdate();
	}
	,pushScene: function(value) {
		var o = this._scene;
		Type.getClassName(o == null ? null : js_Boot.getClass(o));
		this._scenes.push(value);
	}
	,popScene: function() {
		var o = this._scene;
		Type.getClassName(o == null ? null : js_Boot.getClass(o));
		var scene = this._scenes.pop();
		if(haxepunk_assets_AssetCache.active.indexOf(scene.assetCache) > -1) {
			scene.assetCache.dispose();
		}
		return scene;
	}
	,set_scene: function(value) {
		if(this._scene == value) {
			return value;
		}
		if(this._scenes.length > 0) {
			this.popScene();
		}
		this._scenes.push(value);
		return this._scene;
	}
	,iterator: function() {
		return this._iterator.reset(this);
	}
	,app: null
	,_scene: null
	,_scenes: null
	,_time: null
	,_last: null
	,_rate: null
	,_elapsed: null
	,_updateTime: null
	,_gameTime: null
	,_systemTime: null
	,_frameLast: null
	,_frameListSum: null
	,_frameList: null
	,_renderer: null
	,_iterator: null
	,__class__: haxepunk_Engine
	,__properties__: {set_scene:"set_scene"}
};
Math.__name__ = ["Math"];
var Main = function(width,height,frameRate,fixed) {
	haxepunk_Engine.call(this,width,height,frameRate,fixed);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.sineWave = function(txt,data) {
	data.y += (Math.sin(Main._sineTime * 6 - data.x / 8) - 0.5) * 2;
};
Main.rainbowColors = function(txt,data) {
	var index = (Main._sineTime + data.x / 8) / Math.PI * Main._rainbowColors.length % Main._rainbowColors.length;
	var this1 = Main._rainbowColors[index | 0];
	var toColor = Main._rainbowColors[(index + 1) % Main._rainbowColors.length | 0];
	var t = index % 1;
	var tmp;
	if(t <= 0) {
		tmp = this1;
	} else if(t >= 1) {
		tmp = toColor;
	} else {
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		a += ((toColor >>> 24 & 255) - a) * t | 0;
		r += ((toColor >>> 16 & 255) - r) * t | 0;
		g += ((toColor >>> 8 & 255) - g) * t | 0;
		b += ((toColor & 255) - b) * t | 0;
		tmp = a << 24 | r << 16 | g << 8 | b;
	}
	data.color = tmp;
};
Main.updateTime = function() {
	Main._sineTime += haxepunk_HXP.elapsed;
	Main._sineTime %= Math.PI;
};
Main.main = function() {
	new Main(1920,1080,60,false);
};
Main.__super__ = haxepunk_Engine;
Main.prototype = $extend(haxepunk_Engine.prototype,{
	init: function() {
		catalyst_Client.init();
		var keys = [32,13];
		if(haxepunk_input__$Key_Key_$Impl_$._control.exists("start")) {
			var _g = 0;
			var _g1 = haxepunk_input__$Key_Key_$Impl_$._control.get("start");
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				HxOverrides.remove(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key),"start");
			}
		}
		haxepunk_input__$Key_Key_$Impl_$._control.set("start",keys);
		var _g2 = 0;
		while(_g2 < keys.length) {
			var key1 = keys[_g2];
			++_g2;
			if(!haxepunk_input__$Key_Key_$Impl_$._keyMap.exists(key1)) {
				haxepunk_input__$Key_Key_$Impl_$._keyMap.set(key1,[]);
			}
			if(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key1).indexOf("start") < 0) {
				haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key1).push("start");
			}
		}
		var keys1 = [27];
		if(haxepunk_input__$Key_Key_$Impl_$._control.exists("back")) {
			var _g3 = 0;
			var _g11 = haxepunk_input__$Key_Key_$Impl_$._control.get("back");
			while(_g3 < _g11.length) {
				var key2 = _g11[_g3];
				++_g3;
				HxOverrides.remove(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key2),"back");
			}
		}
		haxepunk_input__$Key_Key_$Impl_$._control.set("back",keys1);
		var _g4 = 0;
		while(_g4 < keys1.length) {
			var key3 = keys1[_g4];
			++_g4;
			if(!haxepunk_input__$Key_Key_$Impl_$._keyMap.exists(key3)) {
				haxepunk_input__$Key_Key_$Impl_$._keyMap.set(key3,[]);
			}
			if(haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key3).indexOf("back") < 0) {
				haxepunk_input__$Key_Key_$Impl_$._keyMap.get(key3).push("back");
			}
		}
		var button = 1;
		if(haxepunk_input_Mouse._control.exists("start")) {
			HxOverrides.remove(haxepunk_input_Mouse._buttonMap.get(button),"start");
		}
		haxepunk_input_Mouse._control.set("start",button);
		if(!haxepunk_input_Mouse._buttonMap.exists(button)) {
			haxepunk_input_Mouse._buttonMap.set(button,[]);
		}
		if(haxepunk_input_Mouse._buttonMap.get(button).indexOf("start") < 0) {
			haxepunk_input_Mouse._buttonMap.get(button).push("start");
		}
		this.preUpdate.callbacks.push(function() {
			catalyst_GameData.get_current().update();
		});
		this.preUpdate.callbacks.push(Main.updateTime);
		var _this = this.preUpdate;
		if(catalyst_Client._noiseShader == null) {
			catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
		}
		_this.callbacks.push(($_=catalyst_Client._noiseShader,$bind($_,$_.update)));
		this.postUpdate.callbacks.push(catalyst_Sound.update);
		this.initAssets();
		this.initFontTags();
	}
	,initAssets: function() {
		var monoFontSizes = [30,60];
		var tmp = haxepunk_assets_AssetCache.global;
		var _g = [];
		var _g1 = 0;
		while(_g1 < monoFontSizes.length) {
			var size = monoFontSizes[_g1];
			++_g1;
			_g.push("assets/fonts/monofonto." + size + ".fnt");
		}
		tmp.addBitmapFontSizes("monofonto",_g);
		var fontSizes = [28,42,84];
		var tmp1 = haxepunk_assets_AssetCache.global;
		var _g11 = [];
		var _g2 = 0;
		while(_g2 < fontSizes.length) {
			var size1 = fontSizes[_g2];
			++_g2;
			_g11.push("assets/fonts/coiny." + size1 + ".fnt");
		}
		tmp1.addBitmapFontSizes("coiny",_g11);
		var _g21 = new haxe_ds_StringMap();
		if(__map_reserved["pack"] != null) {
			_g21.setReserved("pack","assets/graphics");
		} else {
			_g21.h["pack"] = "assets/graphics";
		}
		if(__map_reserved["pack-upgrades"] != null) {
			_g21.setReserved("pack-upgrades","assets/graphics");
		} else {
			_g21.h["pack-upgrades"] = "assets/graphics";
		}
		var atlas = _g21.keys();
		while(atlas.hasNext()) {
			__map_reserved;
			var atlas1 = haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load("assets/graphics/" + atlas.next() + ".atlas");
			var regionName = atlas1._regions.keys();
			while(regionName.hasNext()) {
				var regionName1 = regionName.next();
				var _this = atlas1._regions;
				haxepunk_assets_AssetCache.global.addAtlasRegion(regionName1,__map_reserved[regionName1] != null ? _this.getReserved(regionName1) : _this.h[regionName1]);
			}
		}
	}
	,initFontTags: function() {
		haxepunk_graphics_text_BitmapText.defineFormatTag("big-img",{ scale : 1.5});
		haxepunk_graphics_text_BitmapText.defineFormatTag("white",{ color : 16777215});
		haxepunk_graphics_text_BitmapText.defineFormatTag("green",{ color : 5624832});
		haxepunk_graphics_text_BitmapText.defineFormatTag("blue",{ color : 6262227});
		haxepunk_graphics_text_BitmapText.defineFormatTag("cyan",{ color : 3648456});
		haxepunk_graphics_text_BitmapText.defineFormatTag("red",{ color : 13121335});
		haxepunk_graphics_text_BitmapText.defineFormatTag("purple",{ color : 14505471});
		haxepunk_graphics_text_BitmapText.defineFormatTag("yellow",{ color : 16763904});
		haxepunk_graphics_text_BitmapText.defineFormatTag("offwhite",{ color : 12632256});
		haxepunk_graphics_text_BitmapText.defineFormatTag("gray",{ color : 8421504});
		haxepunk_graphics_text_BitmapText.defineFormatTag("big",{ size : 60});
		haxepunk_graphics_text_BitmapText.defineFormatTag("small",{ size : 36});
		haxepunk_graphics_text_BitmapText.defineFormatTag("normal",{ size : 48});
		haxepunk_graphics_text_BitmapText.defineFormatTag("medium",{ size : 54});
		haxepunk_graphics_text_BitmapText.defineFormatTag("small-fixed",{ size : 48});
		var imagePath = null;
		if(imagePath == null) {
			imagePath = "assets/graphics/" + "star" + ".png";
		}
		var image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath,false));
		image.x = 0;
		image.y = -4 / (image.get_height() * 0.75 / 128) | 0;
		image.scale = 0.75;
		image.smooth = true;
		image.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("star",image,4);
		var imagePath1 = null;
		if(imagePath1 == null) {
			imagePath1 = "assets/graphics/" + "max-stars" + ".png";
		}
		var image1 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath1,false));
		image1.x = 0;
		image1.y = -4 / (image1.get_height() * 0.75 / 128) | 0;
		image1.scale = 0.75;
		image1.smooth = true;
		image1.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("max-stars",image1,4);
		var imagePath2 = null;
		if(imagePath2 == null) {
			imagePath2 = "assets/graphics/" + "upgrade-icon" + ".png";
		}
		var image2 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath2,false));
		image2.x = 0;
		image2.y = -4 / (image2.get_height() * 0.75 / 128) | 0;
		image2.scale = 0.75;
		image2.smooth = true;
		image2.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("upgrade-icon",image2,4);
		var imagePath3 = null;
		if(imagePath3 == null) {
			imagePath3 = "assets/graphics/" + "catnip-icon" + ".png";
		}
		var image3 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath3,false));
		image3.x = 0;
		image3.y = -4 / (image3.get_height() * 0.75 / 128) | 0;
		image3.scale = 0.75;
		image3.smooth = true;
		image3.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("catnip-icon",image3,4);
		var imagePath4 = null;
		if(imagePath4 == null) {
			imagePath4 = "assets/graphics/" + "claws-icon" + ".png";
		}
		var image4 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath4,false));
		image4.x = 0;
		image4.y = -4 / (image4.get_height() * 0.75 / 128) | 0;
		image4.scale = 0.75;
		image4.smooth = true;
		image4.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("claws-icon",image4,4);
		var imagePath5 = null;
		if(imagePath5 == null) {
			imagePath5 = "assets/graphics/" + "lightbulb-icon" + ".png";
		}
		var image5 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath5,false));
		image5.x = 0;
		image5.y = -4 / (image5.get_height() * 0.75 / 128) | 0;
		image5.scale = 0.75;
		image5.smooth = true;
		image5.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("lightbulb-icon",image5,4);
		var imagePath6 = null;
		if(imagePath6 == null) {
			imagePath6 = "assets/graphics/" + "heart-icon" + ".png";
		}
		var image6 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath6,false));
		image6.x = 0;
		image6.y = -4 / (image6.get_height() * 0.75 / 128) | 0;
		image6.scale = 0.75;
		image6.smooth = true;
		image6.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("heart-icon",image6,4);
		var imagePath7 = null;
		if(imagePath7 == null) {
			imagePath7 = "assets/graphics/" + "door-enter-icon" + ".png";
		}
		var image7 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath7,false));
		image7.x = 0;
		image7.y = -4 / (image7.get_height() * 0.75 / 128) | 0;
		image7.scale = 0.75;
		image7.smooth = true;
		image7.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("door-enter-icon",image7,4);
		var imagePath8 = null;
		if(imagePath8 == null) {
			imagePath8 = "assets/graphics/" + "door-exit-icon" + ".png";
		}
		var image8 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath8,false));
		image8.x = 0;
		image8.y = -4 / (image8.get_height() * 0.75 / 128) | 0;
		image8.scale = 0.75;
		image8.smooth = true;
		image8.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("door-exit-icon",image8,4);
		var imagePath9 = null;
		if(imagePath9 == null) {
			imagePath9 = "assets/graphics/" + "male-icon" + ".png";
		}
		var image9 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath9,false));
		image9.x = 0;
		image9.y = -4 / (image9.get_height() * 0.75 / 128) | 0;
		image9.scale = 0.75;
		image9.smooth = true;
		image9.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("male-icon",image9,4);
		var imagePath10 = null;
		if(imagePath10 == null) {
			imagePath10 = "assets/graphics/" + "female-icon" + ".png";
		}
		var image10 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath10,false));
		image10.x = 0;
		image10.y = -4 / (image10.get_height() * 0.75 / 128) | 0;
		image10.scale = 0.75;
		image10.smooth = true;
		image10.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("female-icon",image10,4);
		var imagePath11 = null;
		if(imagePath11 == null) {
			imagePath11 = "assets/graphics/" + "cat-icon" + ".png";
		}
		var image11 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath11,false));
		image11.x = 0;
		image11.y = -4 / (image11.get_height() * 0.75 / 128) | 0;
		image11.scale = 0.75;
		image11.smooth = true;
		image11.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("cat-icon",image11,4);
		var imagePath12 = null;
		if(imagePath12 == null) {
			imagePath12 = "assets/graphics/" + "supercat-icon" + ".png";
		}
		var image12 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath12,false));
		image12.x = 0;
		image12.y = -4 / (image12.get_height() * 0.75 / 128) | 0;
		image12.scale = 0.75;
		image12.smooth = true;
		image12.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("supercat-icon",image12,4);
		var imagePath13 = null;
		if(imagePath13 == null) {
			imagePath13 = "assets/graphics/" + "potion-icon" + ".png";
		}
		var image13 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath13,false));
		image13.x = 0;
		image13.y = -4 / (image13.get_height() * 0.75 / 128) | 0;
		image13.scale = 0.75;
		image13.smooth = true;
		image13.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("potion-icon",image13,4);
		var imagePath14 = null;
		if(imagePath14 == null) {
			imagePath14 = "assets/graphics/" + "brew-icon" + ".png";
		}
		var image14 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath14,false));
		image14.x = 0;
		image14.y = -4 / (image14.get_height() * 0.75 / 128) | 0;
		image14.scale = 0.75;
		image14.smooth = true;
		image14.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("brew-icon",image14,4);
		var imagePath15 = null;
		if(imagePath15 == null) {
			imagePath15 = "assets/graphics/" + "story-icon" + ".png";
		}
		var image15 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath15,false));
		image15.x = 0;
		image15.y = -4 / (image15.get_height() * 0.75 / 128) | 0;
		image15.scale = 0.75;
		image15.smooth = true;
		image15.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("story-icon",image15,4);
		var imagePath16 = null;
		if(imagePath16 == null) {
			imagePath16 = "assets/graphics/" + "couch-icon" + ".png";
		}
		var image16 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath16,false));
		image16.x = 0;
		image16.y = -4 / (image16.get_height() * 0.75 / 128) | 0;
		image16.scale = 0.75;
		image16.smooth = true;
		image16.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("couch-icon",image16,4);
		var imagePath17 = null;
		if(imagePath17 == null) {
			imagePath17 = "assets/graphics/" + "tree-icon" + ".png";
		}
		var image17 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath17,false));
		image17.x = 0;
		image17.y = -4 / (image17.get_height() * 0.75 / 128) | 0;
		image17.scale = 0.75;
		image17.smooth = true;
		image17.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("tree-icon",image17,4);
		var imagePath18 = null;
		if(imagePath18 == null) {
			imagePath18 = "assets/graphics/" + "cryo-icon" + ".png";
		}
		var image18 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath18,false));
		image18.x = 0;
		image18.y = -4 / (image18.get_height() * 0.75 / 128) | 0;
		image18.scale = 0.75;
		image18.smooth = true;
		image18.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("cryo-icon",image18,4);
		var imagePath19 = null;
		if(imagePath19 == null) {
			imagePath19 = "assets/graphics/" + "thaw-icon" + ".png";
		}
		var image19 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath19,false));
		image19.x = 0;
		image19.y = -4 / (image19.get_height() * 0.75 / 128) | 0;
		image19.scale = 0.75;
		image19.smooth = true;
		image19.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("thaw-icon",image19,4);
		var imagePath20 = null;
		if(imagePath20 == null) {
			imagePath20 = "assets/graphics/" + "nap-icon" + ".png";
		}
		var image20 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath20,false));
		image20.x = 0;
		image20.y = -4 / (image20.get_height() * 0.75 / 128) | 0;
		image20.scale = 0.75;
		image20.smooth = true;
		image20.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("nap-icon",image20,4);
		var imagePath21 = null;
		if(imagePath21 == null) {
			imagePath21 = "assets/graphics/" + "food-icon" + ".png";
		}
		var image21 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath21,false));
		image21.x = 0;
		image21.y = -4 / (image21.get_height() * 0.75 / 128) | 0;
		image21.scale = 0.75;
		image21.smooth = true;
		image21.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("food-icon",image21,4);
		var imagePath22 = null;
		if(imagePath22 == null) {
			imagePath22 = "assets/graphics/" + "gourmet-icon" + ".png";
		}
		var image22 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath22,false));
		image22.x = 0;
		image22.y = -4 / (image22.get_height() * 0.75 / 128) | 0;
		image22.scale = 0.75;
		image22.smooth = true;
		image22.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("gourmet-icon",image22,4);
		var imagePath23 = null;
		if(imagePath23 == null) {
			imagePath23 = "assets/graphics/" + "use-potion" + ".png";
		}
		var image23 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath23,false));
		image23.x = 0;
		image23.y = -4 / (image23.get_height() * 0.75 / 128) | 0;
		image23.scale = 0.75;
		image23.smooth = true;
		image23.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("use-potion",image23,4);
		var imagePath24 = null;
		if(imagePath24 == null) {
			imagePath24 = "assets/graphics/" + "temple-icon" + ".png";
		}
		var image24 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath24,false));
		image24.x = 0;
		image24.y = -4 / (image24.get_height() * 0.75 / 128) | 0;
		image24.scale = 0.75;
		image24.smooth = true;
		image24.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("temple-icon",image24,4);
		var imagePath25 = null;
		if(imagePath25 == null) {
			imagePath25 = "assets/graphics/" + "blessing-icon" + ".png";
		}
		var image25 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath25,false));
		image25.x = 0;
		image25.y = -4 / (image25.get_height() * 0.75 / 128) | 0;
		image25.scale = 0.75;
		image25.smooth = true;
		image25.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("blessing-icon",image25,4);
		var imagePath26 = null;
		if(imagePath26 == null) {
			imagePath26 = "assets/graphics/" + "sword-icon" + ".png";
		}
		var image26 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath26,false));
		image26.x = 0;
		image26.y = -4 / (image26.get_height() * 0.75 / 128) | 0;
		image26.scale = 0.75;
		image26.smooth = true;
		image26.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("sword-icon",image26,4);
		var imagePath27 = null;
		if(imagePath27 == null) {
			imagePath27 = "assets/graphics/" + "clock-icon" + ".png";
		}
		var image27 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath27,false));
		image27.x = 0;
		image27.y = -4 / (image27.get_height() * 0.75 / 128) | 0;
		image27.scale = 0.75;
		image27.smooth = true;
		image27.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("clock-icon",image27,4);
		var imagePath28 = null;
		if(imagePath28 == null) {
			imagePath28 = "assets/graphics/" + "hammer-icon" + ".png";
		}
		var image28 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath28,false));
		image28.x = 0;
		image28.y = -4 / (image28.get_height() * 0.75 / 128) | 0;
		image28.scale = 0.75;
		image28.smooth = true;
		image28.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("hammer-icon",image28,4);
		var imagePath29 = null;
		if(imagePath29 == null) {
			imagePath29 = "assets/graphics/" + "gift-icon" + ".png";
		}
		var image29 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath29,false));
		image29.x = 0;
		image29.y = -4 / (image29.get_height() * 0.75 / 128) | 0;
		image29.scale = 0.75;
		image29.smooth = true;
		image29.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("gift-icon",image29,4);
		var imagePath30 = null;
		if(imagePath30 == null) {
			imagePath30 = "assets/graphics/" + "search-icon" + ".png";
		}
		var image30 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath30,false));
		image30.x = 0;
		image30.y = -4 / (image30.get_height() * 0.75 / 128) | 0;
		image30.scale = 0.75;
		image30.smooth = true;
		image30.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("search-icon",image30,4);
		var imagePath31 = null;
		if(imagePath31 == null) {
			imagePath31 = "assets/graphics/" + "lock" + ".png";
		}
		var image31 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath31,false));
		image31.x = 0;
		image31.y = -4 / (image31.get_height() * 0.75 / 128) | 0;
		image31.scale = 0.75;
		image31.smooth = true;
		image31.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("lock",image31,4);
		var imagePath32 = null;
		if(imagePath32 == null) {
			imagePath32 = "assets/graphics/" + "sound-on" + ".png";
		}
		var image32 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath32,false));
		image32.x = 0;
		image32.y = -4 / (image32.get_height() * 0.75 / 128) | 0;
		image32.scale = 0.75;
		image32.smooth = true;
		image32.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("sound-on",image32,4);
		var imagePath33 = null;
		if(imagePath33 == null) {
			imagePath33 = "assets/graphics/" + "sound-off" + ".png";
		}
		var image33 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath33,false));
		image33.x = 0;
		image33.y = -4 / (image33.get_height() * 0.75 / 128) | 0;
		image33.scale = 0.75;
		image33.smooth = true;
		image33.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("sound-off",image33,4);
		var imagePath34 = null;
		if(imagePath34 == null) {
			imagePath34 = "assets/graphics/" + "help-icon" + ".png";
		}
		var image34 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath34,false));
		image34.x = 0;
		image34.y = -4 / (image34.get_height() * 0.75 / 128) | 0;
		image34.scale = 0.75;
		image34.smooth = true;
		image34.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("help-icon",image34,4);
		var imagePath35 = null;
		if(imagePath35 == null) {
			imagePath35 = "assets/graphics/" + "help-off-icon" + ".png";
		}
		var image35 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath35,false));
		image35.x = 0;
		image35.y = -4 / (image35.get_height() * 0.75 / 128) | 0;
		image35.scale = 0.75;
		image35.smooth = true;
		image35.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("help-off-icon",image35,4);
		var imagePath36 = null;
		if(imagePath36 == null) {
			imagePath36 = "assets/graphics/" + "fast-icon" + ".png";
		}
		var image36 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath36,false));
		image36.x = 0;
		image36.y = -4 / (image36.get_height() * 0.75 / 128) | 0;
		image36.scale = 0.75;
		image36.smooth = true;
		image36.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("fast-icon",image36,4);
		var imagePath37 = null;
		if(imagePath37 == null) {
			imagePath37 = "assets/graphics/" + "ribbon-icon" + ".png";
		}
		var image37 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath37,false));
		image37.x = 0;
		image37.y = -4 / (image37.get_height() * 0.75 / 128) | 0;
		image37.scale = 0.75;
		image37.smooth = true;
		image37.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("ribbon-icon",image37,4);
		var imagePath38 = null;
		if(imagePath38 == null) {
			imagePath38 = "assets/graphics/" + "success-icon" + ".png";
		}
		var image38 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath38,false));
		image38.x = 0;
		image38.y = -4 / (image38.get_height() * 0.75 / 128) | 0;
		image38.scale = 0.75;
		image38.smooth = true;
		image38.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("success-icon",image38,4);
		var imagePath39 = null;
		if(imagePath39 == null) {
			imagePath39 = "assets/graphics/" + "failure-icon" + ".png";
		}
		var image39 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath39,false));
		image39.x = 0;
		image39.y = -4 / (image39.get_height() * 0.75 / 128) | 0;
		image39.scale = 0.75;
		image39.smooth = true;
		image39.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("failure-icon",image39,4);
		var imagePath40 = null;
		if(imagePath40 == null) {
			imagePath40 = "assets/graphics/" + "surrender-icon" + ".png";
		}
		var image40 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath40,false));
		image40.x = 0;
		image40.y = -4 / (image40.get_height() * 0.75 / 128) | 0;
		image40.scale = 0.75;
		image40.smooth = true;
		image40.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("surrender-icon",image40,4);
		var imagePath41 = null;
		if(imagePath41 == null) {
			imagePath41 = "assets/graphics/" + "dna-icon" + ".png";
		}
		var image41 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath41,false));
		image41.x = 0;
		image41.y = -4 / (image41.get_height() * 0.75 / 128) | 0;
		image41.scale = 0.75;
		image41.smooth = true;
		image41.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("dna-icon",image41,4);
		var imagePath42 = null;
		if(imagePath42 == null) {
			imagePath42 = "assets/graphics/" + "mutagen-icon" + ".png";
		}
		var image42 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath42,false));
		image42.x = 0;
		image42.y = -4 / (image42.get_height() * 0.75 / 128) | 0;
		image42.scale = 0.75;
		image42.smooth = true;
		image42.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("mutagen-icon",image42,4);
		var imagePath43 = null;
		if(imagePath43 == null) {
			imagePath43 = "assets/graphics/" + "cart-icon" + ".png";
		}
		var image43 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath43,false));
		image43.x = 0;
		image43.y = -4 / (image43.get_height() * 0.75 / 128) | 0;
		image43.scale = 0.75;
		image43.smooth = true;
		image43.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("cart-icon",image43,4);
		var imagePath44 = null;
		if(imagePath44 == null) {
			imagePath44 = "assets/graphics/" + "ad-icon" + ".png";
		}
		var image44 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath44,false));
		image44.x = 0;
		image44.y = -4 / (image44.get_height() * 0.75 / 128) | 0;
		image44.scale = 0.75;
		image44.smooth = true;
		image44.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("ad-icon",image44,4);
		var imagePath45 = null;
		if(imagePath45 == null) {
			imagePath45 = "assets/graphics/" + "job-icon" + ".png";
		}
		var image45 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath45,false));
		image45.x = 0;
		image45.y = -4 / (image45.get_height() * 0.75 / 128) | 0;
		image45.scale = 0.75;
		image45.smooth = true;
		image45.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("job-icon",image45,4);
		var imagePath46 = null;
		if(imagePath46 == null) {
			imagePath46 = "assets/graphics/" + "heal-icon" + ".png";
		}
		var image46 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath46,false));
		image46.x = 0;
		image46.y = -4 / (image46.get_height() * 0.75 / 128) | 0;
		image46.scale = 0.75;
		image46.smooth = true;
		image46.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("heal-icon",image46,4);
		var imagePath47 = null;
		if(imagePath47 == null) {
			imagePath47 = "assets/graphics/" + "fish-icon" + ".png";
		}
		var image47 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath47,false));
		image47.x = 0;
		image47.y = -4 / (image47.get_height() * 0.75 / 128) | 0;
		image47.scale = 0.75;
		image47.smooth = true;
		image47.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("fish-icon",image47,4);
		var imagePath48 = null;
		if(imagePath48 == null) {
			imagePath48 = "assets/graphics/" + "fish-can-icon" + ".png";
		}
		var image48 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath48,false));
		image48.x = 0;
		image48.y = -4 / (image48.get_height() * 0.75 / 128) | 0;
		image48.scale = 0.75;
		image48.smooth = true;
		image48.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("fish-can-icon",image48,4);
		var imagePath49 = null;
		if(imagePath49 == null) {
			imagePath49 = "assets/graphics/" + "fishing-lure-icon" + ".png";
		}
		var image49 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath49,false));
		image49.x = 0;
		image49.y = -4 / (image49.get_height() * 0.75 / 128) | 0;
		image49.scale = 0.75;
		image49.smooth = true;
		image49.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("fishing-lure-icon",image49,4);
		var imagePath50 = null;
		if(imagePath50 == null) {
			imagePath50 = "assets/graphics/" + "globe-icon" + ".png";
		}
		var image50 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath50,false));
		image50.x = 0;
		image50.y = -4 / (image50.get_height() * 0.75 / 128) | 0;
		image50.scale = 0.75;
		image50.smooth = true;
		image50.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("globe-icon",image50,4);
		var imagePath51 = null;
		if(imagePath51 == null) {
			imagePath51 = "assets/graphics/" + "hat-icon" + ".png";
		}
		var image51 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath51,false));
		image51.x = 0;
		image51.y = -4 / (image51.get_height() * 0.75 / 128) | 0;
		image51.scale = 0.75;
		image51.smooth = true;
		image51.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("hat-icon",image51,4);
		var imagePath52 = null;
		if(imagePath52 == null) {
			imagePath52 = "assets/graphics/" + "exercise-icon" + ".png";
		}
		var image52 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath52,false));
		image52.x = 0;
		image52.y = -4 / (image52.get_height() * 0.75 / 128) | 0;
		image52.scale = 0.75;
		image52.smooth = true;
		image52.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("exercise-icon",image52,4);
		var imagePath53 = null;
		if(imagePath53 == null) {
			imagePath53 = "assets/graphics/" + "generation-icon" + ".png";
		}
		var image53 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath53,false));
		image53.x = 0;
		image53.y = -4 / (image53.get_height() * 0.75 / 128) | 0;
		image53.scale = 0.75;
		image53.smooth = true;
		image53.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("generation-icon",image53,4);
		var imagePath54 = null;
		if(imagePath54 == null) {
			imagePath54 = "assets/graphics/" + "plant-lab" + ".png";
		}
		var image54 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath54,false));
		image54.x = 0;
		image54.y = -4 / (image54.get_height() * 0.75 / 128) | 0;
		image54.scale = 0.75;
		image54.smooth = true;
		image54.pixelSnapping = false;
		haxepunk_graphics_text_BitmapText.defineImageTag("plant-lab",image54,4);
		var _g = 0;
		var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var ingredient = _g1[_g];
			++_g;
			var imagePath55 = "assets/graphics/potion/" + ingredient + ".png";
			if(imagePath55 == null) {
				imagePath55 = "assets/graphics/" + ingredient + ".png";
			}
			var image55 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(imagePath55,false));
			image55.x = 0;
			image55.y = -4 / (image55.get_height() * 0.75 / 128) | 0;
			image55.scale = 0.75;
			image55.smooth = true;
			image55.pixelSnapping = false;
			haxepunk_graphics_text_BitmapText.defineImageTag(ingredient,image55,4);
		}
		haxepunk_graphics_text_BitmapText.defineCustomTag("sine",Main.sineWave);
		haxepunk_graphics_text_BitmapText.defineCustomTag("rainbow",Main.rainbowColors);
		var _this = catalyst_GameData.get_current();
		this.pushScene(new catalyst_scenes_GameScene(_this.labs.get(_this.currentRegion).currentRoom));
	}
	,__class__: Main
});
var DocumentClass = function(width,height,frameRate,fixed) {
	Main.call(this,width,height,frameRate,fixed);
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) a.push(i.next());
	return a;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			_.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) if(pred(x.next())) {
			++n;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		rootPath = Reflect.field(config,"rootPath");
	}
	if(rootPath == null) {
		rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = rootPath;
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1);
	var manifest;
	var library;
	manifest = lime_utils_AssetManifest.parse("{\"name\":null,\"assets\":\"aoy4:pathy40:assets%2Fgraphics%2Frooms%2Fbackyard.pngy4:sizei397137y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y43:assets%2Fgraphics%2Frooms%2Ffairgrounds.pngR2i262649R3R4R5R7R6tgoR0y45:assets%2Fgraphics%2Frooms%2Fexercise-room.pngR2i236258R3R4R5R8R6tgoR0y40:assets%2Fgraphics%2Frooms%2Fcryo-lab.pngR2i69575R3R4R5R9R6tgoR0y46:assets%2Fgraphics%2Frooms%2Fdimly-lit-room.pngR2i363864R3R4R5R10R6tgoR0y38:assets%2Fgraphics%2Frooms%2Ftemple.pngR2i116018R3R4R5R11R6tgoR0y43:assets%2Fgraphics%2Frooms%2Fliving-room.pngR2i304071R3R4R5R12R6tgoR0y40:assets%2Fgraphics%2Frooms%2Fcat-cafe.pngR2i214859R3R4R5R13R6tgoR0y40:assets%2Fgraphics%2Frooms%2Fnap-room.pngR2i247638R3R4R5R14R6tgoR0y41:assets%2Fgraphics%2Frooms%2Fgift-room.pngR2i124218R3R4R5R15R6tgoR0y44:assets%2Fgraphics%2Frooms%2Ffishing-hole.pngR2i125515R3R4R5R16R6tgoR0y45:assets%2Fgraphics%2Frooms%2Ftravel-agency.pngR2i247870R3R4R5R17R6tgoR0y41:assets%2Fgraphics%2Frooms%2Fplant-lab.pngR2i158266R3R4R5R18R6tgoR0y40:assets%2Fgraphics%2Frooms%2Fcoliseum.pngR2i214203R3R4R5R19R6tgoR0y40:assets%2Fgraphics%2Frooms%2Fworkshop.pngR2i134926R3R4R5R20R6tgoR0y42:assets%2Fgraphics%2Frooms%2Fpotion-lab.pngR2i129223R3R4R5R21R6tgoR0y30:assets%2Fgraphics%2Fvortex.pngR2i647784R3R4R5R22R6tgoR0y36:assets%2Fgraphics%2Fcatnip-plant.pngR2i21378R3R4R5R23R6tgoR0y28:assets%2Fgraphics%2Fpack.pngR2i795954R3R4R5R24R6tgoR0y28:assets%2Fgraphics%2Feyes.pngR2i27828R3R4R5R25R6tgoR0y31:assets%2Fgraphics%2Fobelisk.pngR2i25608R3R4R5R26R6tgoR0y28:assets%2Fgraphics%2Fcryo.pngR2i33122R3R4R5R27R6tgoR0y31:assets%2Fgraphics%2Fvortex2.pngR2i184967R3R4R5R28R6tgoR0y30:assets%2Fgraphics%2Fnoise2.pngR2i342796R3R4R5R29R6tgoR0y34:assets%2Fgraphics%2Ftrack-ring.pngR2i20711R3R4R5R30R6tgoR0y30:assets%2Fgraphics%2Fnoise1.pngR2i340961R3R4R5R31R6tgoR0y32:assets%2Fgraphics%2Fcauldron.pngR2i23017R3R4R5R32R6tgoR0y33:assets%2Fgraphics%2Fprofessor.pngR2i40323R3R4R5R33R6tgoR0y34:assets%2Fgraphics%2Ftrack-tile.pngR2i915R3R4R5R34R6tgoR0y27:assets%2Fgraphics%2Fcat.pngR2i508049R3R4R5R35R6tgoR0y27:assets%2Fgraphics%2Frat.pngR2i11157R3R4R5R36R6tgoR0y30:assets%2Fgraphics%2Fnoise3.pngR2i357243R3R4R5R37R6tgoR0y28:assets%2Fgraphics%2Flava.pngR2i16063R3R4R5R38R6tgoR0y36:assets%2Fgraphics%2Fbreed-helper.pngR2i133476R3R4R5R39R6tgoR0y28:assets%2Fgraphics%2Flogo.pngR2i176472R3R4R5R40R6tgoR0y30:assets%2Fgraphics%2Fnoise4.pngR2i344010R3R4R5R41R6tgoR0y33:assets%2Fgraphics%2Ffish-pond.pngR2i17408R3R4R5R42R6tgoR0y37:assets%2Fgraphics%2Fpack-upgrades.pngR2i666704R3R4R5R43R6tgoR0y30:assets%2Ffonts%2Fmonofonto.pngR2i108055R3R4R5R44R6tgoR0y26:assets%2Ffonts%2Fcoiny.pngR2i253721R3R4R5R45R6tgoR2i9554R3y5:SOUNDR5y30:assets%2Fsounds%2Fdefeated.oggy9:pathGroupaR47hR6tgoR2i5332R3R46R5y30:assets%2Fsounds%2Fgetstuff.oggR48aR49hR6tgoR2i48805R3R46R5y30:assets%2Fsounds%2Fapplause.oggR48aR50hR6tgoR2i3934R3R46R5y29:assets%2Fsounds%2Fupgrade.oggR48aR51hR6tgoR2i4686R3R46R5y26:assets%2Fsounds%2Fmiss.oggR48aR52hR6tgoR2i52026R3R46R5y26:assets%2Fsounds%2Fpurr.oggR48aR53hR6tgoR2i6057R3R46R5y28:assets%2Fsounds%2Fhitint.oggR48aR54hR6tgoR2i6813R3R46R5y27:assets%2Fsounds%2Fpanel.oggR48aR55hR6tgoR2i4473R3R46R5y26:assets%2Fsounds%2Fblip.oggR48aR56hR6tgoR2i91269R3R46R5y30:assets%2Fsounds%2Fprestige.oggR48aR57hR6tgoR2i5373R3R46R5y28:assets%2Fsounds%2Fhitstr.oggR48aR58hR6tgoR2i10254R3R46R5y29:assets%2Fsounds%2Flevelup.oggR48aR59hR6tgoR2i4941R3R46R5y28:assets%2Fsounds%2Fnoblip.oggR48aR60hR6tgoR2i5296R3R46R5y28:assets%2Fsounds%2Fhitcha.oggR48aR61hR6tgoR2i7030R3R46R5y28:assets%2Fsounds%2Ftravel.oggR48aR62hR6tgoR2i521688R3y5:MUSICR5y27:assets%2Fmusic%2Fsleepy.oggR48aR64hR6tgoR2i831140R3R63R5y28:assets%2Fmusic%2Fjourney.oggR48aR65hR6tgoR2i422633R3R63R5y27:assets%2Fmusic%2Fbattle.oggR48aR66hR6tgoR2i1062619R3R63R5y26:assets%2Fmusic%2Fhouse.oggR48aR67hR6tgoR2i366179R3R63R5y25:assets%2Fmusic%2Fmail.oggR48aR68hR6tgoR2i482221R3R63R5y28:assets%2Fmusic%2Fcatshow.oggR48aR69hR6tgoR0y30:assets%2Fgraphics%2Flava.atlasR2i269R3y4:TEXTR5R70R6tgoR0y37:assets%2Fgraphics%2Fcatnip-plant.jsonR2i1937R3R71R5R72R6tgoR0y29:assets%2Fgraphics%2Fcryo.jsonR2i1723R3R71R5R73R6tgoR0y29:assets%2Fgraphics%2Flava.jsonR2i3108R3R71R5R74R6tgoR0y28:assets%2Fgraphics%2Fcat.jsonR2i109758R3R71R5R75R6tgoR0y35:assets%2Fgraphics%2Fprofessor.atlasR2i502R3R71R5R76R6tgoR0y29:assets%2Fgraphics%2Feyes.jsonR2i569R3R71R5R77R6tgoR0y29:assets%2Fgraphics%2Flogo.jsonR2i2482R3R71R5R78R6tgoR0y38:assets%2Fgraphics%2Fcatnip-plant.atlasR2i186R3R71R5R79R6tgoR0y33:assets%2Fgraphics%2Fcauldron.jsonR2i1287R3R71R5R80R6tgoR0y30:assets%2Fgraphics%2Flogo.atlasR2i380R3R71R5R81R6tgoR0y29:assets%2Fgraphics%2Fcat.atlasR2i20572R3R71R5R82R6tgoR0y29:assets%2Fgraphics%2Frat.atlasR2i477R3R71R5R83R6tgoR0y39:assets%2Fgraphics%2Fpack-upgrades.atlasR2i7640R3R71R5R84R6tgoR0y30:assets%2Fgraphics%2Fpack.atlasR2i20669R3R71R5R85R6tgoR0y30:assets%2Fgraphics%2Feyes.atlasR2i174R3R71R5R86R6tgoR0y30:assets%2Fgraphics%2Fcryo.atlasR2i480R3R71R5R87R6tgoR0y34:assets%2Fgraphics%2Fprofessor.jsonR2i3343R3R71R5R88R6tgoR0y28:assets%2Fgraphics%2Frat.jsonR2i7737R3R71R5R89R6tgoR0y34:assets%2Fgraphics%2Fcauldron.atlasR2i291R3R71R5R90R6tgoR0y29:assets%2Ffonts%2Fcoiny.28.fntR2i12186R3R71R5R91R6tgoR0y33:assets%2Ffonts%2Fmonofonto.30.fntR2i11681R3R71R5R92R6tgoR0y33:assets%2Ffonts%2Fmonofonto.60.fntR2i11659R3R71R5R93R6tgoR0y29:assets%2Ffonts%2Fcoiny.84.fntR2i12245R3R71R5R94R6tgoR0y29:assets%2Ffonts%2Fcoiny.42.fntR2i12199R3R71R5R95R6tgoR0y30:assets%2Fshaders%2Fdither.fragR2i788R3R71R5R96R6tgoR0y29:assets%2Fshaders%2Fpixel.fragR2i467R3R71R5R97R6tgoR0y29:assets%2Fshaders%2Fnoise.fragR2i955R3R71R5R98R6tgoR0y29:assets%2Fmaps%2Foverworld.tmxR2i11316R3R71R5R99R6tgoR0y29:assets%2Fmaps%2Foverworld.tsxR2i2573R3R71R5R100R6tgoR0y35:graphics%2Fpreloader%2Fhaxepunk.pngR2i21044R3R4R5R101R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_add.pngR2i183R3R4R5R102R6tgoR0y38:graphics%2Fdebug%2Fconsole_visible.pngR2i1275R3R4R5R103R6tgoR0y36:graphics%2Fdebug%2Fconsole_debug.pngR2i242R3R4R5R104R6tgoR0y35:graphics%2Fdebug%2Fconsole_step.pngR2i251R3R4R5R105R6tgoR0y43:graphics%2Fdebug%2Fconsole_drawcall_all.pngR2i189R3R4R5R106R6tgoR0y37:graphics%2Fdebug%2Fconsole_output.pngR2i186R3R4R5R107R6tgoR0y35:graphics%2Fdebug%2Fconsole_play.pngR2i242R3R4R5R108R6tgoR0y29:graphics%2Fdebug%2Fbutton.pngR2i248R3R4R5R109R6tgoR0y35:graphics%2Fdebug%2Fconsole_logo.pngR2i21764R3R4R5R110R6tgoR0y36:graphics%2Fdebug%2Fconsole_pause.pngR2i213R3R4R5R111R6tgoR0y37:graphics%2Fdebug%2Fconsole_hidden.pngR2i1216R3R4R5R112R6tgoR2i58088R3y4:FONTy9:classNamey27:__ASSET__font_monofonto_ttfR5y20:font%2Fmonofonto.ttfR6tgoR0y20:font%2Fmonofonto.fntR2i11598R3R71R5R117R6tgoR0y20:font%2Fmonofonto.pngR2i19822R3R4R5R118R6tgoR0R101R2i21044R3R4R5R101R6tgoR0R102R2i183R3R4R5R102R6tgoR0R103R2i1275R3R4R5R103R6tgoR0R104R2i242R3R4R5R104R6tgoR0R105R2i251R3R4R5R105R6tgoR0R106R2i189R3R4R5R106R6tgoR0R107R2i186R3R4R5R107R6tgoR0R108R2i242R3R4R5R108R6tgoR0R109R2i248R3R4R5R109R6tgoR0R110R2i21764R3R4R5R110R6tgoR0R111R2i213R3R4R5R111R6tgoR0R112R2i1216R3R4R5R112R6tgoR2i58088R3R113R114y28:__ASSET__font_monofonto_ttf1R5R116R6tgoR0R117R2i11598R3R71R5R117R6tgoR0R118R2i19822R3R4R5R118R6tgh\",\"version\":2,\"libraryArgs\":[],\"libraryType\":null}",rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) {
			this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
		}
	} else if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	return new lime_text_Font().__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	node.appendChild(window.document.createTextNode("BESbswy"));
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var ua = window.navigator.userAgent.toLowerCase();
		var isSafari = ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0;
		if(!isSafari && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 516, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 552, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__font_monofonto_ttf"] = function() {
	this.ascender = 960;
	this.descender = -240;
	this.height = 1200;
	this.numGlyphs = 387;
	this.underlinePosition = -143;
	this.underlineThickness = 20;
	this.unitsPerEM = 1000;
	this.name = "Monofonto-Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__font_monofonto_ttf"] = _$_$ASSET_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$font_$monofonto_$ttf.__name__ = ["__ASSET__font_monofonto_ttf"];
_$_$ASSET_$_$font_$monofonto_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$monofonto_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$monofonto_$ttf
});
var _$_$ASSET_$_$font_$monofonto_$ttf1 = $hx_exports["__ASSET__font_monofonto_ttf1"] = function() {
	this.ascender = null;
	this.descender = null;
	this.height = null;
	this.numGlyphs = null;
	this.underlinePosition = null;
	this.underlineThickness = null;
	this.unitsPerEM = null;
	this.name = "Monofonto-Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__font_monofonto_ttf1"] = _$_$ASSET_$_$font_$monofonto_$ttf1;
_$_$ASSET_$_$font_$monofonto_$ttf1.__name__ = ["__ASSET__font_monofonto_ttf1"];
_$_$ASSET_$_$font_$monofonto_$ttf1.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$monofonto_$ttf1.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$monofonto_$ttf1
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		var k = instance.name;
		var _this = openfl_text_Font.__fontByName;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,instance);
		} else {
			_this.h[k] = instance;
		}
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__class__: openfl_text_Font
});
var _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf = $hx_exports["__ASSET__OPENFL__font_monofonto_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$font_$monofonto_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_monofonto_ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__name__ = ["__ASSET__OPENFL__font_monofonto_ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1 = $hx_exports["__ASSET__OPENFL__font_monofonto_ttf1"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$font_$monofonto_$ttf1());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_monofonto_ttf1"] = _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1.__name__ = ["__ASSET__OPENFL__font_monofonto_ttf1"];
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$monofonto_$ttf1
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = ["hxbit","Serializable"];
hxbit_Serializable.prototype = {
	__uid: null
	,getCLID: null
	,serialize: null
	,unserializeInit: null
	,unserialize: null
	,__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = ["hxbit","Serializer"];
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw new js__$Boot_HaxeError("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		++_g1;
		_g.push([]);
	}
	var isSub = [];
	var _g2 = 0;
	var _g11 = cl.length;
	while(_g2 < _g11) {
		var i = _g2++;
		var c = cl[i];
		while(true) {
			c = Type.getSuperClass(c);
			if(c == null) {
				break;
			}
			var idx = cl.indexOf(c);
			if(idx < 0) {
				break;
			}
			_g[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g12 = [];
	var _g3 = 0;
	var _g21 = hxbit_Serializer.CLASSES.length;
	while(_g3 < _g21) {
		var i1 = _g3++;
		var tmp;
		if(_g[i1].length == 0 && !isSub[i1]) {
			tmp = 0;
		} else {
			var name = Type.getClassName(cl[i1]);
			var v = 1;
			var _g13 = 0;
			var _g4 = name.length;
			while(_g13 < _g4) v = v * 223 + name.charCodeAt(_g13++) | 0;
			v = 1 + (v & 1073741823) % 65423;
			tmp = v;
		}
		_g12.push(tmp);
	}
	hxbit_Serializer.CLIDS = _g12;
	hxbit_Serializer.CL_BYID = [];
	var _g31 = 0;
	var _g22 = hxbit_Serializer.CLIDS.length;
	while(_g31 < _g22) {
		var i2 = _g31++;
		var cid = hxbit_Serializer.CLIDS[i2];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			throw new js__$Boot_HaxeError("Conflicting CLID between " + Type.getClassName(hxbit_Serializer.CL_BYID[cid]) + " and " + Type.getClassName(cl[i2]));
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i2];
	}
};
hxbit_Serializer.prototype = {
	refs: null
	,remapObjs: null
	,newObjects: null
	,out: null
	,input: null
	,inPos: null
	,usedClasses: null
	,convert: null
	,mapIndexes: null
	,knownStructs: null
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 4:
			var v1 = this.input.getDouble(this.inPos);
			this.inPos += 8;
			return v1;
		case 5:
			var o = { };
			var _g1 = 0;
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g2 = v2;
			while(_g1 < _g2) {
				++_g1;
				var v3 = this.input.b[this.inPos++];
				if(v3 == 128) {
					v3 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v3;
				var field;
				if(len == 0) {
					field = null;
				} else {
					--len;
					var s = this.input.getString(this.inPos,len);
					this.inPos += len;
					field = s;
				}
				o[field] = this.getDynamic();
			}
			return o;
		case 6:
			var v4 = this.input.b[this.inPos++];
			if(v4 == 128) {
				v4 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v4;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 7:
			var _g3 = [];
			var _g21 = 0;
			var v5 = this.input.b[this.inPos++];
			if(v5 == 128) {
				v5 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g11 = v5;
			while(_g21 < _g11) {
				++_g21;
				_g3.push(this.getDynamic());
			}
			return _g3;
		case 8:
			var v6 = this.input.b[this.inPos++];
			if(v6 == 128) {
				v6 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len2 = v6;
			if(len2 == 0) {
				return null;
			} else {
				--len2;
				var s2 = this.input.sub(this.inPos,len2);
				this.inPos += len2;
				return s2;
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Invalid dynamic prefix " + _g);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.out.b.push(0);
			return;
		}
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 1:
			this.out.b.push(3);
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.b.push(v1);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v1);
			}
			break;
		case 2:
			this.out.b.push(4);
			this.out.addInt64(haxe_io_FPHelper.doubleToI64(v));
			break;
		case 3:
			this.out.b.push(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.out.b.push(5);
			var v2 = fields.length;
			if(v2 >= 0 && v2 < 128) {
				this.out.b.push(v2);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v2);
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(f == null) {
					this.out.b.push(0);
				} else {
					var v3 = f.length + 1;
					if(v3 >= 0 && v3 < 128) {
						this.out.b.push(v3);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v3);
					}
					var _this = this.out;
					var src = haxe_io_Bytes.ofString(f);
					var b2 = src.b;
					var _g11 = 0;
					var _g2 = src.length;
					while(_g11 < _g2) _this.b.push(b2[_g11++]);
				}
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g[2];
			switch(c) {
			case Array:
				this.out.b.push(7);
				var a = v;
				var v4 = a.length;
				if(v4 >= 0 && v4 < 128) {
					this.out.b.push(v4);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v4);
				}
				var _g3 = 0;
				while(_g3 < a.length) {
					var v5 = a[_g3];
					++_g3;
					this.addDynamic(v5);
				}
				break;
			case String:
				this.out.b.push(6);
				var s = v;
				if(s == null) {
					this.out.b.push(0);
				} else {
					var v6 = s.length + 1;
					if(v6 >= 0 && v6 < 128) {
						this.out.b.push(v6);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v6);
					}
					var _this1 = this.out;
					var src1 = haxe_io_Bytes.ofString(s);
					var b21 = src1.b;
					var _g12 = 0;
					var _g4 = src1.length;
					while(_g12 < _g4) _this1.b.push(b21[_g12++]);
				}
				break;
			case haxe_io_Bytes:
				this.out.b.push(8);
				var b = v;
				if(b == null) {
					this.out.b.push(0);
				} else {
					var v7 = b.length + 1;
					if(v7 >= 0 && v7 < 128) {
						this.out.b.push(v7);
					} else {
						this.out.b.push(128);
						this.out.addInt32(v7);
					}
					var _this2 = this.out;
					var b22 = b.b;
					var _g13 = 0;
					var _g5 = b.length;
					while(_g13 < _g5) _this2.b.push(b22[_g13++]);
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(c));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(_g));
		}
	}
	,addStruct: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		var c = js_Boot.__instanceof(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.out.b.push(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.out.b.push(2);
			if(index >= 0 && index < 128) {
				this.out.b.push(index);
			} else {
				this.out.b.push(128);
				this.out.addInt32(index);
			}
			return;
		}
		this.knownStructs.push(s);
		this.out.b.push(3);
		var c1 = s == null ? null : js_Boot.getClass(s);
		if(c1 == null) {
			throw new js__$Boot_HaxeError(Std.string(s) + " does not have a class ?");
		}
		var s1 = Type.getClassName(c1);
		if(s1 == null) {
			this.out.b.push(0);
		} else {
			var v = s1.length + 1;
			if(v >= 0 && v < 128) {
				this.out.b.push(v);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v);
			}
			var _this = this.out;
			var src = haxe_io_Bytes.ofString(s1);
			var b2 = src.b;
			var _g1 = 0;
			var _g = src.length;
			while(_g1 < _g) _this.b.push(b2[_g1++]);
		}
		s.customSerialize(this);
		this.out.b.push(255);
	}
	,getStruct: function() {
		switch(this.input.b[this.inPos++]) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			var tmp = this.knownStructs;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return tmp[v];
		case 3:
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v1;
			var cname;
			if(len == 0) {
				cname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				cname = s;
			}
			var cl = Type.resolveClass(cname);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Missing struct class " + cname);
			}
			var s1 = Type.createEmptyInstance(cl);
			this.knownStructs.push(s1);
			s1.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw new js__$Boot_HaxeError("Invalid customUnserialize for " + Std.string(s1));
			}
			return s1;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,addObjRef: function(s) {
		var v = s.__uid;
		if(v >= 0 && v < 128) {
			this.out.b.push(v);
		} else {
			this.out.b.push(128);
			this.out.addInt32(v);
		}
	}
	,getObjRef: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.out.b.push(index >> 8);
		this.out.b.push(index & 255);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.out.b.push(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.out.b.push(clid >> 8);
			this.out.b.push(clid & 255);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Type.createEmptyInstance(hxbit_Serializer.CLASSES[clidx]);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		if(hxbit_Serializer.CLIDS[clidx] != 0) {
			c = hxbit_Serializer.CL_BYID[this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++]];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Type.createEmptyInstance(c);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,convertRef: function(i,c) {
		var length = c.read.length;
		var values = new Array(length);
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		var _g2 = 0;
		var _g11 = c.write;
		while(_g2 < _g11.length) {
			var w = _g11[_g2];
			++_g2;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else {
						v = this.convertValue(v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		var oldIn = this.input;
		var oldPos = this.inPos;
		this.setInput(bytes,0);
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
	}
	,isNullable: function(t) {
		switch(t[1]) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(v,from,to) {
		if(v == null && this.isNullable(to)) {
			return null;
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		if(from[1] == 9) {
			if(to[1] == 9) {
				var obj1 = from[2];
				var obj2 = to[2];
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			}
		}
		throw new js__$Boot_HaxeError("Cannot convert " + Std.string(v) + " from " + Std.string(from) + " to " + Std.string(to));
	}
	,readValue: function(t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 1:
			var v1 = this.input.getDouble(this.inPos);
			this.inPos += 8;
			return v1;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v2;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 4:
			var v3 = this.input.b[this.inPos++];
			if(v3 == 128) {
				v3 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v3;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.sub(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 5:
			var c = Type.resolveClass(t[2]);
			return this.getRef(c,c.__clid);
		case 6:
			var name = t[2];
			var ser = Type.resolveClass("hxbit.enumSer." + name.split(".").join("_"));
			if(ser == null) {
				var e = Type.resolveEnum(name);
				if(e != null && Object.prototype.hasOwnProperty.call(haxe_rtti_Meta.getType(e),"skipSerialize")) {
					var v4 = this.input.b[this.inPos++];
					if(v4 == 128) {
						v4 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					return null;
				}
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name);
			}
			return ser.doUnserialize(this);
		case 7:
			var v5 = t[3];
			var k = t[2];
			switch(k[1]) {
			case 0:
				var v6 = this.input.b[this.inPos++];
				if(v6 == 128) {
					v6 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len2 = v6;
				var tmp;
				if(len2 == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len2 > 0) {
						var k1 = _gthis.readValue(k);
						var v7 = _gthis.readValue(v5);
						m.h[k1] = v7;
					}
					tmp = m;
				}
				return tmp;
			case 3:
				var v8 = this.input.b[this.inPos++];
				if(v8 == 128) {
					v8 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len3 = v8;
				var tmp1;
				if(len3 == 0) {
					tmp1 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len3 > 0) {
						var k2 = _gthis.readValue(k);
						var v9 = _gthis.readValue(v5);
						if(__map_reserved[k2] != null) {
							m1.setReserved(k2,v9);
						} else {
							m1.h[k2] = v9;
						}
					}
					tmp1 = m1;
				}
				return tmp1;
			default:
				var v10 = this.input.b[this.inPos++];
				if(v10 == 128) {
					v10 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len4 = v10;
				var tmp2;
				if(len4 == 0) {
					tmp2 = null;
				} else {
					var m2 = new haxe_ds_ObjectMap();
					while(--len4 > 0) m2.set(_gthis.readValue(k),_gthis.readValue(v5));
					tmp2 = m2;
				}
				return tmp2;
			}
			break;
		case 8:
			var t1 = t[2];
			var v11 = this.input.b[this.inPos++];
			if(v11 == 128) {
				v11 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len5 = v11;
			if(len5 == 0) {
				return null;
			} else {
				--len5;
				var a = [];
				var _g1 = 0;
				var _g = len5;
				while(_g1 < _g) a[_g1++] = _gthis.readValue(t1);
				return a;
			}
			break;
		case 9:
			var fields = t[2];
			var v12 = this.input.b[this.inPos++];
			if(v12 == 128) {
				v12 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var bits = v12;
			if(bits == 0) {
				return null;
			}
			var o = { };
			--bits;
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < fields.length) {
				var f = fields[_g11];
				++_g11;
				if(this.isNullable(f.type)) {
					_g2.push(f);
				}
			}
			var nullables = _g2;
			var _g12 = 0;
			while(_g12 < fields.length) {
				var f1 = fields[_g12];
				++_g12;
				var nidx = nullables.indexOf(f1);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o[f1.name] = this.readValue(f1.type);
			}
			return o;
		case 10:
			return this.readValue(t[2]);
		case 11:
			var t2 = t[2];
			var v13 = this.input.b[this.inPos++];
			if(v13 == 128) {
				v13 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len6 = v13;
			if(len6 == 0) {
				return null;
			} else {
				--len6;
				var a1 = new Array(len6);
				var _g13 = 0;
				var _g3 = len6;
				while(_g13 < _g3) a1[_g13++] = _gthis.readValue(t2);
				return a1;
			}
			break;
		case 12:
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t[2]);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 14:
			return this.getDynamic();
		case 15:
			var v14 = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v14;
		case 16:
			var v15 = this.input.b[this.inPos++];
			if(v15 == 128) {
				v15 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v15;
		case 17:
			return this.getStruct();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t[1]) {
		case 0:
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.b.push(v1);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v1);
			}
			break;
		case 1:
			this.out.addInt64(haxe_io_FPHelper.doubleToI64(v));
			break;
		case 2:
			this.out.b.push(v ? 1 : 0);
			break;
		case 3:
			var s = v;
			if(s == null) {
				this.out.b.push(0);
			} else {
				var v2 = s.length + 1;
				if(v2 >= 0 && v2 < 128) {
					this.out.b.push(v2);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v2);
				}
				var _this = this.out;
				var src = haxe_io_Bytes.ofString(s);
				var b2 = src.b;
				var _g1 = 0;
				var _g = src.length;
				while(_g1 < _g) _this.b.push(b2[_g1++]);
			}
			break;
		case 4:
			var b = v;
			if(b == null) {
				this.out.b.push(0);
			} else {
				var v3 = b.length + 1;
				if(v3 >= 0 && v3 < 128) {
					this.out.b.push(v3);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v3);
				}
				var _this1 = this.out;
				var b21 = b.b;
				var _g11 = 0;
				var _g2 = b.length;
				while(_g11 < _g2) _this1.b.push(b21[_g11++]);
			}
			break;
		case 5:
			this.addKnownRef(v);
			break;
		case 6:
			var name = t[2];
			var ser = "hxbit.enumSer." + name.split(".").join("_");
			if(ser == null) {
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name);
			}
			Type.resolveClass(ser).doSerialize(this,v);
			break;
		case 7:
			var t1 = t[3];
			var k = t[2];
			var a = v;
			if(a == null) {
				this.out.b.push(0);
			} else {
				var _e = a;
				var keys = Lambda.array({ iterator : function() {
					return _e.keys();
				}});
				var v4 = keys.length + 1;
				if(v4 >= 0 && v4 < 128) {
					this.out.b.push(v4);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v4);
				}
				var _g3 = 0;
				while(_g3 < keys.length) {
					var k1 = keys[_g3];
					++_g3;
					_gthis.writeValue(k1,k);
					_gthis.writeValue(a.get(k1),t1);
				}
			}
			break;
		case 8:
			var t2 = t[2];
			var a1 = v;
			if(a1 == null) {
				this.out.b.push(0);
			} else {
				var v5 = a1.length + 1;
				if(v5 >= 0 && v5 < 128) {
					this.out.b.push(v5);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v5);
				}
				var _g4 = 0;
				while(_g4 < a1.length) {
					var v6 = a1[_g4];
					++_g4;
					_gthis.writeValue(v6,t2);
				}
			}
			break;
		case 9:
			var fields = t[2];
			if(v == null) {
				this.out.b.push(0);
			} else {
				var fbits = 0;
				var _g5 = [];
				var _g12 = 0;
				while(_g12 < fields.length) {
					var f = fields[_g12];
					++_g12;
					if(this.isNullable(f.type)) {
						_g5.push(f);
					}
				}
				var _g21 = 0;
				var _g13 = _g5.length;
				while(_g21 < _g13) {
					var i = _g21++;
					if(Reflect.field(v,_g5[i].name) != null) {
						fbits |= 1 << i;
					}
				}
				var v7 = fbits + 1;
				if(v7 >= 0 && v7 < 128) {
					this.out.b.push(v7);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v7);
				}
				var _g14 = 0;
				while(_g14 < fields.length) {
					var f1 = fields[_g14];
					++_g14;
					var nidx = _g5.indexOf(f1);
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f1.name),f1.type);
				}
			}
			break;
		case 10:
			this.writeValue(v,t[2]);
			break;
		case 11:
			var t3 = t[2];
			var a2 = v;
			if(a2 == null) {
				this.out.b.push(0);
			} else {
				var v8 = a2.length + 1;
				if(v8 >= 0 && v8 < 128) {
					this.out.b.push(v8);
				} else {
					this.out.b.push(128);
					this.out.addInt32(v8);
				}
				var _g6 = 0;
				while(_g6 < a2.length) {
					var v9 = a2[_g6];
					++_g6;
					_gthis.writeValue(v9,t3);
				}
			}
			break;
		case 12:
			if(v == null) {
				this.out.b.push(0);
			} else {
				this.out.b.push(1);
				this.writeValue(v,t[2]);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.out.addInt64(v);
			break;
		case 16:
			var v10 = v;
			if(v10 >= 0 && v10 < 128) {
				this.out.b.push(v10);
			} else {
				this.out.b.push(128);
				this.out.addInt32(v10);
			}
			break;
		case 17:
			this.addStruct(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
};
var catalyst_Battle = function(type,opponents) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.round = 0;
	this.totalMaxHp = -1;
	this.perceivedHp = new haxe_ds_ObjectMap();
	this.debuffs = new haxe_ds_ObjectMap();
	this.won = false;
	this.finished = false;
	this.nextTurn = 0;
	this.state = 0;
	this.lastEvent = null;
	this.type = type;
	if(opponents == null) {
		opponents = catalyst__$BattleData_BattleData_$Impl_$.getOpponents(type);
	}
	this.opponents = opponents;
	var _g = [];
	var _g1 = 0;
	while(_g1 < opponents.length) {
		var cat = opponents[_g1];
		++_g1;
		_g.push(cat);
	}
	this.originalOpponents = _g;
	var _g11 = 0;
	while(_g11 < opponents.length) {
		var cat1 = opponents[_g11];
		++_g11;
		cat1.hp = cat1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"cha");
		this.setHp(cat1,cat1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"cha"));
	}
};
$hxClasses["catalyst.Battle"] = catalyst_Battle;
catalyst_Battle.__name__ = ["catalyst","Battle"];
catalyst_Battle.__interfaces__ = [hxbit_Serializable];
catalyst_Battle.chooseAction = function(cat,allies) {
	while(catalyst_Battle.weights.length > 0) catalyst_Battle.weights.pop();
	var totalWeight = 0;
	var _g = 0;
	var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
	while(_g < _g1.length) {
		var stat = _g1[_g];
		++_g;
		var weight = catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat) + (cat.level / 3 + 0.5 | 0);
		if(stat == "cha") {
			var injured = false;
			var _g2 = 0;
			while(_g2 < allies.length) {
				var ally = allies[_g2];
				++_g2;
				if(ally.hp > 0 && ally.hp < ally.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(ally.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(ally.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(ally.stats,"cha")) {
					injured = true;
					break;
				}
			}
			if(!injured) {
				weight = 0;
			}
		}
		catalyst_Battle.weights.push(weight);
		totalWeight += weight;
	}
	var choice = Std.random(totalWeight);
	var i = 0;
	var _g3 = 0;
	var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
	while(_g3 < _g11.length) {
		var stat1 = _g11[_g3];
		++_g3;
		choice -= catalyst_Battle.weights[i];
		if(choice < 0) {
			return stat1;
		}
		++i;
	}
	return catalyst__$CatStat_CatStat_$Impl_$.ordered[Std.random(catalyst__$CatStat_CatStat_$Impl_$.ordered.length)];
};
catalyst_Battle.prototype = {
	lastEvent: null
	,type: null
	,opponents: null
	,state: null
	,nextTurn: null
	,finished: null
	,won: null
	,active: null
	,turnOrder: null
	,debuffs: null
	,originalOpponents: null
	,perceivedHp: null
	,totalMaxHp: null
	,round: null
	,getDebuff: function(cat) {
		if(this.debuffs.h.__keys__[cat.__id__] != null) {
			return this.debuffs.h[cat.__id__];
		} else {
			return 0;
		}
	}
	,getHp: function(cat) {
		return this.perceivedHp.h[cat.__id__];
	}
	,setHp: function(cat,value) {
		cat.hp = value;
		this.perceivedHp.set(cat,value);
		return value;
	}
	,addCat: function(cat) {
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).cats.move(cat,"coliseum");
		this.setHp(cat,Math.round(cat.hp) | 0);
		var _this1 = catalyst_GameData.get_current();
		if(_this1.labs.get(_this1.currentRegion).cats.cats.get("coliseum").length >= catalyst__$BattleData_BattleData_$Impl_$.get_cats(this.type)) {
			this.totalMaxHp = 0;
			var _g = 0;
			var _this2 = catalyst_GameData.get_current();
			var _g1 = _this2.labs.get(_this2.currentRegion).cats.cats.get("coliseum");
			while(_g < _g1.length) {
				var cat1 = _g1[_g];
				++_g;
				this.totalMaxHp += cat1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat1.stats,"cha");
			}
			this.start();
		}
	}
	,removeCat: function(cat) {
		var _this = catalyst_GameData.get_current();
		HxOverrides.remove(_this.labs.get(_this.currentRegion).cats.cats.get("coliseum"),cat);
		var _this1 = catalyst_GameData.get_current();
		_this1.labs.get(_this1.currentRegion).cats.move(cat,"living_room");
	}
	,start: function() {
		this.state = 1;
		this.rollInitiative();
		this.active = this.turnOrder[0];
	}
	,finish: function(won) {
		this.finished = true;
		this.won = won;
		this.state = 2;
		var totalHp = 0;
		while(true) {
			var _this = catalyst_GameData.get_current();
			if(!(_this.labs.get(_this.currentRegion).cats.cats.get("coliseum").length > 0)) {
				break;
			}
			var _this1 = catalyst_GameData.get_current();
			var cat = _this1.labs.get(_this1.currentRegion).cats.cats.get("coliseum").shift();
			totalHp += cat.hp;
			this.removeCat(cat);
		}
		if(won) {
			var _this2 = catalyst_GameData.get_current();
			if(_this2.labs.get(_this2.currentRegion).battleLevel <= catalyst__$BattleData_BattleData_$Impl_$.ordered.length) {
				var _this3 = catalyst_GameData.get_current();
				var v = _this3.labs.get(_this3.currentRegion).battleLevel + 1;
				var _this4 = catalyst_GameData.get_current();
				_this4.labs.get(_this4.currentRegion).battleLevel = v;
			}
			var _this5 = catalyst_GameData.get_current();
			var v1 = _this5.labs.get(_this5.currentRegion).catnip;
			var this1 = this.type;
			var v2 = catalyst__$BattleData_BattleData_$Impl_$.get_reward(this1) == -1 ? 500 * Math.pow(1.15,catalyst__$BattleData_BattleData_$Impl_$.ordered.indexOf(this1) + 1 - 1) | 0 : catalyst__$BattleData_BattleData_$Impl_$.get_reward(this1);
			var _this6 = catalyst_GameData.get_current();
			_this6.labs.get(_this6.currentRegion).catnip = v1 + v2;
			var _this7 = catalyst_GameData.get_current();
			var _this8 = _this7.labs.get(_this7.currentRegion);
			var catnipCapacity = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this8.upgrades,"catnip_capacity",_this8.bonuses);
			var _this9 = catalyst_GameData.get_current();
			if(_this9.labs.get(_this9.currentRegion).catnip > catnipCapacity) {
				var _this10 = catalyst_GameData.get_current();
				_this10.labs.get(_this10.currentRegion).catnip = catnipCapacity;
			}
			var _this11 = catalyst_GameData.get_current();
			var value = _this11.labs.get(_this11.currentRegion).battleLevel;
			var _this12 = catalyst_GameData.get_current();
			_this12.labs.get(_this12.currentRegion).event("battle_level",value);
			if(this.totalMaxHp > -1) {
				var narrow = Math.round((this.totalMaxHp - totalHp) / this.totalMaxHp * 100) | 0;
				var _this13 = catalyst_GameData.get_current();
				_this13.labs.get(_this13.currentRegion).event("narrow_win",narrow);
			}
		} else {
			var _g = 0;
			var _g1 = this.opponents;
			while(_g < _g1.length) {
				var opponent = _g1[_g];
				++_g;
				opponent.hp = opponent.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(opponent.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(opponent.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(opponent.stats,"cha");
			}
		}
	}
	,rollInitiative: function() {
		var initiative = new haxe_ds_ObjectMap();
		this.turnOrder = [];
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var cat = _g1[_g];
			++_g;
			this.turnOrder.push(cat);
			var v = Math.random() * 5;
			initiative.set(cat,v);
		}
		var _g2 = 0;
		var _this = catalyst_GameData.get_current();
		var _g11 = _this.labs.get(_this.currentRegion).cats.cats.get("coliseum");
		while(_g2 < _g11.length) {
			var cat1 = _g11[_g2];
			++_g2;
			this.turnOrder.push(cat1);
			var roll1 = Math.random();
			var _this1 = catalyst_GameData.get_current();
			var _this2 = _this1.labs.get(_this1.currentRegion);
			var v1 = roll1 * catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"initiative",_this2.bonuses);
			initiative.set(cat1,v1);
		}
		this.turnOrder.sort(function(a,b) {
			if(initiative.h[a.__id__] > initiative.h[b.__id__]) {
				return -1;
			} else {
				return 1;
			}
		});
	}
	,prepareAction: function(cat,target,action) {
		this.lastEvent = { cat : cat, target : target, stat : action, pending : true};
	}
	,act: function() {
		var cat = this.lastEvent.cat;
		var target = this.lastEvent.target;
		var action = this.lastEvent.stat;
		var score = catalyst__$Stats_Stats_$Impl_$.get(cat.stats,action);
		var against = (target.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(target) : target.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(target.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(target) : target.assignedJob);
		var advantage = ((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) == null ? 0 : catalyst__$CatType_CatType_$Impl_$.advantage((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob),against);
		if(action == "str") {
			score -= this.debuffs.h.__keys__[cat.__id__] != null ? this.debuffs.h[cat.__id__] : 0;
		}
		var roll1 = Math.random();
		var roll = advantage > 0 ? Math.max(roll1,Math.random()) : advantage < 0 ? Math.min(roll1,Math.random()) : roll1;
		var success = false;
		var crit = false;
		if(roll > 1 - (0.05 + (((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) == "supercat" ? 0.05 : 0))) {
			crit = true;
			success = true;
		} else if(roll <= 0.05) {
			success = false;
		} else if(action == "cha") {
			success = true;
		} else {
			var resist = catalyst__$Stats_Stats_$Impl_$.get(target.stats,catalyst__$CatStat_CatStat_$Impl_$.get_def(action));
			if(catalyst__$CatStat_CatStat_$Impl_$.get_def(action) == "str") {
				resist -= this.debuffs.exists(target) ? this.debuffs.get(target) : 0;
			}
			success = roll * (8 + score) >= Math.random() * resist;
		}
		var damage = 0;
		var debuff = 0;
		if(success) {
			var roll11 = Math.random();
			damage = 2 + (advantage > 0 ? Math.max(roll11,Math.random()) : advantage < 0 ? Math.min(roll11,Math.random()) : roll11) * score + this.round | 0;
			if(crit) {
				var roll12 = Math.random();
				damage += 2 + (advantage > 0 ? Math.max(roll12,Math.random()) : advantage < 0 ? Math.min(roll12,Math.random()) : roll12) * score + this.round | 0;
			}
			switch(action) {
			case "cha":
				damage = damage / -2 | 0;
				if(crit) {
					damage -= 1 + Std.random(score);
				}
				debuff = -1 * Std.random(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha") | 0);
				break;
			case "int":
				debuff = Std.random(Math.max(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") / 2,2) | 0);
				if(crit) {
					debuff += 1 + Std.random(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int"));
				}
				break;
			case "str":
				damage += 1 + Std.random(score);
				if(crit) {
					damage += 1 + Std.random(score);
				}
				break;
			}
			if(damage > 0) {
				if(cat.wild) {
					var _this = catalyst_GameData.get_current();
					var _this1 = _this.labs.get(_this.currentRegion);
					damage = Math.round(damage * (100 - catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"cat_damage_reduction_base",_this1.bonuses)) / 100) | 0;
				} else {
					var _this2 = catalyst_GameData.get_current();
					var _this3 = _this2.labs.get(_this2.currentRegion);
					damage = Math.round(damage * catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"cat_damage_base",_this3.bonuses) / 100) | 0;
				}
			}
			if(debuff != 0) {
				if(this.debuffs.h.__keys__[target.__id__] == null) {
					this.debuffs.set(target,0);
				}
				var _g1 = this.debuffs;
				_g1.set(target,_g1.h[target.__id__] + debuff);
				var max = Math.min(catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") - 1,20) | 0;
				if(this.debuffs.h[target.__id__] > max) {
					debuff -= this.debuffs.h[target.__id__] - max;
					this.debuffs.set(target,max);
				} else if(this.debuffs.h[target.__id__] <= 0) {
					debuff -= this.debuffs.h[target.__id__];
					this.debuffs.remove(target);
				}
			}
		}
		var targetHp = this.getHp(target);
		if(target.wild && targetHp >= target.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"cha") && damage >= targetHp) {
			var _this4 = catalyst_GameData.get_current();
			_this4.labs.get(_this4.currentRegion).event("one_shot",1);
		}
		if(damage > targetHp) {
			damage = targetHp;
		}
		if(damage < -(target.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"cha") - targetHp)) {
			damage = -(target.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"cha") - targetHp);
		}
		this.setHp(target,targetHp - damage);
		if(this.getHp(target) > target.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"cha")) {
			this.setHp(target,target.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(target.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(target.stats,"cha"));
		}
		targetHp = this.getHp(target);
		if(this.getHp(target) <= 0) {
			var _this5;
			if(target.wild == true) {
				_this5 = this.opponents;
			} else {
				var _this6 = catalyst_GameData.get_current();
				_this5 = _this6.labs.get(_this6.currentRegion).cats.cats.get("coliseum");
			}
			HxOverrides.remove(_this5,target);
			if(!target.wild) {
				var _this7 = catalyst_GameData.get_current();
				_this7.labs.get(_this7.currentRegion).cats.move(target,"living_room");
			}
		}
		this.lastEvent.pending = false;
		this.lastEvent.success = success;
		this.lastEvent.crit = crit;
		this.lastEvent.damage = damage;
		this.lastEvent.debuff = debuff;
		this.lastEvent.finalHp = targetHp;
		this.lastEvent.finalDebuff = this.getDebuff(target);
		var otherTeam;
		if(this.active.wild == false) {
			otherTeam = this.opponents;
		} else {
			var _this8 = catalyst_GameData.get_current();
			otherTeam = _this8.labs.get(_this8.currentRegion).cats.cats.get("coliseum");
		}
		if(otherTeam.length == 0) {
			this.finish(!this.active.wild);
		}
		catalyst_GameData.get_current().save();
	}
	,poll: function() {
		if(this.finished) {
			this.lastEvent = null;
		} else if(this.lastEvent == null || !this.lastEvent.pending) {
			this.advance();
		} else {
			this.act();
		}
		return this.lastEvent;
	}
	,advance: function() {
		if(!this.finished) {
			this.active = this.turnOrder[(this.turnOrder.indexOf(this.active) + 1) % this.turnOrder.length];
			if(this.active == this.turnOrder[0]) {
				++this.round;
			}
			if(this.getHp(this.active) > 0) {
				this.aiTurn(this.active);
			}
			catalyst_GameData.get_current().save();
		}
	}
	,aiTurn: function(cat) {
		var friends;
		if(cat.wild == true) {
			friends = this.opponents;
		} else {
			var _this = catalyst_GameData.get_current();
			friends = _this.labs.get(_this.currentRegion).cats.cats.get("coliseum");
		}
		var enemies;
		if(cat.wild == false) {
			enemies = this.opponents;
		} else {
			var _this1 = catalyst_GameData.get_current();
			enemies = _this1.labs.get(_this1.currentRegion).cats.cats.get("coliseum");
		}
		var action = catalyst_Battle.chooseAction(cat,friends);
		var target;
		switch(action) {
		case "cha":
			var target1 = cat;
			var targetHealth = 1;
			var _g = 0;
			while(_g < friends.length) {
				var friend = friends[_g];
				++_g;
				var health = this.getHp(friend) / (friend.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(friend.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(friend.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(friend.stats,"cha"));
				if(health < targetHealth) {
					target1 = friend;
					targetHealth = health;
				}
			}
			target = target1;
			break;
		case "int":case "str":
			target = enemies[Std.random(enemies.length)];
			break;
		}
		this.prepareAction(cat,target,action);
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_Battle.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(1);
		var v = this.lastEvent;
		if(v == null) {
			__ctx.out.b.push(0);
		} else {
			var fbits = 0;
			if(v.cat != null) {
				fbits = 1;
			}
			if(v.crit != null) {
				fbits |= 2;
			}
			if(v.damage != null) {
				fbits |= 4;
			}
			if(v.debuff != null) {
				fbits |= 8;
			}
			if(v.finalDebuff != null) {
				fbits |= 16;
			}
			if(v.finalHp != null) {
				fbits |= 32;
			}
			if(v.stat != null) {
				fbits |= 64;
			}
			if(v.success != null) {
				fbits |= 128;
			}
			if(v.target != null) {
				fbits |= 256;
			}
			var v1 = fbits + 1;
			if(v1 >= 0 && v1 < 128) {
				__ctx.out.b.push(v1);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v1);
			}
			if((fbits & 1) != 0) {
				__ctx.addKnownRef(v.cat);
			}
			if((fbits & 2) != 0) {
				if(v.crit == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					__ctx.out.b.push(v.crit ? 1 : 0);
				}
			}
			if((fbits & 4) != 0) {
				if(v.damage == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					var v2 = v.damage;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.b.push(v2);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v2);
					}
				}
			}
			if((fbits & 8) != 0) {
				if(v.debuff == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					var v3 = v.debuff;
					if(v3 >= 0 && v3 < 128) {
						__ctx.out.b.push(v3);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v3);
					}
				}
			}
			if((fbits & 16) != 0) {
				if(v.finalDebuff == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					var v4 = v.finalDebuff;
					if(v4 >= 0 && v4 < 128) {
						__ctx.out.b.push(v4);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v4);
					}
				}
			}
			if((fbits & 32) != 0) {
				if(v.finalHp == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					var v5 = v.finalHp;
					if(v5 >= 0 && v5 < 128) {
						__ctx.out.b.push(v5);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v5);
					}
				}
			}
			__ctx.out.b.push(v.pending ? 1 : 0);
			if((fbits & 64) != 0) {
				var s = v.stat;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v6 = s.length + 1;
					if(v6 >= 0 && v6 < 128) {
						__ctx.out.b.push(v6);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v6);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(s);
					var b2 = src.b;
					var _g1 = 0;
					var _g = src.length;
					while(_g1 < _g) _this.b.push(b2[_g1++]);
				}
			}
			if((fbits & 128) != 0) {
				if(v.success == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					__ctx.out.b.push(v.success ? 1 : 0);
				}
			}
			if((fbits & 256) != 0) {
				__ctx.addKnownRef(v.target);
			}
		}
		var s1 = this.type;
		if(s1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v7 = s1.length + 1;
			if(v7 >= 0 && v7 < 128) {
				__ctx.out.b.push(v7);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v7);
			}
			var _this1 = __ctx.out;
			var src1 = haxe_io_Bytes.ofString(s1);
			var b21 = src1.b;
			var _g11 = 0;
			var _g2 = src1.length;
			while(_g11 < _g2) _this1.b.push(b21[_g11++]);
		}
		var a = this.opponents;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var v8 = a.length + 1;
			if(v8 >= 0 && v8 < 128) {
				__ctx.out.b.push(v8);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v8);
			}
			var _g3 = 0;
			while(_g3 < a.length) {
				var v9 = a[_g3];
				++_g3;
				__ctx.addKnownRef(v9);
			}
		}
		var v10 = this.state;
		if(v10 >= 0 && v10 < 128) {
			__ctx.out.b.push(v10);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v10);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.nextTurn));
		__ctx.out.b.push(this.finished ? 1 : 0);
		__ctx.out.b.push(this.won ? 1 : 0);
		__ctx.addKnownRef(this.active);
		var a1 = this.turnOrder;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v11 = a1.length + 1;
			if(v11 >= 0 && v11 < 128) {
				__ctx.out.b.push(v11);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v11);
			}
			var _g4 = 0;
			while(_g4 < a1.length) {
				var v12 = a1[_g4];
				++_g4;
				__ctx.addKnownRef(v12);
			}
		}
		var a2 = this.debuffs;
		if(a2 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a2;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v13 = keys.length + 1;
			if(v13 >= 0 && v13 < 128) {
				__ctx.out.b.push(v13);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v13);
			}
			var _g5 = 0;
			while(_g5 < keys.length) {
				var k = keys[_g5];
				++_g5;
				__ctx.addKnownRef(k);
				var v14 = a2.h[k.__id__];
				if(v14 >= 0 && v14 < 128) {
					__ctx.out.b.push(v14);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v14);
				}
			}
		}
		var a3 = this.originalOpponents;
		if(a3 == null) {
			__ctx.out.b.push(0);
		} else {
			var v15 = a3.length + 1;
			if(v15 >= 0 && v15 < 128) {
				__ctx.out.b.push(v15);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v15);
			}
			var _g6 = 0;
			while(_g6 < a3.length) {
				var v16 = a3[_g6];
				++_g6;
				__ctx.addKnownRef(v16);
			}
		}
		var a4 = this.perceivedHp;
		if(a4 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e1 = a4;
			var keys1 = Lambda.array({ iterator : function() {
				return _e1.keys();
			}});
			var v17 = keys1.length + 1;
			if(v17 >= 0 && v17 < 128) {
				__ctx.out.b.push(v17);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v17);
			}
			var _g7 = 0;
			while(_g7 < keys1.length) {
				var k1 = keys1[_g7];
				++_g7;
				__ctx.addKnownRef(k1);
				var v18 = a4.h[k1.__id__];
				if(v18 >= 0 && v18 < 128) {
					__ctx.out.b.push(v18);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v18);
				}
			}
		}
		var v19 = this.totalMaxHp;
		if(v19 >= 0 && v19 < 128) {
			__ctx.out.b.push(v19);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v19);
		}
		var v20 = this.round;
		if(v20 >= 0 && v20 < 128) {
			__ctx.out.b.push(v20);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v20);
		}
	}
	,unserializeInit: function() {
		this.lastEvent = null;
		this.state = 0;
		this.nextTurn = 0;
		this.finished = false;
		this.won = false;
		this.debuffs = new haxe_ds_ObjectMap();
		this.perceivedHp = new haxe_ds_ObjectMap();
		this.totalMaxHp = -1;
		this.round = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 1) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 1);
		}
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var fbits = v1;
		if(fbits == 0) {
			this.lastEvent = null;
		} else {
			--fbits;
			var target = null;
			var success = null;
			var stat = null;
			var pending;
			var finalHp = null;
			var finalDebuff = null;
			var debuff = null;
			var damage = null;
			var crit = null;
			var cat = null;
			if((fbits & 1) != 0) {
				cat = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
			}
			if((fbits & 2) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					crit = null;
				} else {
					crit = __ctx.input.b[__ctx.inPos++] != 0;
				}
			}
			if((fbits & 4) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					damage = null;
				} else {
					var v2 = __ctx.input.b[__ctx.inPos++];
					if(v2 == 128) {
						v2 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					damage = v2;
				}
			}
			if((fbits & 8) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					debuff = null;
				} else {
					var v3 = __ctx.input.b[__ctx.inPos++];
					if(v3 == 128) {
						v3 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					debuff = v3;
				}
			}
			if((fbits & 16) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					finalDebuff = null;
				} else {
					var v4 = __ctx.input.b[__ctx.inPos++];
					if(v4 == 128) {
						v4 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					finalDebuff = v4;
				}
			}
			if((fbits & 32) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					finalHp = null;
				} else {
					var v5 = __ctx.input.b[__ctx.inPos++];
					if(v5 == 128) {
						v5 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					finalHp = v5;
				}
			}
			pending = __ctx.input.b[__ctx.inPos++] != 0;
			if((fbits & 64) != 0) {
				var v11;
				var v6 = __ctx.input.b[__ctx.inPos++];
				if(v6 == 128) {
					v6 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v6;
				if(len == 0) {
					v11 = null;
				} else {
					--len;
					var s = __ctx.input.getString(__ctx.inPos,len);
					__ctx.inPos += len;
					v11 = s;
				}
				stat = v11;
			}
			if((fbits & 128) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					success = null;
				} else {
					success = __ctx.input.b[__ctx.inPos++] != 0;
				}
			}
			if((fbits & 256) != 0) {
				target = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
			}
			this.lastEvent = { cat : cat, crit : crit, damage : damage, debuff : debuff, finalDebuff : finalDebuff, finalHp : finalHp, pending : pending, stat : stat, success : success, target : target};
		}
		var v0;
		var v7 = __ctx.input.b[__ctx.inPos++];
		if(v7 == 128) {
			v7 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len1 = v7;
		if(len1 == 0) {
			v0 = null;
		} else {
			--len1;
			var s1 = __ctx.input.getString(__ctx.inPos,len1);
			__ctx.inPos += len1;
			v0 = s1;
		}
		this.type = v0;
		var e0;
		var v8 = __ctx.input.b[__ctx.inPos++];
		if(v8 == 128) {
			v8 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v8;
		var tmp;
		if(len2 == 0) {
			tmp = null;
		} else {
			--len2;
			var a = [];
			var _g1 = 0;
			var _g = len2;
			while(_g1 < _g) {
				e0 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				a[_g1++] = e0;
			}
			tmp = a;
		}
		this.opponents = tmp;
		var v01;
		var v9 = __ctx.input.b[__ctx.inPos++];
		if(v9 == 128) {
			v9 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		v01 = v9;
		this.state = v01;
		var v10 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.nextTurn = v10;
		this.finished = __ctx.input.b[__ctx.inPos++] != 0;
		this.won = __ctx.input.b[__ctx.inPos++] != 0;
		this.active = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
		var e01;
		var v12 = __ctx.input.b[__ctx.inPos++];
		if(v12 == 128) {
			v12 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len3 = v12;
		var tmp1;
		if(len3 == 0) {
			tmp1 = null;
		} else {
			--len3;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len3;
			while(_g11 < _g2) {
				e01 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				a1[_g11++] = e01;
			}
			tmp1 = a1;
		}
		this.turnOrder = tmp1;
		var k0;
		var v02;
		var v13 = __ctx.input.b[__ctx.inPos++];
		if(v13 == 128) {
			v13 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len4 = v13;
		var tmp2;
		if(len4 == 0) {
			tmp2 = null;
		} else {
			var m = new haxe_ds_ObjectMap();
			while(--len4 > 0) {
				k0 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				var v14 = __ctx.input.b[__ctx.inPos++];
				if(v14 == 128) {
					v14 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v02 = v14;
				m.set(k0,v02);
			}
			tmp2 = m;
		}
		this.debuffs = tmp2;
		var e02;
		var v15 = __ctx.input.b[__ctx.inPos++];
		if(v15 == 128) {
			v15 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len5 = v15;
		var tmp3;
		if(len5 == 0) {
			tmp3 = null;
		} else {
			--len5;
			var a2 = [];
			var _g12 = 0;
			var _g3 = len5;
			while(_g12 < _g3) {
				e02 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				a2[_g12++] = e02;
			}
			tmp3 = a2;
		}
		this.originalOpponents = tmp3;
		var k01;
		var v03;
		var v16 = __ctx.input.b[__ctx.inPos++];
		if(v16 == 128) {
			v16 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len6 = v16;
		var tmp4;
		if(len6 == 0) {
			tmp4 = null;
		} else {
			var m1 = new haxe_ds_ObjectMap();
			while(--len6 > 0) {
				k01 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				var v17 = __ctx.input.b[__ctx.inPos++];
				if(v17 == 128) {
					v17 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v03 = v17;
				m1.set(k01,v03);
			}
			tmp4 = m1;
		}
		this.perceivedHp = tmp4;
		var v18 = __ctx.input.b[__ctx.inPos++];
		if(v18 == 128) {
			v18 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.totalMaxHp = v18;
		var v19 = __ctx.input.b[__ctx.inPos++];
		if(v19 == 128) {
			v19 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.round = v19;
	}
	,__class__: catalyst_Battle
};
var catalyst__$BattleData_BattleData_$Impl_$ = {};
$hxClasses["catalyst._BattleData.BattleData_Impl_"] = catalyst__$BattleData_BattleData_$Impl_$;
catalyst__$BattleData_BattleData_$Impl_$.__name__ = ["catalyst","_BattleData","BattleData_Impl_"];
catalyst__$BattleData_BattleData_$Impl_$.__properties__ = {get_minionLevel:"get_minionLevel",get_level:"get_level",get_minPrestige:"get_minPrestige",get_minionStars:"get_minionStars",get_reward:"get_reward",get_stars:"get_stars",get_enemies:"get_enemies",get_cats:"get_cats",get_rewardCatnip:"get_rewardCatnip"};
catalyst__$BattleData_BattleData_$Impl_$.next = function() {
	var _this = catalyst_GameData.get_current();
	var lv = Math.min(_this.labs.get(_this.currentRegion).battleLevel,catalyst__$BattleData_BattleData_$Impl_$.ordered.length - 1) | 0;
	var tmp = catalyst__$BattleData_BattleData_$Impl_$.get_minPrestige(catalyst__$BattleData_BattleData_$Impl_$.ordered[lv]);
	var _this1 = catalyst_GameData.get_current();
	if(tmp > _this1.labs.get(_this1.currentRegion).prestige) {
		return null;
	}
	return catalyst__$BattleData_BattleData_$Impl_$.ordered[lv];
};
catalyst__$BattleData_BattleData_$Impl_$.getOpponents = function(this1) {
	var opponents = [];
	var _this = catalyst_GameData.get_current();
	var prestige = _this.labs.get(_this.currentRegion).prestige;
	var _g1 = 0;
	var _g = catalyst__$BattleData_BattleData_$Impl_$.get_enemies(this1);
	while(_g1 < _g) {
		var isMinion = _g1++ != (catalyst__$BattleData_BattleData_$Impl_$.get_enemies(this1) / 2 | 0);
		var lv = isMinion && catalyst__$BattleData_BattleData_$Impl_$.get_minionLevel(this1) > -1 ? catalyst__$BattleData_BattleData_$Impl_$.get_minionLevel(this1) : catalyst__$BattleData_BattleData_$Impl_$.get_level(this1);
		var stars = isMinion && catalyst__$BattleData_BattleData_$Impl_$.get_minionStars(this1) > -1 ? catalyst__$BattleData_BattleData_$Impl_$.get_minionStars(this1) : catalyst__$BattleData_BattleData_$Impl_$.get_stars(this1);
		var cat = catalyst_Cat.getRandom(prestige + lv,stars,prestige + Math.round(stars / 10) | 0);
		cat.assignedJob = cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob;
		opponents.push(cat);
	}
	return opponents;
};
catalyst__$BattleData_BattleData_$Impl_$.get_cats = function(this1) {
	switch(this1) {
	case "battle14":case "battle20":case "battle25":case "battle29":case "battle5":
		return 2;
	case "battle31":
		return 3;
	default:
		return 1;
	}
};
catalyst__$BattleData_BattleData_$Impl_$.get_enemies = function(this1) {
	switch(this1) {
	case "battle13":case "battle17":case "battle19":case "battle24":case "battle28":case "battle6":case "battle9":
		return 2;
	case "battle14":case "battle15":case "battle20":case "battle25":case "battle29":case "battle30":case "battle31":case "battle5":
		return 3;
	default:
		return 1;
	}
};
catalyst__$BattleData_BattleData_$Impl_$.get_stars = function(this1) {
	switch(this1) {
	case "battle1":
		return 1;
	case "battle11":
		return 30;
	case "battle12":case "battle17":
		return 35;
	case "battle18":
		return 55;
	case "battle19":
		return 40;
	case "battle2":
		return 2;
	case "battle16":case "battle20":
		return 50;
	case "battle3":
		return 5;
	case "battle4":case "battle5":case "battle6":
		return 10;
	case "battle21":case "battle22":case "battle23":case "battle24":case "battle25":case "battle26":case "battle27":case "battle28":case "battle29":case "battle30":case "battle31":case "battle32":case "battle33":case "battle34":case "battle35":case "battle36":case "battle37":case "battle38":case "battle39":case "battle40":case "battle41":case "battle42":case "battle43":case "battle44":case "battle45":
		return 100;
	case "battle7":
		return 15;
	case "battle8":
		return 20;
	case "battle10":case "battle13":case "battle14":case "battle15":case "battle9":
		return 25;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$BattleData_BattleData_$Impl_$.get_reward = function(this1) {
	return -1;
};
catalyst__$BattleData_BattleData_$Impl_$.get_minionStars = function(this1) {
	switch(this1) {
	case "battle14":
		return 20;
	case "battle20":
		return 40;
	case "battle25":
		return 50;
	case "battle5":
		return 5;
	default:
		return -1;
	}
};
catalyst__$BattleData_BattleData_$Impl_$.get_minPrestige = function(this1) {
	return 0;
};
catalyst__$BattleData_BattleData_$Impl_$.get_level = function(this1) {
	switch(this1) {
	case "battle1":
		return 5;
	case "battle10":
		return 25;
	case "battle12":
		return 35;
	case "battle11":case "battle13":case "battle14":case "battle15":
		return 30;
	case "battle17":
		return 40;
	case "battle18":case "battle21":
		return 60;
	case "battle2":
		return 10;
	case "battle16":case "battle19":case "battle20":
		return 50;
	case "battle22":
		return 70;
	case "battle24":
		return 75;
	case "battle23":case "battle25":
		return 80;
	case "battle26":
		return 90;
	case "battle27":case "battle28":case "battle29":case "battle30":
		return 100;
	case "battle3":
		return 12;
	case "battle31":case "battle32":
		return 150;
	case "battle33":
		return 160;
	case "battle34":
		return 170;
	case "battle35":
		return 180;
	case "battle36":
		return 190;
	case "battle37":
		return 200;
	case "battle38":
		return 210;
	case "battle39":
		return 220;
	case "battle4":case "battle5":case "battle6":
		return 15;
	case "battle40":
		return 230;
	case "battle41":
		return 240;
	case "battle42":case "battle43":case "battle44":case "battle45":
		return 250;
	case "battle7":case "battle8":case "battle9":
		return 20;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$BattleData_BattleData_$Impl_$.get_minionLevel = function(this1) {
	switch(this1) {
	case "battle14":
		return 20;
	case "battle20":
		return 40;
	case "battle25":
		return 60;
	case "battle5":
		return 5;
	default:
		return -1;
	}
};
var catalyst_BonusCollections = function(cats,trophies,labs) {
	this.cats = cats;
	this.trophies = trophies;
};
$hxClasses["catalyst.BonusCollections"] = catalyst_BonusCollections;
catalyst_BonusCollections.__name__ = ["catalyst","BonusCollections"];
catalyst_BonusCollections.prototype = {
	cats: null
	,trophies: null
	,__class__: catalyst_BonusCollections
};
var catalyst__$Cat_CatId_$Impl_$ = {};
$hxClasses["catalyst._Cat.CatId_Impl_"] = catalyst__$Cat_CatId_$Impl_$;
catalyst__$Cat_CatId_$Impl_$.__name__ = ["catalyst","_Cat","CatId_Impl_"];
catalyst__$Cat_CatId_$Impl_$._new = function() {
	return StringTools.hex(Std.random(65536),4);
};
var catalyst_Cat = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.leveledUp = false;
	this.spVersion = 0;
	this._name = null;
	this.petting = false;
	this.variant = null;
	this.room = "backyard";
	this.assignedJob = null;
	this.ownMutations = 0;
	this.mutations = 0;
	this.bodyInjury = 0;
	this.headInjury = 0;
	this.hp = 0;
	this.inbreedPenalty = 0;
	this.generation = 1;
	this.drankPotion = false;
	this.live = true;
	this.wild = true;
	this.parts = new haxe_ds_StringMap();
	this.size = 1;
	this.xp = 0;
	this.stars = 0;
	this.level = 1;
	this._maxLevel = 10;
	this.parent2 = null;
	this.parent1 = null;
	this.id = catalyst__$Cat_CatId_$Impl_$._new();
	this.sex = catalyst__$Sex_Sex_$Impl_$.random();
};
$hxClasses["catalyst.Cat"] = catalyst_Cat;
catalyst_Cat.__name__ = ["catalyst","Cat"];
catalyst_Cat.__interfaces__ = [hxbit_Serializable];
catalyst_Cat.ancestral = function(sex,maxLevel) {
	if(maxLevel == null) {
		maxLevel = -1;
	}
	var cat = new catalyst_Cat();
	var _g1 = 0;
	var _g = catalyst_Cat._partition.length;
	while(_g1 < _g) catalyst_Cat._partition[_g1++] = 4 + (10 * Math.random() | 0);
	while(catalyst_Cat._partition[0] + catalyst_Cat._partition[1] + catalyst_Cat._partition[2] > 10) {
		var i = Std.random(3);
		if(catalyst_Cat._partition[i] > 1) {
			catalyst_Cat._partition[i] -= 1;
		}
	}
	var v = catalyst_Cat._partition[0];
	var _this = catalyst_Cat._stats;
	if(__map_reserved["str"] != null) {
		_this.setReserved("str",v);
	} else {
		_this.h["str"] = v;
	}
	var v1 = catalyst_Cat._partition[1];
	var _this1 = catalyst_Cat._stats;
	if(__map_reserved["int"] != null) {
		_this1.setReserved("int",v1);
	} else {
		_this1.h["int"] = v1;
	}
	var v2 = catalyst_Cat._partition[2];
	var _this2 = catalyst_Cat._stats;
	if(__map_reserved["cha"] != null) {
		_this2.setReserved("cha",v2);
	} else {
		_this2.h["cha"] = v2;
	}
	cat.stats = catalyst__$Stats_Stats_$Impl_$._new(catalyst_Cat._stats);
	cat.sex = sex;
	cat.hp = cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha");
	if(maxLevel > -1) {
		cat._maxLevel = maxLevel;
	}
	catalyst__$CatPartType_CatPartType_$Impl_$.setRandomAncestral(cat);
	return cat;
};
catalyst_Cat.getRandom = function(lv,stars,mutations) {
	var parent1 = catalyst_Cat.ancestral(false,lv);
	var parent2 = catalyst_Cat.ancestral(false,lv);
	parent1.stars = stars;
	parent1.mutations = mutations;
	if(catalyst_XP.xpTotals == null) {
		catalyst_XP.xpTotals = new Array(500);
		var _g = 0;
		while(_g < 500) {
			var i = _g++;
			if(i == 0) {
				catalyst_XP.xpTotals[i] = 60;
			} else {
				var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
				if(i > 50) {
					newTotal *= Math.pow(1.09,i - 50);
				}
				catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
			}
		}
	}
	parent1.xp = lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1];
	var parent11 = parent1.level;
	var parent12 = parent1._maxLevel;
	var x;
	if(parent1.wild) {
		x = 0;
	} else {
		var _this = catalyst_GameData.get_current();
		x = _this.labs.get(_this.currentRegion).tech / 100;
	}
	if(parent11 < (parent12 * (1 + x) | 0)) {
		var _this1 = catalyst_GameData.get_current();
		var growth = parent1.maxGrowth(0,_this1.labs.get(_this1.currentRegion).gourmetTime > 0);
		growth = growth * 0 + growth * 0.01;
		parent1.xp += growth;
		var currentHealth = parent1.hp / (parent1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"cha"));
		while(true) {
			var tmp;
			var parent13 = parent1.xp;
			var lv1 = parent1.level;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g1 = 0;
				while(_g1 < 500) {
					var i1 = _g1++;
					if(i1 == 0) {
						catalyst_XP.xpTotals[i1] = 60;
					} else {
						var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
						if(i1 > 50) {
							newTotal1 *= Math.pow(1.09,i1 - 50);
						}
						catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
					}
				}
			}
			if(parent13 >= (lv1 < 1 ? 0 : catalyst_XP.xpTotals[lv1 - 1])) {
				var parent14 = parent1.level;
				var parent15 = parent1._maxLevel;
				var x1;
				if(parent1.wild) {
					x1 = 0;
				} else {
					var _this2 = catalyst_GameData.get_current();
					x1 = _this2.labs.get(_this2.currentRegion).tech / 100;
				}
				tmp = parent14 < (parent15 * (1 + x1) | 0);
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++parent1.level;
			parent1.leveledUp = true;
			if(parent1.growthCycle == null) {
				var strLim = 2 + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"str");
				var intLim = strLim + 2 + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"int");
				var chaLim = intLim + 2 + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"cha");
				parent1.growthCycle = [];
				var _g2 = 0;
				while(_g2 < 10) {
					_g2++;
					var r = Std.random(chaLim);
					if(r < strLim) {
						parent1.growthCycle.push("str");
					} else if(r < intLim) {
						parent1.growthCycle.push("int");
					} else {
						parent1.growthCycle.push("cha");
					}
				}
			}
			var growth1 = 1;
			while(growth1 < 3 && Math.random() < parent1.mutations * 0.01) ++growth1;
			var _g11 = 0;
			var _g3 = growth1;
			while(_g11 < _g3) {
				_g11++;
				var growthStat = parent1.growthCycle[parent1.level % parent1.growthCycle.length];
				var _g21 = growthStat;
				var _g31 = parent1.stats;
				catalyst__$Stats_Stats_$Impl_$.set(_g31,_g21,catalyst__$Stats_Stats_$Impl_$.get(_g31,_g21) + 1);
				var tmp1 = catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,growthStat);
				var parent16 = parent1._maxLevel;
				var x2;
				if(parent1.wild) {
					x2 = 0;
				} else {
					var _this3 = catalyst_GameData.get_current();
					x2 = _this3.labs.get(_this3.currentRegion).tech / 100;
				}
				if(tmp1 > (Math.min((parent16 * (1 + x2) | 0) * 5,999) | 0)) {
					var parent17 = parent1.stats;
					var parent18 = parent1._maxLevel;
					var x3;
					if(parent1.wild) {
						x3 = 0;
					} else {
						var _this4 = catalyst_GameData.get_current();
						x3 = _this4.labs.get(_this4.currentRegion).tech / 100;
					}
					catalyst__$Stats_Stats_$Impl_$.set(parent17,growthStat,Math.min((parent18 * (1 + x3) | 0) * 5,999) | 0);
				}
			}
			if(!parent1.wild && parent1.level >= 10) {
				var value = parent1.level;
				var _this5 = catalyst_GameData.get_current();
				_this5.labs.get(_this5.currentRegion).event("cat_level",value);
				if(((parent1.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(parent1) : parent1.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(parent1.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(parent1) : parent1.assignedJob)) == "supercat") {
					var value1 = parent1.level;
					var _this6 = catalyst_GameData.get_current();
					_this6.labs.get(_this6.currentRegion).event("supercat",value1);
				}
				if(parent1.level > 10) {
					var amt = parent1.level - 10;
					var _this7 = catalyst_GameData.get_current();
					_this7.labs.get(_this7.currentRegion).addPiety(amt);
				}
				catalyst_GameData.get_current().save();
			}
		}
		var parent19 = parent1.level;
		var parent110 = parent1._maxLevel;
		var x4;
		if(parent1.wild) {
			x4 = 0;
		} else {
			var _this8 = catalyst_GameData.get_current();
			x4 = _this8.labs.get(_this8.currentRegion).tech / 100;
		}
		if(parent19 >= (parent110 * (1 + x4) | 0)) {
			var parent111 = parent1._maxLevel;
			var x5;
			if(parent1.wild) {
				x5 = 0;
			} else {
				var _this9 = catalyst_GameData.get_current();
				x5 = _this9.labs.get(_this9.currentRegion).tech / 100;
			}
			parent1.level = parent111 * (1 + x5) | 0;
			var parent112 = parent1._maxLevel;
			var x6;
			if(parent1.wild) {
				x6 = 0;
			} else {
				var _this10 = catalyst_GameData.get_current();
				x6 = _this10.labs.get(_this10.currentRegion).tech / 100;
			}
			var lv2 = (parent112 * (1 + x6) | 0) - 1;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g4 = 0;
				while(_g4 < 500) {
					var i2 = _g4++;
					if(i2 == 0) {
						catalyst_XP.xpTotals[i2] = 60;
					} else {
						var newTotal2 = 60 * Math.pow(1.08,Math.min(i2,50));
						if(i2 > 50) {
							newTotal2 *= Math.pow(1.09,i2 - 50);
						}
						catalyst_XP.xpTotals[i2] = Math.round((catalyst_XP.xpTotals[i2 - 1] + newTotal2) / 1) | 0;
					}
				}
			}
			parent1.xp = lv2 < 1 ? 0 : catalyst_XP.xpTotals[lv2 - 1];
		}
		parent1.hp = (parent1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,"cha")) * currentHealth;
	}
	parent2.stars = stars;
	parent2.mutations = mutations;
	if(catalyst_XP.xpTotals == null) {
		catalyst_XP.xpTotals = new Array(500);
		var _g5 = 0;
		while(_g5 < 500) {
			var i3 = _g5++;
			if(i3 == 0) {
				catalyst_XP.xpTotals[i3] = 60;
			} else {
				var newTotal3 = 60 * Math.pow(1.08,Math.min(i3,50));
				if(i3 > 50) {
					newTotal3 *= Math.pow(1.09,i3 - 50);
				}
				catalyst_XP.xpTotals[i3] = Math.round((catalyst_XP.xpTotals[i3 - 1] + newTotal3) / 1) | 0;
			}
		}
	}
	parent2.xp = lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1];
	var parent21 = parent2.level;
	var parent22 = parent2._maxLevel;
	var x7;
	if(parent2.wild) {
		x7 = 0;
	} else {
		var _this11 = catalyst_GameData.get_current();
		x7 = _this11.labs.get(_this11.currentRegion).tech / 100;
	}
	if(parent21 < (parent22 * (1 + x7) | 0)) {
		var _this12 = catalyst_GameData.get_current();
		var growth2 = parent2.maxGrowth(0,_this12.labs.get(_this12.currentRegion).gourmetTime > 0);
		growth2 = growth2 * 0 + growth2 * 0.01;
		parent2.xp += growth2;
		var currentHealth1 = parent2.hp / (parent2.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"cha"));
		while(true) {
			var tmp2;
			var parent23 = parent2.xp;
			var lv3 = parent2.level;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g6 = 0;
				while(_g6 < 500) {
					var i4 = _g6++;
					if(i4 == 0) {
						catalyst_XP.xpTotals[i4] = 60;
					} else {
						var newTotal4 = 60 * Math.pow(1.08,Math.min(i4,50));
						if(i4 > 50) {
							newTotal4 *= Math.pow(1.09,i4 - 50);
						}
						catalyst_XP.xpTotals[i4] = Math.round((catalyst_XP.xpTotals[i4 - 1] + newTotal4) / 1) | 0;
					}
				}
			}
			if(parent23 >= (lv3 < 1 ? 0 : catalyst_XP.xpTotals[lv3 - 1])) {
				var parent24 = parent2.level;
				var parent25 = parent2._maxLevel;
				var x8;
				if(parent2.wild) {
					x8 = 0;
				} else {
					var _this13 = catalyst_GameData.get_current();
					x8 = _this13.labs.get(_this13.currentRegion).tech / 100;
				}
				tmp2 = parent24 < (parent25 * (1 + x8) | 0);
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				break;
			}
			++parent2.level;
			parent2.leveledUp = true;
			if(parent2.growthCycle == null) {
				var strLim1 = 2 + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"str");
				var intLim1 = strLim1 + 2 + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"int");
				var chaLim1 = intLim1 + 2 + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"cha");
				parent2.growthCycle = [];
				var _g7 = 0;
				while(_g7 < 10) {
					_g7++;
					var r1 = Std.random(chaLim1);
					if(r1 < strLim1) {
						parent2.growthCycle.push("str");
					} else if(r1 < intLim1) {
						parent2.growthCycle.push("int");
					} else {
						parent2.growthCycle.push("cha");
					}
				}
			}
			var growth3 = 1;
			while(growth3 < 3 && Math.random() < parent2.mutations * 0.01) ++growth3;
			var _g12 = 0;
			var _g8 = growth3;
			while(_g12 < _g8) {
				_g12++;
				var growthStat1 = parent2.growthCycle[parent2.level % parent2.growthCycle.length];
				var _g22 = growthStat1;
				var _g32 = parent2.stats;
				catalyst__$Stats_Stats_$Impl_$.set(_g32,_g22,catalyst__$Stats_Stats_$Impl_$.get(_g32,_g22) + 1);
				var tmp3 = catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,growthStat1);
				var parent26 = parent2._maxLevel;
				var x9;
				if(parent2.wild) {
					x9 = 0;
				} else {
					var _this14 = catalyst_GameData.get_current();
					x9 = _this14.labs.get(_this14.currentRegion).tech / 100;
				}
				if(tmp3 > (Math.min((parent26 * (1 + x9) | 0) * 5,999) | 0)) {
					var parent27 = parent2.stats;
					var parent28 = parent2._maxLevel;
					var x10;
					if(parent2.wild) {
						x10 = 0;
					} else {
						var _this15 = catalyst_GameData.get_current();
						x10 = _this15.labs.get(_this15.currentRegion).tech / 100;
					}
					catalyst__$Stats_Stats_$Impl_$.set(parent27,growthStat1,Math.min((parent28 * (1 + x10) | 0) * 5,999) | 0);
				}
			}
			if(!parent2.wild && parent2.level >= 10) {
				var value2 = parent2.level;
				var _this16 = catalyst_GameData.get_current();
				_this16.labs.get(_this16.currentRegion).event("cat_level",value2);
				if(((parent2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(parent2) : parent2.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(parent2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(parent2) : parent2.assignedJob)) == "supercat") {
					var value3 = parent2.level;
					var _this17 = catalyst_GameData.get_current();
					_this17.labs.get(_this17.currentRegion).event("supercat",value3);
				}
				if(parent2.level > 10) {
					var amt1 = parent2.level - 10;
					var _this18 = catalyst_GameData.get_current();
					_this18.labs.get(_this18.currentRegion).addPiety(amt1);
				}
				catalyst_GameData.get_current().save();
			}
		}
		var parent29 = parent2.level;
		var parent210 = parent2._maxLevel;
		var x11;
		if(parent2.wild) {
			x11 = 0;
		} else {
			var _this19 = catalyst_GameData.get_current();
			x11 = _this19.labs.get(_this19.currentRegion).tech / 100;
		}
		if(parent29 >= (parent210 * (1 + x11) | 0)) {
			var parent211 = parent2._maxLevel;
			var x12;
			if(parent2.wild) {
				x12 = 0;
			} else {
				var _this20 = catalyst_GameData.get_current();
				x12 = _this20.labs.get(_this20.currentRegion).tech / 100;
			}
			parent2.level = parent211 * (1 + x12) | 0;
			var parent212 = parent2._maxLevel;
			var x13;
			if(parent2.wild) {
				x13 = 0;
			} else {
				var _this21 = catalyst_GameData.get_current();
				x13 = _this21.labs.get(_this21.currentRegion).tech / 100;
			}
			var lv4 = (parent212 * (1 + x13) | 0) - 1;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g9 = 0;
				while(_g9 < 500) {
					var i5 = _g9++;
					if(i5 == 0) {
						catalyst_XP.xpTotals[i5] = 60;
					} else {
						var newTotal5 = 60 * Math.pow(1.08,Math.min(i5,50));
						if(i5 > 50) {
							newTotal5 *= Math.pow(1.09,i5 - 50);
						}
						catalyst_XP.xpTotals[i5] = Math.round((catalyst_XP.xpTotals[i5 - 1] + newTotal5) / 1) | 0;
					}
				}
			}
			parent2.xp = lv4 < 1 ? 0 : catalyst_XP.xpTotals[lv4 - 1];
		}
		parent2.hp = (parent2.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,"cha")) * currentHealth1;
	}
	var _g10 = [];
	var _g13 = 0;
	while(_g13 < 4) {
		_g13++;
		_g10.push(catalyst_Cat.breed(parent1,parent2));
	}
	var children = _g10;
	var statMax = 0;
	var child = children[0];
	var _g14 = 0;
	while(_g14 < children.length) {
		var potential = children[_g14];
		++_g14;
		var total = 0;
		var _g23 = 0;
		var _g33 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g23 < _g33.length) {
			var stat = _g33[_g23];
			++_g23;
			total += catalyst__$Stats_Stats_$Impl_$.get(potential.stats,stat);
		}
		if(total > statMax) {
			child = potential;
			statMax = total;
		}
	}
	child._maxLevel = lv;
	child.hp = child.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(child.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"cha");
	child.stars = stars;
	child.mutations = mutations;
	if(catalyst_XP.xpTotals == null) {
		catalyst_XP.xpTotals = new Array(500);
		var _g15 = 0;
		while(_g15 < 500) {
			var i6 = _g15++;
			if(i6 == 0) {
				catalyst_XP.xpTotals[i6] = 60;
			} else {
				var newTotal6 = 60 * Math.pow(1.08,Math.min(i6,50));
				if(i6 > 50) {
					newTotal6 *= Math.pow(1.09,i6 - 50);
				}
				catalyst_XP.xpTotals[i6] = Math.round((catalyst_XP.xpTotals[i6 - 1] + newTotal6) / 1) | 0;
			}
		}
	}
	child.xp = lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1];
	var child1 = child.level;
	var child2 = child._maxLevel;
	var x14;
	if(child.wild) {
		x14 = 0;
	} else {
		var _this22 = catalyst_GameData.get_current();
		x14 = _this22.labs.get(_this22.currentRegion).tech / 100;
	}
	if(child1 < (child2 * (1 + x14) | 0)) {
		var _this23 = catalyst_GameData.get_current();
		var growth4 = child.maxGrowth(0,_this23.labs.get(_this23.currentRegion).gourmetTime > 0);
		growth4 = growth4 * 0 + growth4 * 0.01;
		child.xp += growth4;
		var currentHealth2 = child.hp / (child.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(child.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"cha"));
		while(true) {
			var tmp4;
			var child3 = child.xp;
			var lv5 = child.level;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g16 = 0;
				while(_g16 < 500) {
					var i7 = _g16++;
					if(i7 == 0) {
						catalyst_XP.xpTotals[i7] = 60;
					} else {
						var newTotal7 = 60 * Math.pow(1.08,Math.min(i7,50));
						if(i7 > 50) {
							newTotal7 *= Math.pow(1.09,i7 - 50);
						}
						catalyst_XP.xpTotals[i7] = Math.round((catalyst_XP.xpTotals[i7 - 1] + newTotal7) / 1) | 0;
					}
				}
			}
			if(child3 >= (lv5 < 1 ? 0 : catalyst_XP.xpTotals[lv5 - 1])) {
				var child4 = child.level;
				var child5 = child._maxLevel;
				var x15;
				if(child.wild) {
					x15 = 0;
				} else {
					var _this24 = catalyst_GameData.get_current();
					x15 = _this24.labs.get(_this24.currentRegion).tech / 100;
				}
				tmp4 = child4 < (child5 * (1 + x15) | 0);
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				break;
			}
			++child.level;
			child.leveledUp = true;
			if(child.growthCycle == null) {
				var strLim2 = 2 + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"str");
				var intLim2 = strLim2 + 2 + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"int");
				var chaLim2 = intLim2 + 2 + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"cha");
				child.growthCycle = [];
				var _g17 = 0;
				while(_g17 < 10) {
					_g17++;
					var r2 = Std.random(chaLim2);
					if(r2 < strLim2) {
						child.growthCycle.push("str");
					} else if(r2 < intLim2) {
						child.growthCycle.push("int");
					} else {
						child.growthCycle.push("cha");
					}
				}
			}
			var growth5 = 1;
			while(growth5 < 3 && Math.random() < child.mutations * 0.01) ++growth5;
			var _g18 = 0;
			var _g19 = growth5;
			while(_g18 < _g19) {
				_g18++;
				var growthStat2 = child.growthCycle[child.level % child.growthCycle.length];
				var _g24 = growthStat2;
				var _g34 = child.stats;
				catalyst__$Stats_Stats_$Impl_$.set(_g34,_g24,catalyst__$Stats_Stats_$Impl_$.get(_g34,_g24) + 1);
				var tmp5 = catalyst__$Stats_Stats_$Impl_$.get(child.stats,growthStat2);
				var child6 = child._maxLevel;
				var x16;
				if(child.wild) {
					x16 = 0;
				} else {
					var _this25 = catalyst_GameData.get_current();
					x16 = _this25.labs.get(_this25.currentRegion).tech / 100;
				}
				if(tmp5 > (Math.min((child6 * (1 + x16) | 0) * 5,999) | 0)) {
					var child7 = child.stats;
					var child8 = child._maxLevel;
					var x17;
					if(child.wild) {
						x17 = 0;
					} else {
						var _this26 = catalyst_GameData.get_current();
						x17 = _this26.labs.get(_this26.currentRegion).tech / 100;
					}
					catalyst__$Stats_Stats_$Impl_$.set(child7,growthStat2,Math.min((child8 * (1 + x17) | 0) * 5,999) | 0);
				}
			}
			if(!child.wild && child.level >= 10) {
				var value4 = child.level;
				var _this27 = catalyst_GameData.get_current();
				_this27.labs.get(_this27.currentRegion).event("cat_level",value4);
				if(((child.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(child) : child.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(child.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(child) : child.assignedJob)) == "supercat") {
					var value5 = child.level;
					var _this28 = catalyst_GameData.get_current();
					_this28.labs.get(_this28.currentRegion).event("supercat",value5);
				}
				if(child.level > 10) {
					var amt2 = child.level - 10;
					var _this29 = catalyst_GameData.get_current();
					_this29.labs.get(_this29.currentRegion).addPiety(amt2);
				}
				catalyst_GameData.get_current().save();
			}
		}
		var child9 = child.level;
		var child10 = child._maxLevel;
		var x18;
		if(child.wild) {
			x18 = 0;
		} else {
			var _this30 = catalyst_GameData.get_current();
			x18 = _this30.labs.get(_this30.currentRegion).tech / 100;
		}
		if(child9 >= (child10 * (1 + x18) | 0)) {
			var child11 = child._maxLevel;
			var x19;
			if(child.wild) {
				x19 = 0;
			} else {
				var _this31 = catalyst_GameData.get_current();
				x19 = _this31.labs.get(_this31.currentRegion).tech / 100;
			}
			child.level = child11 * (1 + x19) | 0;
			var child12 = child._maxLevel;
			var x20;
			if(child.wild) {
				x20 = 0;
			} else {
				var _this32 = catalyst_GameData.get_current();
				x20 = _this32.labs.get(_this32.currentRegion).tech / 100;
			}
			var lv6 = (child12 * (1 + x20) | 0) - 1;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g20 = 0;
				while(_g20 < 500) {
					var i8 = _g20++;
					if(i8 == 0) {
						catalyst_XP.xpTotals[i8] = 60;
					} else {
						var newTotal8 = 60 * Math.pow(1.08,Math.min(i8,50));
						if(i8 > 50) {
							newTotal8 *= Math.pow(1.09,i8 - 50);
						}
						catalyst_XP.xpTotals[i8] = Math.round((catalyst_XP.xpTotals[i8 - 1] + newTotal8) / 1) | 0;
					}
				}
			}
			child.xp = lv6 < 1 ? 0 : catalyst_XP.xpTotals[lv6 - 1];
		}
		child.hp = (child.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(child.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"cha")) * currentHealth2;
	}
	return child;
};
catalyst_Cat.weightedChoiceStat = function() {
	var _this = catalyst_Cat._stats;
	var _this1 = catalyst_Cat._stats;
	var _this2 = catalyst_Cat._stats;
	var choice = Std.random((__map_reserved["str"] != null ? _this.getReserved("str") : _this.h["str"]) + (__map_reserved["int"] != null ? _this1.getReserved("int") : _this1.h["int"]) + (__map_reserved["cha"] != null ? _this2.getReserved("cha") : _this2.h["cha"]));
	var _this3 = catalyst_Cat._stats;
	if(choice < (__map_reserved["str"] != null ? _this3.getReserved("str") : _this3.h["str"])) {
		return "str";
	}
	var _this4 = catalyst_Cat._stats;
	choice -= __map_reserved["str"] != null ? _this4.getReserved("str") : _this4.h["str"];
	var _this5 = catalyst_Cat._stats;
	if(choice < (__map_reserved["int"] != null ? _this5.getReserved("int") : _this5.h["int"])) {
		return "int";
	}
	return "cha";
};
catalyst_Cat.breed = function(parent1,parent2,maxLevel) {
	if(parent1.sex == true) {
		var male = parent1;
		parent1 = parent2;
		parent2 = male;
	}
	var child = new catalyst_Cat();
	var sameSexParent = child.sex == parent1.sex ? parent1 : parent2;
	var otherSexParent = child.sex == parent1.sex ? parent2 : parent1;
	var a = parent1.size;
	child.size = haxepunk_math_MathUtil.clamp(child.size * (a + (parent2.size - a) * Math.random()),0.5,1);
	var type = sameSexParent.parts.keys();
	while(type.hasNext()) {
		var type1 = type.next();
		var part;
		var _this = otherSexParent.parts;
		if(__map_reserved[type1] != null ? _this.existsReserved(type1) : _this.h.hasOwnProperty(type1)) {
			var _this1 = sameSexParent.parts;
			var _this2 = otherSexParent.parts;
			part = catalyst__$CatPart_CatPart_$Impl_$.mix(__map_reserved[type1] != null ? _this1.getReserved(type1) : _this1.h[type1],__map_reserved[type1] != null ? _this2.getReserved(type1) : _this2.h[type1],0.6);
		} else {
			var _this3 = sameSexParent.parts;
			part = catalyst__$CatPart_CatPart_$Impl_$.clone(__map_reserved[type1] != null ? _this3.getReserved(type1) : _this3.h[type1]);
		}
		child.setPart(type1,part);
	}
	var v;
	if(maxLevel == null) {
		var parent11 = parent1._maxLevel;
		var x;
		if(parent1.wild) {
			x = 0;
		} else {
			var _this4 = catalyst_GameData.get_current();
			x = _this4.labs.get(_this4.currentRegion).tech / 100;
		}
		var parent21 = parent2._maxLevel;
		var x1;
		if(parent2.wild) {
			x1 = 0;
		} else {
			var _this5 = catalyst_GameData.get_current();
			x1 = _this5.labs.get(_this5.currentRegion).tech / 100;
		}
		var x2 = Math.pow(parent1.level * parent2.level,0.5);
		var parent12 = parent1._maxLevel;
		var x3;
		if(parent1.wild) {
			x3 = 0;
		} else {
			var _this6 = catalyst_GameData.get_current();
			x3 = _this6.labs.get(_this6.currentRegion).tech / 100;
		}
		var parent22 = parent2._maxLevel;
		var x4;
		if(parent2.wild) {
			x4 = 0;
		} else {
			var _this7 = catalyst_GameData.get_current();
			x4 = _this7.labs.get(_this7.currentRegion).tech / 100;
		}
		v = ((parent11 * (1 + x) | 0) + (parent21 * (1 + x1) | 0)) / 2 + x2 / Math.max(parent12 * (1 + x3) | 0,parent22 * (1 + x4) | 0) * 5 | 0;
	} else {
		v = maxLevel;
	}
	child._maxLevel = v;
	var child1 = child._maxLevel;
	var x5;
	if(child.wild) {
		x5 = 0;
	} else {
		var _this8 = catalyst_GameData.get_current();
		x5 = _this8.labs.get(_this8.currentRegion).tech / 100;
	}
	if((child1 * (1 + x5) | 0) < 2) {
		child._maxLevel = 2;
	}
	var child2 = child._maxLevel;
	var x6;
	if(child.wild) {
		x6 = 0;
	} else {
		var _this9 = catalyst_GameData.get_current();
		x6 = _this9.labs.get(_this9.currentRegion).tech / 100;
	}
	if((child2 * (1 + x6) | 0) > 500) {
		child._maxLevel = 500;
	}
	child.stars = Math.round(Math.pow(parent1.stars * parent2.stars,0.5)) | 0;
	child.mutations = parent1.mutations + parent2.mutations;
	if(child.mutations > 10) {
		child.mutations = 10;
	}
	var inherit = [0,1,2];
	var _g = 0;
	while(_g < 3) {
		var i = _g++;
		var swapIndex = Std.random(3);
		var swapValue = inherit[swapIndex];
		inherit[swapIndex] = inherit[i];
		inherit[i] = swapValue;
	}
	var a1 = parent1.generation;
	var b = parent2.generation;
	child.generation = (a1 < b ? b : a1) + 1;
	if(child.generation > 99) {
		child.generation = 99;
	}
	var total = 0;
	var _g1 = 0;
	while(_g1 < 3) {
		var stat = catalyst__$CatStat_CatStat_$Impl_$.ordered[_g1++];
		var this1 = catalyst_Cat._stats;
		var a2 = catalyst__$Stats_Stats_$Impl_$.get(parent1.stats,stat);
		var v1 = Math.round(a2 + (catalyst__$Stats_Stats_$Impl_$.get(parent2.stats,stat) - a2) * Math.random()) | 0;
		var _this10 = this1;
		if(__map_reserved[stat] != null) {
			_this10.setReserved(stat,v1);
		} else {
			_this10.h[stat] = v1;
		}
		var _this11 = catalyst_Cat._stats;
		total += __map_reserved[stat] != null ? _this11.getReserved(stat) : _this11.h[stat];
	}
	var child3 = child._maxLevel;
	var x7;
	if(child.wild) {
		x7 = 0;
	} else {
		var _this12 = catalyst_GameData.get_current();
		x7 = _this12.labs.get(_this12.currentRegion).tech / 100;
	}
	var normalizedTotal = 10 + (Math.round(((child3 * (1 + x7) | 0) - 10) / 5) | 0) + child.mutations + (child.generation / 5 | 0);
	var tries = 0;
	while(total > normalizedTotal && ++tries < 1000) {
		var stat1 = catalyst_Cat.weightedChoiceStat();
		var _this13 = catalyst_Cat._stats;
		if((__map_reserved[stat1] != null ? _this13.getReserved(stat1) : _this13.h[stat1]) > 1) {
			var _g11 = catalyst_Cat._stats;
			var v2 = (__map_reserved[stat1] != null ? _g11.getReserved(stat1) : _g11.h[stat1]) - 1;
			if(__map_reserved[stat1] != null) {
				_g11.setReserved(stat1,v2);
			} else {
				_g11.h[stat1] = v2;
			}
		}
		var _this14 = catalyst_Cat._stats;
		var _this15 = catalyst_Cat._stats;
		var _this16 = catalyst_Cat._stats;
		total = (__map_reserved["str"] != null ? _this14.getReserved("str") : _this14.h["str"]) + (__map_reserved["int"] != null ? _this15.getReserved("int") : _this15.h["int"]) + (__map_reserved["cha"] != null ? _this16.getReserved("cha") : _this16.h["cha"]);
	}
	tries = 0;
	while(total < normalizedTotal && ++tries < 1000) {
		var stat2 = catalyst_Cat.weightedChoiceStat();
		var _this17 = catalyst_Cat._stats;
		var tmp = __map_reserved[stat2] != null ? _this17.getReserved(stat2) : _this17.h[stat2];
		var child4 = child._maxLevel;
		var x8;
		if(child.wild) {
			x8 = 0;
		} else {
			var _this18 = catalyst_GameData.get_current();
			x8 = _this18.labs.get(_this18.currentRegion).tech / 100;
		}
		if(tmp < (Math.min((child4 * (1 + x8) | 0) * 5,999) | 0)) {
			var _g12 = catalyst_Cat._stats;
			var v3 = (__map_reserved[stat2] != null ? _g12.getReserved(stat2) : _g12.h[stat2]) + 1;
			if(__map_reserved[stat2] != null) {
				_g12.setReserved(stat2,v3);
			} else {
				_g12.h[stat2] = v3;
			}
		}
		var _this19 = catalyst_Cat._stats;
		var _this20 = catalyst_Cat._stats;
		var _this21 = catalyst_Cat._stats;
		total = (__map_reserved["str"] != null ? _this19.getReserved("str") : _this19.h["str"]) + (__map_reserved["int"] != null ? _this20.getReserved("int") : _this20.h["int"]) + (__map_reserved["cha"] != null ? _this21.getReserved("cha") : _this21.h["cha"]);
	}
	child.stats = catalyst__$Stats_Stats_$Impl_$._new(catalyst_Cat._stats);
	child.parent1 = parent1.id;
	child.parent2 = parent2.id;
	child.hp = child.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(child.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(child.stats,"cha");
	return child;
};
catalyst_Cat.breedCost = function(parent1,parent2) {
	var lv = Math.round(Math.pow(parent1.stars * parent2.stars,0.5)) | 0;
	var _this = catalyst_GameData.get_current();
	return (50 * Math.pow(1.065,Math.max(lv - _this.labs.get(_this.currentRegion).prestige,1) - 1) | 0) * 1.5 | 0;
};
catalyst_Cat.starCost = function(lv) {
	var _this = catalyst_GameData.get_current();
	return 50 * Math.pow(1.065,Math.max(lv - _this.labs.get(_this.currentRegion).prestige,1) - 1) | 0;
};
catalyst_Cat.randomSize = function() {
	return 0.75 + 0.5 * (0.4 + Math.random() * 0.2);
};
catalyst_Cat.prototype = {
	id: null
	,parent1: null
	,parent2: null
	,_maxLevel: null
	,level: null
	,stars: null
	,xp: null
	,size: null
	,sex: null
	,parts: null
	,stats: null
	,wild: null
	,live: null
	,drankPotion: null
	,growthCycle: null
	,generation: null
	,inbreedPenalty: null
	,hp: null
	,headInjury: null
	,bodyInjury: null
	,mutations: null
	,ownMutations: null
	,assignedJob: null
	,room: null
	,variant: null
	,petting: null
	,_name: null
	,originalStats: null
	,spVersion: null
	,leveledUp: null
	,get_xpString: function() {
		var tmp = this.level;
		var x = this._maxLevel;
		var x1;
		if(this.wild) {
			x1 = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x1 = _this.labs.get(_this.currentRegion).tech / 100;
		}
		if(tmp < (x * (1 + x1) | 0)) {
			var xp = this.xp;
			var lv = this.level - 1;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g = 0;
				while(_g < 500) {
					var i = _g++;
					if(i == 0) {
						catalyst_XP.xpTotals[i] = 60;
					} else {
						var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
						if(i > 50) {
							newTotal *= Math.pow(1.09,i - 50);
						}
						catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
					}
				}
			}
			return Std.string(xp - (lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1]) | 0);
		} else {
			return "MAX!";
		}
	}
	,get_neededXpString: function() {
		var tmp = this.level;
		var x = this._maxLevel;
		var x1;
		if(this.wild) {
			x1 = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x1 = _this.labs.get(_this.currentRegion).tech / 100;
		}
		if(tmp < (x * (1 + x1) | 0)) {
			var lv = this.level;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g = 0;
				while(_g < 500) {
					var i = _g++;
					if(i == 0) {
						catalyst_XP.xpTotals[i] = 60;
					} else {
						var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
						if(i > 50) {
							newTotal *= Math.pow(1.09,i - 50);
						}
						catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
					}
				}
			}
			var tmp1 = lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1];
			var lv1 = lv - 1;
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g1 = 0;
				while(_g1 < 500) {
					var i1 = _g1++;
					if(i1 == 0) {
						catalyst_XP.xpTotals[i1] = 60;
					} else {
						var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
						if(i1 > 50) {
							newTotal1 *= Math.pow(1.09,i1 - 50);
						}
						catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
					}
				}
			}
			return Std.string(tmp1 - (lv1 < 1 ? 0 : catalyst_XP.xpTotals[lv1 - 1])) + "XP";
		} else {
			return "";
		}
	}
	,setPart: function(type,part) {
		var _this = this.parts;
		if(__map_reserved[type] != null) {
			_this.setReserved(type,part);
		} else {
			_this.h[type] = part;
		}
		this.size = 0.75 + 0.5 * (0.4 + Math.random() * 0.2);
	}
	,adopt: function() {
		this.originalStats = catalyst__$Stats_Stats_$Impl_$.clone(this.stats);
		this.wild = false;
		var value = this.mutations;
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).event("mutations",value);
	}
	,dismiss: function() {
		this.wild = true;
	}
	,update: function(elapsed,availableFood) {
		if(availableFood == null) {
			availableFood = 0;
		}
		var maxHp = this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha");
		if(this.hp < maxHp) {
			var tmp = this;
			var tmp1 = tmp.hp;
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion);
			tmp.hp = tmp1 + elapsed * catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this1.upgrades,"recovery",_this1.bonuses);
			if(this.hp > maxHp) {
				this.hp = maxHp;
			}
		} else if(!this.wild) {
			var tmp2 = this.level;
			var x = this._maxLevel;
			var x1;
			if(this.wild) {
				x1 = 0;
			} else {
				var _this2 = catalyst_GameData.get_current();
				x1 = _this2.labs.get(_this2.currentRegion).tech / 100;
			}
			if(tmp2 < (x * (1 + x1) | 0)) {
				var _this3 = catalyst_GameData.get_current();
				var growth = this.maxGrowth(elapsed,_this3.labs.get(_this3.currentRegion).gourmetTime > 0);
				growth = growth * availableFood + growth * 0.01 * (1 - availableFood);
				this.xp += growth;
				var currentHealth = this.hp / (this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha"));
				while(true) {
					var tmp3;
					var tmp4 = this.xp;
					var lv = this.level;
					if(catalyst_XP.xpTotals == null) {
						catalyst_XP.xpTotals = new Array(500);
						var _g = 0;
						while(_g < 500) {
							var i = _g++;
							if(i == 0) {
								catalyst_XP.xpTotals[i] = 60;
							} else {
								var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
								if(i > 50) {
									newTotal *= Math.pow(1.09,i - 50);
								}
								catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
							}
						}
					}
					if(tmp4 >= (lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1])) {
						var tmp5 = this.level;
						var x2 = this._maxLevel;
						var x3;
						if(this.wild) {
							x3 = 0;
						} else {
							var _this4 = catalyst_GameData.get_current();
							x3 = _this4.labs.get(_this4.currentRegion).tech / 100;
						}
						tmp3 = tmp5 < (x2 * (1 + x3) | 0);
					} else {
						tmp3 = false;
					}
					if(!tmp3) {
						break;
					}
					++this.level;
					this.leveledUp = true;
					if(this.growthCycle == null) {
						var strLim = 2 + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str");
						var intLim = strLim + 2 + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int");
						var chaLim = intLim + 2 + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha");
						this.growthCycle = [];
						var _g1 = 0;
						while(_g1 < 10) {
							_g1++;
							var r = Std.random(chaLim);
							if(r < strLim) {
								this.growthCycle.push("str");
							} else if(r < intLim) {
								this.growthCycle.push("int");
							} else {
								this.growthCycle.push("cha");
							}
						}
					}
					var growth1 = 1;
					while(growth1 < 3 && Math.random() < this.mutations * 0.01) ++growth1;
					var _g11 = 0;
					var _g2 = growth1;
					while(_g11 < _g2) {
						_g11++;
						var growthStat = this.growthCycle[this.level % this.growthCycle.length];
						var _g21 = growthStat;
						var _g3 = this.stats;
						catalyst__$Stats_Stats_$Impl_$.set(_g3,_g21,catalyst__$Stats_Stats_$Impl_$.get(_g3,_g21) + 1);
						var tmp6 = catalyst__$Stats_Stats_$Impl_$.get(this.stats,growthStat);
						var x4 = this._maxLevel;
						var x5;
						if(this.wild) {
							x5 = 0;
						} else {
							var _this5 = catalyst_GameData.get_current();
							x5 = _this5.labs.get(_this5.currentRegion).tech / 100;
						}
						if(tmp6 > (Math.min((x4 * (1 + x5) | 0) * 5,999) | 0)) {
							var tmp7 = this.stats;
							var x6 = this._maxLevel;
							var x7;
							if(this.wild) {
								x7 = 0;
							} else {
								var _this6 = catalyst_GameData.get_current();
								x7 = _this6.labs.get(_this6.currentRegion).tech / 100;
							}
							catalyst__$Stats_Stats_$Impl_$.set(tmp7,growthStat,Math.min((x6 * (1 + x7) | 0) * 5,999) | 0);
						}
					}
					if(!this.wild && this.level >= 10) {
						var value = this.level;
						var _this7 = catalyst_GameData.get_current();
						_this7.labs.get(_this7.currentRegion).event("cat_level",value);
						if(((this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(this) : this.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(this) : this.assignedJob)) == "supercat") {
							var value1 = this.level;
							var _this8 = catalyst_GameData.get_current();
							_this8.labs.get(_this8.currentRegion).event("supercat",value1);
						}
						if(this.level > 10) {
							var amt = this.level - 10;
							var _this9 = catalyst_GameData.get_current();
							_this9.labs.get(_this9.currentRegion).addPiety(amt);
						}
						catalyst_GameData.get_current().save();
					}
				}
				var tmp8 = this.level;
				var x8 = this._maxLevel;
				var x9;
				if(this.wild) {
					x9 = 0;
				} else {
					var _this10 = catalyst_GameData.get_current();
					x9 = _this10.labs.get(_this10.currentRegion).tech / 100;
				}
				if(tmp8 >= (x8 * (1 + x9) | 0)) {
					var x10 = this._maxLevel;
					var x11;
					if(this.wild) {
						x11 = 0;
					} else {
						var _this11 = catalyst_GameData.get_current();
						x11 = _this11.labs.get(_this11.currentRegion).tech / 100;
					}
					this.level = x10 * (1 + x11) | 0;
					var x12 = this._maxLevel;
					var x13;
					if(this.wild) {
						x13 = 0;
					} else {
						var _this12 = catalyst_GameData.get_current();
						x13 = _this12.labs.get(_this12.currentRegion).tech / 100;
					}
					var lv1 = (x12 * (1 + x13) | 0) - 1;
					if(catalyst_XP.xpTotals == null) {
						catalyst_XP.xpTotals = new Array(500);
						var _g4 = 0;
						while(_g4 < 500) {
							var i1 = _g4++;
							if(i1 == 0) {
								catalyst_XP.xpTotals[i1] = 60;
							} else {
								var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
								if(i1 > 50) {
									newTotal1 *= Math.pow(1.09,i1 - 50);
								}
								catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
							}
						}
					}
					this.xp = lv1 < 1 ? 0 : catalyst_XP.xpTotals[lv1 - 1];
				}
				this.hp = (this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha")) * currentHealth;
			}
		}
		var health = this.hp / maxHp;
		if(!(health < 0.7)) {
			this.headInjury = 0;
		} else if(this.headInjury == 0) {
			this.headInjury = 1 + Std.random(12);
		}
		if(!(health < 0.3)) {
			this.bodyInjury = 0;
		} else if(this.bodyInjury == 0) {
			this.bodyInjury = 1 + Std.random(12);
		}
	}
	,growthRate: function(gourmet,accountForStarvation) {
		if(accountForStarvation == null) {
			accountForStarvation = true;
		}
		var growth = 1 + this.stars * 0.1 + this.mutations * 0.5;
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var growth1 = growth * catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"cat_xp_base",_this1.bonuses) / 100;
		if(this.room == "nap_room") {
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion);
			growth1 *= catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"nap_xp_rate",_this3.bonuses) / 100;
		}
		if(gourmet) {
			var _this4 = catalyst_GameData.get_current();
			var _this5 = _this4.labs.get(_this4.currentRegion);
			growth1 *= catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this5.upgrades,"cat_xp_rate",_this5.bonuses) / 100;
		}
		var tmp;
		if(accountForStarvation) {
			var _this6 = catalyst_GameData.get_current();
			tmp = _this6.labs.get(_this6.currentRegion).food <= 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			growth1 *= 0.01;
		}
		if(this.petting) {
			growth1 *= 1.5;
		}
		return growth1;
	}
	,maxGrowth: function(elapsed,gourmet) {
		var growth = this.growthRate(gourmet,false);
		var x = this._maxLevel;
		var x1;
		if(this.wild) {
			x1 = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x1 = _this.labs.get(_this.currentRegion).tech / 100;
		}
		var lv = x * (1 + x1) | 0;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g = 0;
			while(_g < 500) {
				var i = _g++;
				if(i == 0) {
					catalyst_XP.xpTotals[i] = 60;
				} else {
					var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
					if(i > 50) {
						newTotal *= Math.pow(1.09,i - 50);
					}
					catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
				}
			}
		}
		return Math.min((lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1]) - this.xp,growth * elapsed);
	}
	,drink: function(potion) {
		var mutated = false;
		if(this.mutations < 10 && this.ownMutations < 1 && Math.random() < potion.mutagen / 100) {
			++this.mutations;
			++this.ownMutations;
			mutated = true;
			var value = this.mutations;
			var _this = catalyst_GameData.get_current();
			_this.labs.get(_this.currentRegion).event("mutations",value);
		}
		var health = this.hp / (this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha"));
		potion.applyToCat(this,mutated);
		this.leveledUp = true;
		this.hp = Math.min(this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha"),1 + (this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha")) * health);
		if(((this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(this) : this.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(this) : this.assignedJob)) == "supercat" && this.level >= 10) {
			var value1 = this.level;
			var _this1 = catalyst_GameData.get_current();
			_this1.labs.get(_this1.currentRegion).event("supercat",value1);
		}
		if(mutated) {
			++this.spVersion;
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).checkBreed(this);
		}
		return mutated;
	}
	,bless: function() {
		this.level = 1;
		this.xp = 0;
		this.stats = catalyst__$Stats_Stats_$Impl_$.clone(this.originalStats);
		this.hp = this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(this.stats,"cha");
		var _g = this;
		var _g1 = _g._maxLevel;
		var x;
		if(_g.wild) {
			x = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x = _this.labs.get(_this.currentRegion).tech / 100;
		}
		_g._maxLevel = (_g1 * (1 + x) | 0) + 5;
		var x1 = this._maxLevel;
		var x2;
		if(this.wild) {
			x2 = 0;
		} else {
			var _this1 = catalyst_GameData.get_current();
			x2 = _this1.labs.get(_this1.currentRegion).tech / 100;
		}
		if((x1 * (1 + x2) | 0) > 500) {
			this._maxLevel = 500;
		}
		this.leveledUp = true;
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_Cat.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(4);
		var s = this.id;
		if(s == null) {
			__ctx.out.b.push(0);
		} else {
			var v = s.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _this = __ctx.out;
			var src = haxe_io_Bytes.ofString(s);
			var b2 = src.b;
			var _g1 = 0;
			var _g = src.length;
			while(_g1 < _g) _this.b.push(b2[_g1++]);
		}
		var s1 = this.parent1;
		if(s1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v1 = s1.length + 1;
			if(v1 >= 0 && v1 < 128) {
				__ctx.out.b.push(v1);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v1);
			}
			var _this1 = __ctx.out;
			var src1 = haxe_io_Bytes.ofString(s1);
			var b21 = src1.b;
			var _g11 = 0;
			var _g2 = src1.length;
			while(_g11 < _g2) _this1.b.push(b21[_g11++]);
		}
		var s2 = this.parent2;
		if(s2 == null) {
			__ctx.out.b.push(0);
		} else {
			var v2 = s2.length + 1;
			if(v2 >= 0 && v2 < 128) {
				__ctx.out.b.push(v2);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v2);
			}
			var _this2 = __ctx.out;
			var src2 = haxe_io_Bytes.ofString(s2);
			var b22 = src2.b;
			var _g12 = 0;
			var _g3 = src2.length;
			while(_g12 < _g3) _this2.b.push(b22[_g12++]);
		}
		var v3 = this._maxLevel;
		if(v3 >= 0 && v3 < 128) {
			__ctx.out.b.push(v3);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v3);
		}
		var v4 = this.level;
		if(v4 >= 0 && v4 < 128) {
			__ctx.out.b.push(v4);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v4);
		}
		var v5 = this.stars;
		if(v5 >= 0 && v5 < 128) {
			__ctx.out.b.push(v5);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v5);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.xp));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.size));
		__ctx.out.b.push(this.sex ? 1 : 0);
		var a = this.parts;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v6 = keys.length + 1;
			if(v6 >= 0 && v6 < 128) {
				__ctx.out.b.push(v6);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v6);
			}
			var _g4 = 0;
			while(_g4 < keys.length) {
				var k = keys[_g4];
				++_g4;
				var s3 = k;
				if(s3 == null) {
					__ctx.out.b.push(0);
				} else {
					var v7 = s3.length + 1;
					if(v7 >= 0 && v7 < 128) {
						__ctx.out.b.push(v7);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v7);
					}
					var _this3 = __ctx.out;
					var src3 = haxe_io_Bytes.ofString(s3);
					var b23 = src3.b;
					var _g13 = 0;
					var _g5 = src3.length;
					while(_g13 < _g5) _this3.b.push(b23[_g13++]);
				}
				var v8 = __map_reserved[k] != null ? a.getReserved(k) : a.h[k];
				if(v8 == null) {
					__ctx.out.b.push(0);
				} else {
					var fbits = 0;
					if(v8.attachment != null) {
						fbits = 1;
					}
					var v9 = fbits + 1;
					if(v9 >= 0 && v9 < 128) {
						__ctx.out.b.push(v9);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v9);
					}
					if((fbits & 1) != 0) {
						var s4 = v8.attachment;
						if(s4 == null) {
							__ctx.out.b.push(0);
						} else {
							var v10 = s4.length + 1;
							if(v10 >= 0 && v10 < 128) {
								__ctx.out.b.push(v10);
							} else {
								__ctx.out.b.push(128);
								__ctx.out.addInt32(v10);
							}
							var _this4 = __ctx.out;
							var src4 = haxe_io_Bytes.ofString(s4);
							var b24 = src4.b;
							var _g14 = 0;
							var _g6 = src4.length;
							while(_g14 < _g6) _this4.b.push(b24[_g14++]);
						}
					}
					var v11 = v8.color;
					if(v11 >= 0 && v11 < 128) {
						__ctx.out.b.push(v11);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v11);
					}
				}
			}
		}
		var a1 = this.stats;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e1 = a1;
			var keys1 = Lambda.array({ iterator : function() {
				return _e1.keys();
			}});
			var v12 = keys1.length + 1;
			if(v12 >= 0 && v12 < 128) {
				__ctx.out.b.push(v12);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v12);
			}
			var _g7 = 0;
			while(_g7 < keys1.length) {
				var k1 = keys1[_g7];
				++_g7;
				if(k1 == null) {
					__ctx.out.b.push(0);
				} else {
					var v13 = k1.length + 1;
					if(v13 >= 0 && v13 < 128) {
						__ctx.out.b.push(v13);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v13);
					}
					var _this5 = __ctx.out;
					var src5 = haxe_io_Bytes.ofString(k1);
					var b25 = src5.b;
					var _g15 = 0;
					var _g8 = src5.length;
					while(_g15 < _g8) _this5.b.push(b25[_g15++]);
				}
				var v14 = __map_reserved[k1] != null ? a1.getReserved(k1) : a1.h[k1];
				if(v14 >= 0 && v14 < 128) {
					__ctx.out.b.push(v14);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v14);
				}
			}
		}
		__ctx.out.b.push(this.wild ? 1 : 0);
		__ctx.out.b.push(this.live ? 1 : 0);
		__ctx.out.b.push(this.drankPotion ? 1 : 0);
		var a2 = this.growthCycle;
		if(a2 == null) {
			__ctx.out.b.push(0);
		} else {
			var v15 = a2.length + 1;
			if(v15 >= 0 && v15 < 128) {
				__ctx.out.b.push(v15);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v15);
			}
			var _g9 = 0;
			while(_g9 < a2.length) {
				var v16 = a2[_g9];
				++_g9;
				var s5 = v16;
				if(s5 == null) {
					__ctx.out.b.push(0);
				} else {
					var v17 = s5.length + 1;
					if(v17 >= 0 && v17 < 128) {
						__ctx.out.b.push(v17);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v17);
					}
					var _this6 = __ctx.out;
					var src6 = haxe_io_Bytes.ofString(s5);
					var b26 = src6.b;
					var _g16 = 0;
					var _g10 = src6.length;
					while(_g16 < _g10) _this6.b.push(b26[_g16++]);
				}
			}
		}
		var v18 = this.generation;
		if(v18 >= 0 && v18 < 128) {
			__ctx.out.b.push(v18);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v18);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.hp));
		var v19 = this.headInjury;
		if(v19 >= 0 && v19 < 128) {
			__ctx.out.b.push(v19);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v19);
		}
		var v20 = this.bodyInjury;
		if(v20 >= 0 && v20 < 128) {
			__ctx.out.b.push(v20);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v20);
		}
		var v21 = this.mutations;
		if(v21 >= 0 && v21 < 128) {
			__ctx.out.b.push(v21);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v21);
		}
		var v22 = this.ownMutations;
		if(v22 >= 0 && v22 < 128) {
			__ctx.out.b.push(v22);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v22);
		}
		var s6 = this.assignedJob;
		if(s6 == null) {
			__ctx.out.b.push(0);
		} else {
			var v23 = s6.length + 1;
			if(v23 >= 0 && v23 < 128) {
				__ctx.out.b.push(v23);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v23);
			}
			var _this7 = __ctx.out;
			var src7 = haxe_io_Bytes.ofString(s6);
			var b27 = src7.b;
			var _g17 = 0;
			var _g18 = src7.length;
			while(_g17 < _g18) _this7.b.push(b27[_g17++]);
		}
		var s7 = this.room;
		if(s7 == null) {
			__ctx.out.b.push(0);
		} else {
			var v24 = s7.length + 1;
			if(v24 >= 0 && v24 < 128) {
				__ctx.out.b.push(v24);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v24);
			}
			var _this8 = __ctx.out;
			var src8 = haxe_io_Bytes.ofString(s7);
			var b28 = src8.b;
			var _g19 = 0;
			var _g20 = src8.length;
			while(_g19 < _g20) _this8.b.push(b28[_g19++]);
		}
		var s8 = this.variant;
		if(s8 == null) {
			__ctx.out.b.push(0);
		} else {
			var v25 = s8.length + 1;
			if(v25 >= 0 && v25 < 128) {
				__ctx.out.b.push(v25);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v25);
			}
			var _this9 = __ctx.out;
			var src9 = haxe_io_Bytes.ofString(s8);
			var b29 = src9.b;
			var _g110 = 0;
			var _g21 = src9.length;
			while(_g110 < _g21) _this9.b.push(b29[_g110++]);
		}
		var s9 = this._name;
		if(s9 == null) {
			__ctx.out.b.push(0);
		} else {
			var v26 = s9.length + 1;
			if(v26 >= 0 && v26 < 128) {
				__ctx.out.b.push(v26);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v26);
			}
			var _this10 = __ctx.out;
			var src10 = haxe_io_Bytes.ofString(s9);
			var b210 = src10.b;
			var _g111 = 0;
			var _g22 = src10.length;
			while(_g111 < _g22) _this10.b.push(b210[_g111++]);
		}
		var a3 = this.originalStats;
		if(a3 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e2 = a3;
			var keys2 = Lambda.array({ iterator : function() {
				return _e2.keys();
			}});
			var v27 = keys2.length + 1;
			if(v27 >= 0 && v27 < 128) {
				__ctx.out.b.push(v27);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v27);
			}
			var _g23 = 0;
			while(_g23 < keys2.length) {
				var k2 = keys2[_g23];
				++_g23;
				if(k2 == null) {
					__ctx.out.b.push(0);
				} else {
					var v28 = k2.length + 1;
					if(v28 >= 0 && v28 < 128) {
						__ctx.out.b.push(v28);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v28);
					}
					var _this11 = __ctx.out;
					var src11 = haxe_io_Bytes.ofString(k2);
					var b211 = src11.b;
					var _g112 = 0;
					var _g24 = src11.length;
					while(_g112 < _g24) _this11.b.push(b211[_g112++]);
				}
				var v29 = __map_reserved[k2] != null ? a3.getReserved(k2) : a3.h[k2];
				if(v29 >= 0 && v29 < 128) {
					__ctx.out.b.push(v29);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v29);
				}
			}
		}
	}
	,unserializeInit: function() {
		this.id = catalyst__$Cat_CatId_$Impl_$._new();
		this.parent1 = null;
		this.parent2 = null;
		this._maxLevel = 10;
		this.level = 1;
		this.stars = 0;
		this.xp = 0;
		this.size = 1;
		this.parts = new haxe_ds_StringMap();
		this.wild = true;
		this.live = true;
		this.drankPotion = false;
		this.generation = 1;
		this.inbreedPenalty = 0;
		this.hp = 0;
		this.headInjury = 0;
		this.bodyInjury = 0;
		this.mutations = 0;
		this.ownMutations = 0;
		this.assignedJob = null;
		this.room = "backyard";
		this.variant = null;
		this.petting = false;
		this._name = null;
		this.spVersion = 0;
		this.leveledUp = false;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 4) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 4);
		}
		var v0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		if(len == 0) {
			v0 = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			v0 = s;
		}
		this.id = v0;
		var v01;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len1 = v2;
		if(len1 == 0) {
			v01 = null;
		} else {
			--len1;
			var s1 = __ctx.input.getString(__ctx.inPos,len1);
			__ctx.inPos += len1;
			v01 = s1;
		}
		this.parent1 = v01;
		var v02;
		var v3 = __ctx.input.b[__ctx.inPos++];
		if(v3 == 128) {
			v3 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v3;
		if(len2 == 0) {
			v02 = null;
		} else {
			--len2;
			var s2 = __ctx.input.getString(__ctx.inPos,len2);
			__ctx.inPos += len2;
			v02 = s2;
		}
		this.parent2 = v02;
		var v4 = __ctx.input.b[__ctx.inPos++];
		if(v4 == 128) {
			v4 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this._maxLevel = v4;
		var v5 = __ctx.input.b[__ctx.inPos++];
		if(v5 == 128) {
			v5 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.level = v5;
		var v6 = __ctx.input.b[__ctx.inPos++];
		if(v6 == 128) {
			v6 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.stars = v6;
		var v7 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.xp = v7;
		var v8 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.size = v8;
		this.sex = __ctx.input.b[__ctx.inPos++] != 0;
		var k0;
		var v03;
		var v9 = __ctx.input.b[__ctx.inPos++];
		if(v9 == 128) {
			v9 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len3 = v9;
		var tmp;
		if(len3 == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len3 > 0) {
				var v11;
				var v10 = __ctx.input.b[__ctx.inPos++];
				if(v10 == 128) {
					v10 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len4 = v10;
				if(len4 == 0) {
					v11 = null;
				} else {
					--len4;
					var s3 = __ctx.input.getString(__ctx.inPos,len4);
					__ctx.inPos += len4;
					v11 = s3;
				}
				k0 = v11;
				var k = k0;
				var v12;
				var v13 = __ctx.input.b[__ctx.inPos++];
				if(v13 == 128) {
					v13 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var fbits = v13;
				if(fbits == 0) {
					v12 = null;
				} else {
					--fbits;
					var color;
					var attachment = null;
					if((fbits & 1) != 0) {
						var v14 = __ctx.input.b[__ctx.inPos++];
						if(v14 == 128) {
							v14 = __ctx.input.getInt32(__ctx.inPos);
							__ctx.inPos += 4;
						}
						var len5 = v14;
						if(len5 == 0) {
							attachment = null;
						} else {
							--len5;
							var s4 = __ctx.input.getString(__ctx.inPos,len5);
							__ctx.inPos += len5;
							attachment = s4;
						}
					}
					var v31;
					var v15 = __ctx.input.b[__ctx.inPos++];
					if(v15 == 128) {
						v15 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					v31 = v15;
					color = v31;
					v12 = { attachment : attachment, color : color};
				}
				v03 = v12;
				var v16 = v03;
				if(__map_reserved[k] != null) {
					m.setReserved(k,v16);
				} else {
					m.h[k] = v16;
				}
			}
			tmp = m;
		}
		this.parts = tmp;
		var v04;
		var k1;
		var v17;
		var v18 = __ctx.input.b[__ctx.inPos++];
		if(v18 == 128) {
			v18 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len6 = v18;
		var v05;
		if(len6 == 0) {
			v05 = null;
		} else {
			var m1 = new haxe_ds_StringMap();
			while(--len6 > 0) {
				var v19 = __ctx.input.b[__ctx.inPos++];
				if(v19 == 128) {
					v19 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len7 = v19;
				if(len7 == 0) {
					k1 = null;
				} else {
					--len7;
					var s5 = __ctx.input.getString(__ctx.inPos,len7);
					__ctx.inPos += len7;
					k1 = s5;
				}
				var k2 = k1;
				var v20 = __ctx.input.b[__ctx.inPos++];
				if(v20 == 128) {
					v20 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v17 = v20;
				if(__map_reserved[k2] != null) {
					m1.setReserved(k2,v17);
				} else {
					m1.h[k2] = v17;
				}
			}
			v05 = m1;
		}
		v04 = v05;
		this.stats = v04;
		this.wild = __ctx.input.b[__ctx.inPos++] != 0;
		this.live = __ctx.input.b[__ctx.inPos++] != 0;
		this.drankPotion = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v21 = __ctx.input.b[__ctx.inPos++];
		if(v21 == 128) {
			v21 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len8 = v21;
		var tmp1;
		if(len8 == 0) {
			tmp1 = null;
		} else {
			--len8;
			var a = [];
			var _g1 = 0;
			var _g = len8;
			while(_g1 < _g) {
				var i = _g1++;
				var v110;
				var v22 = __ctx.input.b[__ctx.inPos++];
				if(v22 == 128) {
					v22 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len9 = v22;
				if(len9 == 0) {
					v110 = null;
				} else {
					--len9;
					var s6 = __ctx.input.getString(__ctx.inPos,len9);
					__ctx.inPos += len9;
					v110 = s6;
				}
				e0 = v110;
				a[i] = e0;
			}
			tmp1 = a;
		}
		this.growthCycle = tmp1;
		var v23 = __ctx.input.b[__ctx.inPos++];
		if(v23 == 128) {
			v23 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.generation = v23;
		if(__version < 3) {
			var v24 = __ctx.input.b[__ctx.inPos++];
			if(v24 == 128) {
				v24 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			this.inbreedPenalty = v24;
		}
		var v25 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.hp = v25;
		var v26 = __ctx.input.b[__ctx.inPos++];
		if(v26 == 128) {
			v26 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.headInjury = v26;
		var v27 = __ctx.input.b[__ctx.inPos++];
		if(v27 == 128) {
			v27 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.bodyInjury = v27;
		var v28 = __ctx.input.b[__ctx.inPos++];
		if(v28 == 128) {
			v28 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.mutations = v28;
		var v29 = __ctx.input.b[__ctx.inPos++];
		if(v29 == 128) {
			v29 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.ownMutations = v29;
		var v06;
		var v30 = __ctx.input.b[__ctx.inPos++];
		if(v30 == 128) {
			v30 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len10 = v30;
		if(len10 == 0) {
			v06 = null;
		} else {
			--len10;
			var s7 = __ctx.input.getString(__ctx.inPos,len10);
			__ctx.inPos += len10;
			v06 = s7;
		}
		this.assignedJob = v06;
		var v07;
		var v32 = __ctx.input.b[__ctx.inPos++];
		if(v32 == 128) {
			v32 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len11 = v32;
		if(len11 == 0) {
			v07 = null;
		} else {
			--len11;
			var s8 = __ctx.input.getString(__ctx.inPos,len11);
			__ctx.inPos += len11;
			v07 = s8;
		}
		this.room = v07;
		if(__version >= 2) {
			var v08;
			var v33 = __ctx.input.b[__ctx.inPos++];
			if(v33 == 128) {
				v33 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			var len12 = v33;
			if(len12 == 0) {
				v08 = null;
			} else {
				--len12;
				var s9 = __ctx.input.getString(__ctx.inPos,len12);
				__ctx.inPos += len12;
				v08 = s9;
			}
			this.variant = v08;
		}
		if(__version >= 4) {
			var v34 = __ctx.input.b[__ctx.inPos++];
			if(v34 == 128) {
				v34 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			var len13 = v34;
			var tmp2;
			if(len13 == 0) {
				tmp2 = null;
			} else {
				--len13;
				var s10 = __ctx.input.getString(__ctx.inPos,len13);
				__ctx.inPos += len13;
				tmp2 = s10;
			}
			this._name = tmp2;
		}
		var v09;
		var k11;
		var v111;
		var v35 = __ctx.input.b[__ctx.inPos++];
		if(v35 == 128) {
			v35 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len14 = v35;
		var v010;
		if(len14 == 0) {
			v010 = null;
		} else {
			var m2 = new haxe_ds_StringMap();
			while(--len14 > 0) {
				var v36 = __ctx.input.b[__ctx.inPos++];
				if(v36 == 128) {
					v36 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len15 = v36;
				if(len15 == 0) {
					k11 = null;
				} else {
					--len15;
					var s11 = __ctx.input.getString(__ctx.inPos,len15);
					__ctx.inPos += len15;
					k11 = s11;
				}
				var k3 = k11;
				var v37 = __ctx.input.b[__ctx.inPos++];
				if(v37 == 128) {
					v37 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v111 = v37;
				if(__map_reserved[k3] != null) {
					m2.setReserved(k3,v111);
				} else {
					m2.h[k3] = v111;
				}
			}
			v010 = m2;
		}
		v09 = v010;
		this.originalStats = v09;
	}
	,__class__: catalyst_Cat
	,__properties__: {get_neededXpString:"get_neededXpString",get_xpString:"get_xpString"}
};
var catalyst__$CatBreed_CatBreed_$Impl_$ = {};
$hxClasses["catalyst._CatBreed.CatBreed_Impl_"] = catalyst__$CatBreed_CatBreed_$Impl_$;
catalyst__$CatBreed_CatBreed_$Impl_$.__name__ = ["catalyst","_CatBreed","CatBreed_Impl_"];
catalyst__$CatBreed_CatBreed_$Impl_$.__properties__ = {get___dataIndex:"get___dataIndex",get_parts:"get_parts",get_name:"get_name"};
catalyst__$CatBreed_CatBreed_$Impl_$.match = function(this1,cat) {
	var part = catalyst__$CatBreed_CatBreed_$Impl_$.__parts[catalyst__$CatBreed_CatBreed_$Impl_$.get___dataIndex(this1)].keys();
	while(part.hasNext()) {
		var part1 = part.next();
		var tmp;
		var _this = cat.parts;
		if(!(!(__map_reserved[part1] != null ? _this.existsReserved(part1) : _this.h.hasOwnProperty(part1)))) {
			var _this1 = cat.parts;
			var tmp1 = (__map_reserved[part1] != null ? _this1.getReserved(part1) : _this1.h[part1]).attachment;
			var _this2 = catalyst__$CatBreed_CatBreed_$Impl_$.__parts[catalyst__$CatBreed_CatBreed_$Impl_$.get___dataIndex(this1)];
			tmp = tmp1 != (__map_reserved[part1] != null ? _this2.getReserved(part1) : _this2.h[part1]);
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
	}
	return true;
};
catalyst__$CatBreed_CatBreed_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "beaver":
		return "Beaver Cat";
	case "bunny":
		return "Bunny Cat";
	case "chubby":
		return "Chubby Cat";
	case "claws":
		return "Claw Cat";
	case "dog":
		return "Dog Cat";
	case "dragon":
		return "Dragon Cat";
	case "elephant":
		return "Elephant Cat";
	case "fly":
		return "Fly Cat";
	case "gator":
		return "Gator Cat";
	case "hearts":
		return "Heart Cat";
	case "human":
		return "Person Cat";
	case "jack":
		return "Jack O' Cat";
	case "lightning":
		return "Lightning Cat";
	case "monkey":
		return "Monkey Cat";
	case "original":
		return "Original Cat";
	case "pig":
		return "Pig Cat";
	case "rain":
		return "Rain Cat";
	case "sheep":
		return "Sheep Cat";
	case "stars":
		return "Star Cat";
	case "swirls":
		return "Swirl Cat";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$CatBreed_CatBreed_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "beaver":
		return 9;
	case "bunny":
		return 2;
	case "chubby":
		return 17;
	case "claws":
		return 1;
	case "dog":
		return 10;
	case "dragon":
		return 0;
	case "elephant":
		return 8;
	case "fly":
		return 5;
	case "gator":
		return 6;
	case "hearts":
		return 12;
	case "human":
		return 18;
	case "jack":
		return 7;
	case "lightning":
		return 15;
	case "monkey":
		return 4;
	case "original":
		return 19;
	case "pig":
		return 3;
	case "rain":
		return 13;
	case "sheep":
		return 11;
	case "stars":
		return 16;
	case "swirls":
		return 14;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$CatJob_CatJob_$Impl_$ = {};
$hxClasses["catalyst._CatJob.CatJob_Impl_"] = catalyst__$CatJob_CatJob_$Impl_$;
catalyst__$CatJob_CatJob_$Impl_$.__name__ = ["catalyst","_CatJob","CatJob_Impl_"];
catalyst__$CatJob_CatJob_$Impl_$.__properties__ = {get_name:"get_name",get_bonusValue:"get_bonusValue",get_hat:"get_hat",get_str:"get_str",get_type:"get_type",get_cha:"get_cha",get___dataIndex:"get___dataIndex",get_int:"get_int",get_bonus:"get_bonus",get_bonusDescription:"get_bonusDescription",get_jobIndex:"get_jobIndex"};
catalyst__$CatJob_CatJob_$Impl_$.getJobFor = function(cat) {
	var _this = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	if(__map_reserved["str"] != null) {
		_this.setReserved("str",1);
	} else {
		_this.h["str"] = 1;
	}
	var _this1 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	if(__map_reserved["int"] != null) {
		_this1.setReserved("int",1);
	} else {
		_this1.h["int"] = 1;
	}
	var _this2 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	if(__map_reserved["cha"] != null) {
		_this2.setReserved("cha",1);
	} else {
		_this2.h["cha"] = 1;
	}
	var s1 = "str";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s1) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int")) {
		var _g1 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v = (__map_reserved[s1] != null ? _g1.getReserved(s1) : _g1.h[s1]) + 1;
		if(__map_reserved[s1] != null) {
			_g1.setReserved(s1,v);
		} else {
			_g1.h[s1] = v;
		}
	}
	var s11 = "str";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s11) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha")) {
		var _g11 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v1 = (__map_reserved[s11] != null ? _g11.getReserved(s11) : _g11.h[s11]) + 1;
		if(__map_reserved[s11] != null) {
			_g11.setReserved(s11,v1);
		} else {
			_g11.h[s11] = v1;
		}
	}
	var s12 = "int";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s12) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str")) {
		var _g12 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v2 = (__map_reserved[s12] != null ? _g12.getReserved(s12) : _g12.h[s12]) + 1;
		if(__map_reserved[s12] != null) {
			_g12.setReserved(s12,v2);
		} else {
			_g12.h[s12] = v2;
		}
	}
	var s13 = "int";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s13) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha")) {
		var _g13 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v3 = (__map_reserved[s13] != null ? _g13.getReserved(s13) : _g13.h[s13]) + 1;
		if(__map_reserved[s13] != null) {
			_g13.setReserved(s13,v3);
		} else {
			_g13.h[s13] = v3;
		}
	}
	var s14 = "cha";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s14) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str")) {
		var _g14 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v4 = (__map_reserved[s14] != null ? _g14.getReserved(s14) : _g14.h[s14]) + 1;
		if(__map_reserved[s14] != null) {
			_g14.setReserved(s14,v4);
		} else {
			_g14.h[s14] = v4;
		}
	}
	var s15 = "cha";
	if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,s15) < catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int")) {
		var _g15 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
		var v5 = (__map_reserved[s15] != null ? _g15.getReserved(s15) : _g15.h[s15]) + 1;
		if(__map_reserved[s15] != null) {
			_g15.setReserved(s15,v5);
		} else {
			_g15.h[s15] = v5;
		}
	}
	var _this3 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	var _this4 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	var _this5 = catalyst__$CatJob_CatJob_$Impl_$._ordinals;
	var index = (__map_reserved["str"] != null ? _this3.getReserved("str") : _this3.h["str"]) - 1 << 4 | (__map_reserved["int"] != null ? _this4.getReserved("int") : _this4.h["int"]) - 1 << 2 | (__map_reserved["cha"] != null ? _this5.getReserved("cha") : _this5.h["cha"]) - 1;
	if(catalyst__$CatJob_CatJob_$Impl_$._jobIndex == null) {
		catalyst__$CatJob_CatJob_$Impl_$._jobIndex = [];
		var _g = 0;
		var _g16 = catalyst__$CatJob_CatJob_$Impl_$.ordered;
		while(_g < _g16.length) {
			var job = _g16[_g];
			++_g;
			var _g2 = 0;
			var _g3 = catalyst__$CatJob_CatJob_$Impl_$.__str[catalyst__$CatJob_CatJob_$Impl_$.get___dataIndex(job)];
			while(_g2 < _g3.length) {
				var str = _g3[_g2];
				++_g2;
				var _g4 = 0;
				var _g5 = catalyst__$CatJob_CatJob_$Impl_$.__int[catalyst__$CatJob_CatJob_$Impl_$.get___dataIndex(job)];
				while(_g4 < _g5.length) {
					var $int = _g5[_g4];
					++_g4;
					var _g6 = 0;
					var _g7 = catalyst__$CatJob_CatJob_$Impl_$.__cha[catalyst__$CatJob_CatJob_$Impl_$.get___dataIndex(job)];
					while(_g6 < _g7.length) {
						var cha = _g7[_g6];
						++_g6;
						catalyst__$CatJob_CatJob_$Impl_$._jobIndex[str - 1 << 4 | $int - 1 << 2 | cha - 1] = job;
					}
				}
			}
		}
	}
	var jobIndex = catalyst__$CatJob_CatJob_$Impl_$._jobIndex;
	if(jobIndex[index] == null) {
		return catalyst__$CatJob_CatJob_$Impl_$.ordered[0];
	} else {
		return jobIndex[index];
	}
};
catalyst__$CatJob_CatJob_$Impl_$.get_bonus = function(this1) {
	switch(this1) {
	case "bard":
		return "research_cost";
	case "cleric":
		return "recovery";
	case "druid":
		return "catnip_production";
	case "knight":
		return "cat_damage_base";
	case "rogue":
		return "initiative";
	case "warden":
		return "cat_damage_reduction_base";
	case "wizard":
		return "ingredient_hunting";
	default:
		return null;
	}
};
catalyst__$CatJob_CatJob_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "bard":
		return 8;
	case "basecat":
		return 9;
	case "cleric":
		return 6;
	case "commander":
		return 2;
	case "druid":
		return 7;
	case "knight":
		return 0;
	case "paladin":
		return 5;
	case "rogue":
		return 3;
	case "supercat":
		return 10;
	case "warden":
		return 1;
	case "wizard":
		return 4;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$CatJob_CatJob_$Impl_$.get_type = function(this1) {
	switch(this1) {
	case "basecat":
		return "basecat";
	case "commander":case "knight":case "warden":
		return "str";
	case "bard":case "cleric":case "druid":
		return "cha";
	case "supercat":
		return "supercat";
	case "paladin":case "rogue":case "wizard":
		return "int";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$CatJob_CatJob_$Impl_$.get_hat = function(this1) {
	switch(this1) {
	case "bard":case "cleric":case "commander":case "druid":case "knight":case "paladin":case "rogue":case "warden":case "wizard":
		return true;
	default:
		return false;
	}
};
catalyst__$CatJob_CatJob_$Impl_$.get_bonusValue = function(this1) {
	switch(this1) {
	case "cleric":
		return 25;
	case "druid":case "rogue":
		return 5;
	case "bard":case "knight":case "warden":
		return 10;
	case "wizard":
		return 50;
	default:
		return 0;
	}
};
var catalyst__$CatName_MaleCatName_$Impl_$ = {};
$hxClasses["catalyst._CatName.MaleCatName_Impl_"] = catalyst__$CatName_MaleCatName_$Impl_$;
catalyst__$CatName_MaleCatName_$Impl_$.__name__ = ["catalyst","_CatName","MaleCatName_Impl_"];
catalyst__$CatName_MaleCatName_$Impl_$.__properties__ = {get_random:"get_random"};
var catalyst__$CatName_FemaleCatName_$Impl_$ = {};
$hxClasses["catalyst._CatName.FemaleCatName_Impl_"] = catalyst__$CatName_FemaleCatName_$Impl_$;
catalyst__$CatName_FemaleCatName_$Impl_$.__name__ = ["catalyst","_CatName","FemaleCatName_Impl_"];
catalyst__$CatName_FemaleCatName_$Impl_$.__properties__ = {get_random:"get_random"};
var catalyst_CatName = function() { };
$hxClasses["catalyst.CatName"] = catalyst_CatName;
catalyst_CatName.__name__ = ["catalyst","CatName"];
catalyst_CatName.random = function(sex) {
	switch(sex) {
	case false:
		return catalyst__$CatName_FemaleCatName_$Impl_$.ordered[Std.random(catalyst__$CatName_FemaleCatName_$Impl_$.ordered.length)];
	case true:
		return catalyst__$CatName_MaleCatName_$Impl_$.ordered[Std.random(catalyst__$CatName_MaleCatName_$Impl_$.ordered.length)];
	}
};
var catalyst__$CatPart_CatPart_$Impl_$ = {};
$hxClasses["catalyst._CatPart.CatPart_Impl_"] = catalyst__$CatPart_CatPart_$Impl_$;
catalyst__$CatPart_CatPart_$Impl_$.__name__ = ["catalyst","_CatPart","CatPart_Impl_"];
catalyst__$CatPart_CatPart_$Impl_$._new = function(attachment,color) {
	if(color == null) {
		color = 16777215;
	}
	return { attachment : attachment, color : color};
};
catalyst__$CatPart_CatPart_$Impl_$.clone = function(this1) {
	return catalyst__$CatPart_CatPart_$Impl_$._new(this1.attachment,this1.color);
};
catalyst__$CatPart_CatPart_$Impl_$.mix = function(this1,other,p) {
	var att = Math.random() > p ? other.attachment : this1.attachment;
	var this2 = other.color;
	var toColor = this1.color;
	var t = haxepunk_math_MathUtil.clamp(Math.random() * (p / 0.5),0,1);
	var color;
	if(t <= 0) {
		color = this2;
	} else if(t >= 1) {
		color = toColor;
	} else {
		var a = this2 >>> 24 & 255;
		var r = this2 >>> 16 & 255;
		var g = this2 >>> 8 & 255;
		var b = this2 & 255;
		a += ((toColor >>> 24 & 255) - a) * t | 0;
		r += ((toColor >>> 16 & 255) - r) * t | 0;
		g += ((toColor >>> 8 & 255) - g) * t | 0;
		b += ((toColor & 255) - b) * t | 0;
		color = a << 24 | r << 16 | g << 8 | b;
	}
	return catalyst__$CatPart_CatPart_$Impl_$._new(att,color);
};
var catalyst__$CatPartColor_CatPartColor_$Impl_$ = {};
$hxClasses["catalyst._CatPartColor.CatPartColor_Impl_"] = catalyst__$CatPartColor_CatPartColor_$Impl_$;
catalyst__$CatPartColor_CatPartColor_$Impl_$.__name__ = ["catalyst","_CatPartColor","CatPartColor_Impl_"];
catalyst__$CatPartColor_CatPartColor_$Impl_$.__properties__ = {get_value:"get_value"};
catalyst__$CatPartColor_CatPartColor_$Impl_$.get_value = function(this1) {
	switch(this1) {
	case "black":
		return 4210752;
	case "blue":
		return 8891102;
	case "charcoal":
		return 4734519;
	case "cocoa":
		return 7099219;
	case "cyan":
		return 11525609;
	case "dark_brown":
		return 13136183;
	case "gray":
		return 8421504;
	case "green":
		return 11198087;
	case "hot_pink":
		return 16744626;
	case "light_brown":
		return 15320751;
	case "light_gray":
		return 10526880;
	case "midnight":
		return 9072529;
	case "offwhite":
		return 12632256;
	case "orange":
		return 16750933;
	case "peanut_butter":
		return 13864287;
	case "pink":
		return 16755438;
	case "purple":
		return 11763967;
	case "red":
		return 16744576;
	case "rust":
		return 11309971;
	case "tan":
		return 16764074;
	case "white":
		return 16777215;
	case "yellow":
		return 14601607;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$ = {};
$hxClasses["catalyst._CatPartColorSet.CatPartColorSet_Impl_"] = catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$;
catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.__name__ = ["catalyst","_CatPartColorSet","CatPartColorSet_Impl_"];
catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.__properties__ = {get___dataIndex:"get___dataIndex",get_colors:"get_colors"};
catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "fur":
		return 0;
	case "whiskers":
		return 1;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$CatPartType_CatPartType_$Impl_$ = {};
$hxClasses["catalyst._CatPartType.CatPartType_Impl_"] = catalyst__$CatPartType_CatPartType_$Impl_$;
catalyst__$CatPartType_CatPartType_$Impl_$.__name__ = ["catalyst","_CatPartType","CatPartType_Impl_"];
catalyst__$CatPartType_CatPartType_$Impl_$.__properties__ = {get__attach:"get__attach",get_reverse:"get_reverse",get_color:"get_color",get_chance:"get_chance",get_baseChance:"get_baseChance",get_attach:"get_attach"};
catalyst__$CatPartType_CatPartType_$Impl_$.setRandomAncestral = function(cat) {
	var chosenColors = new haxe_ds_StringMap();
	var chosenAttachments = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = catalyst__$CatPartType_CatPartType_$Impl_$.ordered;
	while(_g < _g1.length) {
		var spec = _g1[_g];
		++_g;
		var _this = catalyst__$CatPartType_CatPartType_$Impl_$.partCounts;
		var partCount = __map_reserved[spec] != null ? _this.getReserved(spec) : _this.h[spec];
		var attach = catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(spec) == null ? spec : catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(spec);
		if(!(__map_reserved[attach] != null ? chosenAttachments.existsReserved(attach) : chosenAttachments.h.hasOwnProperty(attach))) {
			if(Math.random() < catalyst__$CatPartType_CatPartType_$Impl_$.get_chance(spec)) {
				var v = Math.random() < catalyst__$CatPartType_CatPartType_$Impl_$.get_baseChance(spec) ? 1 : Std.random(partCount) + 1;
				if(__map_reserved[attach] != null) {
					chosenAttachments.setReserved(attach,v);
				} else {
					chosenAttachments.h[attach] = v;
				}
			} else if(__map_reserved[attach] != null) {
				chosenAttachments.setReserved(attach,0);
			} else {
				chosenAttachments.h[attach] = 0;
			}
		}
		var number = __map_reserved[attach] != null ? chosenAttachments.getReserved(attach) : chosenAttachments.h[attach];
		var color = 16777215;
		if(catalyst__$CatPartType_CatPartType_$Impl_$.get_color(spec) != null) {
			var key = catalyst__$CatPartType_CatPartType_$Impl_$.get_color(spec);
			if(!(__map_reserved[key] != null ? chosenColors.existsReserved(key) : chosenColors.h.hasOwnProperty(key))) {
				var k = catalyst__$CatPartType_CatPartType_$Impl_$.get_color(spec);
				var this1 = catalyst__$CatPartType_CatPartType_$Impl_$.get_color(spec);
				var v1 = catalyst__$CatPartColor_CatPartColor_$Impl_$.get_value(catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.__colors[catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.get___dataIndex(this1)][Std.random(catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.__colors[catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.get___dataIndex(this1)].length)]);
				if(__map_reserved[k] != null) {
					chosenColors.setReserved(k,v1);
				} else {
					chosenColors.h[k] = v1;
				}
			}
			var key1 = catalyst__$CatPartType_CatPartType_$Impl_$.get_color(spec);
			color = __map_reserved[key1] != null ? chosenColors.getReserved(key1) : chosenColors.h[key1];
		}
		cat.setPart(spec,catalyst__$CatPart_CatPart_$Impl_$._new(number == 0 ? null : number == null ? "null" : "" + number,color));
	}
};
catalyst__$CatPartType_CatPartType_$Impl_$.get_baseChance = function(this1) {
	if(this1 == "nose") {
		return 0.25;
	} else {
		return 0;
	}
};
catalyst__$CatPartType_CatPartType_$Impl_$.get_chance = function(this1) {
	switch(this1) {
	case "accessory":case "back wing":case "front wing":case "protrusion":
		return 0.;
	case "decal":
		return 0.1;
	case "face decal":
		return 0.2;
	case "detail":case "fluff":
		return 0.9;
	default:
		return 1;
	}
};
catalyst__$CatPartType_CatPartType_$Impl_$.get_color = function(this1) {
	switch(this1) {
	case "back ear":case "back fore leg":case "back rear leg":case "back wing":case "body":case "detail":case "fluff":case "front ear":case "front fore leg":case "front rear leg":case "front wing":case "head":case "tail":
		return "fur";
	case "whiskers":
		return "whiskers";
	default:
		return null;
	}
};
catalyst__$CatPartType_CatPartType_$Impl_$.get_reverse = function(this1) {
	switch(this1) {
	case "back ear":
		return "front ear";
	case "back fore leg":
		return "front fore leg";
	case "back rear leg":
		return "front rear leg";
	case "back wing":
		return "front wing";
	case "front ear":
		return "back ear";
	case "front fore leg":
		return "back fore leg";
	case "front rear leg":
		return "back rear leg";
	case "front wing":
		return "back wing";
	default:
		return null;
	}
};
catalyst__$CatPartType_CatPartType_$Impl_$.get__attach = function(this1) {
	switch(this1) {
	case "back ear":case "front ear":
		return "ear";
	case "face decal":
		return "face_decal";
	case "back fore leg":case "back rear leg":case "front fore leg":case "front rear leg":
		return "leg";
	case "back wing":case "front wing":
		return "wing";
	default:
		return null;
	}
};
var catalyst_CatShow = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.phase = 0;
	this.hp = 0;
	this.finished = false;
	this.fame = 0;
};
$hxClasses["catalyst.CatShow"] = catalyst_CatShow;
catalyst_CatShow.__name__ = ["catalyst","CatShow"];
catalyst_CatShow.__interfaces__ = [hxbit_Serializable];
catalyst_CatShow.prototype = {
	fame: null
	,finished: null
	,_cat: null
	,lastEvent: null
	,hp: null
	,phase: null
	,start: function(cat) {
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).cats.place(cat,"fairgrounds","living_room");
		this.hp = cat.hp | 0;
		var _this1 = catalyst_GameData.get_current();
		this.fame = _this1.labs.get(_this1.currentRegion).battleLevel;
	}
	,poll: function() {
		if(this.finished) {
			this.lastEvent = null;
		} else if(this.lastEvent == null || !this.lastEvent.pending) {
			this.stage();
			catalyst_GameData.get_current().save();
		} else {
			this.step();
			catalyst_GameData.get_current().save();
		}
		return this.lastEvent;
	}
	,stage: function() {
		this.lastEvent = { stat : catalyst__$CatStat_CatStat_$Impl_$.ordered[Std.random(catalyst__$CatStat_CatStat_$Impl_$.ordered.length)], difficulty : Math.round(5 * Math.pow(1.075,this.phase)) | 0, finalFame : this.fame, finalHp : this.hp, pending : true};
	}
	,step: function() {
		var stat = this.lastEvent.stat;
		var difficulty = this.lastEvent.difficulty;
		var type;
		switch(stat) {
		case "cha":
			type = "cha";
			break;
		case "int":
			type = "int";
			break;
		case "str":
			type = "str";
			break;
		}
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var room = "fairgrounds";
		var _this2 = _this1.cats.get(room).length > 0 ? _this1.cats.get(room)[0] : null;
		var advantage = ((_this2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this2) : _this2.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this2) : _this2.assignedJob)) == null ? 0 : catalyst__$CatType_CatType_$Impl_$.advantage((_this2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this2) : _this2.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this2.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this2) : _this2.assignedJob),type);
		var roll1 = Math.random();
		var roll = advantage > 0 ? Math.max(roll1,Math.random()) : advantage < 0 ? Math.min(roll1,Math.random()) : roll1;
		var success;
		var _this3 = catalyst_GameData.get_current();
		var _this4 = _this3.labs.get(_this3.currentRegion).cats;
		var room1 = "fairgrounds";
		if(!(roll * catalyst__$Stats_Stats_$Impl_$.get((_this4.cats.get(room1).length > 0 ? _this4.cats.get(room1)[0] : null).stats,stat) * 2 >= Math.random() * difficulty)) {
			var _this5 = catalyst_GameData.get_current();
			var _this6 = _this5.labs.get(_this5.currentRegion).cats;
			var room2 = "fairgrounds";
			var _this7 = _this6.cats.get(room2).length > 0 ? _this6.cats.get(room2)[0] : null;
			success = roll >= 1 - (0.05 + (((_this7.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this7) : _this7.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this7.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this7) : _this7.assignedJob)) == "supercat" ? 0.05 : 0)) * 2;
		} else {
			success = true;
		}
		var outcome;
		if(success) {
			outcome = Math.round(5 * Math.pow(1,this.phase)) | 0;
			this.fame += Math.round(5 * Math.pow(1,this.phase)) | 0;
		} else {
			this.fame -= Math.round(5 * Math.pow(1,this.phase)) | 0;
			outcome = 1 + Math.random() * difficulty | 0;
			var _this8 = catalyst_GameData.get_current();
			var _this9 = _this8.labs.get(_this8.currentRegion).cats;
			var room3 = "fairgrounds";
			var _this10 = _this9.cats.get(room3).length > 0 ? _this9.cats.get(room3)[0] : null;
			outcome = Math.min(Math.round(_this10.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this10.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this10.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this10.stats,"cha")),outcome) | 0;
			this.hp -= outcome;
			if(this.hp < 0) {
				this.hp = 0;
			}
			var _this11 = catalyst_GameData.get_current();
			var _this12 = _this11.labs.get(_this11.currentRegion).cats;
			var room4 = "fairgrounds";
			(_this12.cats.get(room4).length > 0 ? _this12.cats.get(room4)[0] : null).hp = this.hp;
		}
		if(this.fame < 0) {
			this.fame = 0;
		}
		if(this.fame > 250) {
			this.fame = 250;
		}
		if((Math.round(this.hp) | 0) <= 0) {
			this.finish();
		} else if(++this.phase >= 50) {
			this.finish();
		}
		this.lastEvent.pending = false;
		this.lastEvent.success = success;
		this.lastEvent.outcome = outcome;
		this.lastEvent.finalFame = this.fame;
		this.lastEvent.finalHp = this.hp;
	}
	,finish: function() {
		this.finished = true;
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var room = "fairgrounds";
		if((_this1.cats.get(room).length > 0 ? _this1.cats.get(room)[0] : null) != null) {
			var _this2 = catalyst_GameData.get_current();
			var tmp = _this2.labs.get(_this2.currentRegion).cats;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion).cats;
			var room1 = "fairgrounds";
			tmp.move(_this4.cats.get(room1).length > 0 ? _this4.cats.get(room1)[0] : null,"living_room");
		}
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_CatShow.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(1);
		var v = this.fame;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
		__ctx.out.b.push(this.finished ? 1 : 0);
		__ctx.addKnownRef(this._cat);
		var v1 = this.lastEvent;
		if(v1 == null) {
			__ctx.out.b.push(0);
		} else {
			var fbits = 0;
			if(v1.outcome != null) {
				fbits = 1;
			}
			if(v1.stat != null) {
				fbits |= 2;
			}
			if(v1.success != null) {
				fbits |= 4;
			}
			var v2 = fbits + 1;
			if(v2 >= 0 && v2 < 128) {
				__ctx.out.b.push(v2);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v2);
			}
			var v3 = v1.difficulty;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var v4 = v1.finalFame;
			if(v4 >= 0 && v4 < 128) {
				__ctx.out.b.push(v4);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v4);
			}
			var v5 = v1.finalHp;
			if(v5 >= 0 && v5 < 128) {
				__ctx.out.b.push(v5);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v5);
			}
			if((fbits & 1) != 0) {
				if(v1.outcome == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					var v6 = v1.outcome;
					if(v6 >= 0 && v6 < 128) {
						__ctx.out.b.push(v6);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v6);
					}
				}
			}
			__ctx.out.b.push(v1.pending ? 1 : 0);
			if((fbits & 2) != 0) {
				var s = v1.stat;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v7 = s.length + 1;
					if(v7 >= 0 && v7 < 128) {
						__ctx.out.b.push(v7);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v7);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(s);
					var b2 = src.b;
					var _g1 = 0;
					var _g = src.length;
					while(_g1 < _g) _this.b.push(b2[_g1++]);
				}
			}
			if((fbits & 4) != 0) {
				if(v1.success == null) {
					__ctx.out.b.push(0);
				} else {
					__ctx.out.b.push(1);
					__ctx.out.b.push(v1.success ? 1 : 0);
				}
			}
		}
		var v8 = this.hp;
		if(v8 >= 0 && v8 < 128) {
			__ctx.out.b.push(v8);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v8);
		}
		var v9 = this.phase;
		if(v9 >= 0 && v9 < 128) {
			__ctx.out.b.push(v9);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v9);
		}
	}
	,unserializeInit: function() {
		this.fame = 0;
		this.finished = false;
		this.hp = 0;
		this.phase = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 1) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 1);
		}
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.fame = v1;
		this.finished = __ctx.input.b[__ctx.inPos++] != 0;
		this._cat = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var fbits = v2;
		if(fbits == 0) {
			this.lastEvent = null;
		} else {
			--fbits;
			var success = null;
			var stat = null;
			var pending;
			var outcome = null;
			var finalHp;
			var finalFame;
			var difficulty;
			var v3 = __ctx.input.b[__ctx.inPos++];
			if(v3 == 128) {
				v3 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			difficulty = v3;
			var v4 = __ctx.input.b[__ctx.inPos++];
			if(v4 == 128) {
				v4 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			finalFame = v4;
			var v5 = __ctx.input.b[__ctx.inPos++];
			if(v5 == 128) {
				v5 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			finalHp = v5;
			if((fbits & 1) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					outcome = null;
				} else {
					var v6 = __ctx.input.b[__ctx.inPos++];
					if(v6 == 128) {
						v6 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					outcome = v6;
				}
			}
			pending = __ctx.input.b[__ctx.inPos++] != 0;
			if((fbits & 2) != 0) {
				var v11;
				var v7 = __ctx.input.b[__ctx.inPos++];
				if(v7 == 128) {
					v7 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len = v7;
				if(len == 0) {
					v11 = null;
				} else {
					--len;
					var s = __ctx.input.getString(__ctx.inPos,len);
					__ctx.inPos += len;
					v11 = s;
				}
				stat = v11;
			}
			if((fbits & 4) != 0) {
				if(__ctx.input.b[__ctx.inPos++] == 0) {
					success = null;
				} else {
					success = __ctx.input.b[__ctx.inPos++] != 0;
				}
			}
			this.lastEvent = { difficulty : difficulty, finalFame : finalFame, finalHp : finalHp, outcome : outcome, pending : pending, stat : stat, success : success};
		}
		var v8 = __ctx.input.b[__ctx.inPos++];
		if(v8 == 128) {
			v8 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.hp = v8;
		var v9 = __ctx.input.b[__ctx.inPos++];
		if(v9 == 128) {
			v9 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.phase = v9;
	}
	,__class__: catalyst_CatShow
};
var catalyst__$CatStat_CatStat_$Impl_$ = {};
$hxClasses["catalyst._CatStat.CatStat_Impl_"] = catalyst__$CatStat_CatStat_$Impl_$;
catalyst__$CatStat_CatStat_$Impl_$.__name__ = ["catalyst","_CatStat","CatStat_Impl_"];
catalyst__$CatStat_CatStat_$Impl_$.__properties__ = {get_icon:"get_icon",get_name:"get_name",get_def:"get_def",get_random:"get_random"};
catalyst__$CatStat_CatStat_$Impl_$.get_def = function(this1) {
	switch(this1) {
	case "cha":
		return "cha";
	case "int":
		return "int";
	case "str":
		return "str";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$CatStat_CatStat_$Impl_$.get_icon = function(this1) {
	switch(this1) {
	case "cha":
		return "heart-icon";
	case "int":
		return "lightbulb-icon";
	case "str":
		return "claws-icon";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$CatType_CatType_$Impl_$ = {};
$hxClasses["catalyst._CatType.CatType_Impl_"] = catalyst__$CatType_CatType_$Impl_$;
catalyst__$CatType_CatType_$Impl_$.__name__ = ["catalyst","_CatType","CatType_Impl_"];
catalyst__$CatType_CatType_$Impl_$.__properties__ = {get_disadvantageTypes:"get_disadvantageTypes",get___dataIndex:"get___dataIndex",get_advantageTypes:"get_advantageTypes",get_icon:"get_icon"};
catalyst__$CatType_CatType_$Impl_$.advantage = function(this1,against) {
	if(against == null) {
		return 1;
	} else if(catalyst__$CatType_CatType_$Impl_$.__advantageTypes[catalyst__$CatType_CatType_$Impl_$.get___dataIndex(this1)].indexOf(against) > -1) {
		return 1;
	} else if(catalyst__$CatType_CatType_$Impl_$.__disadvantageTypes[catalyst__$CatType_CatType_$Impl_$.get___dataIndex(this1)].indexOf(against) > -1) {
		return -1;
	} else {
		return 0;
	}
};
catalyst__$CatType_CatType_$Impl_$.get_icon = function(this1) {
	switch(this1) {
	case "basecat":
		return "cat-icon";
	case "cha":
		return "heart-icon";
	case "int":
		return "lightbulb-icon";
	case "str":
		return "claws-icon";
	case "supercat":
		return "supercat-icon";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$CatType_CatType_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "basecat":
		return 3;
	case "cha":
		return 2;
	case "int":
		return 1;
	case "str":
		return 0;
	case "supercat":
		return 4;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$CatVariant_CatVariant_$Impl_$ = {};
$hxClasses["catalyst._CatVariant.CatVariant_Impl_"] = catalyst__$CatVariant_CatVariant_$Impl_$;
catalyst__$CatVariant_CatVariant_$Impl_$.__name__ = ["catalyst","_CatVariant","CatVariant_Impl_"];
catalyst__$CatVariant_CatVariant_$Impl_$.__properties__ = {get_setupAnimation:"get_setupAnimation",get___dataIndex:"get___dataIndex",get_attachments:"get_attachments"};
catalyst__$CatVariant_CatVariant_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "long":
		return 0;
	case "long neck":
		return 1;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst_Cats = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = catalyst__$Room_Room_$Impl_$.containerRooms;
	while(_g1 < _g2.length) {
		var room = _g2[_g1];
		++_g1;
		var value = [];
		if(__map_reserved[room] != null) {
			_g.setReserved(room,value);
		} else {
			_g.h[room] = value;
		}
	}
	this.cats = _g;
};
$hxClasses["catalyst.Cats"] = catalyst_Cats;
catalyst_Cats.__name__ = ["catalyst","Cats"];
catalyst_Cats.__interfaces__ = [hxbit_Serializable];
catalyst_Cats.prototype = {
	cats: null
	,move: function(cat,room) {
		if(cat.room != null) {
			if(cat.room == "potion_lab") {
				var _this = catalyst_GameData.get_current();
				_this.labs.get(_this.currentRegion).finishSearch(true);
			}
			var key = cat.room;
			var _this1 = this.cats;
			HxOverrides.remove(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key],cat);
		}
		var _this2 = this.cats;
		(__map_reserved[room] != null ? _this2.getReserved(room) : _this2.h[room]).push(cat);
		cat.room = room;
		if(catalyst__$Room_Room_$Impl_$.get_sendTutorial(room) != null) {
			var tutorialType = catalyst__$Room_Room_$Impl_$.get_sendTutorial(room);
			catalyst_GameData.get_current().checkTutorial(tutorialType);
		}
	}
	,place: function(cat,room,moveOccupantsTo) {
		if(moveOccupantsTo != null) {
			while((this.cats.get(room).length > 0 ? this.cats.get(room)[0] : null) != null) this.move(this.cats.get(room).length > 0 ? this.cats.get(room)[0] : null,moveOccupantsTo);
		} else {
			this.cats.get(room).length = 0;
		}
		this.move(cat,room);
	}
	,upgradeValue: function(type) {
		var value = 0;
		var _this = catalyst_Cats.jobBonuses;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _g = 0;
			var _g1 = catalyst__$Room_Room_$Impl_$.containerRooms;
			while(_g < _g1.length) {
				var room = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = this.cats.get(room);
				while(_g2 < _g3.length) {
					var cat = _g3[_g2];
					++_g2;
					if(cat.assignedJob != null && catalyst__$CatJob_CatJob_$Impl_$.get_bonus(cat.assignedJob) == type) {
						value = Math.max(value,catalyst__$CatJob_CatJob_$Impl_$.get_bonusValue(cat.assignedJob)) | 0;
					} else {
						value = value;
					}
				}
			}
		}
		return value;
	}
	,remove: function(cat) {
		if(cat.room != null) {
			HxOverrides.remove(this.cats.get(cat.room),cat);
			cat.room = null;
		}
	}
	,canMove: function(from,to) {
		if(catalyst__$Room_Room_$Impl_$.get_capacityUpgrade(to) != null) {
			var tmp = this.cats.get(to).length;
			var type = catalyst__$Room_Room_$Impl_$.get_capacityUpgrade(to);
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion);
			return tmp < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,type,_this1.bonuses);
		} else if(!catalyst__$Room_Room_$Impl_$.get_countsAsActive(from) && catalyst__$Room_Room_$Impl_$.get_countsAsActive(to)) {
			var count = 0;
			var _g = 0;
			var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
			while(_g < _g1.length) {
				var room = _g1[_g];
				++_g;
				count += this.cats.get(room).length;
			}
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion);
			return count < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"cat_capacity",_this3.bonuses);
		} else {
			return true;
		}
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_Cats.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(1);
		var a = this.cats;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				var s = k;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v1 = s.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.b.push(v1);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v1);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(s);
					var b2 = src.b;
					var _g1 = 0;
					var _g2 = src.length;
					while(_g1 < _g2) _this.b.push(b2[_g1++]);
				}
				var v2 = __map_reserved[k] != null ? a.getReserved(k) : a.h[k];
				if(v2 == null) {
					__ctx.out.b.push(0);
				} else {
					var v3 = v2.length + 1;
					if(v3 >= 0 && v3 < 128) {
						__ctx.out.b.push(v3);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v3);
					}
					var _g3 = 0;
					while(_g3 < v2.length) {
						var v4 = v2[_g3];
						++_g3;
						__ctx.addKnownRef(v4);
					}
				}
			}
		}
	}
	,unserializeInit: function() {
		var _g = new haxe_ds_StringMap();
		var _g1 = 0;
		var _g2 = catalyst__$Room_Room_$Impl_$.containerRooms;
		while(_g1 < _g2.length) {
			var room = _g2[_g1];
			++_g1;
			var value = [];
			if(__map_reserved[room] != null) {
				_g.setReserved(room,value);
			} else {
				_g.h[room] = value;
			}
		}
		this.cats = _g;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 1) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 1);
		}
		var k0;
		var v0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v11;
				var v2 = __ctx.input.b[__ctx.inPos++];
				if(v2 == 128) {
					v2 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v2;
				if(len1 == 0) {
					v11 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					v11 = s;
				}
				k0 = v11;
				var k = k0;
				var e1;
				var v3 = __ctx.input.b[__ctx.inPos++];
				if(v3 == 128) {
					v3 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len2 = v3;
				if(len2 == 0) {
					v0 = null;
				} else {
					--len2;
					var a = [];
					var _g1 = 0;
					var _g = len2;
					while(_g1 < _g) {
						e1 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
						a[_g1++] = e1;
					}
					v0 = a;
				}
				var v4 = v0;
				if(__map_reserved[k] != null) {
					m.setReserved(k,v4);
				} else {
					m.h[k] = v4;
				}
			}
			tmp = m;
		}
		this.cats = tmp;
	}
	,__class__: catalyst_Cats
};
var haxepunk_Signal = function() {
	this.callbacks = [];
};
$hxClasses["haxepunk.Signal"] = haxepunk_Signal;
haxepunk_Signal.__name__ = ["haxepunk","Signal"];
haxepunk_Signal.prototype = {
	callbacks: null
	,__class__: haxepunk_Signal
};
var haxepunk_Signal0 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal0"] = haxepunk_Signal0;
haxepunk_Signal0.__name__ = ["haxepunk","Signal0"];
haxepunk_Signal0.__super__ = haxepunk_Signal;
haxepunk_Signal0.prototype = $extend(haxepunk_Signal.prototype,{
	__class__: haxepunk_Signal0
});
var catalyst_Client = function() { };
$hxClasses["catalyst.Client"] = catalyst_Client;
catalyst_Client.__name__ = ["catalyst","Client"];
catalyst_Client.init = function() {
	haxepunk_assets_AssetCache.addCustomLoader("s",new catalyst_SkeletonDataLoader());
	haxepunk_assets_AssetCache.global.getTexture("assets/graphics/cat.png");
	haxepunk_assets_AssetCache.global.getTexture("assets/graphics/pack.png");
};
catalyst_Client.randomX = function(room) {
	return (haxepunk_HXP.width * 0.2 | 0) + Math.random() * ((room == "gift_room" ? haxepunk_HXP.width * 0.7 | 0 : haxepunk_HXP.width * 0.8 | 0) - (haxepunk_HXP.width * 0.2 | 0)) | 0;
};
catalyst_Client.randomY = function(room) {
	var x;
	switch(room) {
	case "cat_cafe":
		x = haxepunk_HXP.height * 0.4875;
		break;
	case "gift_room":
		x = haxepunk_HXP.height * 0.5;
		break;
	case "travel_agency":
		x = haxepunk_HXP.height * 0.55;
		break;
	default:
		x = haxepunk_HXP.height * 0.4 | 0;
	}
	var x1 = Math.random();
	var x2 = room == "cat_cafe" ? haxepunk_HXP.height * 0.6 : haxepunk_HXP.height * 0.8 | 0;
	var x3;
	switch(room) {
	case "cat_cafe":
		x3 = haxepunk_HXP.height * 0.4875;
		break;
	case "gift_room":
		x3 = haxepunk_HXP.height * 0.5;
		break;
	case "travel_agency":
		x3 = haxepunk_HXP.height * 0.55;
		break;
	default:
		x3 = haxepunk_HXP.height * 0.4 | 0;
	}
	return x + x1 * (x2 - x3) | 0;
};
catalyst_Client.showPopups = function() {
	if(catalyst_GameData.get_current().popups.length > 0) {
		if(catalyst_Client.popupTimer <= 0) {
			catalyst_Client.popupTimer = 1;
		} else {
			catalyst_Client.popupTimer -= haxepunk_HXP.elapsed / 0.5;
			if(catalyst_Client.popupTimer <= 0) {
				catalyst_Client.popupTimer = 0;
				var scene;
				var _g = catalyst_GameData.get_current().popups.shift();
				switch(_g[1]) {
				case 0:
					scene = new catalyst_scenes_LogoScene();
					break;
				case 1:
					scene = new catalyst_scenes_NewTrophyScene(_g[2],_g[3]);
					break;
				case 2:
					scene = new catalyst_scenes_SearchResultScene(_g[2],_g[3]);
					break;
				case 3:
					var type = _g[2];
					var messages = catalyst__$TutorialType_TutorialType_$Impl_$.__messages[catalyst__$TutorialType_TutorialType_$Impl_$.get___dataIndex(type)].slice();
					messages.reverse();
					scene = new catalyst_scenes_TutorialScene(messages,catalyst__$TutorialType_TutorialType_$Impl_$.get_helperImage(type));
					break;
				case 4:
					scene = new catalyst_scenes_MessageScene(_g[2]);
					break;
				case 5:
					scene = new catalyst_scenes_BreedDiscoveryScene(_g[2],_g[3]);
					break;
				case 6:
					var _this = catalyst_GameData.get_current();
					scene = new catalyst_scenes_MessageScene("<center><globe-icon><blue>Exploration</blue>\n\nYour cat has learned about cultures and technology around the world!\n\nAll cats will receive a bonus of <blue>+" + _this.labs.get(_this.currentRegion).tech + "%</blue> to their max level!</center>");
					break;
				}
				if(scene != null) {
					haxepunk_HXP.engine.pushScene(scene);
					return;
				}
			}
		}
	}
};
var catalyst_GameData = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.totalSaveTimer = 1;
	this.batchSaveTimer = 0;
	this.saveTimer = 0;
	this.popups = [];
	this.lastUpdate = 0;
	this.labs = new haxe_ds_StringMap();
	this.incentivizedAdTimer = 1;
	this.tutorialsEnabled = true;
	this.fastMode = false;
	this.muteMusic = false;
	this.muteSound = false;
	this.receivedUpgradeGift = false;
	this.firstSearch = true;
	this.playerId = catalyst_GameData.getPlayerId();
	this.tutorials = new haxe_ds_StringMap();
	var startingRegion = catalyst__$Region_Region_$Impl_$.ordered[0];
	var this1 = this.labs;
	var v = new catalyst_Lab(startingRegion,0);
	var _this = this1;
	if(__map_reserved[startingRegion] != null) {
		_this.setReserved(startingRegion,v);
	} else {
		_this.h[startingRegion] = v;
	}
	this.currentRegion = startingRegion;
	this.lastUpdate = new Date().getTime() / 1000;
	this.sharedInit();
};
$hxClasses["catalyst.GameData"] = catalyst_GameData;
catalyst_GameData.__name__ = ["catalyst","GameData"];
catalyst_GameData.__interfaces__ = [hxbit_Serializable];
catalyst_GameData.__properties__ = {get_s:"get_s",get_current:"get_current"};
catalyst_GameData.get_current = function() {
	if(catalyst_GameData._current == null) {
		catalyst_GameData._current = catalyst_GameData.load();
		if(catalyst_GameData._current == null) {
			catalyst_GameData._current = new catalyst_GameData();
			catalyst_GameData._current._save();
		} else {
			catalyst_GameData._current.sharedInit();
			catalyst_GameData._current.update();
			catalyst_GameData._current._save();
			var _this = catalyst_GameData._current;
			var lab = _this.labs.get(_this.currentRegion);
			if(catalyst_GameData.catnipThisUpdate > 0 || catalyst_GameData.xpThisUpdate > 0 || catalyst_GameData.lvThisUpdate > 0 || catalyst_GameData.fishThisUpdate > 0) {
				var msg = "<center><big><cat-icon/> <red>Welcome back!</red> <cat-icon/></big><br/><br/>While you were gone, you gained:<br/><br/>";
				if(catalyst_GameData.catnipThisUpdate > 0) {
					msg = "<center><big><cat-icon/> <red>Welcome back!</red> <cat-icon/></big><br/><br/>While you were gone, you gained:<br/><br/>" + ("<catnip-icon/> <green>" + catalyst_GameData.formatNumber(catalyst_GameData.catnipThisUpdate) + " catnip</green><br/>");
				}
				if(catalyst_GameData.xpThisUpdate > 0) {
					msg += "<star/> <blue>" + catalyst_GameData.formatNumber(catalyst_GameData.xpThisUpdate) + " XP</blue><br/>";
				}
				if(catalyst_GameData.lvThisUpdate > 0) {
					msg += "<max-stars/> <blue>" + catalyst_GameData.lvThisUpdate + " Level" + (catalyst_GameData.lvThisUpdate > 1 ? "s" : "") + "</blue><br/>";
				}
				if(catalyst_GameData.fishThisUpdate > 0) {
					msg += "<fish-icon/> <blue>" + catalyst_GameData.fishThisUpdate + " Fish</blue><br/>";
				}
				if(catalyst_GameData.workThisUpdate > 0) {
					msg += "<hammer-icon/> <red>" + catalyst_GameData.workThisUpdate + " Work</blue><br/>";
				}
				var tmp;
				if(lab.presentTime >= 1) {
					var room = "gift_room";
					if(lab.unlockedRooms.exists(room)) {
						tmp = lab.unlockedRooms.get(room);
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					msg += "and a <gift-icon/><blue>present</blue> is ready to claim!";
				}
				msg += "</center>";
				catalyst_GameData._current.popups.splice(1,0,catalyst_PopupType.Message(msg));
			}
		}
		haxepunk_HXP.engine.onClose.callbacks.push(function() {
			catalyst_GameData._current._save();
		});
	}
	return catalyst_GameData._current;
};
catalyst_GameData.load = function() {
	var _g = 0;
	var _g1 = catalyst_GameData.onLoad.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback();
	}
	try {
		haxepunk_utils_Data.PREFIX = null;
		haxepunk_utils_Data.load("catalyst");
		var str = haxepunk_utils_Data.readString("s",null);
		if(str == null) {
			return null;
		}
		var bytes = haxe_crypto_Base64.decode(str);
		if(catalyst_GameData.s == null) {
			catalyst_GameData.s = new hxbit_Serializer();
		}
		var gameData = catalyst_GameData.s.unserialize(bytes,catalyst_GameData);
		gameData.labs.get(gameData.currentRegion).validate();
		return gameData;
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	return null;
};
catalyst_GameData.quit = function() {
};
catalyst_GameData.roundedFloat = function(n,digits) {
	if(digits == 0) {
		return Std.string(Math.round(n) | 0);
	}
	n = Math.round(n * Math.pow(10,digits)) | 0;
	var str = "" + n;
	var len = str.length;
	if(len <= digits) {
		while(len++ < digits) str = "0" + str;
		return "." + str;
	} else {
		return HxOverrides.substr(str,0,str.length - digits) + "." + HxOverrides.substr(str,str.length - digits,null);
	}
};
catalyst_GameData.addCommas = function(i) {
	var s = "";
	var lastPart = i % 1000;
	while(i >= 1000) {
		if(s == "") {
			s = StringTools.lpad(Std.string(lastPart | 0),"0",3);
		} else {
			s = StringTools.lpad(lastPart == null ? "null" : "" + lastPart,"0",3) + "," + s;
		}
		i = i / 1000 | 0;
		lastPart = i % 1000;
	}
	if(s == "") {
		return Std.string(lastPart | 0);
	} else {
		return "" + lastPart + "," + s;
	}
};
catalyst_GameData.formatNumber = function(n,digits) {
	if(digits == null) {
		digits = 0;
	}
	var intPart = n | 0;
	if(digits == 0) {
		return catalyst_GameData.addCommas(intPart);
	} else {
		var tens = Math.pow(10,digits) | 0;
		var fi = Math.round(n % 1 * tens) | 0;
		if(fi >= tens) {
			++intPart;
			fi %= tens;
		}
		return catalyst_GameData.addCommas(intPart) + "." + StringTools.rpad(fi == null ? "null" : "" + fi,"0",digits);
	}
};
catalyst_GameData.formatTime = function(v,hours) {
	if(hours == null) {
		hours = true;
	}
	var h = v / 3600 | 0;
	var m = v / 60 % 60 | 0;
	var s = v % 60 | 0;
	return (hours ? StringTools.lpad(h == null ? "null" : "" + h,"0",2) + ":" : "") + StringTools.lpad(m == null ? "null" : "" + m,"0",2) + ":" + StringTools.lpad(s == null ? "null" : "" + s,"0",2);
};
catalyst_GameData.getPlayerId = function() {
	return Std.random(134217728);
};
catalyst_GameData.get_s = function() {
	if(catalyst_GameData.s == null) {
		catalyst_GameData.s = new hxbit_Serializer();
	}
	return catalyst_GameData.s;
};
catalyst_GameData.getTime = function() {
	return new Date().getTime() / 1000;
};
catalyst_GameData.prototype = {
	playerId: null
	,tutorials: null
	,breeds: null
	,firstSearch: null
	,receivedUpgradeGift: null
	,muteSound: null
	,muteMusic: null
	,fastMode: null
	,tutorialsEnabled: null
	,incentivizedAdTimer: null
	,currentRegion: null
	,labs: null
	,lastUpdate: null
	,popups: null
	,saveTimer: null
	,batchSaveTimer: null
	,totalSaveTimer: null
	,sharedInit: function() {
		this.popups.push(catalyst_PopupType.Logo);
		if(catalyst_Sound._muted != this.muteSound) {
			catalyst_Sound.toggleMute();
		}
		if(catalyst_Music._muted != this.muteMusic) {
			catalyst_Music.toggleMute();
		}
		var _g = 0;
		var _g1 = catalyst__$Region_Region_$Impl_$.ordered;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			var _this = this.labs;
			if(__map_reserved[region] != null ? _this.existsReserved(region) : _this.h.hasOwnProperty(region)) {
				var _this1 = this.labs;
				(__map_reserved[region] != null ? _this1.getReserved(region) : _this1.h[region]).sharedInit();
			}
		}
		if(this.breeds == null) {
			this.breeds = new haxe_ds_StringMap();
		}
	}
	,update: function() {
		var time = new Date().getTime() / 1000;
		var elapsed = time - this.lastUpdate;
		this.lastUpdate = time;
		catalyst_GameData.catnipThisUpdate = catalyst_GameData.xpThisUpdate = catalyst_GameData.fishThisUpdate = catalyst_GameData.workThisUpdate = catalyst_GameData.lvThisUpdate = 0;
		var _g = 0;
		var _g1 = catalyst__$Region_Region_$Impl_$.ordered;
		while(_g < _g1.length) {
			var region = _g1[_g];
			++_g;
			var _this = this.labs;
			if(__map_reserved[region] != null ? _this.existsReserved(region) : _this.h.hasOwnProperty(region)) {
				var _this1 = this.labs;
				(__map_reserved[region] != null ? _this1.getReserved(region) : _this1.h[region]).update(elapsed);
			}
		}
		if(this.incentivizedAdTimer < 1) {
			this.incentivizedAdTimer += elapsed / 1800;
			if(this.incentivizedAdTimer > 1) {
				this.incentivizedAdTimer = 1;
			}
		}
		if(this.totalSaveTimer > 0) {
			this.totalSaveTimer -= elapsed / 60;
			if(this.totalSaveTimer <= 0) {
				this._save();
			}
		}
		if(this.saveTimer > 0 || this.batchSaveTimer > 0) {
			this.saveTimer -= elapsed / 2;
			this.batchSaveTimer -= elapsed / 10;
			if(this.saveTimer <= 0 || this.batchSaveTimer <= 0) {
				this._save();
			}
		}
	}
	,getString: function() {
		if(catalyst_GameData.s == null) {
			catalyst_GameData.s = new hxbit_Serializer();
		}
		return haxe_crypto_Base64.encode(catalyst_GameData.s.serialize(this));
	}
	,save: function() {
		this.saveTimer = 1;
		if(this.batchSaveTimer == 0) {
			this.batchSaveTimer = 1;
		}
		var _g = 0;
		var _g1 = catalyst_GameData.onSave.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,_save: function() {
		haxepunk_utils_Data.write("s",this.getString());
		haxepunk_utils_Data.save("catalyst");
		this.batchSaveTimer = this.saveTimer = 0;
		this.totalSaveTimer = 1;
	}
	,doPrestige: function() {
		var current = this.labs.get(this.currentRegion);
		var newGame = new catalyst_Lab(this.labs.get(this.currentRegion).region,current.prestige + 1);
		newGame.catnip = 0;
		newGame.ingredientsSeen = current.ingredientsSeen;
		newGame.trophies = newGame.bonuses.trophies = current.trophies;
		newGame.piety = (current.piety - (7777 * Math.pow(1.5,current.prestige) | 0)) / 2 | 0;
		newGame.tech = current.tech;
		newGame.event("prestige",newGame.prestige);
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var tmp;
			if(catalyst__$Room_Room_$Impl_$.get_keep(room)) {
				var _this = current.unlockedRooms;
				if(__map_reserved[room] != null) {
					tmp = _this.existsReserved(room);
				} else {
					tmp = _this.h.hasOwnProperty(room);
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = newGame.unlockedRooms;
				if(__map_reserved[room] != null) {
					_this1.setReserved(room,true);
				} else {
					_this1.h[room] = true;
				}
			}
		}
		var k = this.currentRegion;
		var _this2 = this.labs;
		if(__map_reserved[k] != null) {
			_this2.setReserved(k,newGame);
		} else {
			_this2.h[k] = newGame;
		}
		this.save();
	}
	,checkTutorial: function(tutorialType) {
		var tmp;
		if(this.tutorialsEnabled) {
			var _this = this.tutorials;
			tmp = !(__map_reserved[tutorialType] != null ? _this.existsReserved(tutorialType) : _this.h.hasOwnProperty(tutorialType));
		} else {
			tmp = false;
		}
		if(tmp) {
			var requires = catalyst__$TutorialType_TutorialType_$Impl_$.__requires[catalyst__$TutorialType_TutorialType_$Impl_$.get___dataIndex(tutorialType)];
			if(requires != null) {
				var _g = 0;
				while(_g < requires.length) {
					var requirement = requires[_g];
					++_g;
					var _this1 = this.tutorials;
					if(!(__map_reserved[requirement] != null ? _this1.existsReserved(requirement) : _this1.h.hasOwnProperty(requirement))) {
						return false;
					}
				}
			}
			var shouldShow = true;
			var _g1 = 0;
			var _g11 = catalyst__$TutorialType_TutorialType_$Impl_$.__unless[catalyst__$TutorialType_TutorialType_$Impl_$.get___dataIndex(tutorialType)];
			while(_g1 < _g11.length) {
				var unless = _g11[_g1];
				++_g1;
				var _this2 = this.tutorials;
				if(__map_reserved[unless] != null ? _this2.existsReserved(unless) : _this2.h.hasOwnProperty(unless)) {
					shouldShow = false;
					break;
				}
			}
			if(shouldShow) {
				this.popups.push(catalyst_PopupType.Tutorial(tutorialType));
			}
			var _this3 = this.tutorials;
			if(__map_reserved[tutorialType] != null) {
				_this3.setReserved(tutorialType,true);
			} else {
				_this3.h[tutorialType] = true;
			}
			this.save();
			return true;
		}
		return false;
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_GameData.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(5);
		var v = this.playerId;
		if(v >= 0 && v < 128) {
			__ctx.out.b.push(v);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v);
		}
		var a = this.tutorials;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v1 = keys.length + 1;
			if(v1 >= 0 && v1 < 128) {
				__ctx.out.b.push(v1);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v1);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				var s = k;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v2 = s.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.b.push(v2);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v2);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(s);
					var b2 = src.b;
					var _g1 = 0;
					var _g2 = src.length;
					while(_g1 < _g2) _this.b.push(b2[_g1++]);
				}
				__ctx.out.b.push(__map_reserved[k] != null ? a.getReserved(k) : a.h[k] ? 1 : 0);
			}
		}
		var a1 = this.breeds;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e1 = a1;
			var keys1 = Lambda.array({ iterator : function() {
				return _e1.keys();
			}});
			var v3 = keys1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var _g3 = 0;
			while(_g3 < keys1.length) {
				var k1 = keys1[_g3];
				++_g3;
				var s1 = k1;
				if(s1 == null) {
					__ctx.out.b.push(0);
				} else {
					var v4 = s1.length + 1;
					if(v4 >= 0 && v4 < 128) {
						__ctx.out.b.push(v4);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v4);
					}
					var _this1 = __ctx.out;
					var src1 = haxe_io_Bytes.ofString(s1);
					var b21 = src1.b;
					var _g11 = 0;
					var _g4 = src1.length;
					while(_g11 < _g4) _this1.b.push(b21[_g11++]);
				}
				__ctx.out.b.push(__map_reserved[k1] != null ? a1.getReserved(k1) : a1.h[k1] ? 1 : 0);
			}
		}
		__ctx.out.b.push(this.receivedUpgradeGift ? 1 : 0);
		__ctx.out.b.push(this.muteSound ? 1 : 0);
		__ctx.out.b.push(this.muteMusic ? 1 : 0);
		__ctx.out.b.push(this.fastMode ? 1 : 0);
		__ctx.out.b.push(this.tutorialsEnabled ? 1 : 0);
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.incentivizedAdTimer));
		var s2 = this.currentRegion;
		if(s2 == null) {
			__ctx.out.b.push(0);
		} else {
			var v5 = s2.length + 1;
			if(v5 >= 0 && v5 < 128) {
				__ctx.out.b.push(v5);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v5);
			}
			var _this2 = __ctx.out;
			var src2 = haxe_io_Bytes.ofString(s2);
			var b22 = src2.b;
			var _g12 = 0;
			var _g5 = src2.length;
			while(_g12 < _g5) _this2.b.push(b22[_g12++]);
		}
		var a2 = this.labs;
		if(a2 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e2 = a2;
			var keys2 = Lambda.array({ iterator : function() {
				return _e2.keys();
			}});
			var v6 = keys2.length + 1;
			if(v6 >= 0 && v6 < 128) {
				__ctx.out.b.push(v6);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v6);
			}
			var _g6 = 0;
			while(_g6 < keys2.length) {
				var k2 = keys2[_g6];
				++_g6;
				var s3 = k2;
				if(s3 == null) {
					__ctx.out.b.push(0);
				} else {
					var v7 = s3.length + 1;
					if(v7 >= 0 && v7 < 128) {
						__ctx.out.b.push(v7);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v7);
					}
					var _this3 = __ctx.out;
					var src3 = haxe_io_Bytes.ofString(s3);
					var b23 = src3.b;
					var _g13 = 0;
					var _g7 = src3.length;
					while(_g13 < _g7) _this3.b.push(b23[_g13++]);
				}
				__ctx.addKnownRef(__map_reserved[k2] != null ? a2.getReserved(k2) : a2.h[k2]);
			}
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.lastUpdate));
	}
	,unserializeInit: function() {
		this.firstSearch = true;
		this.receivedUpgradeGift = false;
		this.muteSound = false;
		this.muteMusic = false;
		this.fastMode = false;
		this.tutorialsEnabled = true;
		this.incentivizedAdTimer = 1;
		this.labs = new haxe_ds_StringMap();
		this.lastUpdate = 0;
		this.popups = [];
		this.saveTimer = 0;
		this.batchSaveTimer = 0;
		this.totalSaveTimer = 1;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 5) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 5);
		}
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.playerId = v1;
		var k0;
		var v0;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v2;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v11;
				var v3 = __ctx.input.b[__ctx.inPos++];
				if(v3 == 128) {
					v3 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v3;
				if(len1 == 0) {
					v11 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					v11 = s;
				}
				k0 = v11;
				var k = k0;
				v0 = __ctx.input.b[__ctx.inPos++] != 0;
				if(__map_reserved[k] != null) {
					m.setReserved(k,v0);
				} else {
					m.h[k] = v0;
				}
			}
			tmp = m;
		}
		this.tutorials = tmp;
		if(__version >= 4) {
			var k01;
			var v01;
			var v4 = __ctx.input.b[__ctx.inPos++];
			if(v4 == 128) {
				v4 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			var len2 = v4;
			var tmp1;
			if(len2 == 0) {
				tmp1 = null;
			} else {
				var m1 = new haxe_ds_StringMap();
				while(--len2 > 0) {
					var v12;
					var v5 = __ctx.input.b[__ctx.inPos++];
					if(v5 == 128) {
						v5 = __ctx.input.getInt32(__ctx.inPos);
						__ctx.inPos += 4;
					}
					var len3 = v5;
					if(len3 == 0) {
						v12 = null;
					} else {
						--len3;
						var s1 = __ctx.input.getString(__ctx.inPos,len3);
						__ctx.inPos += len3;
						v12 = s1;
					}
					k01 = v12;
					var k1 = k01;
					v01 = __ctx.input.b[__ctx.inPos++] != 0;
					if(__map_reserved[k1] != null) {
						m1.setReserved(k1,v01);
					} else {
						m1.h[k1] = v01;
					}
				}
				tmp1 = m1;
			}
			this.breeds = tmp1;
		}
		if(__version < 5) {
			this.firstSearch = __ctx.input.b[__ctx.inPos++] != 0;
		}
		if(__version >= 3) {
			this.receivedUpgradeGift = __ctx.input.b[__ctx.inPos++] != 0;
		}
		this.muteSound = __ctx.input.b[__ctx.inPos++] != 0;
		this.muteMusic = __ctx.input.b[__ctx.inPos++] != 0;
		this.fastMode = __ctx.input.b[__ctx.inPos++] != 0;
		this.tutorialsEnabled = __ctx.input.b[__ctx.inPos++] != 0;
		var v6 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.incentivizedAdTimer = v6;
		var v02;
		var v7 = __ctx.input.b[__ctx.inPos++];
		if(v7 == 128) {
			v7 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len4 = v7;
		if(len4 == 0) {
			v02 = null;
		} else {
			--len4;
			var s2 = __ctx.input.getString(__ctx.inPos,len4);
			__ctx.inPos += len4;
			v02 = s2;
		}
		this.currentRegion = v02;
		var k02;
		var v03;
		var v8 = __ctx.input.b[__ctx.inPos++];
		if(v8 == 128) {
			v8 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len5 = v8;
		var tmp2;
		if(len5 == 0) {
			tmp2 = null;
		} else {
			var m2 = new haxe_ds_StringMap();
			while(--len5 > 0) {
				var v13;
				var v9 = __ctx.input.b[__ctx.inPos++];
				if(v9 == 128) {
					v9 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len6 = v9;
				if(len6 == 0) {
					v13 = null;
				} else {
					--len6;
					var s3 = __ctx.input.getString(__ctx.inPos,len6);
					__ctx.inPos += len6;
					v13 = s3;
				}
				k02 = v13;
				var k2 = k02;
				v03 = __ctx.getRef(catalyst_Lab,catalyst_Lab.__clid);
				if(__map_reserved[k2] != null) {
					m2.setReserved(k2,v03);
				} else {
					m2.h[k2] = v03;
				}
			}
			tmp2 = m2;
		}
		this.labs = tmp2;
		var v10 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.lastUpdate = v10;
	}
	,__class__: catalyst_GameData
};
var catalyst__$Gift_Gift_$Impl_$ = {};
$hxClasses["catalyst._Gift.Gift_Impl_"] = catalyst__$Gift_Gift_$Impl_$;
catalyst__$Gift_Gift_$Impl_$.__name__ = ["catalyst","_Gift","Gift_Impl_"];
catalyst__$Gift_Gift_$Impl_$.__properties__ = {get_icon:"get_icon",get_weight:"get_weight"};
catalyst__$Gift_Gift_$Impl_$.random = function() {
	var gift = "empty";
	var tmp;
	if(!catalyst_GameData.get_current().receivedUpgradeGift) {
		var _this = catalyst_GameData.get_current();
		tmp = _this.labs.get(_this.currentRegion).presentCount >= 3;
	} else {
		tmp = false;
	}
	if(tmp) {
		gift = "upgrade";
	} else {
		var weightTotal = 0;
		var _g = 0;
		var _g1 = catalyst__$Gift_Gift_$Impl_$.ordered;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			weightTotal += catalyst__$Gift_Gift_$Impl_$.get_weight(type);
		}
		var choice = Std.random(weightTotal);
		var _g2 = 0;
		var _g11 = catalyst__$Gift_Gift_$Impl_$.ordered;
		while(_g2 < _g11.length) {
			var type1 = _g11[_g2];
			++_g2;
			gift = type1;
			choice -= catalyst__$Gift_Gift_$Impl_$.get_weight(type1);
			if(choice < 0) {
				break;
			}
		}
	}
	if(gift == "upgrade") {
		catalyst_GameData.get_current().receivedUpgradeGift = true;
	}
	return gift;
};
catalyst__$Gift_Gift_$Impl_$.award = function(this1,lab) {
	switch(this1) {
	case "catnip":
		var catnipCapacity = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(lab.upgrades,"catnip_capacity",lab.bonuses);
		if(lab.catnip < catnipCapacity) {
			var value = catnipCapacity * (0.1 + Math.random() * 0.15) | 0;
			lab.catnip += value;
			if(lab.catnip > catnipCapacity) {
				lab.catnip = catnipCapacity;
			}
			return "Catnip: +<catnip-icon/><green>" + catalyst_GameData.formatNumber(value) + "</green>!";
		}
		break;
	case "fish":
		var room = "fishing_hole";
		if(lab.unlockedRooms.exists(room) && lab.unlockedRooms.get(room)) {
			var maxFish = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(lab.upgrades,"max_fish",lab.bonuses);
			if(lab.fish < maxFish) {
				var value1 = 1 + Std.random(5);
				lab.fish += value1;
				if(lab.fish > maxFish) {
					lab.fish = maxFish;
				}
				return "Fish: +<fish-icon/><blue>" + value1 + "</blue>!";
			}
		}
		break;
	case "healing":
		var healed = false;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.containerRooms;
		while(_g < _g1.length) {
			var room1 = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lab.cats.cats.get(room1);
			while(_g2 < _g3.length) {
				var cat = _g3[_g2];
				++_g2;
				if(cat.hp < cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha")) {
					healed = true;
					cat.hp = cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha");
				}
			}
		}
		if(healed) {
			return "Medicine: all cats have <green>full HP</green>!";
		}
		break;
	case "piety":
		var room2 = "temple";
		if(lab.unlockedRooms.exists(room2) && lab.unlockedRooms.get(room2)) {
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion).cats;
			var maxLevel = 0;
			var _g4 = 0;
			var _g11 = catalyst__$Room_Room_$Impl_$.containerRooms;
			while(_g4 < _g11.length) {
				var room3 = _g11[_g4];
				++_g4;
				var _g21 = 0;
				var _g31 = _this1.cats.get(room3);
				while(_g21 < _g31.length) {
					var cat1 = _g31[_g21];
					++_g21;
					if(cat1.level > maxLevel) {
						maxLevel = cat1.level;
					}
				}
			}
			var max = Math.pow(Math.min(10,maxLevel) - 10,2) / 2 | 0;
			if(max > 1) {
				var p = max / 4 + Math.random() * max / 4 | 0;
				lab.addPiety(p);
				return "<blessing-icon/>Piety: <blue>+" + p + "</blue>";
			}
		}
		break;
	case "potion":
		var room4 = "potion_lab";
		if(lab.unlockedRooms.exists(room4) && lab.unlockedRooms.get(room4)) {
			if(lab.potions.length < 12) {
				var maxIngredients = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(lab.upgrades,"max_ingredients",lab.bonuses);
				var potion = new catalyst_Potion();
				var _g12 = 0;
				while(_g12 < maxIngredients) {
					++_g12;
					potion.addIngredient(catalyst__$IngredientType_IngredientType_$Impl_$.ordered[Std.random(catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length)]);
				}
				lab.potions.push(potion);
				var maxValue = 0;
				var _g5 = 0;
				var _g13 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
				while(_g5 < _g13.length) {
					var stat = _g13[_g5];
					++_g5;
					maxValue = Math.max(maxValue,catalyst__$Stats_Stats_$Impl_$.get(potion.stats,stat));
				}
				var type = maxValue >= 10 ? "Potion" : maxValue >= 5 ? "Tincture" : "Draught";
				var str = catalyst__$Stats_Stats_$Impl_$.get(potion.stats,"str");
				var $int = catalyst__$Stats_Stats_$Impl_$.get(potion.stats,"int");
				var cha = catalyst__$Stats_Stats_$Impl_$.get(potion.stats,"cha");
				return "A potion: <potion-icon/><blue>" + (str <= 0 && $int <= 0 && cha <= 0 ? "Bitter " + type : str > $int && str > cha ? "Strength " + type : $int > str && $int > cha ? "Intelligence " + type : cha > str && cha > $int ? "Charisma " + type : "Balanced " + type) + "</blue>!";
			}
		}
		break;
	case "potion_ingredient":
		var room5 = "potion_lab";
		if(lab.unlockedRooms.exists(room5) && lab.unlockedRooms.get(room5)) {
			var ingredient = catalyst__$IngredientType_IngredientType_$Impl_$.ordered[Std.random(catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length)];
			lab.addIngredient(ingredient);
			return "A potion ingredient: <" + ingredient + "/><green>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_name(ingredient) + "</green>!";
		}
		break;
	case "upgrade":
		var _g6 = 0;
		while(_g6 < 10) {
			++_g6;
			var r;
			while(true) {
				r = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered[Std.random(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered.length)];
				if(!(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_category(r) == "misc")) {
					break;
				}
			}
			var phase = r;
			var cost = catalyst__$Upgrades_Upgrades_$Impl_$.getCost(lab.upgrades,phase,lab.prestige,lab.bonuses);
			var this2 = lab.upgrades;
			var level;
			var _this2 = this2;
			if(__map_reserved[phase] != null ? _this2.existsReserved(phase) : _this2.h.hasOwnProperty(phase)) {
				var _this3 = this2;
				level = __map_reserved[phase] != null ? _this3.getReserved(phase) : _this3.h[phase];
			} else {
				level = 0;
			}
			var tmp;
			var tmp1;
			var tmp2;
			var room6 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get_room(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_category(phase));
			if(lab.unlockedRooms.exists(room6) && lab.unlockedRooms.get(room6)) {
				tmp2 = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(lab.upgrades,"catnip_capacity",lab.bonuses) >= cost;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = level > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				tmp = level < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase);
			} else {
				tmp = false;
			}
			if(tmp) {
				catalyst__$Upgrades_Upgrades_$Impl_$.upgrade(lab.upgrades,phase);
				return "<upgrade-icon/>Upgrade: <blue>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_name(phase) + "</blue> is now <green>Lv.\t" + (level + 1) + "</green>!";
			}
		}
		break;
	case "work":
		var room7 = "workshop";
		if(lab.unlockedRooms.exists(room7) && lab.unlockedRooms.get(room7)) {
			var maxWork = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(lab.upgrades,"max_work",lab.bonuses);
			if(lab.work < maxWork) {
				var value2 = 1 + Std.random(5);
				lab.work += value2;
				if(lab.work > maxWork) {
					lab.work = maxWork;
				}
				return "Volunteer work: +<hammer-icon/><red>" + value2 + "</red>!";
			}
		}
		break;
	}
	return null;
};
catalyst__$Gift_Gift_$Impl_$.get_weight = function(this1) {
	switch(this1) {
	case "catnip":
		return 14;
	case "empty":
		return 0;
	case "piety":case "upgrade":
		return 1;
	case "potion":
		return 2;
	case "potion_ingredient":
		return 6;
	case "fish":case "healing":case "work":
		return 5;
	default:
		return 0;
	}
};
var catalyst__$HelpType_HelpType_$Impl_$ = {};
$hxClasses["catalyst._HelpType.HelpType_Impl_"] = catalyst__$HelpType_HelpType_$Impl_$;
catalyst__$HelpType_HelpType_$Impl_$.__name__ = ["catalyst","_HelpType","HelpType_Impl_"];
catalyst__$HelpType_HelpType_$Impl_$.__properties__ = {get_name:"get_name",get___dataIndex:"get___dataIndex",get_messages:"get_messages",get_hidden:"get_hidden",get_room:"get_room",get_icon:"get_icon",get_label:"get_label"};
catalyst__$HelpType_HelpType_$Impl_$.get_icon = function(this1) {
	switch(this1) {
	case "breeding":
		return "heart-icon";
	case "cats":
		return "cat-icon";
	case "combat":
		return "sword-icon";
	case "potions":
		return "potion-icon";
	case "temple":
		return "temple-icon";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$HelpType_HelpType_$Impl_$.get_room = function(this1) {
	switch(this1) {
	case "combat":
		return "coliseum";
	case "potions":
		return "potion_lab";
	default:
		return null;
	}
};
catalyst__$HelpType_HelpType_$Impl_$.get_hidden = function(this1) {
	if(this1 == "temple") {
		return true;
	} else {
		return false;
	}
};
catalyst__$HelpType_HelpType_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "breeding":
		return 1;
	case "cats":
		return 0;
	case "combat":
		return 3;
	case "potions":
		return 2;
	case "temple":
		return 4;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$HelpType_HelpType_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "breeding":
		return "Breeding";
	case "cats":
		return "Raising Cats";
	case "combat":
		return "Combat";
	case "potions":
		return "Potions";
	case "temple":
		return "Temple";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst_IHUD = function() { };
$hxClasses["catalyst.IHUD"] = catalyst_IHUD;
catalyst_IHUD.__name__ = ["catalyst","IHUD"];
catalyst_IHUD.prototype = {
	onUpgradesButtonPressed: null
	,onAllCatsButtonPressed: null
	,onWildCatsButtonPressed: null
	,onFoodButtonPressed: null
	,onCatnipButtonUp: null
	,onCatnipButtonDown: null
	,onGiftButtonPressed: null
	,onSearchButtonPressed: null
	,onPotionButtonPressed: null
	,onBrewButtonPressed: null
	,onFishButtonPressed: null
	,onBreedButtonPressed: null
	,onGourmetButtonPressed: null
	,onBlessingButtonPressed: null
	,onPrestigeButtonPressed: null
	,onHelpButtonPressed: null
	,onSettingsButtonPressed: null
	,onTrophyButtonPressed: null
	,onExitButtonPressed: null
	,onTechButtonPressed: null
	,__class__: catalyst_IHUD
};
var catalyst_IngredientSearch = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.currentIngredient = null;
	this.progress = 0;
	this.ingredients = [];
};
$hxClasses["catalyst.IngredientSearch"] = catalyst_IngredientSearch;
catalyst_IngredientSearch.__name__ = ["catalyst","IngredientSearch"];
catalyst_IngredientSearch.__interfaces__ = [hxbit_Serializable];
catalyst_IngredientSearch.prototype = {
	ingredients: null
	,progress: null
	,currentIngredient: null
	,get_timeToFind: function() {
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var room = "potion_lab";
		if((_this1.cats.get(room).length > 0 ? _this1.cats.get(room)[0] : null) != null && this.currentIngredient != null) {
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion).cats;
			var room1 = "potion_lab";
			var searchingCat = _this3.cats.get(room1).length > 0 ? _this3.cats.get(room1)[0] : null;
			var tmp = 300 + 45 * catalyst__$IngredientType_IngredientType_$Impl_$.get_rarity(this.currentIngredient);
			var _this4 = catalyst_GameData.get_current();
			var _this5 = _this4.labs.get(_this4.currentRegion);
			return tmp / ((catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this5.upgrades,"ingredient_hunting",_this5.bonuses) + searchingCat.level) / 100) * (1 - this.progress);
		} else {
			return -1;
		}
	}
	,update: function(elapsed) {
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var room = "potion_lab";
		if((_this1.cats.get(room).length > 0 ? _this1.cats.get(room)[0] : null) != null) {
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion);
			var maxIngredients = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"max_found_ingredients",_this3.bonuses);
			if(this.ingredients.length < maxIngredients) {
				if(this.currentIngredient == null) {
					var random;
					while(true) {
						random = catalyst__$IngredientType_IngredientType_$Impl_$.ordered[Std.random(catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length)];
						if(!(Math.random() > 1 / catalyst__$IngredientType_IngredientType_$Impl_$.get_rarity(random))) {
							break;
						}
					}
					this.currentIngredient = random;
					catalyst_GameData.get_current().save();
				}
				var tmp = this;
				var tmp1 = tmp.progress;
				var _this4 = catalyst_GameData.get_current();
				var _this5 = _this4.labs.get(_this4.currentRegion).cats;
				var room1 = "potion_lab";
				var searchingCat = _this5.cats.get(room1).length > 0 ? _this5.cats.get(room1)[0] : null;
				var tmp2 = 300 + 45 * catalyst__$IngredientType_IngredientType_$Impl_$.get_rarity(this.currentIngredient);
				var _this6 = catalyst_GameData.get_current();
				var _this7 = _this6.labs.get(_this6.currentRegion);
				tmp.progress = tmp1 + elapsed / (tmp2 / ((catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this7.upgrades,"ingredient_hunting",_this7.bonuses) + searchingCat.level) / 100));
				if(this.progress >= 1) {
					--this.progress;
					this.ingredients.push(this.currentIngredient);
					var tmp3;
					if(this.ingredients.length < maxIngredients) {
						var random1;
						while(true) {
							random1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered[Std.random(catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length)];
							if(!(Math.random() > 1 / catalyst__$IngredientType_IngredientType_$Impl_$.get_rarity(random1))) {
								break;
							}
						}
						tmp3 = random1;
					} else {
						tmp3 = null;
					}
					this.currentIngredient = tmp3;
					catalyst_GameData.get_current().save();
				}
			}
		} else {
			this.finish();
		}
	}
	,finish: function() {
		while(this.ingredients.length > 0) this.ingredients.pop();
		this.progress = 0;
		this.currentIngredient = null;
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_IngredientSearch.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(1);
		var a = this.ingredients;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v1 = a[_g];
				++_g;
				var s = v1;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v2 = s.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.b.push(v2);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v2);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(s);
					var b2 = src.b;
					var _g1 = 0;
					var _g2 = src.length;
					while(_g1 < _g2) _this.b.push(b2[_g1++]);
				}
			}
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.progress));
		var s1 = this.currentIngredient;
		if(s1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v3 = s1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var _this1 = __ctx.out;
			var src1 = haxe_io_Bytes.ofString(s1);
			var b21 = src1.b;
			var _g11 = 0;
			var _g3 = src1.length;
			while(_g11 < _g3) _this1.b.push(b21[_g11++]);
		}
	}
	,unserializeInit: function() {
		this.ingredients = [];
		this.progress = 0;
		this.currentIngredient = null;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 1) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 1);
		}
		var e0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var v11;
				var v2 = __ctx.input.b[__ctx.inPos++];
				if(v2 == 128) {
					v2 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v2;
				if(len1 == 0) {
					v11 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					v11 = s;
				}
				e0 = v11;
				a[i] = e0;
			}
			tmp = a;
		}
		this.ingredients = tmp;
		var v3 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.progress = v3;
		var v0;
		var v4 = __ctx.input.b[__ctx.inPos++];
		if(v4 == 128) {
			v4 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v4;
		if(len2 == 0) {
			v0 = null;
		} else {
			--len2;
			var s1 = __ctx.input.getString(__ctx.inPos,len2);
			__ctx.inPos += len2;
			v0 = s1;
		}
		this.currentIngredient = v0;
	}
	,__class__: catalyst_IngredientSearch
	,__properties__: {get_timeToFind:"get_timeToFind"}
};
var catalyst__$IngredientType_IngredientCatPart_$Impl_$ = {};
$hxClasses["catalyst._IngredientType.IngredientCatPart_Impl_"] = catalyst__$IngredientType_IngredientCatPart_$Impl_$;
catalyst__$IngredientType_IngredientCatPart_$Impl_$.__name__ = ["catalyst","_IngredientType","IngredientCatPart_Impl_"];
catalyst__$IngredientType_IngredientCatPart_$Impl_$.__properties__ = {get_probability:"get_probability",get_attachment:"get_attachment",get___dataIndex:"get___dataIndex",get_parts:"get_parts"};
catalyst__$IngredientType_IngredientCatPart_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "boot":
		return 16;
	case "bunny":
		return 6;
	case "chubby_mouth":
		return 11;
	case "crab":
		return 5;
	case "devil":
		return 0;
	case "dragon":
		return 2;
	case "elephant":
		return 14;
	case "fly":
		return 10;
	case "glasses":
		return 4;
	case "horn":
		return 1;
	case "human":
		return 3;
	case "monkey":
		return 8;
	case "pig":
		return 7;
	case "skeleton":
		return 13;
	case "spikes":
		return 12;
	case "sunglasses":
		return 15;
	case "tusks":
		return 9;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$IngredientType_IngredientCatPart_$Impl_$.get_attachment = function(this1) {
	switch(this1) {
	case "boot":
		return "boot";
	case "bunny":
		return "bunny";
	case "chubby_mouth":
		return "8";
	case "crab":
		return "crab";
	case "devil":
		return "devil";
	case "dragon":
		return "dragon";
	case "elephant":
		return "elephant";
	case "fly":
		return "fly";
	case "glasses":
		return "glasses";
	case "horn":
		return "horn";
	case "human":
		return "human";
	case "monkey":
		return "monkey";
	case "pig":
		return "pig";
	case "skeleton":
		return "skeleton";
	case "spikes":
		return "spikes";
	case "sunglasses":
		return "sunglasses";
	case "tusks":
		return "tusks";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$IngredientType_IngredientType_$Impl_$ = {};
$hxClasses["catalyst._IngredientType.IngredientType_Impl_"] = catalyst__$IngredientType_IngredientType_$Impl_$;
catalyst__$IngredientType_IngredientType_$Impl_$.__name__ = ["catalyst","_IngredientType","IngredientType_Impl_"];
catalyst__$IngredientType_IngredientType_$Impl_$.__properties__ = {get_color:"get_color",get_name:"get_name",get_mutagen:"get_mutagen",get_rarity:"get_rarity",get_partModifications:"get_partModifications",get___dataIndex:"get___dataIndex",get_stats:"get_stats",get_dye:"get_dye",get_random:"get_random"};
catalyst__$IngredientType_IngredientType_$Impl_$.applyToCat = function(this1,cat,mutated) {
	if(mutated) {
		if(catalyst__$IngredientType_IngredientType_$Impl_$.get_dye(this1) > 0) {
			var type = cat.parts.keys();
			while(type.hasNext()) {
				var type1 = type.next();
				if(catalyst__$CatPartType_CatPartType_$Impl_$.get_color(type1) != null) {
					if(Math.random() > 0.5) {
						var _this = cat.parts;
						var part = __map_reserved[type1] != null ? _this.getReserved(type1) : _this.h[type1];
						var this2 = part.color;
						var toColor = catalyst__$IngredientType_IngredientType_$Impl_$.get_color(this1);
						var t = Math.random() * catalyst__$IngredientType_IngredientType_$Impl_$.get_dye(this1);
						var tmp;
						if(t <= 0) {
							tmp = this2;
						} else if(t >= 1) {
							tmp = toColor;
						} else {
							var a = this2 >>> 24 & 255;
							var r = this2 >>> 16 & 255;
							var g = this2 >>> 8 & 255;
							var b = this2 & 255;
							a += ((toColor >>> 24 & 255) - a) * t | 0;
							r += ((toColor >>> 16 & 255) - r) * t | 0;
							g += ((toColor >>> 8 & 255) - g) * t | 0;
							b += ((toColor & 255) - b) * t | 0;
							tmp = a << 24 | r << 16 | g << 8 | b;
						}
						part.color = tmp;
					}
				}
			}
		}
		var _g = 0;
		var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.__partModifications[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(this1)];
		while(_g < _g1.length) {
			var mod = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = catalyst__$IngredientType_IngredientCatPart_$Impl_$.__parts[catalyst__$IngredientType_IngredientCatPart_$Impl_$.get___dataIndex(mod)];
			while(_g2 < _g3.length) {
				var part1 = _g3[_g2];
				++_g2;
				if(catalyst__$IngredientType_IngredientCatPart_$Impl_$.get_attachment(mod) == "" || catalyst__$IngredientType_IngredientCatPart_$Impl_$.get_attachment(mod) == null) {
					var _this1 = cat.parts;
					if(__map_reserved[part1] != null ? _this1.existsReserved(part1) : _this1.h.hasOwnProperty(part1)) {
						cat.parts.remove(part1);
					}
				} else {
					var tmp1;
					var _this2 = cat.parts;
					if(__map_reserved[part1] != null ? _this2.existsReserved(part1) : _this2.h.hasOwnProperty(part1)) {
						var _this3 = cat.parts;
						tmp1 = (__map_reserved[part1] != null ? _this3.getReserved(part1) : _this3.h[part1]).attachment != null;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						var _this4 = cat.parts;
						(__map_reserved[part1] != null ? _this4.getReserved(part1) : _this4.h[part1]).attachment = catalyst__$IngredientType_IngredientCatPart_$Impl_$.get_attachment(mod);
						if(catalyst__$CatPartType_CatPartType_$Impl_$.get_color(part1) != null) {
							var _this5 = cat.parts;
							var tmp2 = __map_reserved[part1] != null ? _this5.getReserved(part1) : _this5.h[part1];
							var _this6 = cat.parts;
							var this3 = (__map_reserved[part1] != null ? _this6.getReserved(part1) : _this6.h[part1]).color;
							var toColor1 = catalyst__$IngredientType_IngredientType_$Impl_$.get_color(this1);
							var t1 = Math.random();
							var tmp3;
							if(t1 <= 0) {
								tmp3 = this3;
							} else if(t1 >= 1) {
								tmp3 = toColor1;
							} else {
								var a1 = this3 >>> 24 & 255;
								var r1 = this3 >>> 16 & 255;
								var g1 = this3 >>> 8 & 255;
								var b1 = this3 & 255;
								a1 += ((toColor1 >>> 24 & 255) - a1) * t1 | 0;
								r1 += ((toColor1 >>> 16 & 255) - r1) * t1 | 0;
								g1 += ((toColor1 >>> 8 & 255) - g1) * t1 | 0;
								b1 += ((toColor1 & 255) - b1) * t1 | 0;
								tmp3 = a1 << 24 | r1 << 16 | g1 << 8 | b1;
							}
							tmp2.color = tmp3;
						}
					} else {
						var this4 = cat.parts;
						var v = { attachment : catalyst__$IngredientType_IngredientCatPart_$Impl_$.get_attachment(mod), color : catalyst__$IngredientType_IngredientType_$Impl_$.get_color(this1)};
						var _this7 = this4;
						if(__map_reserved[part1] != null) {
							_this7.setReserved(part1,v);
						} else {
							_this7.h[part1] = v;
						}
					}
				}
			}
		}
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get_dye = function(this1) {
	switch(this1) {
	case "coffee":
		return 0.25;
	case "apple":case "banana":case "boot":case "cherry":case "chives":case "elderberry":case "garlic":case "icecream":case "melon":case "newt":case "peanut":case "pepper":case "pumpkin":case "sugar":case "vanilla":
		return 0.2;
	default:
		return 0;
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "apple":
		return 6;
	case "banana":
		return 8;
	case "boot":
		return 15;
	case "cherry":
		return 7;
	case "chives":
		return 1;
	case "coffee":
		return 5;
	case "elderberry":
		return 3;
	case "garlic":
		return 0;
	case "icecream":
		return 14;
	case "melon":
		return 4;
	case "newt":
		return 11;
	case "peanut":
		return 13;
	case "pepper":
		return 2;
	case "pumpkin":
		return 12;
	case "sugar":
		return 10;
	case "vanilla":
		return 9;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get_rarity = function(this1) {
	switch(this1) {
	case "boot":
		return 5;
	case "icecream":case "melon":
		return 4;
	case "newt":case "sugar":case "vanilla":
		return 2;
	case "peanut":case "pumpkin":
		return 3;
	default:
		return 1;
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen = function(this1) {
	switch(this1) {
	case "boot":
		return 25;
	case "cherry":
		return 6;
	case "coffee":case "vanilla":
		return 10;
	case "elderberry":
		return 8;
	case "apple":case "chives":case "garlic":case "melon":
		return 5;
	case "newt":
		return 15;
	case "banana":case "pepper":
		return 7;
	case "icecream":case "peanut":case "pumpkin":
		return 20;
	case "sugar":
		return 12;
	default:
		return 0;
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "apple":
		return "Apple";
	case "banana":
		return "Banana";
	case "boot":
		return "Boot";
	case "cherry":
		return "Cherry";
	case "chives":
		return "Chives";
	case "coffee":
		return "Coffee";
	case "elderberry":
		return "Acai";
	case "garlic":
		return "Garlic";
	case "icecream":
		return "Ice Cream";
	case "melon":
		return "Melon";
	case "newt":
		return "Newt";
	case "peanut":
		return "Peanut";
	case "pepper":
		return "Pepper";
	case "pumpkin":
		return "Pumpkin";
	case "sugar":
		return "Sugar";
	case "vanilla":
		return "Vanilla";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$IngredientType_IngredientType_$Impl_$.get_color = function(this1) {
	switch(this1) {
	case "apple":
		return 16744576;
	case "banana":
		return 16768341;
	case "boot":
		return 13136183;
	case "cherry":
		return 11141120;
	case "chives":
		return 6717440;
	case "coffee":
		return 2627339;
	case "elderberry":
		return 5909664;
	case "garlic":
		return 9538159;
	case "icecream":
		return 16755404;
	case "melon":
		return 11195392;
	case "newt":
		return 4487201;
	case "peanut":
		return 13156023;
	case "pepper":
		return 16722474;
	case "pumpkin":
		return 16744234;
	case "sugar":
		return 15790320;
	case "vanilla":
		return 16774869;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$UpgradePhase_UpgradePhase_$Impl_$ = {};
$hxClasses["catalyst._UpgradePhase.UpgradePhase_Impl_"] = catalyst__$UpgradePhase_UpgradePhase_$Impl_$;
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.__name__ = ["catalyst","_UpgradePhase","UpgradePhase_Impl_"];
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.__properties__ = {get_work:"get_work",get_costGrowth:"get_costGrowth",get_unlock:"get_unlock",get_prestige:"get_prestige",get_parent:"get_parent",get_fame:"get_fame",get_divBy:"get_divBy",get_famePerLevel:"get_famePerLevel",get_maxPrestige:"get_maxPrestige",get_desc:"get_desc",get_name:"get_name",get_category:"get_category",get_baseCost:"get_baseCost",get_unlockLevel:"get_unlockLevel",get_maxLevel:"get_maxLevel",get_image:"get_image",get_perLevel:"get_perLevel",get_random:"get_random"};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription = function(this1,value) {
	var value1;
	if(catalyst__$UpgradeType_UpgradeType_$Impl_$.get_unit(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(this1)) == "min") {
		value1 = catalyst_GameData.formatTime(value * 60);
	} else {
		var this2 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(this1);
		value1 = catalyst_GameData.formatNumber(value,Std.string(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(this2)][0])).length - 1);
	}
	var unit = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_unit(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(this1));
	if(value1 == "1" && HxOverrides.substr(unit,unit.length - 1,null) == "s") {
		unit = HxOverrides.substr(unit,0,unit.length - 1);
	}
	switch(unit) {
	case "levels":
		return "Lv. " + value1;
	case "min":
		return "" + value1;
	default:
		return "" + value1 + "\t" + unit;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel = function(this1) {
	switch(this1) {
	case "cat_damage_base1":case "cat_damage_reduction_base1":case "cat_xp_base1":
		return 0;
	case "catnip_capacity1":
		return 50;
	case "catnip_capacity2":
		return 250;
	case "catnip_capacity4":case "food_capacity3":
		return 2500;
	case "cat_xp_rate1":case "catnip_production2":
		return 2;
	case "food_capacity1":
		return 500;
	case "catnip_capacity3":case "food_capacity2":
		return 1000;
	case "food_capacity4":
		return 5000;
	case "ingredient_hunting1":case "nap_xp_rate2":
		return 10;
	case "cat_capacity1":case "catnip_plants1":case "catnip_production1":case "fishing_poles1":case "fishing_speed1":case "initiative1":case "litter_size":case "max_found_ingredients1":case "max_freeze1":case "max_ingredients1":case "max_nap1":case "max_strays1":case "recovery1":case "work_gen_speed1":
		return 1;
	case "breed_max_level1":case "cat_xp_rate2":case "catnip_production3":case "gourmet_duration1":case "max_fish1":case "max_work1":case "nap_xp_rate1":
		return 5;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_image = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return "breed-upgrade";
	case "cat_capacity1":
		return "litterbox";
	case "cat_xp_rate1":
		return "cat-xp-rate";
	case "cat_xp_rate2":
		return "cat-xp-rate2";
	case "catnip_capacity1":
		return "catnip-sack";
	case "catnip_capacity2":
		return "catnip-sack2";
	case "catnip_capacity3":
		return "catnip-sack3";
	case "catnip_capacity4":
		return "catnip-sack4";
	case "catnip_plants1":
		return "catnip-plants";
	case "catnip_production1":
		return "catnip-production";
	case "catnip_production2":
		return "catnip-production2";
	case "catnip_production3":
		return "catnip-production3";
	case "fishing_poles1":
		return "fishing-pole-upgrade";
	case "fishing_speed1":
		return "fishing-speed";
	case "food_capacity1":
		return "cat-dish";
	case "food_capacity2":
		return "cat-dish2";
	case "food_capacity3":
		return "cat-dish3";
	case "food_capacity4":
		return "cat-dish4";
	case "gourmet_duration1":
		return "gourmet-duration";
	case "ingredient_hunting1":
		return "search-upgrade";
	case "initiative1":
		return "initiative-upgrade";
	case "litter_size":
		return "litter-size-upgrade";
	case "max_fish1":
		return "max-fish-upgrade";
	case "max_found_ingredients1":
		return "ingredient-pack";
	case "max_freeze1":
		return "cryo-upgrade";
	case "max_ingredients1":
		return "cauldron-upgrade";
	case "max_nap1":
		return "cat-bed-upgrade";
	case "max_strays1":
		return "stray-upgrade";
	case "max_work1":
		return "work-upgrade";
	case "nap_xp_rate1":
		return "nap-upgrade";
	case "nap_xp_rate2":
		return "nap-upgrade2";
	case "recovery1":
		return "bandaid";
	case "work_gen_speed1":
		return "treadmill-speed";
	default:
		return null;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return 17;
	case "cat_capacity1":
		return 13;
	case "cat_damage_base1":case "cat_damage_reduction_base1":case "cat_xp_base1":
		return 1;
	case "cat_xp_rate2":case "nap_xp_rate1":
		return 40;
	case "catnip_plants1":
		return 9;
	case "cat_xp_rate1":case "catnip_production3":
		return 50;
	case "fishing_poles1":
		return 2;
	case "fishing_speed1":case "ingredient_hunting1":
		return 16;
	case "gourmet_duration1":
		return 22;
	case "initiative1":case "max_strays1":
		return 10;
	case "litter_size":case "max_found_ingredients1":
		return 6;
	case "max_fish1":case "max_freeze1":case "recovery1":
		return 19;
	case "max_ingredients1":
		return 5;
	case "max_nap1":
		return 4;
	case "max_work1":
		return 18;
	case "nap_xp_rate2":
		return 25;
	case "work_gen_speed1":
		return 11;
	default:
		return 99;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel = function(this1) {
	switch(this1) {
	case "catnip_capacity2":case "food_capacity3":case "food_capacity4":
		return 15;
	case "catnip_capacity3":case "catnip_production3":
		return 25;
	case "catnip_capacity4":case "food_capacity2":
		return 20;
	case "catnip_production2":
		return 30;
	case "cat_xp_rate2":case "nap_xp_rate2":
		return 10;
	default:
		return 0;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_baseCost = function(this1) {
	switch(this1) {
	case "breed_max_level1":case "work_gen_speed1":
		return 2500;
	case "cat_damage_base1":case "cat_damage_reduction_base1":case "cat_xp_base1":
		return 0;
	case "cat_xp_rate2":
		return 2000;
	case "catnip_capacity1":
		return 40;
	case "catnip_capacity2":case "fishing_speed1":case "initiative1":case "max_ingredients1":
		return 250;
	case "catnip_capacity3":case "nap_xp_rate2":
		return 2250;
	case "catnip_capacity4":
		return 12000;
	case "catnip_production1":case "food_capacity1":
		return 50;
	case "catnip_production2":
		return 850;
	case "catnip_production3":
		return 7500;
	case "catnip_plants1":case "fishing_poles1":
		return 10000;
	case "food_capacity2":
		return 300;
	case "food_capacity3":
		return 1250;
	case "food_capacity4":
		return 4500;
	case "cat_xp_rate1":case "gourmet_duration1":case "ingredient_hunting1":case "max_fish1":case "max_freeze1":case "max_strays1":
		return 500;
	case "max_nap1":
		return 5000;
	case "cat_capacity1":case "litter_size":case "max_found_ingredients1":case "max_work1":
		return 1000;
	case "nap_xp_rate1":case "recovery1":
		return 750;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_category = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return "heart";
	case "cat_capacity1":case "litter_size":
		return "cat_upgrades";
	case "cat_damage_base1":case "cat_damage_reduction_base1":case "cat_xp_base1":
		return "misc";
	case "catnip_capacity1":case "catnip_capacity2":case "catnip_capacity3":case "catnip_capacity4":
		return "catnip_cap";
	case "catnip_plants1":case "catnip_production1":case "catnip_production2":case "catnip_production3":
		return "catnip_upgrades";
	case "fishing_poles1":case "fishing_speed1":case "max_fish1":
		return "fish";
	case "food_capacity1":case "food_capacity2":case "food_capacity3":case "food_capacity4":
		return "food_upgrades";
	case "cat_xp_rate1":case "cat_xp_rate2":case "gourmet_duration1":
		return "gourmet";
	case "ingredient_hunting1":case "max_found_ingredients1":case "max_ingredients1":
		return "potion";
	case "initiative1":case "recovery1":
		return "battle";
	case "max_freeze1":
		return "cryo";
	case "max_nap1":case "nap_xp_rate1":case "nap_xp_rate2":
		return "nap";
	case "max_strays1":
		return "stray";
	case "max_work1":
		return "work";
	case "work_gen_speed1":
		return "exercise";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return "Breed Max Level";
	case "cat_capacity1":
		return "Litterboxes";
	case "cat_damage_base1":
		return "Damage";
	case "cat_damage_reduction_base1":
		return "Damage Reduction";
	case "cat_xp_base1":
		return "Cat XP Growth";
	case "cat_xp_rate1":
		return "Seasoning";
	case "cat_xp_rate2":
		return "Nutrition";
	case "catnip_capacity1":
		return "Tiny Sacks";
	case "catnip_capacity2":
		return "Medium Sacks";
	case "catnip_capacity3":
		return "Large Sacks";
	case "catnip_capacity4":
		return "Jumbo Sacks";
	case "catnip_plants1":
		return "Catnip Plants";
	case "catnip_production1":
		return "Leaf Area";
	case "catnip_production2":
		return "Shears";
	case "catnip_production3":
		return "Fertilizer";
	case "fishing_poles1":
		return "Fishing Poles";
	case "fishing_speed1":
		return "Fishing Lure";
	case "food_capacity1":
		return "Snack Cup";
	case "food_capacity2":
		return "Dinner Dish";
	case "food_capacity3":
		return "Grub Tray";
	case "food_capacity4":
		return "Chow Bucket";
	case "gourmet_duration1":
		return "Reheater";
	case "ingredient_hunting1":
		return "Scavenging";
	case "initiative1":
		return "Initiative";
	case "litter_size":
		return "Kitten Litter Size";
	case "max_fish1":
		return "Max Fish";
	case "max_found_ingredients1":
		return "Backpack";
	case "max_freeze1":
		return "Cat Storage";
	case "max_ingredients1":
		return "Potion Technique";
	case "max_nap1":
		return "Cat Beds";
	case "max_strays1":
		return "Max Strays";
	case "max_work1":
		return "Work Conditions";
	case "nap_xp_rate1":
		return "Blankets";
	case "nap_xp_rate2":
		return "Pillows";
	case "recovery1":
		return "Bandage";
	case "work_gen_speed1":
		return "Treadmill Speed";
	default:
		return null;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_desc = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return "It's business time!";
	case "cat_capacity1":
		return "They're not willing to share.";
	case "cat_xp_rate1":
		return "A pinch of this, a dash of something else.";
	case "cat_xp_rate2":
		return "Made with all natural ingredients! Probably?";
	case "catnip_capacity1":
		return "More of a sandwich bag, really.";
	case "catnip_capacity2":
		return "There'll be a 5 cent charge for this bag.";
	case "catnip_capacity3":
		return "Maybe there's a better way to store this than ever-larger bags?";
	case "catnip_capacity4":
		return "Guess not, more bags it is then.";
	case "catnip_plants1":
		return "More plants, more catnip.";
	case "catnip_production1":
		return "More love in every leaf.";
	case "catnip_production2":
		return "Bonsaaaaaaai!";
	case "catnip_production3":
		return "Don't let your cat byproducts go to waste!";
	case "fishing_poles1":
		return "A couple cats catch copious coastal cod quickly.";
	case "fishing_speed1":
		return "Teach a cat to fish, and he'll never go hungry.";
	case "food_capacity1":
		return "Just the right size for a snack.";
	case "food_capacity2":
		return "A well-portioned meal.";
	case "food_capacity3":
		return "One side was meant for water, but we just put more food in.";
	case "food_capacity4":
		return "This is getting ridiculous.";
	case "gourmet_duration1":
		return "We'll keep it warm for you. (Requires a cat in the Cat Cafe)";
	case "ingredient_hunting1":
		return "Seriously, where do they find these things?";
	case "initiative1":
		return "Crouching kitty, hidden dragon.";
	case "litter_size":
		return "A labor of love.";
	case "max_fish1":
		return "Fish! Fresh fish!";
	case "max_found_ingredients1":
		return "Also has side pockets for water bottle and snack.";
	case "max_freeze1":
		return "They won't mind if it gets a little crowded.";
	case "max_ingredients1":
		return "Simmer at just the right heat...";
	case "max_nap1":
		return "Although it seems like they'll sleep anywhere...";
	case "max_strays1":
		return "Come on in, everyone!";
	case "max_work1":
		return "Healthcare, time off, 401k.";
	case "nap_xp_rate1":
		return "Purrfect for a quick nap.";
	case "nap_xp_rate2":
		return "Great for a prolonged snooze.";
	case "recovery1":
		return "Sometimes a boo-boo is only in the mind.";
	case "work_gen_speed1":
		return "No pain, no gain!";
	default:
		return null;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxPrestige = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return 3;
	case "cat_capacity1":
		return 1;
	case "catnip_plants1":
		return 4;
	case "max_nap1":
		return 2;
	case "cat_xp_rate1":case "cat_xp_rate2":case "catnip_capacity1":case "catnip_capacity2":case "catnip_capacity3":case "catnip_capacity4":case "catnip_production1":case "catnip_production2":case "catnip_production3":case "fishing_speed1":case "food_capacity1":case "food_capacity2":case "food_capacity3":case "food_capacity4":case "gourmet_duration1":case "ingredient_hunting1":case "initiative1":case "litter_size":case "max_fish1":case "max_work1":case "nap_xp_rate1":case "nap_xp_rate2":case "recovery1":case "work_gen_speed1":
		return 5;
	default:
		return 0;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return 10;
	case "cat_capacity1":case "catnip_plants1":
		return 20;
	case "catnip_capacity2":case "catnip_capacity3":case "catnip_capacity4":case "catnip_production2":case "catnip_production3":case "food_capacity2":case "food_capacity3":case "food_capacity4":
		return 1;
	case "cat_xp_rate1":case "cat_xp_rate2":case "fishing_speed1":case "nap_xp_rate1":case "nap_xp_rate2":
		return 2;
	case "max_nap1":
		return 25;
	case "recovery1":case "work_gen_speed1":
		return 5;
	default:
		return 0;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy = function(this1) {
	switch(this1) {
	case "catnip_production1":case "catnip_production2":case "catnip_production3":case "fishing_speed1":case "recovery1":case "work_gen_speed1":
		return 10;
	default:
		return 1;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame = function(this1) {
	switch(this1) {
	case "breed_max_level1":case "cat_xp_rate1":
		return 40;
	case "cat_capacity1":
		return -40;
	case "cat_xp_rate2":
		return 75;
	case "catnip_capacity2":
		return -10;
	case "catnip_capacity3":
		return 35;
	case "catnip_capacity4":
		return 85;
	case "catnip_plants1":
		return 0;
	case "catnip_production2":
		return 45;
	case "catnip_production3":
		return 80;
	case "fishing_poles1":
		return 90;
	case "fishing_speed1":case "food_capacity2":
		return 5;
	case "food_capacity3":
		return 15;
	case "food_capacity4":
		return 60;
	case "max_nap1":case "recovery1":
		return 25;
	case "nap_xp_rate1":case "work_gen_speed1":
		return 50;
	case "nap_xp_rate2":
		return 100;
	default:
		return 0;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent = function(this1) {
	switch(this1) {
	case "breed_max_level1":
		return "breed_max_level";
	case "cat_capacity1":
		return "cat_capacity";
	case "cat_damage_base1":
		return "cat_damage_base";
	case "cat_damage_reduction_base1":
		return "cat_damage_reduction_base";
	case "cat_xp_base1":
		return "cat_xp_base";
	case "cat_xp_rate1":case "cat_xp_rate2":
		return "cat_xp_rate";
	case "catnip_capacity1":case "catnip_capacity2":case "catnip_capacity3":case "catnip_capacity4":
		return "catnip_capacity";
	case "catnip_plants1":
		return "catnip_plants";
	case "catnip_production1":case "catnip_production2":case "catnip_production3":
		return "catnip_production";
	case "fishing_poles1":
		return "fishing_poles";
	case "fishing_speed1":
		return "fishing_speed";
	case "food_capacity1":case "food_capacity2":case "food_capacity3":case "food_capacity4":
		return "food_capacity";
	case "gourmet_duration1":
		return "gourmet_duration";
	case "ingredient_hunting1":
		return "ingredient_hunting";
	case "initiative1":
		return "initiative";
	case "litter_size":
		return "litter_size";
	case "max_fish1":
		return "max_fish";
	case "max_found_ingredients1":
		return "max_found_ingredients";
	case "max_freeze1":
		return "max_freeze";
	case "max_ingredients1":
		return "max_ingredients";
	case "max_nap1":
		return "max_nap";
	case "max_strays1":
		return "max_strays";
	case "max_work1":
		return "max_work";
	case "nap_xp_rate1":case "nap_xp_rate2":
		return "nap_xp_rate";
	case "recovery1":
		return "recovery";
	case "work_gen_speed1":
		return "work_gen_speed";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_prestige = function(this1) {
	switch(this1) {
	case "cat_xp_rate1":case "catnip_capacity1":case "catnip_capacity2":case "catnip_capacity3":case "catnip_capacity4":case "catnip_production1":case "catnip_production2":case "catnip_production3":case "food_capacity1":case "food_capacity2":case "food_capacity3":case "food_capacity4":case "recovery1":
		return 5;
	case "gourmet_duration1":
		return 6;
	case "breed_max_level1":case "cat_xp_rate2":case "ingredient_hunting1":case "nap_xp_rate1":case "nap_xp_rate2":
		return 2;
	case "cat_capacity1":case "catnip_plants1":case "fishing_speed1":case "initiative1":case "litter_size":case "max_fish1":case "max_nap1":case "max_work1":case "work_gen_speed1":
		return 1;
	default:
		return 0;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock = function(this1) {
	switch(this1) {
	case "cat_xp_rate2":
		return "cat_xp_rate1";
	case "catnip_capacity2":
		return "catnip_capacity1";
	case "catnip_capacity3":
		return "catnip_capacity2";
	case "catnip_capacity4":
		return "catnip_capacity3";
	case "catnip_production2":
		return "catnip_production1";
	case "catnip_production3":
		return "catnip_production2";
	case "food_capacity2":
		return "food_capacity1";
	case "food_capacity3":
		return "food_capacity2";
	case "food_capacity4":
		return "food_capacity3";
	case "nap_xp_rate2":
		return "nap_xp_rate1";
	default:
		return null;
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_costGrowth = function(this1) {
	switch(this1) {
	case "cat_capacity1":
		return 1.75;
	case "cat_damage_base1":case "cat_damage_reduction_base1":case "cat_xp_base1":
		return 0;
	case "cat_xp_rate2":case "food_capacity1":
		return 1.08;
	case "catnip_capacity1":case "catnip_capacity2":case "food_capacity3":
		return 1.07;
	case "catnip_capacity3":case "catnip_production3":
		return 1.065;
	case "catnip_capacity4":
		return 1.04;
	case "catnip_production1":
		return 1.09;
	case "fishing_speed1":
		return 1.35;
	case "catnip_production2":case "food_capacity2":
		return 1.075;
	case "food_capacity4":
		return 1.0575;
	case "cat_xp_rate1":case "gourmet_duration1":case "ingredient_hunting1":case "max_freeze1":case "nap_xp_rate1":
		return 1.1;
	case "fishing_poles1":case "max_fish1":
		return 1.15;
	case "max_found_ingredients1":
		return 1.2;
	case "max_ingredients1":
		return 4;
	case "catnip_plants1":case "initiative1":case "litter_size":case "max_nap1":
		return 2;
	case "max_strays1":case "work_gen_speed1":
		return 1.5;
	case "breed_max_level1":case "max_work1":
		return 1.25;
	case "nap_xp_rate2":
		return 1.125;
	case "recovery1":
		return 1.4;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work = function(this1) {
	switch(this1) {
	case "catnip_capacity1":case "catnip_production1":
		return 0;
	case "cat_xp_rate1":case "catnip_capacity2":case "food_capacity3":case "gourmet_duration1":case "ingredient_hunting1":case "initiative1":case "max_freeze1":case "nap_xp_rate1":
		return 1;
	case "fishing_speed1":
		return 4;
	case "catnip_capacity3":case "food_capacity4":
		return 3;
	case "cat_xp_rate2":case "catnip_production2":case "max_fish1":case "max_found_ingredients1":case "max_ingredients1":case "nap_xp_rate2":case "recovery1":
		return 2;
	case "breed_max_level1":case "cat_capacity1":case "catnip_capacity4":case "catnip_plants1":case "fishing_poles1":case "max_nap1":case "work_gen_speed1":
		return 10;
	case "catnip_production3":case "litter_size":case "max_strays1":case "max_work1":
		return 5;
	default:
		return 0;
	}
};
var catalyst_Lab = function(region,prestige) {
	if(prestige == null) {
		prestige = 0;
	}
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.nextEvent = 0;
	this.fastCatnip = false;
	this.techTime = 0;
	this.workTime = 0;
	this.fishTime = 0;
	this.strayCycle = 0;
	this.tech = 0;
	this.ingredientSearch = null;
	this.piety = 0;
	this.refillFoodWithFish = false;
	this.autoBreedTime = 0;
	this.autoBreedNextLevel = 0;
	this.autoBreedLevel = 0;
	this.fish = 0;
	this.catShow = null;
	this.fame = 0;
	this.work = 0;
	this.gourmetTime = 0;
	this.presentTime = 0;
	this.presentCount = 0;
	this.battle = null;
	this.battleLevel = 0;
	this.visibleRooms = new haxe_ds_StringMap();
	this.searchDuration = 0;
	this.searchTime = 0;
	this.trophies = catalyst__$Trophies_Trophies_$Impl_$._new();
	this.food = 0;
	this.catnip = 50;
	this.prestige = 0;
	this.region = region;
	this.prestige = prestige;
	this.cats = new catalyst_Cats();
	this.upgrades = catalyst__$Upgrades_Upgrades_$Impl_$._new();
	this.unlockedRooms = new haxe_ds_StringMap();
	this.currentRoom = "living_room";
	this.potion = new catalyst_Potion();
	this.potions = [];
	this.ingredients = new haxe_ds_StringMap();
	this.ingredientsSeen = new haxe_ds_StringMap();
	this.food = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_base("food_capacity") + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel(catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex("food_capacity")][0]);
	this.sharedInit();
	var _g1 = 0;
	var _g = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_strays",this.bonuses);
	while(_g1 < _g) {
		++_g1;
		this.pushStray();
	}
};
$hxClasses["catalyst.Lab"] = catalyst_Lab;
catalyst_Lab.__name__ = ["catalyst","Lab"];
catalyst_Lab.__interfaces__ = [hxbit_Serializable];
catalyst_Lab.prototype = {
	region: null
	,prestige: null
	,cats: null
	,_strays: null
	,catnip: null
	,food: null
	,upgrades: null
	,trophies: null
	,potion: null
	,potions: null
	,ingredients: null
	,ingredientsSeen: null
	,searchTime: null
	,searchDuration: null
	,currentRoom: null
	,unlockedRooms: null
	,visibleRooms: null
	,battleLevel: null
	,battle: null
	,presentCount: null
	,presentTime: null
	,gourmetTime: null
	,work: null
	,fame: null
	,catShow: null
	,fish: null
	,autoBreedLevel: null
	,autoBreedNextLevel: null
	,autoBreedTime: null
	,refillFoodWithFish: null
	,piety: null
	,ingredientSearch: null
	,tech: null
	,strayCycle: null
	,fishTime: null
	,workTime: null
	,techTime: null
	,bonuses: null
	,fastCatnip: null
	,sharedInit: function() {
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var tmp;
			if(room != "temple" && catalyst__$Room_Room_$Impl_$.get_unlockCost(room) == 0) {
				var _this = this.unlockedRooms;
				tmp = !(__map_reserved[room] != null ? _this.existsReserved(room) : _this.h.hasOwnProperty(room));
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this.unlockedRooms;
				if(__map_reserved[room] != null) {
					_this1.setReserved(room,true);
				} else {
					_this1.h[room] = true;
				}
			}
		}
		var _g2 = 0;
		var _g11 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered;
		while(_g2 < _g11.length) {
			var phase = _g11[_g2];
			++_g2;
			var tmp1;
			var _this2 = this.upgrades;
			if(!(__map_reserved[phase] != null ? _this2.existsReserved(phase) : _this2.h.hasOwnProperty(phase))) {
				tmp1 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase) == null;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				catalyst__$Upgrades_Upgrades_$Impl_$.set(this.upgrades,phase,1);
			}
		}
		var _g3 = 0;
		var _g12 = catalyst__$Room_Room_$Impl_$.containerRooms;
		while(_g3 < _g12.length) {
			var room1 = _g12[_g3];
			++_g3;
			var _this3 = this.cats.cats;
			if(!(__map_reserved[room1] != null ? _this3.existsReserved(room1) : _this3.h.hasOwnProperty(room1))) {
				var this1 = this.cats.cats;
				var v = [];
				var _this4 = this1;
				if(__map_reserved[room1] != null) {
					_this4.setReserved(room1,v);
				} else {
					_this4.h[room1] = v;
				}
			}
		}
		this.bonuses = new catalyst_BonusCollections(this.cats,this.trophies);
	}
	,update: function(elapsed) {
		if(elapsed > 1) {
			this.doLongUpdate(elapsed);
		} else if(elapsed > 0) {
			this.doUpdate(elapsed);
		}
	}
	,nextEvent: null
	,doLongUpdate: function(elapsed) {
		while(elapsed > 0) {
			this.nextEvent = elapsed;
			if(this.gourmetTime > 0 && this.gourmetTime < elapsed) {
				var f = 1 - this.gourmetTime;
				var f1;
				var f2;
				var _this = this.cats;
				var room = "cat_cafe";
				if((_this.cats.get(room).length > 0 ? _this.cats.get(room)[0] : null) != null) {
					f2 = this.food > 0;
				} else {
					f2 = false;
				}
				if(f2) {
					var _this1 = catalyst_GameData.get_current();
					var _this2 = _this1.labs.get(_this1.currentRegion);
					var f3 = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this2.upgrades,"gourmet_duration",_this2.bonuses) * 60;
					var _this3 = this.cats;
					var room1 = "cat_cafe";
					f1 = f3 + (_this3.cats.get(room1).length > 0 ? _this3.cats.get(room1)[0] : null).level * 30;
				} else {
					f1 = 600;
				}
				this.nextEvent = Math.min(this.nextEvent,f * f1);
			}
			var _this4 = this.cats;
			var count = 0;
			var _g = 0;
			var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
			while(_g < _g1.length) {
				var room2 = _g1[_g];
				++_g;
				count += _this4.cats.get(room2).length;
			}
			var totalFoodNeeded = count;
			if(this.food > 0 && totalFoodNeeded > 0) {
				this.nextEvent = Math.min(this.nextEvent,this.food / totalFoodNeeded);
			}
			var tmp;
			var tmp1;
			var _this5 = this.cats;
			var room3 = "fishing_hole";
			if((_this5.cats.get(room3).length > 0 ? _this5.cats.get(room3)[0] : null) != null) {
				tmp1 = this.food > 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				tmp = this.fish < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_fish",this.bonuses);
			} else {
				tmp = false;
			}
			if(tmp) {
				var f4 = 1 - this.fishTime;
				var f5;
				var _this6 = this.cats;
				var room4 = "fishing_hole";
				if((_this6.cats.get(room4).length > 0 ? _this6.cats.get(room4)[0] : null) == null) {
					f5 = 0;
				} else {
					var fishSpeed = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(this.upgrades,"fishing_speed",this.bonuses) / 60;
					var mult = 0;
					var _g2 = 0;
					var _g11 = this.cats.cats.get("fishing_hole");
					while(_g2 < _g11.length) {
						var cat = _g11[_g2];
						++_g2;
						mult += 1 + cat.level / 100;
					}
					f5 = fishSpeed * mult;
				}
				this.nextEvent = Math.min(this.nextEvent,f4 / f5);
			}
			var bonusLevel = this.catBonusLevel("travel_agency") - (100 + 5 * this.tech);
			if((bonusLevel <= 0 ? 0 : (1 + bonusLevel / 100) / 86400) > 0) {
				var f6 = 1 - this.techTime;
				var bonusLevel1 = this.catBonusLevel("travel_agency") - (100 + 5 * this.tech);
				this.nextEvent = Math.min(this.nextEvent,f6 / (bonusLevel1 <= 0 ? 0 : (1 + bonusLevel1 / 100) / 86400));
			}
			if(this.autoBreedNextLevel > 0 && this.autoBreedLevel < this.autoBreedNextLevel) {
				if(this.fish >= 5 + (this.autoBreedNextLevel / 5 | 0)) {
					this.nextEvent = Math.min(this.nextEvent,(1 - this.autoBreedTime) * 150);
				}
			}
			if(this.cats.cats.get("backyard").length < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_strays",this.bonuses)) {
				this.nextEvent = Math.min(this.nextEvent,180 * (1 - this.strayCycle));
			}
			if(this.ingredientSearch != null) {
				var timeToFind = this.ingredientSearch.get_timeToFind();
				if(timeToFind > 0) {
					this.nextEvent = Math.min(this.nextEvent,timeToFind);
				}
			}
			var t = this.nextEvent + 0.0001;
			if(t < 1) {
				t = 1;
			}
			this.doUpdate(t);
			elapsed -= t;
		}
	}
	,doUpdate: function(elapsed) {
		var _this = this.cats;
		var count = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			count += _this.cats.get(room).length;
		}
		var remFood = this.consumeFood(elapsed * count);
		var previousCatnip = this.catnip;
		var catnipCapacity = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"catnip_capacity",this.bonuses);
		if(this.catnip < catnipCapacity) {
			this.addCatnip((this.catBonusLevel("plant_lab") / 10 + catalyst__$Upgrades_Upgrades_$Impl_$.getValue(this.upgrades,"catnip_production",this.bonuses)) * catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"catnip_plants",this.bonuses) * elapsed * (this.fastCatnip ? 1.5 : 1));
		}
		catalyst_GameData.catnipThisUpdate += this.catnip - previousCatnip | 0;
		this.strayCycle += elapsed / 180;
		if(this.currentRoom != "backyard") {
			this.updateStrays();
		}
		var _g2 = 0;
		var _g11 = catalyst__$Room_Room_$Impl_$.updateRooms;
		while(_g2 < _g11.length) {
			var room1 = _g11[_g2];
			++_g2;
			var cats = this.cats.cats.get(room1);
			var _g3 = 0;
			while(_g3 < cats.length) {
				var cat = cats[_g3];
				++_g3;
				var previousXp = cat.xp;
				var previousLv = cat.level;
				cat.update(elapsed,remFood);
				catalyst_GameData.xpThisUpdate += cat.xp - previousXp | 0;
				catalyst_GameData.lvThisUpdate += cat.level - previousLv;
			}
		}
		var _g4 = 0;
		var _g12 = this.cats.cats.get("backyard");
		while(_g4 < _g12.length) {
			var cat1 = _g12[_g4];
			++_g4;
			cat1.update(elapsed);
		}
		if(this.presentTime < 1) {
			this.presentTime += elapsed / (Math.min(14400,600 * Math.pow(1.2,this.presentCount)) / (1 + this.catBonusLevel("gift_room") / 100));
			if(this.presentTime > 1) {
				this.presentTime = 1;
			}
		}
		var tmp;
		var _this1 = this.cats;
		var room2 = "potion_lab";
		if((_this1.cats.get(room2).length > 0 ? _this1.cats.get(room2)[0] : null) != null) {
			tmp = this.food > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.ingredientSearch == null) {
				this.ingredientSearch = new catalyst_IngredientSearch();
			}
			this.ingredientSearch.update(elapsed);
		}
		if(this.gourmetTime > 0) {
			var tmp1 = this;
			var tmp2 = tmp1.gourmetTime;
			var tmp3;
			var tmp4;
			var _this2 = this.cats;
			var room3 = "cat_cafe";
			if((_this2.cats.get(room3).length > 0 ? _this2.cats.get(room3)[0] : null) != null) {
				tmp4 = this.food > 0;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				var _this3 = catalyst_GameData.get_current();
				var _this4 = _this3.labs.get(_this3.currentRegion);
				var tmp5 = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this4.upgrades,"gourmet_duration",_this4.bonuses) * 60;
				var _this5 = this.cats;
				var room4 = "cat_cafe";
				tmp3 = tmp5 + (_this5.cats.get(room4).length > 0 ? _this5.cats.get(room4)[0] : null).level * 30;
			} else {
				tmp3 = 600;
			}
			tmp1.gourmetTime = tmp2 - elapsed / tmp3;
			if(this.gourmetTime < 0) {
				this.gourmetTime = 0;
			}
		}
		var tmp6;
		var _this6 = this.cats;
		var room5 = "fishing_hole";
		if((_this6.cats.get(room5).length > 0 ? _this6.cats.get(room5)[0] : null) != null) {
			tmp6 = this.food <= 0;
		} else {
			tmp6 = true;
		}
		if(tmp6) {
			this.fishTime = 0;
		} else {
			var tmp7 = this;
			var tmp8 = tmp7.fishTime;
			var tmp9;
			var _this7 = this.cats;
			var room6 = "fishing_hole";
			if((_this7.cats.get(room6).length > 0 ? _this7.cats.get(room6)[0] : null) == null) {
				tmp9 = 0;
			} else {
				var fishSpeed = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(this.upgrades,"fishing_speed",this.bonuses) / 60;
				var mult = 0;
				var _g5 = 0;
				var _g13 = this.cats.cats.get("fishing_hole");
				while(_g5 < _g13.length) {
					var cat2 = _g13[_g5];
					++_g5;
					mult += 1 + cat2.level / 100;
				}
				tmp9 = fishSpeed * mult;
			}
			tmp7.fishTime = tmp8 + elapsed * tmp9;
			var maxFish = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_fish",this.bonuses);
			while(this.fishTime >= 1) {
				++this.fish;
				if(this.fish <= maxFish) {
					++catalyst_GameData.fishThisUpdate;
				}
				--this.fishTime;
			}
			if(this.fish > maxFish) {
				this.fish = maxFish;
			}
		}
		if(remFood <= 0 && this.refillFoodWithFish && this.fish > 0) {
			--this.fish;
			this.food += 60;
		}
		var bonusLevel = this.catBonusLevel("travel_agency") - (100 + 5 * this.tech);
		if((bonusLevel <= 0 ? 0 : (1 + bonusLevel / 100) / 86400) > 0) {
			var tmp10 = this;
			var tmp11 = tmp10.techTime;
			var bonusLevel1 = this.catBonusLevel("travel_agency") - (100 + 5 * this.tech);
			tmp10.techTime = tmp11 + (bonusLevel1 <= 0 ? 0 : (1 + bonusLevel1 / 100) / 86400) * elapsed;
		}
		var tmp12;
		var _this8 = this.cats;
		var room7 = "exercise_room";
		if((_this8.cats.get(room7).length > 0 ? _this8.cats.get(room7)[0] : null) != null) {
			tmp12 = this.food <= 0;
		} else {
			tmp12 = true;
		}
		if(tmp12) {
			this.workTime = 0;
		} else {
			var tmp13 = this;
			var tmp14 = tmp13.workTime;
			var tmp15;
			if(this.catBonusLevel("exercise_room") <= 0) {
				tmp15 = 0;
			} else {
				var fishSpeed1 = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(this.upgrades,"work_gen_speed",this.bonuses) / 60;
				var mult1 = 0;
				var _g6 = 0;
				var _g14 = this.cats.cats.get("exercise_room");
				while(_g6 < _g14.length) {
					var cat3 = _g14[_g6];
					++_g6;
					mult1 += 1 + cat3.level / 100;
				}
				tmp15 = fishSpeed1 * mult1;
			}
			tmp13.workTime = tmp14 + elapsed * tmp15;
			var maxWork = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_work",this.bonuses);
			while(this.workTime >= 1) {
				++this.work;
				if(this.work <= maxWork) {
					++catalyst_GameData.workThisUpdate;
				}
				--this.workTime;
			}
			if(this.work > maxWork) {
				this.work = maxWork;
			}
		}
		if(this.autoBreedNextLevel > 0 && this.food > 0) {
			if(this.cats.cats.get("breeding_room").length < 2) {
				var next = null;
				var _g7 = 0;
				var _g15 = this.cats.cats.get("backyard");
				while(_g7 < _g15.length) {
					var stray = _g15[_g7];
					++_g7;
					if(this.cats.cats.get("breeding_room").length == 0 || stray.sex != this.cats.cats.get("breeding_room")[0].sex) {
						next = stray;
						break;
					}
				}
				if(next != null) {
					HxOverrides.remove(this.cats.cats.get("backyard"),next);
					this.cats.cats.get("breeding_room").push(next);
				}
			} else {
				this.autoBreedTime += elapsed / 150;
				if(this.autoBreedTime >= 1) {
					if(this.autoBreedLevel < this.autoBreedNextLevel) {
						this.cycleAutoBreed();
					}
					var maxLv = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"breed_max_level",this.bonuses);
					if(this.autoBreedNextLevel < maxLv && this.fish >= 5 + (this.autoBreedNextLevel / 5 | 0)) {
						this.fish -= 5 + (this.autoBreedNextLevel / 5 | 0);
						this.autoBreedNextLevel += 5;
						this.autoBreedTime = 0;
						catalyst_GameData.get_current().save();
					}
				}
			}
		}
	}
	,catBonusLevel: function(room) {
		var cat;
		if(this.food > 0) {
			var _this = this.cats;
			if(_this.cats.get(room).length > 0) {
				cat = _this.cats.get(room)[0];
			} else {
				cat = null;
			}
		} else {
			cat = null;
		}
		if(cat == null) {
			return 0;
		} else {
			return cat.level;
		}
	}
	,addCatnip: function(amt) {
		var catnipCapacity = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"catnip_capacity",this.bonuses);
		this.catnip += amt;
		if(this.catnip < 0) {
			this.catnip = 0;
		}
		if(this.catnip > catnipCapacity) {
			this.catnip = catnipCapacity;
		}
	}
	,addPiety: function(amt) {
		var tmp = this;
		if((tmp.piety += amt) > 100000) {
			this.piety = 100000;
		}
	}
	,validate: function() {
		if(catalyst__$Room_Room_$Impl_$.ordered.indexOf(this.currentRoom) == -1) {
			this.currentRoom = catalyst__$Room_Room_$Impl_$.ordered[0];
		}
	}
	,refillFood: function() {
		this.food = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"food_capacity",this.bonuses);
		catalyst_GameData.get_current().save();
	}
	,consumeFood: function(amt) {
		var rem = amt == 0 ? 1 : Math.min(this.food / amt,1);
		this.food -= amt;
		if(this.food < 0) {
			this.food = 0;
		}
		return rem;
	}
	,upgrade: function(phase) {
		var this1 = this.upgrades;
		var lv;
		var _this = this1;
		if(__map_reserved[phase] != null ? _this.existsReserved(phase) : _this.h.hasOwnProperty(phase)) {
			var _this1 = this1;
			lv = __map_reserved[phase] != null ? _this1.getReserved(phase) : _this1.h[phase];
		} else {
			lv = 0;
		}
		if(lv < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase)) {
			var cost = catalyst__$Upgrades_Upgrades_$Impl_$.getCost(this.upgrades,phase,this.prestige,this.bonuses);
			var workCost = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase);
			if(this.catnip >= cost && this.work >= workCost) {
				this.catnip -= cost;
				this.work -= workCost;
				catalyst__$Upgrades_Upgrades_$Impl_$.upgrade(this.upgrades,phase);
				var this2 = this.upgrades;
				var tmp;
				var _this2 = this2;
				if(__map_reserved[phase] != null ? _this2.existsReserved(phase) : _this2.h.hasOwnProperty(phase)) {
					var _this3 = this2;
					tmp = __map_reserved[phase] != null ? _this3.getReserved(phase) : _this3.h[phase];
				} else {
					tmp = 0;
				}
				this.event("upgrade_level",tmp);
				return true;
			}
		}
		return false;
	}
	,event: function(type,value) {
		var _gthis = this;
		catalyst__$Trophies_Trophies_$Impl_$.event(this.trophies,type,value,function(lv) {
			var popup = catalyst_PopupType.Trophy(type,lv);
			catalyst_GameData.get_current().popups.push(popup);
			var this1 = _gthis.trophies;
			var l = 0;
			var _g = 0;
			var _g1 = catalyst__$Trophy_Trophy_$Impl_$.ordered;
			while(_g < _g1.length) {
				var type1 = _g1[_g];
				++_g;
				l += catalyst__$Trophies_Trophies_$Impl_$.get(this1,type1);
			}
			_gthis.event("trophies",l);
		});
	}
	,addIngredient: function(type) {
		var _this = this.ingredients;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var _this1 = this.ingredients;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,0);
			} else {
				_this1.h[type] = 0;
			}
		}
		var _this2 = this.ingredients;
		var v = (__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]) + 1;
		var _this3 = this.ingredients;
		if(__map_reserved[type] != null) {
			_this3.setReserved(type,v);
		} else {
			_this3.h[type] = v;
		}
		if(v > 99) {
			var _this4 = this.ingredients;
			if(__map_reserved[type] != null) {
				_this4.setReserved(type,99);
			} else {
				_this4.h[type] = 99;
			}
		}
		var isNew;
		var _this5 = this.ingredientsSeen;
		if(__map_reserved[type] != null ? _this5.existsReserved(type) : _this5.h.hasOwnProperty(type)) {
			var _this6 = this.ingredientsSeen;
			if(__map_reserved[type] != null) {
				isNew = _this6.getReserved(type);
			} else {
				isNew = _this6.h[type];
			}
		} else {
			isNew = false;
		}
		var isNew1 = !isNew;
		var _this7 = this.ingredientsSeen;
		if(__map_reserved[type] != null) {
			_this7.setReserved(type,true);
		} else {
			_this7.h[type] = true;
		}
		var totalIngredients = 0;
		var _g = 0;
		var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var type1 = _g1[_g];
			++_g;
			var tmp;
			var _this8 = this.ingredients;
			if(__map_reserved[type1] != null ? _this8.existsReserved(type1) : _this8.h.hasOwnProperty(type1)) {
				var _this9 = this.ingredients;
				tmp = (__map_reserved[type1] != null ? _this9.getReserved(type1) : _this9.h[type1]) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				++totalIngredients;
			}
		}
		this.event("ingredients",totalIngredients);
		catalyst_GameData.get_current().save();
		return isNew1;
	}
	,removeIngredient: function(type) {
		var _this = this.ingredients;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _this1 = this.ingredients;
			var v = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]) - 1;
			var _this2 = this.ingredients;
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,v);
			} else {
				_this2.h[type] = v;
			}
			if(v <= 0) {
				this.ingredients.remove(type);
				catalyst_GameData.get_current().save();
			}
		}
	}
	,finishSearch: function(force) {
		if(force == null) {
			force = false;
		}
		var tmp;
		var tmp1;
		var _this = this.cats;
		var room = "potion_lab";
		if((_this.cats.get(room).length > 0 ? _this.cats.get(room)[0] : null) != null) {
			tmp1 = this.ingredientSearch != null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.ingredientSearch.ingredients.length > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.cats;
			var room1 = "potion_lab";
			var searchingCat = _this1.cats.get(room1).length > 0 ? _this1.cats.get(room1)[0] : null;
			var newIngredients = this.ingredientSearch.ingredients;
			var _g = 0;
			while(_g < newIngredients.length) {
				var ingredient = newIngredients[_g];
				++_g;
				this.addIngredient(ingredient);
			}
			var popup = catalyst_PopupType.SearchResult(searchingCat,newIngredients.slice());
			catalyst_GameData.get_current().popups.push(popup);
			this.ingredientSearch.finish();
			catalyst_GameData.get_current().save();
		} else if(force) {
			this.ingredientSearch.finish();
			catalyst_GameData.get_current().save();
		}
	}
	,finishTech: function() {
		catalyst_GameData.get_current().popups.push(catalyst_PopupType.Tech);
		this.tech += 5;
		this.techTime = 0;
		catalyst_GameData.get_current().save();
	}
	,dismiss: function(cat) {
		this.updateStrays();
		cat.dismiss();
		this.cats.move(cat,"backyard");
		catalyst_GameData.get_current().save();
	}
	,addCatToBattle: function(cat) {
		this.battle.addCat(cat);
		catalyst_GameData.get_current().save();
	}
	,unlockRoom: function(room) {
		this.catnip -= catalyst__$Room_Room_$Impl_$.get_unlockCost(room);
		this.work -= catalyst__$Room_Room_$Impl_$.get_unlockWork(room);
		var _this = this.unlockedRooms;
		if(__map_reserved[room] != null) {
			_this.setReserved(room,true);
		} else {
			_this.h[room] = true;
		}
		catalyst_GameData.get_current().save();
		var totalRooms = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room1 = _g1[_g];
			++_g;
			var tmp;
			var _this1 = this.unlockedRooms;
			if(__map_reserved[room1] != null ? _this1.existsReserved(room1) : _this1.h.hasOwnProperty(room1)) {
				var _this2 = this.unlockedRooms;
				if(__map_reserved[room1] != null) {
					tmp = _this2.getReserved(room1);
				} else {
					tmp = _this2.h[room1];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				++totalRooms;
			}
		}
		this.event("rooms",totalRooms);
	}
	,pushStray: function() {
		var tmp = this.cats.cats.get("backyard");
		var stray = catalyst_Cat.ancestral(this.cats.cats.get("backyard").length > 0 ? !this.cats.cats.get("backyard")[this.cats.cats.get("backyard").length - 1].sex : catalyst__$Sex_Sex_$Impl_$.random(),10);
		var tmp1 = Math.random();
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g = 0;
			while(_g < 500) {
				var i = _g++;
				if(i == 0) {
					catalyst_XP.xpTotals[i] = 60;
				} else {
					var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
					if(i > 50) {
						newTotal *= Math.pow(1.09,i - 50);
					}
					catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
				}
			}
		}
		stray.xp = tmp1 * catalyst_XP.xpTotals[0] / 2;
		tmp.push(stray);
	}
	,updateStrays: function() {
		if(this.strayCycle >= 1) {
			var maxStrays = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_strays",this.bonuses);
			var maxAdd = this.strayCycle | 0;
			var maxSub = this.strayCycle - Math.max(0,maxStrays - this.cats.cats.get("backyard").length) | 0;
			while(this.cats.cats.get("backyard").length > 0 && --maxSub >= 0) this.cats.cats.get("backyard").shift();
			while(this.cats.cats.get("backyard").length < maxStrays && --maxAdd >= 0) this.pushStray();
			this.strayCycle %= 1;
		}
	}
	,checkBattle: function() {
		if(this.battle == null) {
			var next = catalyst__$BattleData_BattleData_$Impl_$.next();
			if(next != null) {
				this.battle = new catalyst_Battle(next);
				catalyst_GameData.get_current().save();
			}
		}
	}
	,finishBattle: function() {
		if(this.battle != null) {
			this.battle = null;
			catalyst_GameData.get_current().save();
		}
	}
	,bless: function(cat) {
		var tmp = this;
		var tmp1 = tmp.piety;
		var tmp2;
		var cat1 = cat.level;
		var cat2 = cat._maxLevel;
		var x;
		if(cat.wild) {
			x = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x = _this.labs.get(_this.currentRegion).tech / 100;
		}
		if(cat1 < (cat2 * (1 + x) | 0)) {
			tmp2 = -1;
		} else {
			var cat3 = cat._maxLevel;
			var x1;
			if(cat.wild) {
				x1 = 0;
			} else {
				var _this1 = catalyst_GameData.get_current();
				x1 = _this1.labs.get(_this1.currentRegion).tech / 100;
			}
			var cat4 = cat._maxLevel;
			var x2;
			if(cat.wild) {
				x2 = 0;
			} else {
				var _this2 = catalyst_GameData.get_current();
				x2 = _this2.labs.get(_this2.currentRegion).tech / 100;
			}
			tmp2 = (cat3 * (1 + x1) | 0) * (cat4 * (1 + x2) | 0);
		}
		tmp.piety = tmp1 - tmp2;
		if(this.piety < 0) {
			this.piety = 0;
		}
		cat.bless();
		catalyst_GameData.get_current().save();
	}
	,doWork: function(cat) {
		this.cats.place(cat,"workshop");
		this.work += cat.level;
		var maxWork = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"max_work",this.bonuses);
		if(this.work > maxWork) {
			this.work = maxWork;
		}
		catalyst_GameData.get_current().save();
	}
	,openGift: function(free) {
		if(free == null) {
			free = true;
		}
		if(free) {
			++this.presentCount;
			this.presentTime = 0;
		}
		var result = null;
		var tries = 0;
		while(result == null && tries++ < 20) result = catalyst__$Gift_Gift_$Impl_$.award(catalyst__$Gift_Gift_$Impl_$.random(),this);
		if(result == null) {
			result = "<red>...nothing...</red> it's empty?";
		}
		catalyst_GameData.get_current().popups.push(catalyst_PopupType.Message("<center>Your <gift-icon/><blue>gift</blue> contained:\n\n" + result + "</center>"));
		catalyst_GameData.get_current().save();
		return result;
	}
	,startCatShow: function(cat) {
		this.catShow = new catalyst_CatShow();
		this.catShow.start(cat);
		catalyst_GameData.get_current().save();
		return this.catShow;
	}
	,finishCatShow: function() {
		var fame = this.catShow.fame;
		var record = fame > this.fame;
		this.fame = Math.max(fame,this.fame) | 0;
		if(fame > 250) {
			fame = 250;
		}
		this.catShow = null;
		var c = fame == 0 ? "red" : "green";
		catalyst_GameData.get_current().popups.push(catalyst_PopupType.Message("<center><blue>Finished!</blue>\n\n<star/>Final Score<star/>\n<ribbon-icon/> <" + c + ">" + fame + "</" + c + ">\n\n" + (fame == 0 ? "<red>Better luck next time...</red>" : record ? "<green>New record!</green>" : "Not bad, but not your best.") + "</center>"));
		catalyst_Sound.sfxQueue.push(fame == 0 ? "defeated" : "applause");
		catalyst_Sound.volumeQueue.push(1);
		this.event("fame",this.fame);
		var _this = this.cats;
		var room = "fairgrounds";
		if((_this.cats.get(room).length > 0 ? _this.cats.get(room)[0] : null) != null) {
			var _this1 = this.cats;
			var room1 = "fairgrounds";
			this.cats.move(_this1.cats.get(room1).length > 0 ? _this1.cats.get(room1)[0] : null,"living_room");
		}
		return fame;
	}
	,pressCatnipButton: function() {
		catalyst_Sound.sfxQueue.push("upgrade");
		catalyst_Sound.volumeQueue.push(1);
		this.fastCatnip = true;
	}
	,releaseCatnipButton: function() {
		if(this.fastCatnip) {
			catalyst_Sound.sfxQueue.push("upgrade");
			catalyst_Sound.volumeQueue.push(1);
			this.fastCatnip = false;
			catalyst_GameData.get_current().save();
		}
	}
	,startAutoBreed: function() {
		this.autoBreedLevel = 0;
		this.autoBreedNextLevel = 15;
		this.autoBreedTime = 0;
		catalyst_GameData.get_current().save();
	}
	,finishAutoBreed: function() {
		var _gthis = this;
		var c1;
		if(this.cats.cats.get("breeding_room").length > 0) {
			c1 = this.cats.cats.get("breeding_room")[0];
		} else {
			var stray = catalyst_Cat.ancestral(this.cats.cats.get("backyard").length > 0 ? !this.cats.cats.get("backyard")[this.cats.cats.get("backyard").length - 1].sex : catalyst__$Sex_Sex_$Impl_$.random(),10);
			var c11 = Math.random();
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g = 0;
				while(_g < 500) {
					var i = _g++;
					if(i == 0) {
						catalyst_XP.xpTotals[i] = 60;
					} else {
						var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
						if(i > 50) {
							newTotal *= Math.pow(1.09,i - 50);
						}
						catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
					}
				}
			}
			stray.xp = c11 * catalyst_XP.xpTotals[0] / 2;
			c1 = stray;
		}
		var c2;
		if(this.cats.cats.get("breeding_room").length > 1) {
			c2 = this.cats.cats.get("breeding_room")[1];
		} else {
			var stray1 = catalyst_Cat.ancestral(this.cats.cats.get("backyard").length > 0 ? !this.cats.cats.get("backyard")[this.cats.cats.get("backyard").length - 1].sex : catalyst__$Sex_Sex_$Impl_$.random(),10);
			var c21 = Math.random();
			if(catalyst_XP.xpTotals == null) {
				catalyst_XP.xpTotals = new Array(500);
				var _g1 = 0;
				while(_g1 < 500) {
					var i1 = _g1++;
					if(i1 == 0) {
						catalyst_XP.xpTotals[i1] = 60;
					} else {
						var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
						if(i1 > 50) {
							newTotal1 *= Math.pow(1.09,i1 - 50);
						}
						catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
					}
				}
			}
			stray1.xp = c21 * catalyst_XP.xpTotals[0] / 2;
			c2 = stray1;
		}
		var _g2 = [];
		var _g21 = 0;
		var _g11 = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"litter_size",this.bonuses);
		while(_g21 < _g11) {
			_g21++;
			var child = catalyst_Cat.breed(c1,c2,_gthis.autoBreedLevel);
			child.generation = 1;
			_g2.push(child);
		}
		return _g2;
	}
	,abortAutoBreed: function() {
		this.autoBreedTime = this.autoBreedLevel = this.autoBreedNextLevel = 0;
		while(this.cats.cats.get("breeding_room").length > 0) this.cats.cats.get("breeding_room").pop();
		catalyst_GameData.get_current().save();
	}
	,cycleAutoBreed: function() {
		this.autoBreedLevel = this.autoBreedNextLevel;
		var tmp = this.cats.cats.get("breeding_room");
		var child = catalyst_Cat.breed(this.cats.cats.get("breeding_room").pop(),this.cats.cats.get("breeding_room").pop());
		child._maxLevel = this.autoBreedLevel - 5;
		tmp.push(child);
	}
	,roomVisible: function(room) {
		var tmp;
		var _this = this.unlockedRooms;
		if(!(__map_reserved[room] != null ? _this.existsReserved(room) : _this.h.hasOwnProperty(room))) {
			var _this1 = this.visibleRooms;
			if(__map_reserved[room] != null) {
				tmp = _this1.existsReserved(room);
			} else {
				tmp = _this1.h.hasOwnProperty(room);
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return true;
		}
		var visible;
		if(catalyst__$Room_Room_$Impl_$.get_enabled(room)) {
			switch(room) {
			case "breeding_room":
				var _this2 = this.cats;
				var maxLevel = 0;
				var _g = 0;
				var _g1 = catalyst__$Room_Room_$Impl_$.containerRooms;
				while(_g < _g1.length) {
					var room1 = _g1[_g];
					++_g;
					var _g2 = 0;
					var _g3 = _this2.cats.get(room1);
					while(_g2 < _g3.length) {
						var cat = _g3[_g2];
						++_g2;
						if(cat.level > maxLevel) {
							maxLevel = cat.level;
						}
					}
				}
				if(maxLevel >= 20) {
					visible = this.fish >= 10;
				} else {
					visible = false;
				}
				break;
			case "cat_cafe":
				var _this3 = this.cats;
				var maxLevel1 = 0;
				var _g4 = 0;
				var _g11 = catalyst__$Room_Room_$Impl_$.containerRooms;
				while(_g4 < _g11.length) {
					var room2 = _g11[_g4];
					++_g4;
					var _g21 = 0;
					var _g31 = _this3.cats.get(room2);
					while(_g21 < _g31.length) {
						var cat1 = _g31[_g21];
						++_g21;
						if(cat1.level > maxLevel1) {
							maxLevel1 = cat1.level;
						}
					}
				}
				if(maxLevel1 >= 25) {
					visible = this.fish >= 5;
				} else {
					visible = false;
				}
				break;
			case "coliseum":
				visible = this.fame >= 20;
				break;
			case "cryo_lab":
				visible = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"cat_capacity",this.bonuses) >= 6;
				break;
			case "exercise_room":
				var totalWork = 0;
				var _g5 = 0;
				var _g12 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered;
				while(_g5 < _g12.length) {
					var phase = _g12[_g5];
					++_g5;
					var this1 = this.upgrades;
					var x;
					var _this4 = this1;
					if(__map_reserved[phase] != null ? _this4.existsReserved(phase) : _this4.h.hasOwnProperty(phase)) {
						var _this5 = this1;
						x = __map_reserved[phase] != null ? _this5.getReserved(phase) : _this5.h[phase];
					} else {
						x = 0;
					}
					totalWork += (Math.max(0,x - 1) | 0) * catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase);
					if(totalWork >= 100) {
						return true;
					}
				}
				var _g6 = 0;
				var _g13 = catalyst__$Room_Room_$Impl_$.ordered;
				while(_g6 < _g13.length) {
					var room3 = _g13[_g6];
					++_g6;
					if(this.unlockedRooms.exists(room3)) {
						totalWork += catalyst__$Room_Room_$Impl_$.get_unlockWork(room3);
						if(totalWork >= 100) {
							return true;
						}
					}
				}
				visible = false;
				break;
			case "fairgrounds":
				var _this6 = this.cats;
				var maxLevel2 = 0;
				var _g7 = 0;
				var _g14 = catalyst__$Room_Room_$Impl_$.containerRooms;
				while(_g7 < _g14.length) {
					var room4 = _g14[_g7];
					++_g7;
					var _g22 = 0;
					var _g32 = _this6.cats.get(room4);
					while(_g22 < _g32.length) {
						var cat2 = _g32[_g22];
						++_g22;
						if(cat2.level > maxLevel2) {
							maxLevel2 = cat2.level;
						}
					}
				}
				visible = maxLevel2 >= 15;
				break;
			case "fishing_hole":
				var seenIngredients = false;
				var _g8 = 0;
				var _g15 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
				while(_g8 < _g15.length) {
					var ingredientType = _g15[_g8];
					++_g8;
					if(this.ingredients.exists(ingredientType)) {
						seenIngredients = true;
						break;
					}
				}
				if(this.fame >= 10) {
					visible = seenIngredients;
				} else {
					visible = false;
				}
				break;
			case "gift_room":
				visible = this.presentTime >= 1;
				break;
			case "nap_room":
				var _this7 = this.cats;
				var maxLevel3 = 0;
				var _g9 = 0;
				var _g16 = catalyst__$Room_Room_$Impl_$.containerRooms;
				while(_g9 < _g16.length) {
					var room5 = _g16[_g9];
					++_g9;
					var _g23 = 0;
					var _g33 = _this7.cats.get(room5);
					while(_g23 < _g33.length) {
						var cat3 = _g33[_g23];
						++_g23;
						if(cat3.level > maxLevel3) {
							maxLevel3 = cat3.level;
						}
					}
				}
				visible = maxLevel3 >= 35;
				break;
			case "plant_lab":
				var _this8 = this.cats;
				var count = 0;
				var _g10 = 0;
				var _g17 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
				while(_g10 < _g17.length) {
					var room6 = _g17[_g10];
					++_g10;
					count += _this8.cats.get(room6).length;
				}
				visible = count > 0;
				break;
			case "potion_lab":
				var _this9 = this.cats;
				var maxLevel4 = 0;
				var _g18 = 0;
				var _g19 = catalyst__$Room_Room_$Impl_$.containerRooms;
				while(_g18 < _g19.length) {
					var room7 = _g19[_g18];
					++_g18;
					var _g24 = 0;
					var _g34 = _this9.cats.get(room7);
					while(_g24 < _g34.length) {
						var cat4 = _g34[_g24];
						++_g24;
						if(cat4.level > maxLevel4) {
							maxLevel4 = cat4.level;
						}
					}
				}
				visible = maxLevel4 >= 11;
				break;
			case "temple":
				if(this.piety < 1000) {
					visible = this.prestige > 0;
				} else {
					visible = true;
				}
				break;
			case "travel_agency":
				var visible1;
				if(catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(this.upgrades,"cat_capacity",this.bonuses) >= 12) {
					var _this10 = this.cats;
					var maxLevel5 = 0;
					var _g20 = 0;
					var _g110 = catalyst__$Room_Room_$Impl_$.containerRooms;
					while(_g20 < _g110.length) {
						var room8 = _g110[_g20];
						++_g20;
						var _g25 = 0;
						var _g35 = _this10.cats.get(room8);
						while(_g25 < _g35.length) {
							var cat5 = _g35[_g25];
							++_g25;
							if(cat5.level > maxLevel5) {
								maxLevel5 = cat5.level;
							}
						}
					}
					visible1 = maxLevel5 >= 100;
				} else {
					visible1 = false;
				}
				if(visible1) {
					visible = this.unlockedRooms.exists("breeding_room");
				} else {
					visible = false;
				}
				break;
			case "workshop":
				var totalLevel = 0;
				var _g26 = 0;
				var _g111 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered;
				while(_g26 < _g111.length) {
					var phase1 = _g111[_g26];
					++_g26;
					var this2 = this.upgrades;
					var x1;
					var _this11 = this2;
					if(__map_reserved[phase1] != null ? _this11.existsReserved(phase1) : _this11.h.hasOwnProperty(phase1)) {
						var _this12 = this2;
						x1 = __map_reserved[phase1] != null ? _this12.getReserved(phase1) : _this12.h[phase1];
					} else {
						x1 = 0;
					}
					totalLevel += Math.max(0,x1 - 1) | 0;
					if(totalLevel >= 12) {
						return true;
					}
				}
				visible = false;
				break;
			default:
				visible = true;
			}
		} else {
			visible = false;
		}
		if(visible) {
			var _this13 = this.visibleRooms;
			if(__map_reserved[room] != null) {
				_this13.setReserved(room,true);
			} else {
				_this13.h[room] = true;
			}
		}
		return visible;
	}
	,checkBreed: function(cat) {
		var _g = 0;
		var _g1 = catalyst__$CatBreed_CatBreed_$Impl_$.ordered;
		while(_g < _g1.length) {
			var breed = _g1[_g];
			++_g;
			var tmp;
			var _this = catalyst_GameData.get_current().breeds;
			if(!(__map_reserved[breed] != null ? _this.existsReserved(breed) : _this.h.hasOwnProperty(breed))) {
				tmp = catalyst__$CatBreed_CatBreed_$Impl_$.match(breed,cat);
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = catalyst_GameData.get_current().breeds;
				if(__map_reserved[breed] != null) {
					_this1.setReserved(breed,true);
				} else {
					_this1.h[breed] = true;
				}
				catalyst_GameData.get_current().popups.push(catalyst_PopupType.BreedDiscovery(cat,breed));
			}
		}
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_Lab.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(6);
		var s = this.region;
		if(s == null) {
			__ctx.out.b.push(0);
		} else {
			var v = s.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _this = __ctx.out;
			var src = haxe_io_Bytes.ofString(s);
			var b2 = src.b;
			var _g1 = 0;
			var _g = src.length;
			while(_g1 < _g) _this.b.push(b2[_g1++]);
		}
		var v1 = this.prestige;
		if(v1 >= 0 && v1 < 128) {
			__ctx.out.b.push(v1);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v1);
		}
		__ctx.addKnownRef(this.cats);
		var a = this._strays;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var v2 = a.length + 1;
			if(v2 >= 0 && v2 < 128) {
				__ctx.out.b.push(v2);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v2);
			}
			var _g2 = 0;
			while(_g2 < a.length) {
				var v3 = a[_g2];
				++_g2;
				__ctx.addKnownRef(v3);
			}
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.catnip));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.food));
		var a1 = this.upgrades;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a1;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v4 = keys.length + 1;
			if(v4 >= 0 && v4 < 128) {
				__ctx.out.b.push(v4);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v4);
			}
			var _g3 = 0;
			while(_g3 < keys.length) {
				var k = keys[_g3];
				++_g3;
				if(k == null) {
					__ctx.out.b.push(0);
				} else {
					var v5 = k.length + 1;
					if(v5 >= 0 && v5 < 128) {
						__ctx.out.b.push(v5);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v5);
					}
					var _this1 = __ctx.out;
					var src1 = haxe_io_Bytes.ofString(k);
					var b21 = src1.b;
					var _g11 = 0;
					var _g4 = src1.length;
					while(_g11 < _g4) _this1.b.push(b21[_g11++]);
				}
				var v6 = __map_reserved[k] != null ? a1.getReserved(k) : a1.h[k];
				if(v6 >= 0 && v6 < 128) {
					__ctx.out.b.push(v6);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v6);
				}
			}
		}
		var a2 = this.trophies;
		if(a2 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e1 = a2;
			var keys1 = Lambda.array({ iterator : function() {
				return _e1.keys();
			}});
			var v7 = keys1.length + 1;
			if(v7 >= 0 && v7 < 128) {
				__ctx.out.b.push(v7);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v7);
			}
			var _g5 = 0;
			while(_g5 < keys1.length) {
				var k1 = keys1[_g5];
				++_g5;
				if(k1 == null) {
					__ctx.out.b.push(0);
				} else {
					var v8 = k1.length + 1;
					if(v8 >= 0 && v8 < 128) {
						__ctx.out.b.push(v8);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v8);
					}
					var _this2 = __ctx.out;
					var src2 = haxe_io_Bytes.ofString(k1);
					var b22 = src2.b;
					var _g12 = 0;
					var _g6 = src2.length;
					while(_g12 < _g6) _this2.b.push(b22[_g12++]);
				}
				var v9 = __map_reserved[k1] != null ? a2.getReserved(k1) : a2.h[k1];
				if(v9 >= 0 && v9 < 128) {
					__ctx.out.b.push(v9);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v9);
				}
			}
		}
		__ctx.addKnownRef(this.potion);
		var a3 = this.potions;
		if(a3 == null) {
			__ctx.out.b.push(0);
		} else {
			var v10 = a3.length + 1;
			if(v10 >= 0 && v10 < 128) {
				__ctx.out.b.push(v10);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v10);
			}
			var _g7 = 0;
			while(_g7 < a3.length) {
				var v11 = a3[_g7];
				++_g7;
				__ctx.addKnownRef(v11);
			}
		}
		var a4 = this.ingredients;
		if(a4 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e2 = a4;
			var keys2 = Lambda.array({ iterator : function() {
				return _e2.keys();
			}});
			var v12 = keys2.length + 1;
			if(v12 >= 0 && v12 < 128) {
				__ctx.out.b.push(v12);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v12);
			}
			var _g8 = 0;
			while(_g8 < keys2.length) {
				var k2 = keys2[_g8];
				++_g8;
				var s1 = k2;
				if(s1 == null) {
					__ctx.out.b.push(0);
				} else {
					var v13 = s1.length + 1;
					if(v13 >= 0 && v13 < 128) {
						__ctx.out.b.push(v13);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v13);
					}
					var _this3 = __ctx.out;
					var src3 = haxe_io_Bytes.ofString(s1);
					var b23 = src3.b;
					var _g13 = 0;
					var _g9 = src3.length;
					while(_g13 < _g9) _this3.b.push(b23[_g13++]);
				}
				var v14 = __map_reserved[k2] != null ? a4.getReserved(k2) : a4.h[k2];
				if(v14 >= 0 && v14 < 128) {
					__ctx.out.b.push(v14);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v14);
				}
			}
		}
		var a5 = this.ingredientsSeen;
		if(a5 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e3 = a5;
			var keys3 = Lambda.array({ iterator : function() {
				return _e3.keys();
			}});
			var v15 = keys3.length + 1;
			if(v15 >= 0 && v15 < 128) {
				__ctx.out.b.push(v15);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v15);
			}
			var _g10 = 0;
			while(_g10 < keys3.length) {
				var k3 = keys3[_g10];
				++_g10;
				var s2 = k3;
				if(s2 == null) {
					__ctx.out.b.push(0);
				} else {
					var v16 = s2.length + 1;
					if(v16 >= 0 && v16 < 128) {
						__ctx.out.b.push(v16);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v16);
					}
					var _this4 = __ctx.out;
					var src4 = haxe_io_Bytes.ofString(s2);
					var b24 = src4.b;
					var _g14 = 0;
					var _g15 = src4.length;
					while(_g14 < _g15) _this4.b.push(b24[_g14++]);
				}
				__ctx.out.b.push(__map_reserved[k3] != null ? a5.getReserved(k3) : a5.h[k3] ? 1 : 0);
			}
		}
		var s3 = this.currentRoom;
		if(s3 == null) {
			__ctx.out.b.push(0);
		} else {
			var v17 = s3.length + 1;
			if(v17 >= 0 && v17 < 128) {
				__ctx.out.b.push(v17);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v17);
			}
			var _this5 = __ctx.out;
			var src5 = haxe_io_Bytes.ofString(s3);
			var b25 = src5.b;
			var _g16 = 0;
			var _g17 = src5.length;
			while(_g16 < _g17) _this5.b.push(b25[_g16++]);
		}
		var a6 = this.unlockedRooms;
		if(a6 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e4 = a6;
			var keys4 = Lambda.array({ iterator : function() {
				return _e4.keys();
			}});
			var v18 = keys4.length + 1;
			if(v18 >= 0 && v18 < 128) {
				__ctx.out.b.push(v18);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v18);
			}
			var _g18 = 0;
			while(_g18 < keys4.length) {
				var k4 = keys4[_g18];
				++_g18;
				var s4 = k4;
				if(s4 == null) {
					__ctx.out.b.push(0);
				} else {
					var v19 = s4.length + 1;
					if(v19 >= 0 && v19 < 128) {
						__ctx.out.b.push(v19);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v19);
					}
					var _this6 = __ctx.out;
					var src6 = haxe_io_Bytes.ofString(s4);
					var b26 = src6.b;
					var _g19 = 0;
					var _g20 = src6.length;
					while(_g19 < _g20) _this6.b.push(b26[_g19++]);
				}
				__ctx.out.b.push(__map_reserved[k4] != null ? a6.getReserved(k4) : a6.h[k4] ? 1 : 0);
			}
		}
		var a7 = this.visibleRooms;
		if(a7 == null) {
			__ctx.out.b.push(0);
		} else {
			var _e5 = a7;
			var keys5 = Lambda.array({ iterator : function() {
				return _e5.keys();
			}});
			var v20 = keys5.length + 1;
			if(v20 >= 0 && v20 < 128) {
				__ctx.out.b.push(v20);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v20);
			}
			var _g21 = 0;
			while(_g21 < keys5.length) {
				var k5 = keys5[_g21];
				++_g21;
				var s5 = k5;
				if(s5 == null) {
					__ctx.out.b.push(0);
				} else {
					var v21 = s5.length + 1;
					if(v21 >= 0 && v21 < 128) {
						__ctx.out.b.push(v21);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v21);
					}
					var _this7 = __ctx.out;
					var src7 = haxe_io_Bytes.ofString(s5);
					var b27 = src7.b;
					var _g110 = 0;
					var _g22 = src7.length;
					while(_g110 < _g22) _this7.b.push(b27[_g110++]);
				}
				__ctx.out.b.push(__map_reserved[k5] != null ? a7.getReserved(k5) : a7.h[k5] ? 1 : 0);
			}
		}
		var v22 = this.battleLevel;
		if(v22 >= 0 && v22 < 128) {
			__ctx.out.b.push(v22);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v22);
		}
		__ctx.addKnownRef(this.battle);
		var v23 = this.presentCount;
		if(v23 >= 0 && v23 < 128) {
			__ctx.out.b.push(v23);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v23);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.presentTime));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.gourmetTime));
		var v24 = this.work;
		if(v24 >= 0 && v24 < 128) {
			__ctx.out.b.push(v24);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v24);
		}
		var v25 = this.fame;
		if(v25 >= 0 && v25 < 128) {
			__ctx.out.b.push(v25);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v25);
		}
		__ctx.addKnownRef(this.catShow);
		var v26 = this.fish;
		if(v26 >= 0 && v26 < 128) {
			__ctx.out.b.push(v26);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v26);
		}
		var v27 = this.autoBreedLevel;
		if(v27 >= 0 && v27 < 128) {
			__ctx.out.b.push(v27);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v27);
		}
		var v28 = this.autoBreedNextLevel;
		if(v28 >= 0 && v28 < 128) {
			__ctx.out.b.push(v28);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v28);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.autoBreedTime));
		__ctx.out.b.push(this.refillFoodWithFish ? 1 : 0);
		var v29 = this.piety;
		if(v29 >= 0 && v29 < 128) {
			__ctx.out.b.push(v29);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v29);
		}
		__ctx.addKnownRef(this.ingredientSearch);
		var v30 = this.tech;
		if(v30 >= 0 && v30 < 128) {
			__ctx.out.b.push(v30);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v30);
		}
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.strayCycle));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.fishTime));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.workTime));
		__ctx.out.addInt64(haxe_io_FPHelper.doubleToI64(this.techTime));
	}
	,unserializeInit: function() {
		this.prestige = 0;
		this.catnip = 50;
		this.food = 0;
		this.trophies = catalyst__$Trophies_Trophies_$Impl_$._new();
		this.searchTime = 0;
		this.searchDuration = 0;
		this.visibleRooms = new haxe_ds_StringMap();
		this.battleLevel = 0;
		this.battle = null;
		this.presentCount = 0;
		this.presentTime = 0;
		this.gourmetTime = 0;
		this.work = 0;
		this.fame = 0;
		this.catShow = null;
		this.fish = 0;
		this.autoBreedLevel = 0;
		this.autoBreedNextLevel = 0;
		this.autoBreedTime = 0;
		this.refillFoodWithFish = false;
		this.piety = 0;
		this.ingredientSearch = null;
		this.tech = 0;
		this.strayCycle = 0;
		this.fishTime = 0;
		this.workTime = 0;
		this.techTime = 0;
		this.fastCatnip = false;
		this.nextEvent = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 6) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 6);
		}
		var v0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		if(len == 0) {
			v0 = null;
		} else {
			--len;
			var s = __ctx.input.getString(__ctx.inPos,len);
			__ctx.inPos += len;
			v0 = s;
		}
		this.region = v0;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.prestige = v2;
		this.cats = __ctx.getRef(catalyst_Cats,catalyst_Cats.__clid);
		var e0;
		var v3 = __ctx.input.b[__ctx.inPos++];
		if(v3 == 128) {
			v3 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len1 = v3;
		var tmp;
		if(len1 == 0) {
			tmp = null;
		} else {
			--len1;
			var a = [];
			var _g1 = 0;
			var _g = len1;
			while(_g1 < _g) {
				e0 = __ctx.getRef(catalyst_Cat,catalyst_Cat.__clid);
				a[_g1++] = e0;
			}
			tmp = a;
		}
		this._strays = tmp;
		var v4 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.catnip = v4;
		var v5 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.food = v5;
		var v01;
		var k1;
		var v11;
		var v6 = __ctx.input.b[__ctx.inPos++];
		if(v6 == 128) {
			v6 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v6;
		var v02;
		if(len2 == 0) {
			v02 = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len2 > 0) {
				var v7 = __ctx.input.b[__ctx.inPos++];
				if(v7 == 128) {
					v7 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len3 = v7;
				if(len3 == 0) {
					k1 = null;
				} else {
					--len3;
					var s1 = __ctx.input.getString(__ctx.inPos,len3);
					__ctx.inPos += len3;
					k1 = s1;
				}
				var k = k1;
				var v8 = __ctx.input.b[__ctx.inPos++];
				if(v8 == 128) {
					v8 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v11 = v8;
				if(__map_reserved[k] != null) {
					m.setReserved(k,v11);
				} else {
					m.h[k] = v11;
				}
			}
			v02 = m;
		}
		v01 = v02;
		this.upgrades = v01;
		var v03;
		var k11;
		var v12;
		var v9 = __ctx.input.b[__ctx.inPos++];
		if(v9 == 128) {
			v9 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len4 = v9;
		var v04;
		if(len4 == 0) {
			v04 = null;
		} else {
			var m1 = new haxe_ds_StringMap();
			while(--len4 > 0) {
				var v10 = __ctx.input.b[__ctx.inPos++];
				if(v10 == 128) {
					v10 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len5 = v10;
				if(len5 == 0) {
					k11 = null;
				} else {
					--len5;
					var s2 = __ctx.input.getString(__ctx.inPos,len5);
					__ctx.inPos += len5;
					k11 = s2;
				}
				var k2 = k11;
				var v13 = __ctx.input.b[__ctx.inPos++];
				if(v13 == 128) {
					v13 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v12 = v13;
				if(__map_reserved[k2] != null) {
					m1.setReserved(k2,v12);
				} else {
					m1.h[k2] = v12;
				}
			}
			v04 = m1;
		}
		v03 = v04;
		this.trophies = v03;
		this.potion = __ctx.getRef(catalyst_Potion,catalyst_Potion.__clid);
		var e01;
		var v14 = __ctx.input.b[__ctx.inPos++];
		if(v14 == 128) {
			v14 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len6 = v14;
		var tmp1;
		if(len6 == 0) {
			tmp1 = null;
		} else {
			--len6;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len6;
			while(_g11 < _g2) {
				e01 = __ctx.getRef(catalyst_Potion,catalyst_Potion.__clid);
				a1[_g11++] = e01;
			}
			tmp1 = a1;
		}
		this.potions = tmp1;
		var k0;
		var v05;
		var v15 = __ctx.input.b[__ctx.inPos++];
		if(v15 == 128) {
			v15 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len7 = v15;
		var tmp2;
		if(len7 == 0) {
			tmp2 = null;
		} else {
			var m2 = new haxe_ds_StringMap();
			while(--len7 > 0) {
				var v16;
				var v17 = __ctx.input.b[__ctx.inPos++];
				if(v17 == 128) {
					v17 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len8 = v17;
				if(len8 == 0) {
					v16 = null;
				} else {
					--len8;
					var s3 = __ctx.input.getString(__ctx.inPos,len8);
					__ctx.inPos += len8;
					v16 = s3;
				}
				k0 = v16;
				var k3 = k0;
				var v18 = __ctx.input.b[__ctx.inPos++];
				if(v18 == 128) {
					v18 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v05 = v18;
				if(__map_reserved[k3] != null) {
					m2.setReserved(k3,v05);
				} else {
					m2.h[k3] = v05;
				}
			}
			tmp2 = m2;
		}
		this.ingredients = tmp2;
		var k01;
		var v06;
		var v19 = __ctx.input.b[__ctx.inPos++];
		if(v19 == 128) {
			v19 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len9 = v19;
		var tmp3;
		if(len9 == 0) {
			tmp3 = null;
		} else {
			var m3 = new haxe_ds_StringMap();
			while(--len9 > 0) {
				var v110;
				var v20 = __ctx.input.b[__ctx.inPos++];
				if(v20 == 128) {
					v20 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len10 = v20;
				if(len10 == 0) {
					v110 = null;
				} else {
					--len10;
					var s4 = __ctx.input.getString(__ctx.inPos,len10);
					__ctx.inPos += len10;
					v110 = s4;
				}
				k01 = v110;
				var k4 = k01;
				v06 = __ctx.input.b[__ctx.inPos++] != 0;
				if(__map_reserved[k4] != null) {
					m3.setReserved(k4,v06);
				} else {
					m3.h[k4] = v06;
				}
			}
			tmp3 = m3;
		}
		this.ingredientsSeen = tmp3;
		if(__version < 5) {
			var v21 = __ctx.input.getDouble(__ctx.inPos);
			__ctx.inPos += 8;
			this.searchTime = v21;
		}
		if(__version < 5) {
			var v22 = __ctx.input.getDouble(__ctx.inPos);
			__ctx.inPos += 8;
			this.searchDuration = v22;
		}
		var v07;
		var v23 = __ctx.input.b[__ctx.inPos++];
		if(v23 == 128) {
			v23 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len11 = v23;
		if(len11 == 0) {
			v07 = null;
		} else {
			--len11;
			var s5 = __ctx.input.getString(__ctx.inPos,len11);
			__ctx.inPos += len11;
			v07 = s5;
		}
		this.currentRoom = v07;
		var k02;
		var v08;
		var v24 = __ctx.input.b[__ctx.inPos++];
		if(v24 == 128) {
			v24 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len12 = v24;
		var tmp4;
		if(len12 == 0) {
			tmp4 = null;
		} else {
			var m4 = new haxe_ds_StringMap();
			while(--len12 > 0) {
				var v111;
				var v25 = __ctx.input.b[__ctx.inPos++];
				if(v25 == 128) {
					v25 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len13 = v25;
				if(len13 == 0) {
					v111 = null;
				} else {
					--len13;
					var s6 = __ctx.input.getString(__ctx.inPos,len13);
					__ctx.inPos += len13;
					v111 = s6;
				}
				k02 = v111;
				var k5 = k02;
				v08 = __ctx.input.b[__ctx.inPos++] != 0;
				if(__map_reserved[k5] != null) {
					m4.setReserved(k5,v08);
				} else {
					m4.h[k5] = v08;
				}
			}
			tmp4 = m4;
		}
		this.unlockedRooms = tmp4;
		var k03;
		var v09;
		var v26 = __ctx.input.b[__ctx.inPos++];
		if(v26 == 128) {
			v26 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len14 = v26;
		var tmp5;
		if(len14 == 0) {
			tmp5 = null;
		} else {
			var m5 = new haxe_ds_StringMap();
			while(--len14 > 0) {
				var v112;
				var v27 = __ctx.input.b[__ctx.inPos++];
				if(v27 == 128) {
					v27 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len15 = v27;
				if(len15 == 0) {
					v112 = null;
				} else {
					--len15;
					var s7 = __ctx.input.getString(__ctx.inPos,len15);
					__ctx.inPos += len15;
					v112 = s7;
				}
				k03 = v112;
				var k6 = k03;
				v09 = __ctx.input.b[__ctx.inPos++] != 0;
				if(__map_reserved[k6] != null) {
					m5.setReserved(k6,v09);
				} else {
					m5.h[k6] = v09;
				}
			}
			tmp5 = m5;
		}
		this.visibleRooms = tmp5;
		var v28 = __ctx.input.b[__ctx.inPos++];
		if(v28 == 128) {
			v28 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.battleLevel = v28;
		this.battle = __ctx.getRef(catalyst_Battle,catalyst_Battle.__clid);
		var v29 = __ctx.input.b[__ctx.inPos++];
		if(v29 == 128) {
			v29 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.presentCount = v29;
		var v30 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.presentTime = v30;
		var v31 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.gourmetTime = v31;
		var v32 = __ctx.input.b[__ctx.inPos++];
		if(v32 == 128) {
			v32 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.work = v32;
		var v33 = __ctx.input.b[__ctx.inPos++];
		if(v33 == 128) {
			v33 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.fame = v33;
		this.catShow = __ctx.getRef(catalyst_CatShow,catalyst_CatShow.__clid);
		var v34 = __ctx.input.b[__ctx.inPos++];
		if(v34 == 128) {
			v34 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.fish = v34;
		var v35 = __ctx.input.b[__ctx.inPos++];
		if(v35 == 128) {
			v35 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.autoBreedLevel = v35;
		var v36 = __ctx.input.b[__ctx.inPos++];
		if(v36 == 128) {
			v36 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.autoBreedNextLevel = v36;
		var v37 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.autoBreedTime = v37;
		if(__version >= 2) {
			this.refillFoodWithFish = __ctx.input.b[__ctx.inPos++] != 0;
		}
		if(__version >= 4) {
			var v38 = __ctx.input.b[__ctx.inPos++];
			if(v38 == 128) {
				v38 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			this.piety = v38;
		}
		if(__version >= 5) {
			this.ingredientSearch = __ctx.getRef(catalyst_IngredientSearch,catalyst_IngredientSearch.__clid);
		}
		if(__version >= 6) {
			var v39 = __ctx.input.b[__ctx.inPos++];
			if(v39 == 128) {
				v39 = __ctx.input.getInt32(__ctx.inPos);
				__ctx.inPos += 4;
			}
			this.tech = v39;
		}
		var v40 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.strayCycle = v40;
		var v41 = __ctx.input.getDouble(__ctx.inPos);
		__ctx.inPos += 8;
		this.fishTime = v41;
		if(__version >= 3) {
			var v42 = __ctx.input.getDouble(__ctx.inPos);
			__ctx.inPos += 8;
			this.workTime = v42;
		}
		if(__version >= 6) {
			var v43 = __ctx.input.getDouble(__ctx.inPos);
			__ctx.inPos += 8;
			this.techTime = v43;
		}
	}
	,__class__: catalyst_Lab
};
var catalyst_Music = function() { };
$hxClasses["catalyst.Music"] = catalyst_Music;
catalyst_Music.__name__ = ["catalyst","Music"];
catalyst_Music.play = function(music) {
	if(catalyst_Music._muted) {
		if(catalyst_Music.current != null) {
			catalyst_Music.current.stop();
		}
		catalyst_Music.current = null;
		catalyst_Music.playing = null;
	} else {
		if(catalyst_Music.current != null && catalyst_Music.playing == music) {
			return;
		}
		if(catalyst_Music.current != null) {
			catalyst_Music.current.stop();
		}
		catalyst_Music.current = new haxepunk_Sfx("assets/music/" + music + "." + catalyst_Music.FORMAT);
		catalyst_Music.current.set_type("music");
		catalyst_Music.current.play(1,0,true);
		catalyst_Music.playing = music;
	}
};
catalyst_Music.stop = function() {
	if(catalyst_Music.current != null) {
		catalyst_Music.current.stop();
		catalyst_Music.current = null;
		catalyst_Music.playing = null;
	}
};
catalyst_Music.toggleMute = function() {
	catalyst_Music._muted = !catalyst_Music._muted;
	haxepunk_Sfx.setVolume("music",catalyst_Music._muted ? 0 : 1);
};
var catalyst_PopupType = $hxClasses["catalyst.PopupType"] = { __ename__ : ["catalyst","PopupType"], __constructs__ : ["Logo","Trophy","SearchResult","Tutorial","Message","BreedDiscovery","Tech"] };
catalyst_PopupType.Logo = ["Logo",0];
catalyst_PopupType.Logo.toString = $estr;
catalyst_PopupType.Logo.__enum__ = catalyst_PopupType;
catalyst_PopupType.Trophy = function(type,lv) { var $x = ["Trophy",1,type,lv]; $x.__enum__ = catalyst_PopupType; $x.toString = $estr; return $x; };
catalyst_PopupType.SearchResult = function(cat,ingredients) { var $x = ["SearchResult",2,cat,ingredients]; $x.__enum__ = catalyst_PopupType; $x.toString = $estr; return $x; };
catalyst_PopupType.Tutorial = function(type) { var $x = ["Tutorial",3,type]; $x.__enum__ = catalyst_PopupType; $x.toString = $estr; return $x; };
catalyst_PopupType.Message = function(msg) { var $x = ["Message",4,msg]; $x.__enum__ = catalyst_PopupType; $x.toString = $estr; return $x; };
catalyst_PopupType.BreedDiscovery = function(cat,breed) { var $x = ["BreedDiscovery",5,cat,breed]; $x.__enum__ = catalyst_PopupType; $x.toString = $estr; return $x; };
catalyst_PopupType.Tech = ["Tech",6];
catalyst_PopupType.Tech.toString = $estr;
catalyst_PopupType.Tech.__enum__ = catalyst_PopupType;
var catalyst_Potion = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.mutagen = 0;
	this.ingredients = [];
	this.stats = catalyst__$Stats_Stats_$Impl_$._new();
	var _g = 0;
	var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
	while(_g < _g1.length) {
		var stat = _g1[_g];
		++_g;
		catalyst__$Stats_Stats_$Impl_$.set(this.stats,stat,-1);
	}
};
$hxClasses["catalyst.Potion"] = catalyst_Potion;
catalyst_Potion.__name__ = ["catalyst","Potion"];
catalyst_Potion.__interfaces__ = [hxbit_Serializable];
catalyst_Potion.prototype = {
	stats: null
	,ingredients: null
	,mutagen: null
	,addIngredient: function(ingredient) {
		if(this.ingredients.length < 6) {
			this.ingredients.push(ingredient);
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				var _g3 = this.stats;
				catalyst__$Stats_Stats_$Impl_$.set(_g3,stat,catalyst__$Stats_Stats_$Impl_$.get(_g3,stat) + (catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(ingredient)].exists(stat) ? catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(ingredient)].get(stat) : 0));
			}
			this.mutagen += catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(ingredient);
		}
	}
	,canDrink: function(cat) {
		return true;
	}
	,applyToCat: function(cat,mutated) {
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			var change = catalyst__$Stats_Stats_$Impl_$.get(this.stats,stat);
			if(change != 0) {
				var _g3 = cat.stats;
				catalyst__$Stats_Stats_$Impl_$.set(_g3,stat,catalyst__$Stats_Stats_$Impl_$.get(_g3,stat) + change);
				var tmp = catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat);
				var cat1 = cat._maxLevel;
				var x;
				if(cat.wild) {
					x = 0;
				} else {
					var _this = catalyst_GameData.get_current();
					x = _this.labs.get(_this.currentRegion).tech / 100;
				}
				if(tmp > (Math.min((cat1 * (1 + x) | 0) * 5,999) | 0)) {
					var cat2 = cat.stats;
					var cat3 = cat._maxLevel;
					var x1;
					if(cat.wild) {
						x1 = 0;
					} else {
						var _this1 = catalyst_GameData.get_current();
						x1 = _this1.labs.get(_this1.currentRegion).tech / 100;
					}
					catalyst__$Stats_Stats_$Impl_$.set(cat2,stat,Math.min((cat3 * (1 + x1) | 0) * 5,999) | 0);
				}
				if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat) < 1) {
					catalyst__$Stats_Stats_$Impl_$.set(cat.stats,stat,1);
				}
			}
		}
		var mutationIndex = Std.random(this.ingredients.length);
		var _g11 = 0;
		var _g2 = this.ingredients.length;
		while(_g11 < _g2) {
			var i = _g11++;
			catalyst__$IngredientType_IngredientType_$Impl_$.applyToCat(this.ingredients[i],cat,mutated && mutationIndex == i);
		}
	}
	,__uid: null
	,getCLID: function() {
		return catalyst_Potion.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(1);
		var a = this.stats;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var _e = a;
			var keys = Lambda.array({ iterator : function() {
				return _e.keys();
			}});
			var v = keys.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				if(k == null) {
					__ctx.out.b.push(0);
				} else {
					var v1 = k.length + 1;
					if(v1 >= 0 && v1 < 128) {
						__ctx.out.b.push(v1);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v1);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(k);
					var b2 = src.b;
					var _g1 = 0;
					var _g2 = src.length;
					while(_g1 < _g2) _this.b.push(b2[_g1++]);
				}
				var v2 = __map_reserved[k] != null ? a.getReserved(k) : a.h[k];
				if(v2 >= 0 && v2 < 128) {
					__ctx.out.b.push(v2);
				} else {
					__ctx.out.b.push(128);
					__ctx.out.addInt32(v2);
				}
			}
		}
		var a1 = this.ingredients;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v3 = a1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var _g3 = 0;
			while(_g3 < a1.length) {
				var v4 = a1[_g3];
				++_g3;
				var s = v4;
				if(s == null) {
					__ctx.out.b.push(0);
				} else {
					var v5 = s.length + 1;
					if(v5 >= 0 && v5 < 128) {
						__ctx.out.b.push(v5);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v5);
					}
					var _this1 = __ctx.out;
					var src1 = haxe_io_Bytes.ofString(s);
					var b21 = src1.b;
					var _g11 = 0;
					var _g4 = src1.length;
					while(_g11 < _g4) _this1.b.push(b21[_g11++]);
				}
			}
		}
		var v6 = this.mutagen;
		if(v6 >= 0 && v6 < 128) {
			__ctx.out.b.push(v6);
		} else {
			__ctx.out.b.push(128);
			__ctx.out.addInt32(v6);
		}
	}
	,unserializeInit: function() {
		this.stats = catalyst__$Stats_Stats_$Impl_$._new();
		this.ingredients = [];
		this.mutagen = 0;
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 1) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 1);
		}
		var v0;
		var k1;
		var v1;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v2;
		var v01;
		if(len == 0) {
			v01 = null;
		} else {
			var m = new haxe_ds_StringMap();
			while(--len > 0) {
				var v3 = __ctx.input.b[__ctx.inPos++];
				if(v3 == 128) {
					v3 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v3;
				if(len1 == 0) {
					k1 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					k1 = s;
				}
				var k = k1;
				var v4 = __ctx.input.b[__ctx.inPos++];
				if(v4 == 128) {
					v4 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				v1 = v4;
				if(__map_reserved[k] != null) {
					m.setReserved(k,v1);
				} else {
					m.h[k] = v1;
				}
			}
			v01 = m;
		}
		v0 = v01;
		this.stats = v0;
		var e0;
		var v5 = __ctx.input.b[__ctx.inPos++];
		if(v5 == 128) {
			v5 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v5;
		var tmp;
		if(len2 == 0) {
			tmp = null;
		} else {
			--len2;
			var a = [];
			var _g1 = 0;
			var _g = len2;
			while(_g1 < _g) {
				var i = _g1++;
				var v11;
				var v6 = __ctx.input.b[__ctx.inPos++];
				if(v6 == 128) {
					v6 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len3 = v6;
				if(len3 == 0) {
					v11 = null;
				} else {
					--len3;
					var s1 = __ctx.input.getString(__ctx.inPos,len3);
					__ctx.inPos += len3;
					v11 = s1;
				}
				e0 = v11;
				a[i] = e0;
			}
			tmp = a;
		}
		this.ingredients = tmp;
		var v7 = __ctx.input.b[__ctx.inPos++];
		if(v7 == 128) {
			v7 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		this.mutagen = v7;
	}
	,__class__: catalyst_Potion
};
var catalyst__$Region_Region_$Impl_$ = {};
$hxClasses["catalyst._Region.Region_Impl_"] = catalyst__$Region_Region_$Impl_$;
catalyst__$Region_Region_$Impl_$.__name__ = ["catalyst","_Region","Region_Impl_"];
catalyst__$Region_Region_$Impl_$.__properties__ = {get_name:"get_name",get_local:"get_local",get_global:"get_global",get_localValue:"get_localValue",get_globalValue:"get_globalValue",get___dataIndex:"get___dataIndex",get_paths:"get_paths"};
var catalyst__$Room_Room_$Impl_$ = {};
$hxClasses["catalyst._Room.Room_Impl_"] = catalyst__$Room_Room_$Impl_$;
catalyst__$Room_Room_$Impl_$.__name__ = ["catalyst","_Room","Room_Impl_"];
catalyst__$Room_Room_$Impl_$.__properties__ = {get_sendTutorial:"get_sendTutorial",get_tutorial:"get_tutorial",get_unlockCost:"get_unlockCost",get_bg:"get_bg",get_enabled:"get_enabled",get_singleCatOnly:"get_singleCatOnly",get_icon:"get_icon",get_music:"get_music",get_canSendCats:"get_canSendCats",get_color:"get_color",get_capacityUpgrade:"get_capacityUpgrade",get_desc:"get_desc",get_catsVisible:"get_catsVisible",get_countsAsActive:"get_countsAsActive",get_name:"get_name",get_unlockWork:"get_unlockWork",get_catsUpdate:"get_catsUpdate",get_holdsCats:"get_holdsCats",get_keep:"get_keep",get_canRetrieveCats:"get_canRetrieveCats"};
catalyst__$Room_Room_$Impl_$.get_canRetrieveCats = function(this1) {
	switch(this1) {
	case "backyard":case "cat_cafe":case "cryo_lab":case "exercise_room":case "fishing_hole":case "gift_room":case "living_room":case "nap_room":case "plant_lab":case "potion_lab":case "travel_agency":
		return true;
	case "breeding_room":case "workshop":
		return false;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_keep = function(this1) {
	if(this1 == "temple") {
		return true;
	} else {
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_holdsCats = function(this1) {
	switch(this1) {
	case "backyard":case "breeding_room":case "cat_cafe":case "coliseum":case "cryo_lab":case "exercise_room":case "fairgrounds":case "fishing_hole":case "gift_room":case "living_room":case "nap_room":case "plant_lab":case "potion_lab":case "travel_agency":case "workshop":
		return true;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_catsUpdate = function(this1) {
	switch(this1) {
	case "living_room":case "nap_room":
		return true;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_unlockWork = function(this1) {
	switch(this1) {
	case "breeding_room":case "cat_cafe":case "exercise_room":
		return 10;
	case "cryo_lab":case "fishing_hole":case "nap_room":
		return 5;
	case "temple":
		return 50;
	case "travel_agency":
		return 20;
	default:
		return 0;
	}
};
catalyst__$Room_Room_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "backyard":
		return "Backyard";
	case "breeding_room":
		return "Dimly Lit Room";
	case "cat_cafe":
		return "Cat Cafe";
	case "coliseum":
		return "Coliseum";
	case "cryo_lab":
		return "Cryo Lab";
	case "exercise_room":
		return "Exercise Room";
	case "fairgrounds":
		return "Fairgrounds";
	case "fishing_hole":
		return "Fishing Hole";
	case "gift_room":
		return "Gift Room";
	case "living_room":
		return "Living Room";
	case "nap_room":
		return "Nap Room";
	case "plant_lab":
		return "Horticulture Lab";
	case "potion_lab":
		return "Alchemy Lab";
	case "temple":
		return "Temple";
	case "travel_agency":
		return "Travel Agency";
	case "workshop":
		return "Workshop";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Room_Room_$Impl_$.get_countsAsActive = function(this1) {
	switch(this1) {
	case "backyard":case "breeding_room":case "cryo_lab":case "workshop":
		return false;
	case "cat_cafe":case "coliseum":case "exercise_room":case "fairgrounds":case "fishing_hole":case "gift_room":case "living_room":case "nap_room":case "plant_lab":case "potion_lab":case "travel_agency":
		return true;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_catsVisible = function(this1) {
	switch(this1) {
	case "coliseum":case "exercise_room":case "fairgrounds":case "fishing_hole":
		return false;
	case "potion_lab":
		return true;
	default:
		return true;
	}
};
catalyst__$Room_Room_$Impl_$.get_desc = function(this1) {
	switch(this1) {
	case "backyard":
		return "<cat-icon/><blue>Stray cats</blue> come and go from here.";
	case "breeding_room":
		return "Automated <heart-icon/><blue>breeding</blue> service.";
	case "cat_cafe":
		return "Cook up nutritious <food-icon/><blue>cat food</blue> to increase cat growth rate.";
	case "coliseum":
		return "Wage <sword-icon/><blue>battle</blue> against other cats.";
	case "cryo_lab":
		return "<cryo-icon/><blue>Freeze</blue> and <thaw-icon/><red>thaw</red> cats when you have too many.";
	case "exercise_room":
		return "Generate <hammer-icon/><blue>work</blue> points automatically.";
	case "fairgrounds":
		return "Earn <ribbon-icon/><blue>fame</blue> by competing in cat shows.";
	case "fishing_hole":
		return "Catch some <fish-icon/><blue>fish</blue>.";
	case "gift_room":
		return "Who keeps sending all these <gift-icon/><blue>presents</blue>?";
	case "living_room":
		return "This is where your <cat-icon/><blue>kitties</blue> live.";
	case "nap_room":
		return "Let your cats <nap-icon/><blue>cat nap</blue> to increase their growth rate.";
	case "plant_lab":
		return "Research <catnip-icon/><green>catnip</green> harvesting technology.";
	case "potion_lab":
		return "Make <potion-icon/><blue>potions</blue> to enhance kitty attributes.";
	case "temple":
		return "What secrets could this structure hold?";
	case "travel_agency":
		return "Explore the world!";
	case "workshop":
		return "Employ cats to <hammer-icon/><blue>build</blue> and <upgrade-icon/><green>upgrade</green>.";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Room_Room_$Impl_$.get_capacityUpgrade = function(this1) {
	switch(this1) {
	case "cryo_lab":
		return "max_freeze";
	case "fishing_hole":
		return "fishing_poles";
	case "nap_room":
		return "max_nap";
	default:
		return null;
	}
};
catalyst__$Room_Room_$Impl_$.get_color = function(this1) {
	switch(this1) {
	case "backyard":
		return 11195271;
	case "breeding_room":
		return 11141188;
	case "cat_cafe":
		return 16733525;
	case "coliseum":
		return 9531247;
	case "cryo_lab":
		return 6262227;
	case "exercise_room":
		return 16763972;
	case "fairgrounds":
		return 16768341;
	case "fishing_hole":
		return 5627391;
	case "gift_room":
		return 16755438;
	case "living_room":
		return 11763967;
	case "nap_room":
		return 8334079;
	case "plant_lab":
		return 54442;
	case "potion_lab":
		return 16750933;
	case "temple":
		return 13937152;
	case "travel_agency":
		return 2924588;
	case "workshop":
		return 11158528;
	default:
		return 16777215;
	}
};
catalyst__$Room_Room_$Impl_$.get_canSendCats = function(this1) {
	switch(this1) {
	case "backyard":case "cat_cafe":case "cryo_lab":case "exercise_room":case "fishing_hole":case "gift_room":case "living_room":case "nap_room":case "plant_lab":case "potion_lab":case "travel_agency":case "workshop":
		return true;
	case "breeding_room":
		return false;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_music = function(this1) {
	switch(this1) {
	case "backyard":case "travel_agency":
		return "journey";
	case "coliseum":
		return "battle";
	case "fairgrounds":
		return "catshow";
	case "gift_room":
		return "mail";
	case "nap_room":
		return "sleepy";
	case "temple":
		return "";
	default:
		return "house";
	}
};
catalyst__$Room_Room_$Impl_$.get_icon = function(this1) {
	switch(this1) {
	case "backyard":
		return "tree-icon";
	case "breeding_room":
		return "heart-icon";
	case "cat_cafe":
		return "food-icon";
	case "coliseum":
		return "sword-icon";
	case "cryo_lab":
		return "cryo-icon";
	case "exercise_room":
		return "exercise-icon";
	case "fairgrounds":
		return "ribbon-icon";
	case "fishing_hole":
		return "fish-icon";
	case "gift_room":
		return "gift-icon";
	case "living_room":
		return "couch-icon";
	case "nap_room":
		return "nap-icon";
	case "plant_lab":
		return "plant-lab";
	case "potion_lab":
		return "potion-icon";
	case "temple":
		return "temple-icon";
	case "travel_agency":
		return "globe-icon";
	case "workshop":
		return "hammer-icon";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Room_Room_$Impl_$.get_singleCatOnly = function(this1) {
	switch(this1) {
	case "cat_cafe":case "exercise_room":case "fairgrounds":case "gift_room":case "plant_lab":case "potion_lab":case "travel_agency":
		return true;
	default:
		return false;
	}
};
catalyst__$Room_Room_$Impl_$.get_enabled = function(this1) {
	return true;
};
catalyst__$Room_Room_$Impl_$.get_bg = function(this1) {
	switch(this1) {
	case "backyard":
		return "backyard";
	case "breeding_room":
		return "dimly-lit-room";
	case "cat_cafe":
		return "cat-cafe";
	case "coliseum":
		return "coliseum";
	case "cryo_lab":
		return "cryo-lab";
	case "exercise_room":
		return "exercise-room";
	case "fairgrounds":
		return "fairgrounds";
	case "fishing_hole":
		return "fishing-hole";
	case "gift_room":
		return "gift-room";
	case "living_room":
		return "living-room";
	case "nap_room":
		return "nap-room";
	case "plant_lab":
		return "plant-lab";
	case "potion_lab":
		return "potion-lab";
	case "temple":
		return "temple";
	case "travel_agency":
		return "travel-agency";
	case "workshop":
		return "workshop";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Room_Room_$Impl_$.get_unlockCost = function(this1) {
	switch(this1) {
	case "breeding_room":case "exercise_room":
		return 5000;
	case "cat_cafe":
		return 2500;
	case "coliseum":
		return 2000;
	case "cryo_lab":
		return 1250;
	case "fairgrounds":case "fishing_hole":
		return 1000;
	case "gift_room":
		return 100;
	case "nap_room":
		return 3500;
	case "plant_lab":
		return 25;
	case "temple":
		return 17777;
	case "travel_agency":
		return 10000;
	case "potion_lab":case "workshop":
		return 250;
	default:
		return 0;
	}
};
catalyst__$Room_Room_$Impl_$.get_tutorial = function(this1) {
	switch(this1) {
	case "backyard":
		return "backyard";
	case "plant_lab":
		return "catnip";
	case "travel_agency":
		return "travel";
	default:
		return null;
	}
};
catalyst__$Room_Room_$Impl_$.get_sendTutorial = function(this1) {
	switch(this1) {
	case "cat_cafe":
		return "cat_cafe_bonus";
	case "exercise_room":
		return "work_room_bonus";
	case "gift_room":
		return "gift_room_bonus";
	case "plant_lab":
		return "plant_lab_bonus";
	case "potion_lab":
		return "ingredient_search";
	default:
		return null;
	}
};
var catalyst__$Sex_Sex_$Impl_$ = {};
$hxClasses["catalyst._Sex.Sex_Impl_"] = catalyst__$Sex_Sex_$Impl_$;
catalyst__$Sex_Sex_$Impl_$.__name__ = ["catalyst","_Sex","Sex_Impl_"];
catalyst__$Sex_Sex_$Impl_$.__properties__ = {get_icon:"get_icon",get_name:"get_name"};
catalyst__$Sex_Sex_$Impl_$.random = function() {
	return Math.random() > 0.5;
};
var haxepunk_assets_CustomAssetLoader = function() { };
$hxClasses["haxepunk.assets.CustomAssetLoader"] = haxepunk_assets_CustomAssetLoader;
haxepunk_assets_CustomAssetLoader.__name__ = ["haxepunk","assets","CustomAssetLoader"];
haxepunk_assets_CustomAssetLoader.prototype = {
	load: function(id) {
		return null;
	}
	,__class__: haxepunk_assets_CustomAssetLoader
};
var catalyst_SkeletonDataLoader = function() {
};
$hxClasses["catalyst.SkeletonDataLoader"] = catalyst_SkeletonDataLoader;
catalyst_SkeletonDataLoader.__name__ = ["catalyst","SkeletonDataLoader"];
catalyst_SkeletonDataLoader.__super__ = haxepunk_assets_CustomAssetLoader;
catalyst_SkeletonDataLoader.prototype = $extend(haxepunk_assets_CustomAssetLoader.prototype,{
	load: function(id) {
		var skeletonData = spinepunk_SpinePunk.readSkeletonData(id,"assets/graphics/",null,haxepunk_HXP.engine._scene.assetCache);
		var stateData = new spinehaxe_animation_AnimationStateData(skeletonData);
		stateData.defaultMix = 0.25;
		return { skeletonData : skeletonData, stateData : stateData};
	}
	,__class__: catalyst_SkeletonDataLoader
});
var catalyst_Sound = function() { };
$hxClasses["catalyst.Sound"] = catalyst_Sound;
catalyst_Sound.__name__ = ["catalyst","Sound"];
catalyst_Sound.update = function() {
	if(catalyst_Sound.sfxQueue.length > 0) {
		catalyst_Sound._play(catalyst_Sound.sfxQueue.shift(),catalyst_Sound.volumeQueue.shift());
	}
};
catalyst_Sound._play = function(sound,volume) {
	if(volume == null) {
		volume = 1;
	}
	if(!catalyst_Sound._muted) {
		var _this = catalyst_Sound.loaded;
		if(!(__map_reserved[sound] != null ? _this.existsReserved(sound) : _this.h.hasOwnProperty(sound))) {
			var this1 = catalyst_Sound.loaded;
			var v = new haxepunk_Sfx("assets/sounds/" + sound + "." + catalyst_Sound.FORMAT);
			var _this1 = this1;
			if(__map_reserved[sound] != null) {
				_this1.setReserved(sound,v);
			} else {
				_this1.h[sound] = v;
			}
			var _this2 = catalyst_Sound.loaded;
			(__map_reserved[sound] != null ? _this2.getReserved(sound) : _this2.h[sound]).set_type("sfx");
		}
		var _this3 = catalyst_Sound.loaded;
		(__map_reserved[sound] != null ? _this3.getReserved(sound) : _this3.h[sound]).play(volume);
	}
};
catalyst_Sound.toggleMute = function() {
	catalyst_Sound._muted = !catalyst_Sound._muted;
	haxepunk_Sfx.setVolume("sfx",catalyst_Sound._muted ? 0 : 1);
};
var catalyst__$Stats_Stats_$Impl_$ = {};
$hxClasses["catalyst._Stats.Stats_Impl_"] = catalyst__$Stats_Stats_$Impl_$;
catalyst__$Stats_Stats_$Impl_$.__name__ = ["catalyst","_Stats","Stats_Impl_"];
catalyst__$Stats_Stats_$Impl_$._new = function(values) {
	var this1;
	if(values == null) {
		this1 = new haxe_ds_StringMap();
	} else {
		var _g = new haxe_ds_StringMap();
		var key = values.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = __map_reserved[key1] != null ? values.getReserved(key1) : values.h[key1];
			if(__map_reserved[key1] != null) {
				_g.setReserved(key1,value);
			} else {
				_g.h[key1] = value;
			}
		}
		this1 = _g;
	}
	return this1;
};
catalyst__$Stats_Stats_$Impl_$.get = function(this1,type) {
	return __map_reserved[type] != null ? this1.getReserved(type) : this1.h[type];
};
catalyst__$Stats_Stats_$Impl_$.set = function(this1,type,value) {
	if(__map_reserved[type] != null) {
		this1.setReserved(type,value);
	} else {
		this1.h[type] = value;
	}
	return value;
};
catalyst__$Stats_Stats_$Impl_$.clone = function(this1) {
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g2 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
	while(_g1 < _g2.length) {
		var stat = _g2[_g1];
		++_g1;
		var value = catalyst__$Stats_Stats_$Impl_$.get(this1,stat);
		if(__map_reserved[stat] != null) {
			_g.setReserved(stat,value);
		} else {
			_g.h[stat] = value;
		}
	}
	return catalyst__$Stats_Stats_$Impl_$._new(_g);
};
var catalyst__$Trophy_Trophy_$Impl_$ = {};
$hxClasses["catalyst._Trophy.Trophy_Impl_"] = catalyst__$Trophy_Trophy_$Impl_$;
catalyst__$Trophy_Trophy_$Impl_$.__name__ = ["catalyst","_Trophy","Trophy_Impl_"];
catalyst__$Trophy_Trophy_$Impl_$.__properties__ = {get_values:"get_values",get_bonus:"get_bonus",get_desc:"get_desc",get_room:"get_room",get_upgrade:"get_upgrade",get_colors:"get_colors",get___dataIndex:"get___dataIndex",get_names:"get_names",get_bonusDescription:"get_bonusDescription"};
catalyst__$Trophy_Trophy_$Impl_$.$name = function(this1,level) {
	return catalyst__$Trophy_Trophy_$Impl_$.__names[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(this1)][level - 1];
};
catalyst__$Trophy_Trophy_$Impl_$.color = function(this1,level) {
	return catalyst__$Trophy_Trophy_$Impl_$.__colors[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(this1)][level - 1];
};
catalyst__$Trophy_Trophy_$Impl_$.description = function(this1,level) {
	return StringTools.replace(catalyst__$Trophy_Trophy_$Impl_$.get_desc(this1),"$(value)",Std.string(catalyst__$Trophy_Trophy_$Impl_$.__values[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(this1)][level - 1]));
};
catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "battle_level":
		return 2;
	case "cat_level":
		return 0;
	case "fame":
		return 9;
	case "ingredients":
		return 6;
	case "mutations":
		return 5;
	case "narrow_win":
		return 4;
	case "one_shot":
		return 3;
	case "prestige":
		return 10;
	case "rooms":
		return 8;
	case "supercat":
		return 1;
	case "trophies":
		return 11;
	case "upgrade_level":
		return 7;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Trophy_Trophy_$Impl_$.get_upgrade = function(this1) {
	switch(this1) {
	case "ingredients":
		return "ingredient_hunting";
	case "narrow_win":
		return "recovery";
	case "battle_level":case "one_shot":
		return "initiative";
	case "rooms":case "upgrade_level":
		return "catnip_production";
	case "cat_level":case "fame":case "mutations":case "prestige":case "supercat":case "trophies":
		return "cat_xp_base";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Trophy_Trophy_$Impl_$.get_room = function(this1) {
	switch(this1) {
	case "fame":
		return "fairgrounds";
	case "battle_level":case "narrow_win":case "one_shot":
		return "coliseum";
	case "prestige":case "rooms":case "trophies":
		return "temple";
	case "ingredients":case "mutations":case "supercat":
		return "potion_lab";
	case "upgrade_level":
		return "plant_lab";
	default:
		return null;
	}
};
catalyst__$Trophy_Trophy_$Impl_$.get_desc = function(this1) {
	switch(this1) {
	case "battle_level":
		return "Finish $(value) fights in the <sword-icon/><blue>Coliseum</blue>";
	case "cat_level":
		return "Obtain a Lv. $(value) cat";
	case "fame":
		return "Earn <ribbon-icon/><blue>$(value)</blue> in a cat show";
	case "ingredients":
		return "Discover $(value) types of <potion-icon/><blue>potion</blue> ingredients";
	case "mutations":
		return "Obtain a cat with $(value) <dna-icon/><purple>mutations</purple>";
	case "narrow_win":
		return "Win a fight in the <sword-icon/><blue>Coliseum</blue> after losing $(value)% total HP";
	case "one_shot":
		return "Defeat an opponent in a single hit";
	case "prestige":
		return "Discover the secret of the <temple-icon/><blue>Temple</blue> (x$(value))";
	case "rooms":
		return "Construct $(value) rooms";
	case "supercat":
		return "Obtain a <supercat-icon/><purple>supercat</purple> type cat of <blue>Lv. $(value)</blue> or greater";
	case "trophies":
		return "Obtain $(value) trophies";
	case "upgrade_level":
		return "Research a Lv. $(value) <upgrade-icon/><blue>upgrade</blue>";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$Trophy_Trophy_$Impl_$.get_bonus = function(this1) {
	switch(this1) {
	case "cat_level":case "fame":
		return 10;
	case "ingredients":
		return 25;
	case "battle_level":case "one_shot":
		return 1;
	case "prestige":
		return 20;
	case "mutations":case "rooms":case "upgrade_level":
		return 2;
	case "narrow_win":case "supercat":
		return 5;
	case "trophies":
		return 100;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$Trophies_Trophies_$Impl_$ = {};
$hxClasses["catalyst._Trophies.Trophies_Impl_"] = catalyst__$Trophies_Trophies_$Impl_$;
catalyst__$Trophies_Trophies_$Impl_$.__name__ = ["catalyst","_Trophies","Trophies_Impl_"];
catalyst__$Trophies_Trophies_$Impl_$.get = function(this1,type) {
	if(__map_reserved[type] != null ? this1.existsReserved(type) : this1.h.hasOwnProperty(type)) {
		return __map_reserved[type] != null ? this1.getReserved(type) : this1.h[type];
	} else {
		return 0;
	}
};
catalyst__$Trophies_Trophies_$Impl_$.set = function(this1,type,value) {
	if(__map_reserved[type] != null) {
		this1.setReserved(type,value);
	} else {
		this1.h[type] = value;
	}
	return value;
};
catalyst__$Trophies_Trophies_$Impl_$._new = function() {
	return new haxe_ds_StringMap();
};
catalyst__$Trophies_Trophies_$Impl_$.upgradeValue = function(this1,type) {
	var value = 0;
	var _this = catalyst__$Trophies_Trophies_$Impl_$.upgradeTrophies;
	if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
		var _g = 0;
		var _this1 = catalyst__$Trophies_Trophies_$Impl_$.upgradeTrophies;
		var _g1 = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		while(_g < _g1.length) {
			var trophy = _g1[_g];
			++_g;
			value += catalyst__$Trophy_Trophy_$Impl_$.get_bonus(trophy) * catalyst__$Trophies_Trophies_$Impl_$.get(this1,trophy);
		}
	}
	return value;
};
catalyst__$Trophies_Trophies_$Impl_$.event = function(this1,type,value,callback) {
	var currentLevel;
	while(true) {
		currentLevel = catalyst__$Trophies_Trophies_$Impl_$.get(this1,type);
		if(!(currentLevel < catalyst__$Trophy_Trophy_$Impl_$.__values[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(type)].length)) {
			break;
		}
		if(value >= catalyst__$Trophy_Trophy_$Impl_$.__values[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(type)][currentLevel]) {
			catalyst__$Trophies_Trophies_$Impl_$.set(this1,type,++currentLevel);
			if(callback != null) {
				callback(currentLevel);
			}
			catalyst_GameData.get_current().save();
		} else {
			break;
		}
	}
};
var catalyst__$TutorialType_TutorialType_$Impl_$ = {};
$hxClasses["catalyst._TutorialType.TutorialType_Impl_"] = catalyst__$TutorialType_TutorialType_$Impl_$;
catalyst__$TutorialType_TutorialType_$Impl_$.__name__ = ["catalyst","_TutorialType","TutorialType_Impl_"];
catalyst__$TutorialType_TutorialType_$Impl_$.__properties__ = {get_messages:"get_messages",get_unless:"get_unless",get___dataIndex:"get___dataIndex",get_requires:"get_requires",get_helperImage:"get_helperImage"};
catalyst__$TutorialType_TutorialType_$Impl_$.get_helperImage = function(this1) {
	if(this1 == "can_breed") {
		return "breed-helper";
	} else {
		return null;
	}
};
catalyst__$TutorialType_TutorialType_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "auto_breed":
		return 34;
	case "backyard":
		return 2;
	case "brew":
		return 18;
	case "can_breed":
		return 12;
	case "cat_cafe":
		return 27;
	case "cat_cafe_bonus":
		return 28;
	case "cat_cafe_suboptimal":
		return 29;
	case "cat_show":
		return 31;
	case "cat_stats":
		return 3;
	case "catnip":
		return 5;
	case "coliseum":
		return 23;
	case "cryo":
		return 19;
	case "fight":
		return 24;
	case "fishing":
		return 33;
	case "food":
		return 1;
	case "gain_level":
		return 9;
	case "gift_room_bonus":
		return 22;
	case "hurt":
		return 25;
	case "ingredient_search":
		return 17;
	case "intro":
		return 0;
	case "kitten":
		return 15;
	case "low_food":
		return 4;
	case "max_level":
		return 10;
	case "mutation":
		return 32;
	case "new_litter":
		return 14;
	case "plant_lab_bonus":
		return 6;
	case "potion_lab":
		return 16;
	case "present":
		return 21;
	case "prestige":
		return 30;
	case "room_bonus":
		return 36;
	case "rooms":
		return 20;
	case "star_level":
		return 11;
	case "travel":
		return 37;
	case "tutorials":
		return 26;
	case "upgrades":
		return 7;
	case "wait_to_breed":
		return 13;
	case "work":
		return 8;
	case "work_room_bonus":
		return 35;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$ = {};
$hxClasses["catalyst._UpgradeCategory.UpgradeCategory_Impl_"] = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$;
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__name__ = ["catalyst","_UpgradeCategory","UpgradeCategory_Impl_"];
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__properties__ = {get_room:"get_room",get___dataIndex:"get___dataIndex",get_phases:"get_phases",get_icon:"get_icon"};
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.upgradesForRoom = function(room) {
	var _this = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$._upgradesForRoom;
	if(__map_reserved[room] != null ? _this.existsReserved(room) : _this.h.hasOwnProperty(room)) {
		var _this1 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$._upgradesForRoom;
		if(__map_reserved[room] != null) {
			return _this1.getReserved(room);
		} else {
			return _this1.h[room];
		}
	} else {
		return catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$._emptyUpgrades;
	}
};
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get_icon = function(this1) {
	switch(this1) {
	case "battle":
		return "sword-icon";
	case "cat_upgrades":
		return "cat-icon";
	case "catnip_cap":
		return "sack-icon";
	case "catnip_upgrades":
		return "catnip-icon";
	case "cryo":
		return "cryo-icon";
	case "exercise":
		return "exercise-icon";
	case "fish":
		return "fish-icon";
	case "food_upgrades":
		return "food-icon";
	case "gourmet":
		return "gourmet-icon";
	case "heart":
		return "heart-icon";
	case "nap":
		return "nap-icon";
	case "potion":
		return "potion-icon";
	case "stray":
		return "tree-icon";
	case "work":
		return "hammer-icon";
	default:
		return null;
	}
};
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "battle":
		return 9;
	case "cat_upgrades":
		return 0;
	case "catnip_cap":
		return 3;
	case "catnip_upgrades":
		return 2;
	case "cryo":
		return 6;
	case "exercise":
		return 13;
	case "fish":
		return 11;
	case "food_upgrades":
		return 1;
	case "gourmet":
		return 8;
	case "heart":
		return 12;
	case "misc":
		return 14;
	case "nap":
		return 7;
	case "potion":
		return 5;
	case "stray":
		return 4;
	case "work":
		return 10;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get_room = function(this1) {
	switch(this1) {
	case "battle":
		return "coliseum";
	case "catnip_cap":case "catnip_upgrades":
		return "plant_lab";
	case "cryo":
		return "cryo_lab";
	case "exercise":
		return "exercise_room";
	case "fish":
		return "fishing_hole";
	case "cat_upgrades":case "food_upgrades":
		return "living_room";
	case "gourmet":
		return "cat_cafe";
	case "heart":
		return "breeding_room";
	case "nap":
		return "nap_room";
	case "potion":
		return "potion_lab";
	case "stray":
		return "backyard";
	case "work":
		return "workshop";
	default:
		return null;
	}
};
var catalyst__$UpgradeType_UpgradeType_$Impl_$ = {};
$hxClasses["catalyst._UpgradeType.UpgradeType_Impl_"] = catalyst__$UpgradeType_UpgradeType_$Impl_$;
catalyst__$UpgradeType_UpgradeType_$Impl_$.__name__ = ["catalyst","_UpgradeType","UpgradeType_Impl_"];
catalyst__$UpgradeType_UpgradeType_$Impl_$.__properties__ = {get_unit:"get_unit",get_base:"get_base",get_desc:"get_desc",get___dataIndex:"get___dataIndex",get_phases:"get_phases",get_name:"get_name"};
catalyst__$UpgradeType_UpgradeType_$Impl_$.get_name = function(this1) {
	switch(this1) {
	case "breed_max_level":
		return "Breed Max Level";
	case "cat_capacity":
		return "Litterboxes";
	case "cat_damage_base":
		return "Damage";
	case "cat_damage_reduction_base":
		return "Damage Reduction";
	case "cat_xp_base":
		return "Cat XP Growth";
	case "cat_xp_rate":
		return "Gourmet XP Boost";
	case "catnip_capacity":
		return "Catnip Storage";
	case "catnip_plants":
		return "Catnip Plants";
	case "catnip_production":
		return "Catnip Yield";
	case "fishing_poles":
		return "Fishing Poles";
	case "fishing_speed":
		return "Fishing Speed";
	case "food_capacity":
		return "Food Capacity";
	case "gourmet_duration":
		return "Gourmet Duration";
	case "ingredient_hunting":
		return "Search Speed";
	case "initiative":
		return "Initiative";
	case "litter_size":
		return "Kitten Litter Size";
	case "max_fish":
		return "Max Fish";
	case "max_found_ingredients":
		return "Max Found Ingredients";
	case "max_freeze":
		return "Cat Storage";
	case "max_ingredients":
		return "Potion Ingredients";
	case "max_nap":
		return "Cat Beds";
	case "max_strays":
		return "Max Strays";
	case "max_work":
		return "Max Work";
	case "nap_xp_rate":
		return "Nap Growth Rate";
	case "recovery":
		return "HP Recovery";
	case "work_gen_speed":
		return "Work Generation";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex = function(this1) {
	switch(this1) {
	case "breed_max_level":
		return 21;
	case "cat_capacity":
		return 0;
	case "cat_damage_base":
		return 23;
	case "cat_damage_reduction_base":
		return 24;
	case "cat_xp_base":
		return 25;
	case "cat_xp_rate":
		return 13;
	case "catnip_capacity":
		return 5;
	case "catnip_plants":
		return 4;
	case "catnip_production":
		return 3;
	case "fishing_poles":
		return 20;
	case "fishing_speed":
		return 19;
	case "food_capacity":
		return 2;
	case "gourmet_duration":
		return 14;
	case "ingredient_hunting":
		return 8;
	case "initiative":
		return 15;
	case "litter_size":
		return 1;
	case "max_fish":
		return 18;
	case "max_found_ingredients":
		return 7;
	case "max_freeze":
		return 10;
	case "max_ingredients":
		return 9;
	case "max_nap":
		return 12;
	case "max_strays":
		return 6;
	case "max_work":
		return 17;
	case "nap_xp_rate":
		return 11;
	case "recovery":
		return 16;
	case "work_gen_speed":
		return 22;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradeType_UpgradeType_$Impl_$.get_desc = function(this1) {
	switch(this1) {
	case "breed_max_level":
		return "Max level for auto-bred cats.";
	case "cat_capacity":
		return "Maximum number of cats.";
	case "cat_damage_base":
		return "Damage dealt per hit.";
	case "cat_damage_reduction_base":
		return "Reduces damage taken.";
	case "cat_xp_base":
		return "Base Cat XP growth rate.";
	case "cat_xp_rate":
		return "Increases gourmet XP bonus.";
	case "catnip_capacity":
		return "Max catnip.";
	case "catnip_plants":
		return "Number of catnip plants.";
	case "catnip_production":
		return "Catnip gained per plant per second.";
	case "fishing_poles":
		return "Max fishing cats.";
	case "fishing_speed":
		return "Fish caught per minute, per cat.";
	case "food_capacity":
		return "Max food.";
	case "gourmet_duration":
		return "Increases gourmet food duration.";
	case "ingredient_hunting":
		return "Find ingredients faster.";
	case "initiative":
		return "Chance to go first in battle.";
	case "litter_size":
		return "More kittens per litter.";
	case "max_fish":
		return "Max fish storage.";
	case "max_found_ingredients":
		return "Max found ingredients per search.";
	case "max_freeze":
		return "Max frozen cats in the cryo lab.";
	case "max_ingredients":
		return "Max ingredients per potion.";
	case "max_nap":
		return "Max napping cats.";
	case "max_strays":
		return "Max stray cats in the backyard.";
	case "max_work":
		return "Max work points.";
	case "nap_xp_rate":
		return "XP bonus while napping.";
	case "recovery":
		return "Recover HP faster after fights.";
	case "work_gen_speed":
		return "Work generated per minute.";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradeType_UpgradeType_$Impl_$.get_base = function(this1) {
	switch(this1) {
	case "breed_max_level":
		return 15;
	case "cat_damage_reduction_base":case "fishing_poles":case "initiative":case "max_nap":
		return 0;
	case "cat_damage_base":case "cat_xp_base":case "cat_xp_rate":case "nap_xp_rate":
		return 100;
	case "catnip_capacity":
		return 450;
	case "catnip_production":
		return 9;
	case "fishing_speed":case "work_gen_speed":
		return 4;
	case "food_capacity":
		return 1500;
	case "gourmet_duration":case "max_work":
		return 10;
	case "ingredient_hunting":
		return 90;
	case "max_fish":
		return 5;
	case "catnip_plants":case "max_freeze":case "max_ingredients":case "recovery":
		return 1;
	case "cat_capacity":case "litter_size":case "max_found_ingredients":case "max_strays":
		return 2;
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
catalyst__$UpgradeType_UpgradeType_$Impl_$.get_unit = function(this1) {
	switch(this1) {
	case "breed_max_level":
		return "levels";
	case "cat_damage_base":case "cat_damage_reduction_base":case "cat_xp_base":case "cat_xp_rate":case "ingredient_hunting":case "nap_xp_rate":
		return "%";
	case "catnip_capacity":
		return "catnip";
	case "catnip_plants":
		return "plants";
	case "catnip_production":
		return "catnip/sec";
	case "fishing_poles":
		return "poles";
	case "fishing_speed":
		return "fish/min";
	case "food_capacity":
		return "cat-seconds";
	case "gourmet_duration":
		return "min";
	case "litter_size":
		return "kittens";
	case "max_fish":
		return "fish";
	case "cat_capacity":case "max_freeze":case "max_nap":
		return "cats";
	case "max_found_ingredients":case "max_ingredients":
		return "ingredients";
	case "max_strays":
		return "strays";
	case "initiative":case "max_work":
		return "points";
	case "recovery":
		return "HP/sec";
	case "work_gen_speed":
		return "work/min";
	default:
		throw new js__$Boot_HaxeError("unsupported value: " + this1);
	}
};
var catalyst__$Upgrades_Upgrades_$Impl_$ = {};
$hxClasses["catalyst._Upgrades.Upgrades_Impl_"] = catalyst__$Upgrades_Upgrades_$Impl_$;
catalyst__$Upgrades_Upgrades_$Impl_$.__name__ = ["catalyst","_Upgrades","Upgrades_Impl_"];
catalyst__$Upgrades_Upgrades_$Impl_$.get = function(this1,phase) {
	return __map_reserved[phase] != null ? this1.getReserved(phase) : this1.h[phase];
};
catalyst__$Upgrades_Upgrades_$Impl_$.set = function(this1,phase,value) {
	if(__map_reserved[phase] != null) {
		this1.setReserved(phase,value);
	} else {
		this1.h[phase] = value;
	}
	return value;
};
catalyst__$Upgrades_Upgrades_$Impl_$._new = function() {
	return new haxe_ds_StringMap();
};
catalyst__$Upgrades_Upgrades_$Impl_$.getValue = function(this1,type,bonuses) {
	var value = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_base(type);
	var value1 = 0;
	if(bonuses.cats != null) {
		value1 = bonuses.cats.upgradeValue(type);
	}
	if(bonuses.trophies != null) {
		value1 += catalyst__$Trophies_Trophies_$Impl_$.upgradeValue(bonuses.trophies,type);
	}
	var value2 = (value + value1) / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(type)][0]);
	var _g = 0;
	var _g1 = catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(type)];
	while(_g < _g1.length) {
		var phase = _g1[_g];
		++_g;
		if(__map_reserved[phase] != null ? this1.existsReserved(phase) : this1.h.hasOwnProperty(phase)) {
			var level = __map_reserved[phase] != null ? this1.getReserved(phase) : this1.h[phase];
			value2 += catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel(phase) * level / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(phase);
		}
	}
	return value2;
};
catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue = function(this1,type,bonuses) {
	var value = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_base(type);
	var value1 = 0;
	if(bonuses.cats != null) {
		value1 = bonuses.cats.upgradeValue(type);
	}
	if(bonuses.trophies != null) {
		value1 += catalyst__$Trophies_Trophies_$Impl_$.upgradeValue(bonuses.trophies,type);
	}
	var value2 = value + value1;
	var _g = 0;
	var _g1 = catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(type)];
	while(_g < _g1.length) {
		var phase = _g1[_g];
		++_g;
		if(__map_reserved[phase] != null ? this1.existsReserved(phase) : this1.h.hasOwnProperty(phase)) {
			var level = __map_reserved[phase] != null ? this1.getReserved(phase) : this1.h[phase];
			value2 += catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel(phase) * level;
		}
	}
	return value2;
};
catalyst__$Upgrades_Upgrades_$Impl_$.getCost = function(this1,phase,prestige,bonuses) {
	var effectiveLevel;
	var _this = this1;
	if(__map_reserved[phase] != null ? _this.existsReserved(phase) : _this.h.hasOwnProperty(phase)) {
		var _this1 = this1;
		effectiveLevel = __map_reserved[phase] != null ? _this1.getReserved(phase) : _this1.h[phase];
	} else {
		effectiveLevel = 0;
	}
	var effectiveLevel1 = effectiveLevel - (catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_prestige(phase) * Math.min(prestige,catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxPrestige(phase)) | 0);
	return Math.round(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_baseCost(phase) * Math.pow(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_costGrowth(phase),Math.max(effectiveLevel1 - 1,0))) | 0;
};
catalyst__$Upgrades_Upgrades_$Impl_$.upgrade = function(this1,phase) {
	if(!(__map_reserved[phase] != null ? this1.existsReserved(phase) : this1.h.hasOwnProperty(phase))) {
		if(__map_reserved[phase] != null) {
			this1.setReserved(phase,0);
		} else {
			this1.h[phase] = 0;
		}
	}
	var v = (__map_reserved[phase] != null ? this1.getReserved(phase) : this1.h[phase]) + 1;
	if(__map_reserved[phase] != null) {
		this1.setReserved(phase,v);
	} else {
		this1.h[phase] = v;
	}
};
var catalyst_XP = function() { };
$hxClasses["catalyst.XP"] = catalyst_XP;
catalyst_XP.__name__ = ["catalyst","XP"];
var haxepunk_Tweener = function() {
	this.autoClear = false;
	this.active = true;
};
$hxClasses["haxepunk.Tweener"] = haxepunk_Tweener;
haxepunk_Tweener.__name__ = ["haxepunk","Tweener"];
haxepunk_Tweener.prototype = {
	active: null
	,get_active: function() {
		return this.active;
	}
	,set_active: function(v) {
		return this.active = v;
	}
	,autoClear: null
	,removeTween: function(t) {
		if(t._parent != this) {
			throw new js__$Boot_HaxeError("Core object does not contain Tween.");
		}
		if(t._next != null) {
			t._next._prev = t._prev;
		}
		if(t._prev != null) {
			t._prev._next = t._next;
		} else {
			this._tween = t._next == null ? null : js_Boot.__cast(t._next , haxepunk_Tween);
		}
		t._next = t._prev = null;
		t._parent = null;
		t.active = false;
		return t;
	}
	,clearTweens: function() {
		var t = this._tween;
		while(t != null) {
			var next = t._next;
			this.removeTween(t);
			t = next;
		}
	}
	,updateTweens: function(elapsed) {
		var t = this._tween;
		while(t != null) {
			if(t.active) {
				t.update(elapsed);
			}
			t = t._next;
		}
	}
	,get_hasTween: function() {
		return this._tween != null;
	}
	,_tween: null
	,__class__: haxepunk_Tweener
	,__properties__: {get_hasTween:"get_hasTween",set_active:"set_active",get_active:"get_active"}
};
var haxepunk_Mask = function() {
	this._parent = haxepunk_Entity._EMPTY;
	this._class = Type.getClassName(js_Boot.getClass(this));
	this._check = new haxe_ds_StringMap();
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Masklist);
	var _this1 = this2;
	var value1 = $bind(this,this.collideMasklist);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
};
$hxClasses["haxepunk.Mask"] = haxepunk_Mask;
haxepunk_Mask.__name__ = ["haxepunk","Mask"];
haxepunk_Mask.__properties__ = {get_drawContext:"get_drawContext"};
haxepunk_Mask.get_drawContext = function() {
	if(haxepunk_Mask.drawContext == null) {
		haxepunk_Mask.drawContext = new haxepunk_utils_DrawContext();
		haxepunk_Mask.drawContext.lineThickness = 2;
	}
	return haxepunk_Mask.drawContext;
};
haxepunk_Mask.prototype = {
	set_parent: function(value) {
		if(value == null) {
			this._parent = haxepunk_Entity._EMPTY;
		} else {
			this._parent = value;
		}
		this.update();
		return value;
	}
	,list: null
	,collide: function(mask) {
		var key = mask._class;
		var _this = this._check;
		var cbFunc = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(cbFunc != null) {
			return cbFunc(mask);
		}
		var key1 = this._class;
		var _this1 = mask._check;
		if(__map_reserved[key1] != null) {
			cbFunc = _this1.getReserved(key1);
		} else {
			cbFunc = _this1.h[key1];
		}
		if(cbFunc != null) {
			return cbFunc(this);
		}
		return false;
	}
	,collideMask: function(other) {
		if(this._parent.get_x() - this._parent.originX + this._parent.get_width() > other._parent.get_x() - other._parent.originX && this._parent.get_y() - this._parent.originY + this._parent.get_height() > other._parent.get_y() - other._parent.originY && this._parent.get_x() - this._parent.originX < other._parent.get_x() - other._parent.originX + other._parent.get_width()) {
			return this._parent.get_y() - this._parent.originY < other._parent.get_y() - other._parent.originY + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideMasklist: function(other) {
		return other.collide(this);
	}
	,update: function() {
	}
	,project: function(axis,projection) {
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = -this._parent.originX * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x - this._parent.originY * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = -this._parent.originX * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,_class: null
	,_check: null
	,_parent: null
	,__class__: haxepunk_Mask
	,__properties__: {set_parent:"set_parent"}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var haxepunk_masks_Hitbox = function(width,height,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	this._y = 0;
	this._x = 0;
	this._height = 0;
	this._width = 0;
	haxepunk_Mask.call(this);
	this._width = width;
	this._height = height;
	this._x = x;
	this._y = y;
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_masks_Hitbox);
	var _this = this1;
	var value = $bind(this,this.collideHitbox);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
};
$hxClasses["haxepunk.masks.Hitbox"] = haxepunk_masks_Hitbox;
haxepunk_masks_Hitbox.__name__ = ["haxepunk","masks","Hitbox"];
haxepunk_masks_Hitbox.__super__ = haxepunk_Mask;
haxepunk_masks_Hitbox.prototype = $extend(haxepunk_Mask.prototype,{
	collideMask: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._parent.originX + other._parent.get_x();
		var oy = other._parent.originY + other._parent.get_y();
		if(px + this._width > ox && py + this._height > oy && px < ox + other._parent.get_width()) {
			return py < oy + other._parent.get_height();
		} else {
			return false;
		}
	}
	,collideHitbox: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		if(px + this._width > ox && py + this._height > oy && px < ox + other._width) {
			return py < oy + other._height;
		} else {
			return false;
		}
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x;
			this._parent.originY = -this._y;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,project: function(axis,projection) {
		var px = this._x;
		var py = this._y;
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = px * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + py * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = px * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		cur = (px + this._width) * axis.x + (py + this._height) * axis.y;
		if(cur < min) {
			min = cur;
		}
		if(cur > max) {
			max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,_width: null
	,_height: null
	,_x: null
	,_y: null
	,__class__: haxepunk_masks_Hitbox
	,__properties__: $extend(haxepunk_Mask.prototype.__properties__,{get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"})
});
var haxepunk_masks_Masklist = function(masks) {
	haxepunk_masks_Hitbox.call(this);
	this._masks = [];
	this._temp = [];
	this._count = 0;
	if(masks != null) {
		var _g = 0;
		while(_g < masks.length) {
			var m = masks[_g];
			++_g;
			this.add(m);
		}
	}
};
$hxClasses["haxepunk.masks.Masklist"] = haxepunk_masks_Masklist;
haxepunk_masks_Masklist.__name__ = ["haxepunk","masks","Masklist"];
haxepunk_masks_Masklist.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Masklist.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collide: function(mask) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.collide(mask)) {
				return true;
			}
		}
		return false;
	}
	,collideMasklist: function(other) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = other._masks;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				if(a.collide(b)) {
					return true;
				}
			}
		}
		return true;
	}
	,add: function(mask) {
		this._masks[this._count++] = mask;
		mask.list = this;
		mask.set_parent(this._parent != haxepunk_Entity._EMPTY ? this._parent : null);
		this.update();
		return mask;
	}
	,set_parent: function(parent) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.set_parent(parent);
		}
		return haxepunk_masks_Hitbox.prototype.set_parent.call(this,parent);
	}
	,update: function() {
		var t;
		var l;
		var r;
		var b;
		l = 2147483647;
		t = 2147483647;
		b = -2147483648;
		r = -2147483648;
		var h;
		var p;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(m,haxepunk_masks_Polygon)) {
				p = m;
				if(p != null) {
					if(p.minX < l) {
						l = p.minX;
					}
					if(p.minY < t) {
						t = p.minY;
					}
					if(p.maxX > r) {
						r = p.maxX;
					}
					if(p.maxY > b) {
						b = p.maxY;
					}
				}
			} else {
				h = js_Boot.__cast(m , haxepunk_masks_Hitbox);
				if(h != null) {
					if(h.get_x() < l) {
						l = h.get_x();
					}
					if(h.get_y() < t) {
						t = h.get_y();
					}
					if(h.get_x() + h.get_width() > r) {
						r = h.get_x() + h.get_width();
					}
					if(h.get_y() + h.get_height() > b) {
						b = h.get_y() + h.get_height();
					}
				}
			}
		}
		this._x = l;
		this._y = t;
		this._width = r - l;
		this._height = b - t;
		haxepunk_masks_Hitbox.prototype.update.call(this);
	}
	,_masks: null
	,_temp: null
	,_count: null
	,__class__: haxepunk_masks_Masklist
});
var haxepunk_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["haxepunk.math.Vector2"] = haxepunk_math_Vector2;
haxepunk_math_Vector2.__name__ = ["haxepunk","math","Vector2"];
haxepunk_math_Vector2.prototype = {
	x: null
	,y: null
	,__class__: haxepunk_math_Vector2
};
var haxepunk_Entity = function(x,y,graphic,mask) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._frames = -1;
	this._layer = 0;
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this.originY = 0;
	this.originX = 0;
	this.height = 0;
	this.width = 0;
	this.followCamera = null;
	this.y = 0;
	this.x = 0;
	this.collidable = true;
	this.visible = true;
	this.skipFrames = 0;
	this.camera = null;
	haxepunk_Tweener.call(this);
	this.set_x(x);
	this.set_y(y);
	this.originX = this.originY = 0;
	this.set_width(this.set_height(0));
	this._moveX = this._moveY = 0;
	this._type = "";
	this._name = "";
	this.HITBOX = new haxepunk_Mask();
	this.set_layer(0);
	if(graphic != null) {
		this.graphic = graphic;
	}
	if(mask != null) {
		this.set_mask(mask);
	}
	this.HITBOX.set_parent(this);
	this._class = Type.getClassName(js_Boot.getClass(this));
};
$hxClasses["haxepunk.Entity"] = haxepunk_Entity;
haxepunk_Entity.__name__ = ["haxepunk","Entity"];
haxepunk_Entity.toPosition = function(entity) {
	return haxepunk__$Position_Position_$Impl_$._new(entity);
};
haxepunk_Entity.__super__ = haxepunk_Tweener;
haxepunk_Entity.prototype = $extend(haxepunk_Tweener.prototype,{
	parent: null
	,camera: null
	,set_camera: function(v) {
		return this.camera = v;
	}
	,skipFrames: null
	,visible: null
	,get_visible: function() {
		if(this.visible) {
			if(this.parent != null) {
				return this.parent.get_visible();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_visible: function(v) {
		return this.visible = v;
	}
	,get_active: function() {
		if(this.active) {
			if(this.parent != null) {
				return this.parent.get_active();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,collidable: null
	,get_collidable: function() {
		if(this.collidable) {
			if(this.parent != null) {
				return this.parent.get_collidable();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,set_collidable: function(v) {
		return this.collidable = v;
	}
	,x: null
	,get_x: function() {
		return (this.parent == null ? 0 : this.parent.get_x()) + this.x + (this.followCamera == null ? 0 : this.followCamera.x);
	}
	,set_x: function(v) {
		return this.x = v - (this.parent == null ? 0 : this.parent.get_x());
	}
	,y: null
	,get_y: function() {
		return (this.parent == null ? 0 : this.parent.get_y()) + this.y + (this.followCamera == null ? 0 : this.followCamera.y);
	}
	,set_y: function(v) {
		return this.y = v - (this.parent == null ? 0 : this.parent.get_y());
	}
	,get_localX: function() {
		return this.get_x() - (this.parent == null ? 0 : this.parent.get_x());
	}
	,set_localX: function(v) {
		return this.set_x((this.parent == null ? 0 : this.parent.get_x()) + v);
	}
	,get_localY: function() {
		return this.get_y() - (this.parent == null ? 0 : this.parent.get_y());
	}
	,set_localY: function(v) {
		return this.set_y((this.parent == null ? 0 : this.parent.get_y()) + v);
	}
	,followCamera: null
	,width: null
	,get_width: function() {
		return this.width;
	}
	,set_width: function(w) {
		return this.width = w;
	}
	,height: null
	,get_height: function() {
		return this.height;
	}
	,set_height: function(h) {
		return this.height = h;
	}
	,originX: null
	,originY: null
	,preUpdate: null
	,postUpdate: null
	,added: function() {
	}
	,removed: function() {
	}
	,resized: function() {
	}
	,shouldUpdate: function() {
		if(this.skipFrames == 0) {
			return true;
		} else if(++this._frames % this.skipFrames == 0) {
			this._frames %= this.skipFrames;
			return true;
		} else {
			return false;
		}
	}
	,update: function() {
	}
	,render: function(camera) {
		if(this.graphic != null && this.graphic._visible) {
			if(this.graphic.relative) {
				haxepunk_Entity._point.x = this.get_x();
				haxepunk_Entity._point.y = this.get_y();
			} else {
				haxepunk_Entity._point.x = haxepunk_Entity._point.y = 0;
			}
			this.graphic.doRender(haxepunk_Entity._point,camera);
		}
	}
	,collideRect: function(x,y,rX,rY,rWidth,rHeight) {
		if(x - this.originX + this.get_width() >= rX && y - this.originY + this.get_height() >= rY && x - this.originX <= rX + rWidth && y - this.originY <= rY + rHeight) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(rX);
			haxepunk_HXP.entity.set_y(rY);
			haxepunk_HXP.entity.set_width(rWidth | 0);
			haxepunk_HXP.entity.set_height(rHeight | 0);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collidePoint: function(x,y,pX,pY) {
		if(pX >= x - this.originX && pY >= y - this.originY && pX < x - this.originX + this.get_width() && pY < y - this.originY + this.get_height()) {
			if(this._mask == null) {
				return true;
			}
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			haxepunk_HXP.entity.set_x(pX);
			haxepunk_HXP.entity.set_y(pY);
			haxepunk_HXP.entity.set_width(1);
			haxepunk_HXP.entity.set_height(1);
			if(this._mask.collide(haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collideInto: function(type,x,y,array) {
		if(this._scene == null) {
			return;
		}
		var _this = this._scene;
		var entities = _this._types.exists(type) ? _this._types.get(type) : null;
		if(!this.get_collidable() || entities == null) {
			return;
		}
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		var n = array.length;
		if(this._mask == null) {
			var _g_head = entities.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e = val;
				e = e;
				if(e.get_collidable() && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						array[n++] = e;
					}
				}
			}
		} else {
			var _g_head1 = entities.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var e1 = val1;
				e1 = e1;
				if(e1.get_collidable() && e1 != this && x - this.originX + this.get_width() > e1.get_x() - e1.originX && y - this.originY + this.get_height() > e1.get_y() - e1.originY && x - this.originX < e1.get_x() - e1.originX + e1.get_width() && y - this.originY < e1.get_y() - e1.originY + e1.get_height()) {
					if(this._mask.collide(e1._mask != null ? e1._mask : e1.HITBOX)) {
						array[n++] = e1;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
	}
	,set_layer: function(value) {
		if(this._layer == value) {
			return this._layer;
		}
		if(this._scene == null) {
			return this._layer = value;
		}
		this._scene.removeRender(this);
		this._layer = value;
		this._scene.addRender(this);
		return this._layer;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return this._type;
		}
		if(this._scene == null) {
			return this._type = value;
		}
		if(this._type != "") {
			this._scene.removeType(this);
		}
		this._type = value;
		if(value != "") {
			this._scene.addType(this);
		}
		return this._type;
	}
	,set_mask: function(value) {
		if(this._mask == value) {
			return value;
		}
		if(this._mask != null) {
			this._mask.set_parent(null);
		}
		this._mask = value;
		if(value != null) {
			this._mask.set_parent(this);
		}
		return this._mask;
	}
	,graphic: null
	,addGraphic: function(g) {
		if(this.graphic == null) {
			this.graphic = g;
		} else if(js_Boot.__instanceof(this.graphic,haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic)) {
			(js_Boot.__cast(this.graphic , haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic)).add(g);
		} else {
			var list = new haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic();
			list.add(this.graphic);
			list.add(g);
			this.graphic = list;
		}
		return g;
	}
	,_class: null
	,_scene: null
	,_type: null
	,_layer: null
	,_name: null
	,_frames: null
	,_recycleNext: null
	,HITBOX: null
	,_mask: null
	,_x: null
	,_y: null
	,_moveX: null
	,_moveY: null
	,__class__: haxepunk_Entity
	,__properties__: $extend(haxepunk_Tweener.prototype.__properties__,{set_mask:"set_mask",set_type:"set_type",set_layer:"set_layer",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_localY:"set_localY",get_localY:"get_localY",set_localX:"set_localX",get_localX:"get_localX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_collidable:"set_collidable",get_collidable:"get_collidable",set_visible:"set_visible",get_visible:"get_visible",set_camera:"set_camera"})
});
var catalyst_entities_AttrBubble = function(stat) {
	this.time = 0;
	haxepunk_Entity.call(this);
	this.bubble = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/bubble.png",false));
	this.bubble.smooth = true;
	this.bubble.x = -this.bubble.get_width() / 2;
	this.addGraphic(this.bubble);
	var iconType = catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat);
	this.icon = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + iconType + ".png",false));
	this.icon.smooth = true;
	this.icon.scale = 0.75;
	var tmp = this.icon.get_width();
	this.icon.originX = tmp / 2;
	var tmp1 = this.icon.get_height();
	this.icon.originY = tmp1 / 2;
	var tmp2 = this.bubble.x;
	var tmp3 = this.bubble.get_width() / 2;
	this.icon.x = tmp2 + tmp3;
	var tmp4 = this.bubble.get_height();
	this.icon.y = tmp4 / 2;
	this.addGraphic(this.icon);
	this.set_layer(-1000);
};
$hxClasses["catalyst.entities.AttrBubble"] = catalyst_entities_AttrBubble;
catalyst_entities_AttrBubble.__name__ = ["catalyst","entities","AttrBubble"];
catalyst_entities_AttrBubble.__super__ = haxepunk_Entity;
catalyst_entities_AttrBubble.prototype = $extend(haxepunk_Entity.prototype,{
	time: null
	,bubble: null
	,icon: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.time += haxepunk_HXP.elapsed / 1.5;
		var t = Math.min(1,Math.pow(this.time * 4,2));
		this.bubble.y = -this.bubble.get_height() / 2 + this.bubble.get_height() * 2 * Math.pow(t - 0.5,2);
		if(this.time >= 1) {
			this._scene.remove(this);
		} else if(this.time >= 0.75) {
			this.bubble.set_alpha(this.icon.set_alpha(Math.pow(1 - (this.time - 0.75) * 4,0.5)));
		}
		this.icon.y = this.bubble.y + this.bubble.get_height() / 2;
	}
	,__class__: catalyst_entities_AttrBubble
});
var catalyst_entities_CounterPanel = function(iconName,fill,value,color,fillColor,size) {
	if(size == null) {
		size = 1;
	}
	if(fillColor == null) {
		fillColor = 16777215;
	}
	if(color == null) {
		color = 16777215;
	}
	if(value == null) {
		value = "0";
	}
	if(fill == null) {
		fill = true;
	}
	haxepunk_Entity.call(this);
	var g = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/counter-panel.png",false),152,76,48,48);
	g.smooth = g.scaleBorder = true;
	g.set_color(color);
	this.addGraphic(g);
	g.width = this.set_width(576 * size | 0);
	g.height = this.set_height(128);
	if(fill) {
		this.fillMeter = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/counter-panel-fill.png",false),152,76,48,48);
		this.fillMeter.smooth = this.fillMeter.scaleBorder = true;
		this.fillMeter.set_color(fillColor);
		this.fillMeter.width = this.get_width();
		this.fillMeter.height = this.get_height();
		this.fillMeter.clipRect = new haxepunk_math_Rectangle(0,0,this.get_width(),this.get_height());
		this.addGraphic(this.fillMeter);
	}
	var v = 0;
	if(this.fillMeter != null) {
		this.fillMeter.clipRect.width = 0 + ((this.get_width() - 128 - 28) * v | 0) + 0;
	}
	this.fill = v;
	if(iconName != null) {
		this.addIcon(iconName);
	}
	this.label = new catalyst_graphics_Label(" ",true);
	this.addGraphic(this.label);
	this.set_maxValue("0");
	this.skipFrames = 5;
};
$hxClasses["catalyst.entities.CounterPanel"] = catalyst_entities_CounterPanel;
catalyst_entities_CounterPanel.__name__ = ["catalyst","entities","CounterPanel"];
catalyst_entities_CounterPanel.__super__ = haxepunk_Entity;
catalyst_entities_CounterPanel.prototype = $extend(haxepunk_Entity.prototype,{
	value: null
	,maxValue: null
	,set_maxValue: function(v) {
		if(this.maxValue != v) {
			this.maxValue = v;
			this.setLabel();
		}
		return v;
	}
	,fill: null
	,fillMeter: null
	,icon: null
	,label: null
	,setLabel: function() {
		this.label.set_text(this.value + (this.maxValue == "" ? "" : "<small-fixed><gray> /" + this.maxValue + " </gray></small-fixed>"));
		var _this = this.label;
		var value = this.get_width();
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		_this.x = value - _this1.textWidth - 42;
		var _this2 = this.label;
		var x = this.get_height();
		var _this3 = this.label;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.y = ((x - _this3.textHeight) / 2 | 0) + 10;
	}
	,addIcon: function(iconName) {
		this.icon = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + iconName + ".png",false));
		this.icon.smooth = true;
		this.icon.x = 64 - this.icon.get_width() / 2;
		this.icon.y = 64 - this.icon.get_height() / 2;
		this.addGraphic(this.icon);
	}
	,__class__: catalyst_entities_CounterPanel
	,__properties__: $extend(haxepunk_Entity.prototype.__properties__,{set_maxValue:"set_maxValue"})
});
var catalyst_entities_AutoBreedTimer = function() {
	catalyst_entities_CounterPanel.call(this,"heart-icon",null,"0",15314909,11141188,1.35);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.AutoBreedTimer"] = catalyst_entities_AutoBreedTimer;
catalyst_entities_AutoBreedTimer.__name__ = ["catalyst","entities","AutoBreedTimer"];
catalyst_entities_AutoBreedTimer.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_AutoBreedTimer.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		this.set_visible(_this.labs.get(_this.currentRegion).autoBreedNextLevel > 0);
		if(this.get_visible()) {
			var _this1 = catalyst_GameData.get_current();
			if(_this1.labs.get(_this1.currentRegion).autoBreedLevel == 0) {
				if(this.value != "<small>Setting the mood... </small>") {
					this.value = "<small>Setting the mood... </small>";
					this.setLabel();
				}
			} else {
				var _this2 = catalyst_GameData.get_current();
				if(_this2.labs.get(_this2.currentRegion).cats.cats.get("breeding_room").length < 2) {
					if(this.value != "<small>Waiting for strays... </small>") {
						this.value = "<small>Waiting for strays... </small>";
						this.setLabel();
					}
				} else {
					var tmp;
					var tmp1;
					var _this3 = catalyst_GameData.get_current();
					var tmp2 = _this3.labs.get(_this3.currentRegion).autoBreedLevel;
					var _this4 = catalyst_GameData.get_current();
					if(tmp2 == _this4.labs.get(_this4.currentRegion).autoBreedNextLevel) {
						var _this5 = catalyst_GameData.get_current();
						var tmp3 = _this5.labs.get(_this5.currentRegion).autoBreedNextLevel;
						var _this6 = catalyst_GameData.get_current();
						var _this7 = _this6.labs.get(_this6.currentRegion);
						tmp1 = tmp3 < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this7.upgrades,"breed_max_level",_this7.bonuses);
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						var _this8 = catalyst_GameData.get_current();
						var tmp4 = _this8.labs.get(_this8.currentRegion).fish;
						var _this9 = catalyst_GameData.get_current();
						tmp = tmp4 < 5 + (_this9.labs.get(_this9.currentRegion).autoBreedNextLevel / 5 | 0);
					} else {
						tmp = false;
					}
					if(tmp) {
						var _this10 = catalyst_GameData.get_current();
						var v = "<small>Need " + (5 + (_this10.labs.get(_this10.currentRegion).autoBreedNextLevel / 5 | 0)) + " fish... </small>";
						if(this.value != v) {
							this.value = v;
							this.setLabel();
						}
					} else {
						var _this11 = catalyst_GameData.get_current();
						var tmp5 = _this11.labs.get(_this11.currentRegion).autoBreedLevel;
						var _this12 = catalyst_GameData.get_current();
						if(tmp5 < _this12.labs.get(_this12.currentRegion).autoBreedNextLevel) {
							var _this13 = catalyst_GameData.get_current();
							var _this14 = _this13.labs.get(_this13.currentRegion);
							var maxLv = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this14.upgrades,"breed_max_level",_this14.bonuses);
							var _this15 = catalyst_GameData.get_current();
							var remaining = catalyst_GameData.formatTime((1 - _this15.labs.get(_this15.currentRegion).autoBreedTime) * 150,false);
							var _this16 = catalyst_GameData.get_current();
							var v1 = "<small>MaxLv " + _this16.labs.get(_this16.currentRegion).autoBreedLevel + "/" + maxLv + "  " + remaining + " </small>";
							if(this.value != v1) {
								this.value = v1;
								this.setLabel();
							}
						} else {
							var _this17 = catalyst_GameData.get_current();
							var _this18 = _this17.labs.get(_this17.currentRegion);
							var maxLv1 = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this18.upgrades,"breed_max_level",_this18.bonuses);
							var _this19 = catalyst_GameData.get_current();
							var v2 = "<small>MaxLv " + _this19.labs.get(_this19.currentRegion).autoBreedLevel + "/" + maxLv1 + " </small>";
							if(this.value != v2) {
								this.value = v2;
								this.setLabel();
							}
						}
					}
				}
			}
			var _this20 = catalyst_GameData.get_current();
			var v3 = _this20.labs.get(_this20.currentRegion).autoBreedTime;
			if(v3 < 0) {
				v3 = 0;
			}
			if(v3 > 1) {
				v3 = 1;
			}
			if(this.fillMeter != null) {
				this.fillMeter.clipRect.width = (v3 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v3 | 0) + (v3 == 1 ? 28 : 0);
			}
			this.fill = v3;
		}
	}
	,__class__: catalyst_entities_AutoBreedTimer
});
var catalyst_entities_BaseButton = function(mouseManager,width,onButtonUp,onButtonDown) {
	if(width == null) {
		width = 1;
	}
	this.clickDelay = 0;
	this.down = false;
	this.over = false;
	this.color = 16777215;
	haxepunk_Entity.call(this);
	this.onButtonUp = onButtonUp;
	this.onButtonDown = onButtonDown;
	this.set_width(176 * width | 0);
	this.set_height(176);
	this.face = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/button.png",false),64,64,64,64);
	this.face.smooth = this.face.scaleBorder = true;
	this.face.width = this.get_width();
	this.face.height = this.get_height();
	this.addGraphic(this.face);
	this.set_type("ui");
	mouseManager.add(this,$bind(this,this.onDown),$bind(this,this.onPress),$bind(this,this.onEnter),$bind(this,this.onExit));
	this.skipFrames = 1;
};
$hxClasses["catalyst.entities.BaseButton"] = catalyst_entities_BaseButton;
catalyst_entities_BaseButton.__name__ = ["catalyst","entities","BaseButton"];
catalyst_entities_BaseButton.__super__ = haxepunk_Entity;
catalyst_entities_BaseButton.prototype = $extend(haxepunk_Entity.prototype,{
	color: null
	,highlight: null
	,face: null
	,onButtonUp: null
	,onButtonDown: null
	,over: null
	,down: null
	,clickDelay: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var i = this.down ? 0.75 : this.over ? 0.25 : 0;
		var this1 = this.color;
		var toColor = 0;
		var tmp;
		if(i <= 0) {
			tmp = this1;
		} else if(i >= 1) {
			tmp = toColor;
		} else {
			var a = this1 >>> 24 & 255;
			var r = this1 >>> 16 & 255;
			var g = this1 >>> 8 & 255;
			var b = this1 & 255;
			a += ((toColor >>> 24 & 255) - a) * i | 0;
			r += ((toColor >>> 16 & 255) - r) * i | 0;
			g += ((toColor >>> 8 & 255) - g) * i | 0;
			b += ((toColor & 255) - b) * i | 0;
			tmp = a << 24 | r << 16 | g << 8 | b;
		}
		this.face.set_color(tmp);
		if(this.clickDelay > 0) {
			this.clickDelay -= haxepunk_HXP.elapsed * (1 + this.skipFrames) / 0.0333333333333333329;
			if(this.clickDelay < 0) {
				this.clickDelay = 0;
			}
		}
	}
	,added: function() {
		haxepunk_Entity.prototype.added.call(this);
		if(this.highlight != null) {
			this._scene.add(this.highlight);
		}
	}
	,removed: function() {
		haxepunk_Entity.prototype.removed.call(this);
		if(this.highlight != null) {
			this._scene.remove(this.highlight);
		}
	}
	,addHighlightArrow: function() {
		if(this.highlight == null) {
			this.highlight = new catalyst_entities_HighlightArrow(this);
			if(this._scene != null) {
				this._scene.add(this.highlight);
			}
		}
	}
	,onPress: function() {
		if(this.highlight != null) {
			this._scene.remove(this.highlight);
			this.highlight = null;
		}
		if(this.over && this.down) {
			this.over = this.down = false;
			if(this.onButtonUp != null) {
				this.onButtonUp();
			}
			this.clickDelay = 1;
		}
	}
	,onDown: function() {
		if(this.clickDelay <= 0) {
			this.down = this.over = true;
			if(this.onButtonDown != null) {
				this.onButtonDown();
			}
		}
	}
	,onEnter: function() {
		this.over = true;
	}
	,onExit: function() {
		this.down = this.over = false;
	}
	,__class__: catalyst_entities_BaseButton
});
var catalyst_entities_StaticCatEntity = function(cat) {
	this.appearanceLocked = false;
	haxepunk_Entity.call(this);
	this.cat = cat;
	this.sp = new catalyst_graphics_CatSpinePunk(cat);
	this.sp.state.onEvent.add($bind(this,this.onEvent));
	this.addGraphic(this.sp);
	this.set_collidable(true);
	this.set_type("cat");
	this.set_width(256);
	this.set_height(256);
	this.originX = this.get_width() * 0.5 | 0;
	this.originY = this.get_height() * 0.75 | 0;
	this.emitter = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/star.png",false));
	this.emitter.smooth = true;
	this.emitter.pixelSnapping = false;
	this.emitter.addType("sparkle",null);
	this.emitter.setMotion("sparkle",90,64,0.75,0,32,0.5);
	this.emitter.setGravity("sparkle",8);
	this.emitter.setRotation("sparkle",-10,20);
	this.emitter.setAlpha("sparkle",1,0,haxepunk_utils_Ease.quadOut);
	this.emitter.setScale("sparkle",0.5,1,haxepunk_utils_Ease.quadOut);
	this.sleepEmitter = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/z.png",false));
	this.sleepEmitter.smooth = true;
	this.sleepEmitter.pixelSnapping = false;
	this.sleepEmitter.addType("z",null);
	this.sleepEmitter.setMotion("z",75,64,0.75,30,32,0.5);
	this.sleepEmitter.setGravity("z",-1);
	this.sleepEmitter.setAlpha("z",0.5,0,catalyst_entities_StaticCatEntity.zEase);
	this.sleepEmitter.setScale("z",1,0.5,catalyst_entities_StaticCatEntity.zEase);
	this.addGraphic(this.sleepEmitter);
	this.addGraphic(this.emitter);
};
$hxClasses["catalyst.entities.StaticCatEntity"] = catalyst_entities_StaticCatEntity;
catalyst_entities_StaticCatEntity.__name__ = ["catalyst","entities","StaticCatEntity"];
catalyst_entities_StaticCatEntity.zEase = function(t) {
	if(t < 0.25) {
		return 1 - t * 4;
	} else if(t < 0.75) {
		return 0;
	} else {
		var t1 = (t - 0.75) * 4;
		return -t1 * (t1 - 2);
	}
};
catalyst_entities_StaticCatEntity.__super__ = haxepunk_Entity;
catalyst_entities_StaticCatEntity.prototype = $extend(haxepunk_Entity.prototype,{
	cat: null
	,sp: null
	,onHit: null
	,emitter: null
	,sleepEmitter: null
	,spVersion: null
	,appearanceLocked: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		if(!this.appearanceLocked && this.spVersion != this.cat.spVersion) {
			this.sp.regenerateSkin();
			this.sp.setColors();
			this.spVersion = this.cat.spVersion;
		}
		if(this.cat.leveledUp) {
			catalyst_Sound.sfxQueue.push("levelup");
			catalyst_Sound.volumeQueue.push(1);
			this.sparkle();
			this.cat.leveledUp = false;
		}
	}
	,sparkle: function(n) {
		if(n == null) {
			n = 0;
		}
		var _g1 = 0;
		var _g = n == 0 ? 4 : n;
		while(_g1 < _g) {
			++_g1;
			this.emitter.emitInCircle("sparkle",0,-this.get_height() / 8,this.get_width() * 0.35);
		}
	}
	,lockAppearance: function() {
		this.appearanceLocked = true;
	}
	,onEvent: function(trackEntry,event) {
		switch(event._data.name) {
		case "hit":
			if(this.onHit != null) {
				this.onHit();
				this.onHit = null;
			}
			break;
		case "particle":
			switch(event.stringValue) {
			case "sparkle":
				this.emitter.emitInCircle(event.stringValue,0,-this.get_height() / 4,this.get_width() * 0.4);
				break;
			case "z":
				this.sleepEmitter.emitInCircle(event.stringValue,this.get_width() * 0.25 * (!this.sp.skeleton.flipX ? 1 : -1),-this.get_height() / 4,this.get_width() * 0.25);
				break;
			default:
			}
			break;
		default:
		}
	}
	,moveCatTowards: function(tx,ty,speedMultiplier,turn) {
		if(turn == null) {
			turn = true;
		}
		if(speedMultiplier == null) {
			speedMultiplier = 1;
		}
		var dx = tx - this.get_localX();
		var dy = ty - this.get_localY();
		var dlen = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
		dx /= dlen;
		dy /= dlen;
		var movement = speedMultiplier * this.sp.speed * haxepunk_HXP.elapsed * 256;
		var arrived = false;
		if(dlen <= movement) {
			this.set_localX(tx);
			this.set_localY(ty);
			movement = dlen;
			arrived = true;
		} else {
			var _g = this;
			_g.set_x(_g.get_x() + dx * movement);
			var _g1 = this;
			_g1.set_y(_g1.get_y() + dy * movement);
			if(turn && Math.abs(dx * movement) > 1) {
				this.sp.set_facingRight(dx > 0);
			}
		}
		return arrived;
	}
	,__class__: catalyst_entities_StaticCatEntity
});
var catalyst_entities_BattleCatEntity = function(battle,cat) {
	this.highlighted = false;
	this.trails = 0;
	this.perceivedHp = 0;
	this.shakeY = 0;
	this.shakeX = 0;
	this.flashTime = 0;
	this.homeY = 0;
	this.homeX = 0;
	catalyst_entities_StaticCatEntity.call(this,cat);
	this.sp.wearHat();
	this.addGraphic(new catalyst_graphics_CatStatMeter(cat));
	this.set_collidable(false);
};
$hxClasses["catalyst.entities.BattleCatEntity"] = catalyst_entities_BattleCatEntity;
catalyst_entities_BattleCatEntity.__name__ = ["catalyst","entities","BattleCatEntity"];
catalyst_entities_BattleCatEntity.__super__ = catalyst_entities_StaticCatEntity;
catalyst_entities_BattleCatEntity.prototype = $extend(catalyst_entities_StaticCatEntity.prototype,{
	homeX: null
	,homeY: null
	,flashTime: null
	,flashColor: null
	,shakeX: null
	,shakeY: null
	,perceivedHp: null
	,trails: null
	,highlighted: null
	,update: function() {
		if(!this.highlighted) {
			this.sp.set_color(this.flashTime > 0 ? this.flashColor : 16777215);
		}
		this.flashTime -= haxepunk_HXP.elapsed / 0.0833333333333333287;
		if(this.flashTime < 0) {
			this.sp.x -= this.shakeX;
			this.sp.y -= this.shakeY;
			this.shakeX = this.shakeY = 0;
			this.flashTime = 0;
		} else {
			this.sp.x -= this.shakeX;
			this.sp.y -= this.shakeY;
			this.shakeX = Std.random(16) * (Math.random() > 0.5 ? 1 : -1);
			this.shakeY = Std.random(16) * (Math.random() > 0.5 ? 1 : -1);
			this.sp.x += this.shakeX;
			this.sp.y += this.shakeY;
		}
		catalyst_entities_StaticCatEntity.prototype.update.call(this);
		var y = this.get_localY();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
	}
	,render: function(camera) {
		var _gthis = this;
		if(this.trails > 0) {
			var originalOnHit = this.onHit;
			this.onHit = null;
			_gthis.sp.state.update(-this.trails * 0.0333333333333333329 * _gthis.sp.speed);
			_gthis.sp.state.apply(_gthis.sp.skeleton);
			_gthis.sp.skeleton.updateWorldTransform();
			var alpha = this.sp.alpha;
			var _g1 = 0;
			var _g = this.trails;
			while(_g1 < _g) {
				this.sp.set_alpha(alpha * Math.pow(0.25,this.trails - _g1++));
				catalyst_entities_StaticCatEntity.prototype.render.call(this,camera);
				_gthis.sp.state.update(0.0333333333333333329 * _gthis.sp.speed);
				_gthis.sp.state.apply(_gthis.sp.skeleton);
				_gthis.sp.skeleton.updateWorldTransform();
			}
			this.sp.set_alpha(alpha);
			this.onHit = originalOnHit;
		}
		catalyst_entities_StaticCatEntity.prototype.render.call(this,camera);
	}
	,flash: function(c) {
		this.flashColor = c;
		this.flashTime = 1;
	}
	,updateHp: function(perceivedHp) {
		this.perceivedHp = perceivedHp;
	}
	,__class__: catalyst_entities_BattleCatEntity
});
var catalyst_entities_BattleCounter = function() {
	catalyst_entities_CounterPanel.call(this,"sword-icon",false,"0",13121335,1);
};
$hxClasses["catalyst.entities.BattleCounter"] = catalyst_entities_BattleCounter;
catalyst_entities_BattleCounter.__name__ = ["catalyst","entities","BattleCounter"];
catalyst_entities_BattleCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_BattleCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var v = catalyst__$BattleData_BattleData_$Impl_$.ordered.length;
		var _this = catalyst_GameData.get_current();
		var v1 = Std.string(Math.min(v,_this.labs.get(_this.currentRegion).battleLevel + 1));
		if(this.value != v1) {
			this.value = v1;
			this.setLabel();
		}
		this.set_maxValue(Std.string(catalyst__$BattleData_BattleData_$Impl_$.ordered.length));
	}
	,__class__: catalyst_entities_BattleCounter
});
var catalyst_entities__$BattleEntity_EventAnimation = function(e1,e2,event,battle) {
	this.state = 0;
	this.e1 = e1;
	this.e2 = e2;
	this.event = event;
};
$hxClasses["catalyst.entities._BattleEntity.EventAnimation"] = catalyst_entities__$BattleEntity_EventAnimation;
catalyst_entities__$BattleEntity_EventAnimation.__name__ = ["catalyst","entities","_BattleEntity","EventAnimation"];
catalyst_entities__$BattleEntity_EventAnimation.prototype = {
	e1: null
	,e2: null
	,event: null
	,state: null
	,update: function(be,hud,seen) {
		var _gthis = this;
		var battle = be.battle;
		switch(this.state) {
		case 0:
			this.attrBubble(this.e1,this.event.stat);
			++this.state;
			break;
		case 1:case 5:
			this.e1.trails = 0;
			this.e1.sp.setAnimation(this.state == 1 ? "run" : "walk",true);
			var tx;
			var ty;
			if(this.state == 1) {
				tx = this.e2.get_x() + this.e2.get_width() / 2 * (this.e2.cat.wild ? 1 : -1);
				ty = this.e2.get_y() + 10;
			} else {
				tx = this.e1.homeX;
				ty = this.e1.homeY;
			}
			var tmp;
			if(this.event.stat != "cha") {
				var tmp1 = this.e1;
				var tmp2 = this.state == 1 ? 3 : 2;
				var tmp3 = catalyst_GameData.get_current().fastMode ? 1.5 : 1;
				tmp = tmp1.moveCatTowards(tx,ty,tmp2 * (seen ? 1.5 : 1) * tmp3,false);
			} else {
				tmp = true;
			}
			if(tmp) {
				++this.state;
			}
			break;
		case 2:
			battle.poll();
			++this.state;
			this.e1.onHit = function() {
				++_gthis.state;
			};
			this.e1.sp.setAnimation("attack-" + this.event.stat + (this.event.crit ? "-crit" : ""),false);
			if(this.event.success && this.event.stat != "cha") {
				this.e1.trails = 3;
			}
			break;
		case 3:
			break;
		case 4:
			be.updateHp(this.e2.cat,battle.getHp(this.e2.cat));
			if(this.event.success) {
				var sound;
				switch(this.event.stat) {
				case "cha":
					sound = "hitcha";
					break;
				case "int":
					sound = "hitint";
					break;
				case "str":
					sound = "hitstr";
					break;
				}
				catalyst_Sound.sfxQueue.push(sound);
				catalyst_Sound.volumeQueue.push(1);
				this.e2.flash(this.event.stat == "cha" ? 8454016 : 16744576);
				if(this.event.finalHp <= 0) {
					this.e2.sp.setAnimation("defeat",false);
					var _this = this.e2.sp;
					if(_this.eyesOpen != false) {
						_this.state.setAnimationByName(1,"eyes closed",true);
						_this.state.setAnimationByName(2,"rest wings",true);
					}
					_this.eyesOpen = false;
				} else if(this.event.stat != "cha") {
					this.e2.sp.setAnimation("hit",false);
					(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).shake(this.event.crit ? 0.5 : 0.25,this.event.crit ? 6 : 4);
				}
				var dmgLabelText;
				if(this.event.damage >= 0) {
					dmgLabelText = "" + this.event.damage;
					if(this.event.crit) {
						dmgLabelText = "<big><red>" + dmgLabelText + "</red></big>";
					}
				} else {
					dmgLabelText = "<green>+" + -this.event.damage + "</green>";
					if(this.event.crit) {
						dmgLabelText = "<big>" + dmgLabelText + "</big>";
					}
				}
				this.damageLabel(this.e2,dmgLabelText);
				if(this.event.debuff != 0) {
					var debuffLabelText;
					if(this.event.debuff > 0) {
						debuffLabelText = "<claws-icon/><small><purple>-" + this.event.debuff + "</purple></small>";
					} else {
						debuffLabelText = "<claws-icon/><small><blue>+" + -this.event.debuff + "</blue></small>";
					}
					this.damageLabel(this.e2,debuffLabelText,0.75);
				}
			} else {
				catalyst_Sound.sfxQueue.push("miss");
				catalyst_Sound.volumeQueue.push(1);
				this.damageLabel(this.e2,"MISS");
			}
			++this.state;
			break;
		case 6:
			if(this.event.finalHp <= 0) {
				catalyst_Sound.sfxQueue.push("defeated");
				catalyst_Sound.volumeQueue.push(1);
			}
			if(!battle.finished) {
				if(be.alive(this.e1.cat)) {
					this.e1.sp.setAnimation("sit",true);
				}
				if(be.alive(this.e2.cat)) {
					this.e2.sp.setAnimation("sit",true);
				}
			}
			return true;
		}
		return false;
	}
	,damageLabel: function(e,v,delay) {
		if(delay == null) {
			delay = 0;
		}
		var dmg = new catalyst_entities_DamageNumber(v,delay);
		dmg.set_x(e.get_x());
		dmg.set_y(e.get_y());
		e._scene.add(dmg);
	}
	,attrBubble: function(e,stat) {
		var bubble = new catalyst_entities_AttrBubble(stat);
		bubble.set_x(e.get_x() + e.get_width() * (!e.sp.skeleton.flipX ? -0.5 : 0.5));
		bubble.set_y(e.get_y() - e.get_height() * 0.75);
		e._scene.add(bubble);
	}
	,__class__: catalyst_entities__$BattleEntity_EventAnimation
};
var haxepunk_EntityList = function() {
	this.entities = [];
	this._recycled = new List();
	haxepunk_Entity.call(this);
};
$hxClasses["haxepunk.EntityList"] = haxepunk_EntityList;
haxepunk_EntityList.__name__ = ["haxepunk","EntityList"];
haxepunk_EntityList.__super__ = haxepunk_Entity;
haxepunk_EntityList.prototype = $extend(haxepunk_Entity.prototype,{
	entities: null
	,add: function(entity,index) {
		if(index == null) {
			index = -1;
		}
		if(index < 0) {
			this.entities.push(entity);
		} else {
			this.entities.splice(index,0,entity);
		}
		if(this._type != "") {
			entity.set_type(this._type);
		}
		if(this._scene != null) {
			this._scene.add(entity);
		}
		entity.parent = this;
		entity.set_layer(this._layer);
		entity.set_camera(this.camera);
		return entity;
	}
	,remove: function(entity) {
		HxOverrides.remove(this.entities,entity);
		if(this._scene != null) {
			this._scene.remove(entity);
		}
		entity.parent = null;
		return entity;
	}
	,pop: function() {
		var entity = this.entities.pop();
		if(entity != null) {
			if(this._scene != null) {
				this._scene.remove(entity);
			}
			entity.parent = null;
		}
		return entity;
	}
	,added: function() {
		haxepunk_Entity.prototype.added.call(this);
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.add(entity);
			}
		}
	}
	,removed: function() {
		if(this._scene != null) {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				this._scene.remove(entity);
			}
		}
		haxepunk_Entity.prototype.removed.call(this);
	}
	,set_type: function(value) {
		if(value != "") {
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				entity.set_type(value);
			}
		}
		return this._type = value;
	}
	,set_layer: function(value) {
		var originalLayer = this._layer;
		var value1 = haxepunk_Entity.prototype.set_layer.call(this,value);
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_layer(entity._layer - originalLayer + value1);
		}
		return value1;
	}
	,set_camera: function(value) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			entity.set_camera(value);
		}
		return this.camera = value;
	}
	,_recycled: null
	,__class__: haxepunk_EntityList
});
var catalyst_entities_BattleEntity = function(battle,mouseManager) {
	this.seen = new haxe_ds_ObjectMap();
	this.eventDelay = 0;
	this.knownHp = new haxe_ds_ObjectMap();
	this.catCount = 0;
	this.eneCount = 0;
	this.catEntities = new haxe_ds_ObjectMap();
	haxepunk_EntityList.call(this);
	this.battle = battle;
	this.addButton = new catalyst_entities_IconButton("sword-icon",mouseManager,$bind(this,this.chooseCat));
	this.addButton.color = 13121335;
	var _this = this.addButton;
	_this.set_active(_this.set_visible(_this.set_collidable(false)));
	this.add(this.addButton);
	this.add(this.hud = new catalyst_entities_BattleHud(battle));
};
$hxClasses["catalyst.entities.BattleEntity"] = catalyst_entities_BattleEntity;
catalyst_entities_BattleEntity.__name__ = ["catalyst","entities","BattleEntity"];
catalyst_entities_BattleEntity.__super__ = haxepunk_EntityList;
catalyst_entities_BattleEntity.prototype = $extend(haxepunk_EntityList.prototype,{
	battle: null
	,catEntities: null
	,eneCount: null
	,catCount: null
	,knownHp: null
	,addButton: null
	,currentEvent: null
	,hud: null
	,eventDelay: null
	,seen: null
	,update: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(entity,catalyst_entities_BattleCatEntity)) {
				var tmp = catalyst_GameData.get_current().fastMode ? 1.5 : 1;
				entity.sp.speed = tmp;
			}
		}
		haxepunk_EntityList.prototype.update.call(this);
		var _g2 = 0;
		var _g11 = this.battle.opponents;
		while(_g2 < _g11.length) {
			var cat = _g11[_g2];
			++_g2;
			if(this.catEntities.h.__keys__[cat.__id__] == null) {
				var count = _gthis.eneCount;
				var e = new catalyst_entities_BattleCatEntity(_gthis.battle,cat);
				e.set_x(600 + -80 * count);
				e.set_y(600 + 100 * count);
				e.homeX = e.get_x();
				e.homeY = e.get_y();
				e.sp.set_facingRight(true);
				_gthis.catEntities.set(cat,e);
				_gthis.updateHp(e.cat,_gthis.battle.getHp(e.cat));
				_gthis.add(e);
				++this.eneCount;
			}
		}
		var _g3 = 0;
		var _this = catalyst_GameData.get_current();
		var _g12 = _this.labs.get(_this.currentRegion).cats.cats.get("coliseum");
		while(_g3 < _g12.length) {
			var cat1 = _g12[_g3];
			++_g3;
			if(this.catEntities.h.__keys__[cat1.__id__] == null) {
				var count1 = _gthis.catCount;
				var e1 = new catalyst_entities_BattleCatEntity(_gthis.battle,cat1);
				e1.set_x(600 + -80 * count1);
				e1.set_x(haxepunk_HXP.width - e1.get_x());
				e1.set_y(600 + 100 * count1);
				e1.homeX = e1.get_x();
				e1.homeY = e1.get_y();
				e1.sp.set_facingRight(false);
				_gthis.catEntities.set(cat1,e1);
				_gthis.updateHp(e1.cat,_gthis.battle.getHp(e1.cat));
				_gthis.add(e1);
				++this.catCount;
			}
		}
		if(this.currentEvent != null) {
			if(this.currentEvent.update(this,this.hud,this.seen.h.__keys__[this.currentEvent.e1.cat.__id__] != null)) {
				this.seen.set(this.currentEvent.e1.cat,true);
				this.currentEvent = null;
				this.eventDelay = 0;
			}
		} else if(this.eventDelay < 1) {
			this.eventDelay += haxepunk_HXP.elapsed / 0.25;
		} else {
			switch(this.battle.state) {
			case 0:
				this.addButton.set_x(haxepunk_HXP.width - (600 + -80 * this.catCount));
				this.addButton.set_y(600 + 100 * this.catCount);
				var _this1 = this.addButton;
				_this1.set_active(_this1.set_visible(_this1.set_collidable(true)));
				if(this.addButton.highlight == null) {
					this.addButton.addHighlightArrow();
				}
				break;
			case 1:
				catalyst_GameData.get_current().checkTutorial("fight");
				var _this2 = this.addButton;
				_this2.set_active(_this2.set_visible(_this2.set_collidable(false)));
				var nextEvent = this.battle.poll();
				if(nextEvent != null && nextEvent.pending) {
					this.currentEvent = new catalyst_entities__$BattleEntity_EventAnimation(this.catEntities.get(nextEvent.cat),this.catEntities.get(nextEvent.target),nextEvent,this.battle);
				}
				break;
			case 2:
				var _this3 = this.addButton;
				_this3.set_active(_this3.set_visible(_this3.set_collidable(false)));
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_BattleResultScene(this.battle));
				this._scene.remove(this);
				break;
			}
		}
	}
	,alive: function(cat) {
		if(this.knownHp.h.__keys__[cat.__id__] != null) {
			return this.knownHp.h[cat.__id__] > 0;
		} else {
			return false;
		}
	}
	,updateHp: function(cat,hp) {
		this.knownHp.set(cat,hp);
		this.hud.updateHp(cat,hp);
		this.catEntities.h[cat.__id__].updateHp(hp);
	}
	,chooseCat: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatInRoomScene("<sword-icon/>Fight",function(cat) {
			var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
			var txt1 = "<right><blue>LV " + cat.level + "/";
			var cat1 = cat._maxLevel;
			var x;
			if(cat.wild) {
				x = 0;
			} else {
				var _this = catalyst_GameData.get_current();
				x = _this.labs.get(_this.currentRegion).tech / 100;
			}
			var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
			var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
			var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			}
			if(cat.mutations > 0) {
				txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
			}
			return txt2;
		},function(cat2) {
			var _this1 = catalyst_GameData.get_current();
			_this1.labs.get(_this1.currentRegion).addCatToBattle(cat2);
		},null,function(cat3) {
			return cat3.hp >= 1;
		}));
	}
	,__class__: catalyst_entities_BattleEntity
});
var catalyst_entities_BattleHud = function(battle) {
	this.meters = new haxe_ds_ObjectMap();
	this.catCount = 0;
	this.opponentCount = 0;
	haxepunk_EntityList.call(this);
	this.battle = battle;
	this.meters = new haxe_ds_ObjectMap();
};
$hxClasses["catalyst.entities.BattleHud"] = catalyst_entities_BattleHud;
catalyst_entities_BattleHud.__name__ = ["catalyst","entities","BattleHud"];
catalyst_entities_BattleHud.__super__ = haxepunk_EntityList;
catalyst_entities_BattleHud.prototype = $extend(haxepunk_EntityList.prototype,{
	battle: null
	,opponentCount: null
	,catCount: null
	,meters: null
	,update: function() {
		while(this.opponentCount < this.battle.opponents.length) {
			var cat = this.battle.opponents[this.opponentCount];
			var this1 = this.meters;
			var v = new catalyst_entities_CatHealthMeter(cat,false);
			this1.set(cat,v);
			this.add(v);
			v.set_x(haxepunk_HXP.width / 8 + this.opponentCount * v.get_width() * 1.5);
			v.set_y(haxepunk_HXP.height / 8);
			++this.opponentCount;
			this.updateHp(cat,cat.hp);
		}
		while(true) {
			var tmp = this.catCount;
			var _this = catalyst_GameData.get_current();
			if(!(tmp < _this.labs.get(_this.currentRegion).cats.cats.get("coliseum").length)) {
				break;
			}
			var _this1 = catalyst_GameData.get_current();
			var cat1 = _this1.labs.get(_this1.currentRegion).cats.cats.get("coliseum")[this.catCount];
			var this2 = this.meters;
			var v1 = new catalyst_entities_CatHealthMeter(cat1,true);
			this2.set(cat1,v1);
			this.add(v1);
			v1.set_x(haxepunk_HXP.width * 0.875 - (catalyst__$BattleData_BattleData_$Impl_$.get_cats(this.battle.type) - this.catCount - 1) * v1.get_width() * 1.5);
			v1.set_y(haxepunk_HXP.height / 8);
			++this.catCount;
			this.updateHp(cat1,cat1.hp);
		}
		haxepunk_EntityList.prototype.update.call(this);
	}
	,updateHp: function(cat,hp) {
		if(this.meters.h.__keys__[cat.__id__] != null) {
			this.meters.h[cat.__id__].updateHp(hp);
		}
	}
	,__class__: catalyst_entities_BattleHud
});
var catalyst_entities_CatCounter = function() {
	catalyst_entities_CounterPanel.call(this,"cat-icon",false,"0",15314909,null,0.875);
};
$hxClasses["catalyst.entities.CatCounter"] = catalyst_entities_CatCounter;
catalyst_entities_CatCounter.__name__ = ["catalyst","entities","CatCounter"];
catalyst_entities_CatCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_CatCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var count = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			count += _this1.cats.get(room).length;
		}
		var v = Std.string(count);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this2 = catalyst_GameData.get_current();
		var _this3 = _this2.labs.get(_this2.currentRegion);
		this.set_maxValue(Std.string(catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"cat_capacity",_this3.bonuses)));
	}
	,__class__: catalyst_entities_CatCounter
});
var catalyst_entities_CatEntity = function(cat,xpMeter) {
	if(xpMeter == null) {
		xpMeter = true;
	}
	this._scruffOffsetY = 0;
	this._scruffOffsetX = 0;
	this.behavior = { type : 1, duration : 0, x : 0, y : 0, target : null};
	this.highlightColor = null;
	catalyst_entities_StaticCatEntity.call(this,cat);
	this.behavior.duration = Math.random();
	if(xpMeter) {
		if(cat._name == null) {
			cat._name = catalyst_CatName.random(cat.sex);
		}
		var nameLabel = new catalyst_graphics_Label(cat._name,null,0);
		if(nameLabel._dirty) {
			nameLabel.parseText();
		}
		nameLabel.x = -nameLabel.textWidth / 2;
		nameLabel.y = -this.get_height() * 0.75;
		this.addGraphic(nameLabel);
		this.addGraphic(new catalyst_graphics_MiniXPMeter(cat));
	}
};
$hxClasses["catalyst.entities.CatEntity"] = catalyst_entities_CatEntity;
catalyst_entities_CatEntity.__name__ = ["catalyst","entities","CatEntity"];
catalyst_entities_CatEntity.__super__ = catalyst_entities_StaticCatEntity;
catalyst_entities_CatEntity.prototype = $extend(catalyst_entities_StaticCatEntity.prototype,{
	highlightColor: null
	,behavior: null
	,_scruffOffsetX: null
	,_scruffOffsetY: null
	,update: function() {
		if(this.cat.room == "cryo_lab") {
			this.sp.set_color(4210943);
			var _this = this.cat;
			var health = _this.hp / (_this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha"));
			this.sp.speed = 0.4 * (health > 0.5 ? 1 : 0.5 + health);
		} else {
			this.sp.set_color(16777215);
			var _this1 = this.cat;
			var health1 = _this1.hp / (_this1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"cha"));
			this.sp.speed = health1 > 0.5 ? 1 : 0.5 + health1;
		}
		if(this.behavior.type != -1) {
			this.collideInto(this._type,this.get_x(),this.get_y(),catalyst_entities_CatEntity._collisionArray);
			while(catalyst_entities_CatEntity._collisionArray.length > 0) {
				var collision = catalyst_entities_CatEntity._collisionArray.pop();
				if(collision.behavior.type == -1) {
					continue;
				}
				var dx = collision.get_localX() - this.get_localX();
				var dy = collision.get_localY() - this.get_localY();
				var dlen = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));
				if(dlen < this.get_width() / 2) {
					dx /= dlen;
					dy /= dlen;
					var movement = haxepunk_HXP.elapsed * 256 * 0.25;
					var _this2 = this.cat;
					var health2 = _this2.hp / (_this2.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this2.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this2.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this2.stats,"cha"));
					var movement1 = movement * (health2 > 0.5 ? 1 : 0.5 + health2);
					var _g = this;
					_g.set_x(_g.get_x() - dx * movement1);
					var _g1 = this;
					_g1.set_y(_g1.get_y() - dy * movement1);
					collision.set_x(collision.get_x() + dx * movement1);
					collision.set_y(collision.get_y() + dy * movement1);
				}
			}
		}
		var tx = Math.round(haxepunk_math_MathUtil.clamp(this.get_localX(),haxepunk_HXP.width * 0.2 | 0,this.cat.room == "gift_room" ? haxepunk_HXP.width * 0.7 | 0 : haxepunk_HXP.width * 0.8 | 0)) | 0;
		var x = this.get_localY();
		var x1;
		switch(this.cat.room) {
		case "cat_cafe":
			x1 = haxepunk_HXP.height * 0.4875;
			break;
		case "gift_room":
			x1 = haxepunk_HXP.height * 0.5;
			break;
		case "travel_agency":
			x1 = haxepunk_HXP.height * 0.55;
			break;
		default:
			x1 = haxepunk_HXP.height * 0.4 | 0;
		}
		var ty = Math.round(haxepunk_math_MathUtil.clamp(x,x1,this.cat.room == "cat_cafe" ? haxepunk_HXP.height * 0.6 : haxepunk_HXP.height * 0.8 | 0)) | 0;
		if(this.get_localX() != tx || this.get_localY() != ty) {
			this.moveCatTowards(tx,ty,4 * (1 + Math.abs(tx - this.get_localX()) / this.get_width() + Math.abs(ty - this.get_localY()) / this.get_height()));
		}
		var y = this.get_localY();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
		if(this.behavior.duration > 0) {
			if((this.behavior.type | 0) >= 0) {
				this.behavior.duration -= haxepunk_HXP.elapsed;
			}
			if(this.cat.room == "nap_room" && this.behavior.type != -1) {
				this.behavior.type = 0;
			}
			switch(this.behavior.type) {
			case -1:
				var _this3 = this._scene;
				var _this4 = _this3.camera;
				this.set_x(((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this3.x) / (_this4.scale * _this4.scaleX * haxepunk_HXP.screen.scaleX) + _this3.camera.x | 0) + this._scruffOffsetX);
				var _this5 = this._scene;
				var _this6 = _this5.camera;
				this.set_y(((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this5.y) / (_this6.scale * _this6.scaleY * haxepunk_HXP.screen.scaleY) + _this5.camera.y | 0) + this._scruffOffsetY);
				break;
			case 0:
				this.sp.setAnimation("sleep");
				break;
			case 1:
				this.sp.setAnimation("sit");
				break;
			case 2:
				this.sp.setAnimation("stretch");
				break;
			case 3:case 4:
				if(this.moveCatTowards(this.behavior.x,this.behavior.y,this.behavior.type == 4 ? 2 : 1)) {
					this.behavior.duration = 0;
				}
				this.sp.setAnimation(this.behavior.type == 3 ? "walk" : "run");
				break;
			case 5:
				this.sp.setAnimation("scratch");
				break;
			case 6:
				this.sp.setAnimation("lay");
				break;
			}
		} else if((this.behavior.type | 0) >= 0) {
			this.behavior.type = Std.random(7);
			var tmp = Math.random() * 10;
			this.behavior.duration = 5 + tmp;
			switch(this.behavior.type) {
			case 0:
				this.behavior.duration *= 2;
				break;
			case 3:case 4:
				this.behavior.x = catalyst_Client.randomX(this.cat.room);
				this.behavior.y = catalyst_Client.randomY(this.cat.room);
				break;
			default:
			}
		}
		catalyst_entities_StaticCatEntity.prototype.update.call(this);
	}
	,scruff: function(x,y) {
		this.behavior.type = -1;
		this.sp.setAnimation("scruff");
		this._scruffOffsetX = 0;
		this._scruffOffsetY = this.get_height() / 2;
	}
	,unscruff: function() {
		this._scruffOffsetX = this._scruffOffsetY = 0;
		this.behavior.type = Std.random(7);
		var tmp = Math.random() * 10;
		this.behavior.duration = 5 + tmp;
		switch(this.behavior.type) {
		case 0:
			this.behavior.duration *= 2;
			break;
		case 3:case 4:
			this.behavior.x = catalyst_Client.randomX(this.cat.room);
			this.behavior.y = catalyst_Client.randomY(this.cat.room);
			break;
		default:
		}
	}
	,__class__: catalyst_entities_CatEntity
});
var catalyst_entities_CatHealthMeter = function(cat,friendly) {
	this.perceivedHp = 0;
	haxepunk_EntityList.call(this);
	this.cat = cat;
	this.meter = new catalyst_graphics_CircularMeter();
	this.addGraphic(this.meter);
	this.meter.y = this.meter.height * 0.125 | 0;
	this.portrait = new catalyst_entities_CatPortrait(cat);
	this.add(this.portrait);
	this.set_width(this.meter.width | 0);
	this.set_height(this.meter.height | 0);
	this.hpLabel = new catalyst_graphics_Label("" + this.perceivedHp,null,3);
	this.add(new haxepunk_Entity(null,null,this.hpLabel));
	this.perceivedHp = cat.hp;
};
$hxClasses["catalyst.entities.CatHealthMeter"] = catalyst_entities_CatHealthMeter;
catalyst_entities_CatHealthMeter.__name__ = ["catalyst","entities","CatHealthMeter"];
catalyst_entities_CatHealthMeter.__super__ = haxepunk_EntityList;
catalyst_entities_CatHealthMeter.prototype = $extend(haxepunk_EntityList.prototype,{
	cat: null
	,meter: null
	,portrait: null
	,hpLabel: null
	,perceivedHp: null
	,update: function() {
		var _this = this.cat;
		var perceivedHealth = haxepunk_math_MathUtil.clamp(this.perceivedHp / (_this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha")),0,1);
		var fill = this.meter.fill;
		var maxFill = haxepunk_HXP.elapsed / 1.5;
		if(Math.abs(perceivedHealth - fill) < maxFill) {
			fill = this.meter.fill = perceivedHealth;
		} else {
			fill += maxFill * (perceivedHealth > fill ? 1 : -1);
			this.meter.fill = fill;
		}
		var tmp;
		if(fill >= 0.9) {
			tmp = 5939244;
		} else if(fill >= 0.5) {
			var this1 = 16765994;
			var t = (fill - 0.5) / 0.45;
			if(t <= 0) {
				tmp = this1;
			} else if(t >= 1) {
				tmp = 5939244;
			} else {
				var a = this1 >>> 24 & 255;
				var r = this1 >>> 16 & 255;
				var g = this1 >>> 8 & 255;
				var b = this1 & 255;
				a = 0 * t | 0;
				r = 255 + (-165 * t | 0);
				g = 212 + (-52 * t | 0);
				b = 42 + (2 * t | 0);
				tmp = a << 24 | r << 16 | g << 8 | b;
			}
		} else if(fill >= 0.1) {
			var this2 = 13893632;
			var t1 = (fill - 0.1) / 0.45;
			if(t1 <= 0) {
				tmp = this2;
			} else if(t1 >= 1) {
				tmp = 16765994;
			} else {
				var a1 = this2 >>> 24 & 255;
				var r1 = this2 >>> 16 & 255;
				var g1 = this2 >>> 8 & 255;
				var b1 = this2 & 255;
				a1 = 0 * t1 | 0;
				r1 = 212 + (43 * t1 | 0);
				g1 = 212 * t1 | 0;
				b1 = 42 * t1 | 0;
				tmp = a1 << 24 | r1 << 16 | g1 << 8 | b1;
			}
		} else {
			tmp = 13893632;
		}
		this.meter.set_color(tmp);
		var tmp1 = this.hpLabel;
		var _this1 = this.cat;
		var fill1 = this.perceivedHp / (_this1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"cha"));
		var tmp2;
		if(fill1 >= 0.9) {
			tmp2 = 5939244;
		} else if(fill1 >= 0.5) {
			var this3 = 16765994;
			var t2 = (fill1 - 0.5) / 0.45;
			if(t2 <= 0) {
				tmp2 = this3;
			} else if(t2 >= 1) {
				tmp2 = 5939244;
			} else {
				var a2 = this3 >>> 24 & 255;
				var r2 = this3 >>> 16 & 255;
				var g2 = this3 >>> 8 & 255;
				var b2 = this3 & 255;
				a2 = 0 * t2 | 0;
				r2 = 255 + (-165 * t2 | 0);
				g2 = 212 + (-52 * t2 | 0);
				b2 = 42 + (2 * t2 | 0);
				tmp2 = a2 << 24 | r2 << 16 | g2 << 8 | b2;
			}
		} else if(fill1 >= 0.1) {
			var this4 = 13893632;
			var t3 = (fill1 - 0.1) / 0.45;
			if(t3 <= 0) {
				tmp2 = this4;
			} else if(t3 >= 1) {
				tmp2 = 16765994;
			} else {
				var a3 = this4 >>> 24 & 255;
				var r3 = this4 >>> 16 & 255;
				var g3 = this4 >>> 8 & 255;
				var b3 = this4 & 255;
				a3 = 0 * t3 | 0;
				r3 = 212 + (43 * t3 | 0);
				g3 = 212 * t3 | 0;
				b3 = 42 * t3 | 0;
				tmp2 = a3 << 24 | r3 << 16 | g3 << 8 | b3;
			}
		} else {
			tmp2 = 13893632;
		}
		tmp1.set_color(tmp2);
		var _this2 = this.hpLabel;
		var _this3 = this.hpLabel;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.x = -_this3.textWidth / 2;
		this.hpLabel.y = this.get_height() / 2;
		haxepunk_EntityList.prototype.update.call(this);
	}
	,updateHp: function(hp) {
		this.perceivedHp = hp;
		this.hpLabel.set_text("" + this.perceivedHp);
	}
	,__class__: catalyst_entities_CatHealthMeter
});
var catalyst_entities_Panel = function(color,alpha,width,height) {
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	this.selectedColor = 3375104;
	this.baseColor = 16777215;
	haxepunk_EntityList.call(this);
	this.face = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/panel.png",false),48,48,48,48);
	this.face.smooth = true;
	this.face.scaleBorder = true;
	this.face.set_color(this.color = color);
	this.face.set_alpha(this.alpha = alpha);
	this.set_width(256 * width | 0);
	this.set_height(256 * height | 0);
	this.graphic = this.face;
	this.face.set_color(this.baseColor);
	this.selected = false;
	this.set_type("ui");
};
$hxClasses["catalyst.entities.Panel"] = catalyst_entities_Panel;
catalyst_entities_Panel.__name__ = ["catalyst","entities","Panel"];
catalyst_entities_Panel.__super__ = haxepunk_EntityList;
catalyst_entities_Panel.prototype = $extend(haxepunk_EntityList.prototype,{
	face: null
	,set_width: function(v) {
		if(this.face != null) {
			this.face.width = v;
		}
		return haxepunk_EntityList.prototype.set_width.call(this,v);
	}
	,set_height: function(v) {
		if(this.face != null) {
			this.face.height = v;
		}
		return haxepunk_EntityList.prototype.set_height.call(this,v);
	}
	,selected: null
	,color: null
	,alpha: null
	,baseColor: null
	,selectedColor: null
	,__class__: catalyst_entities_Panel
});
var catalyst_entities_CatPanel = function(cat,showName,big) {
	if(big == null) {
		big = false;
	}
	if(showName == null) {
		showName = true;
	}
	this.showName = true;
	this.big = false;
	catalyst_entities_Panel.call(this,16777215,1,2 * (big ? 1.25 : 1),big ? 1.25 : 1);
	this.cat = cat;
	this.big = big;
	this.showName = showName;
	this.addGraphic(new catalyst_graphics_Label("<" + ("" + (cat.sex ? "male" : "female") + "-icon") + "/>"));
	this.typeLabel = new catalyst_graphics_Label("");
	this.addGraphic(this.typeLabel);
	this.catEntity = new catalyst_entities_StaticCatEntity(cat);
	this.catEntity.set_x(this.get_width() / 2);
	this.catEntity.set_y(this.get_height() * 0.75 - (big ? this.get_height() * 0.0625 : 0));
	this.catEntity.sp.state.update(5 * Math.random());
	this.add(this.catEntity);
	if(showName) {
		if(cat._name == null) {
			cat._name = catalyst_CatName.random(cat.sex);
		}
		this.nameLabel = new catalyst_entities_LabelEntity(" " + cat._name,false,0);
		this.add(this.nameLabel);
	} else {
		this.nameLabel = new catalyst_entities_LabelEntity("HP",false);
		this.add(this.nameLabel);
	}
	this.lvLabel = new catalyst_graphics_Label("",null,big ? 3 : 1);
	this.addGraphic(this.lvLabel);
	this.setLabels();
	this.set_type("ui");
	if(big) {
		if(catalyst_Client._noiseShader == null) {
			catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
		}
		this.catEntity.sp.shader = this.face.shader = catalyst_Client._noiseShader;
	}
};
$hxClasses["catalyst.entities.CatPanel"] = catalyst_entities_CatPanel;
catalyst_entities_CatPanel.__name__ = ["catalyst","entities","CatPanel"];
catalyst_entities_CatPanel.__super__ = catalyst_entities_Panel;
catalyst_entities_CatPanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	cat: null
	,catEntity: null
	,typeLabel: null
	,nameLabel: null
	,lvLabel: null
	,big: null
	,showName: null
	,update: function() {
		catalyst_entities_Panel.prototype.update.call(this);
		this.setLabels();
	}
	,setLabels: function() {
		var _this = this.cat;
		this.typeLabel.set_text("<" + catalyst__$CatType_CatType_$Impl_$.get_icon((_this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this) : _this.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this) : _this.assignedJob)) + "/>");
		var _this1 = this.typeLabel;
		var value = this.get_width();
		var _this2 = this.typeLabel;
		if(_this2._dirty) {
			_this2.parseText();
		}
		_this1.x = value - _this2.textWidth;
		this.nameLabel.set_localY(this.get_height() - this.nameLabel.get_height());
		if(!this.showName) {
			var _this3 = this.cat;
			var amt = this.cat.hp / (_this3.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"cha"));
			var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
			var _this4 = this.nameLabel;
			var _this5 = this.cat;
			var s = "<red>HP</red> <" + c + ">" + (Math.round(this.cat.hp) | 0) + ("</" + c + ">/") + (_this5.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this5.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this5.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this5.stats,"cha"));
			_this4.label.set_text(s);
			_this4.setDimensions();
		}
		var s1 = this.big ? "normal" : "small";
		var tmp = this.lvLabel;
		var tmp1 = "" + this.cat.level + "<" + s1 + ">/";
		var _this6 = this.cat;
		var _this7 = _this6._maxLevel;
		var x;
		if(_this6.wild) {
			x = 0;
		} else {
			var _this8 = catalyst_GameData.get_current();
			x = _this8.labs.get(_this8.currentRegion).tech / 100;
		}
		tmp.set_text(tmp1 + (_this7 * (1 + x) | 0) + "</" + s1 + ">");
		var _this9 = this.lvLabel;
		var value1 = this.get_width();
		var _this10 = this.lvLabel;
		if(_this10._dirty) {
			_this10.parseText();
		}
		_this9.x = value1 - _this10.textWidth;
		var _this11 = this.lvLabel;
		var value2 = this.get_height();
		var _this12 = this.lvLabel;
		if(_this12._dirty) {
			_this12.parseText();
		}
		_this11.y = value2 - _this12.textHeight;
	}
	,__class__: catalyst_entities_CatPanel
});
var catalyst_entities_CatPortrait = function(cat) {
	catalyst_entities_StaticCatEntity.call(this,cat);
	this.sp.setAnimation("portrait");
	this.sp.update();
	this.set_collidable(false);
};
$hxClasses["catalyst.entities.CatPortrait"] = catalyst_entities_CatPortrait;
catalyst_entities_CatPortrait.__name__ = ["catalyst","entities","CatPortrait"];
catalyst_entities_CatPortrait.__super__ = catalyst_entities_StaticCatEntity;
catalyst_entities_CatPortrait.prototype = $extend(catalyst_entities_StaticCatEntity.prototype,{
	__class__: catalyst_entities_CatPortrait
});
var catalyst_entities_CatShowEntity = function(mouseManager) {
	this.obstacleX = 0;
	this.event = null;
	this.state = 0;
	haxepunk_EntityList.call(this);
	this.addButton = new catalyst_entities_IconButton("ribbon-icon",mouseManager,$bind(this,this.chooseCat));
	this.addButton.set_x(haxepunk_HXP.height * 0.25);
	this.addButton.set_y(haxepunk_HXP.height * 0.65);
	this.addButton.color = 43732;
	var _this = this.addButton;
	_this.set_active(_this.set_visible(_this.set_collidable(false)));
	var tmp;
	if(catalyst_GameData.get_current().tutorialsEnabled) {
		var _this1 = catalyst_GameData.get_current().tutorials;
		tmp = !(__map_reserved["cat_show"] != null ? _this1.existsReserved("cat_show") : _this1.h.hasOwnProperty("cat_show"));
	} else {
		tmp = false;
	}
	if(tmp) {
		this.addButton.addHighlightArrow();
	}
	this.add(this.addButton);
	this.surrenderButton = new catalyst_entities_IconButton("surrender-icon",mouseManager,$bind(this,this.surrender));
	this.surrenderButton.set_x(haxepunk_HXP.width * 0.10);
	this.surrenderButton.set_y(haxepunk_HXP.height * 0.4);
	this.surrenderButton.color = 16722474;
	var _this2 = this.surrenderButton;
	_this2.set_active(_this2.set_visible(_this2.set_collidable(false)));
	this.add(this.surrenderButton);
	var e = new haxepunk_Entity(null,null,this.track = new catalyst_graphics_Track());
	var tmp1 = (haxepunk_HXP.height - 1) / 8 | 0;
	this.add(e).set_layer(tmp1);
	this.obstacleLabel = new catalyst_graphics_Label("<ribbon-icon/>");
	this.obstacleLabel._visible = false;
	this.obstacleLabel.pixelSnapping = false;
	var e1 = new haxepunk_Entity(null,null,this.obstacleLabel);
	var tmp2 = (haxepunk_HXP.height - haxepunk_HXP.height) / 8 | 0;
	this.add(e1).set_layer(tmp2);
	this.fameLabel = new catalyst_graphics_Label("<ribbon-icon/>",null,4);
	var e2 = new haxepunk_Entity(null,null,this.fameLabel);
	var tmp3 = (haxepunk_HXP.height - haxepunk_HXP.height) / 8 | 0;
	this.add(e2).set_layer(tmp3);
	var _this3 = this.fameLabel;
	var value = haxepunk_HXP.width / 2;
	var _this4 = this.fameLabel;
	if(_this4._dirty) {
		_this4.parseText();
	}
	_this3.x = value - _this4.textWidth / 2;
	this.fameLabel.y = haxepunk_HXP.height * 0.2;
};
$hxClasses["catalyst.entities.CatShowEntity"] = catalyst_entities_CatShowEntity;
catalyst_entities_CatShowEntity.__name__ = ["catalyst","entities","CatShowEntity"];
catalyst_entities_CatShowEntity.__super__ = haxepunk_EntityList;
catalyst_entities_CatShowEntity.prototype = $extend(haxepunk_EntityList.prototype,{
	catShow: null
	,state: null
	,track: null
	,addButton: null
	,surrenderButton: null
	,cat: null
	,event: null
	,obstacle: null
	,obstacleLabel: null
	,fameLabel: null
	,hpMeter: null
	,obstacleX: null
	,startCatShow: function(cat) {
		var _this = catalyst_GameData.get_current();
		this.catShow = _this.labs.get(_this.currentRegion).startCatShow(cat);
	}
	,advanceState: function() {
		++this.state;
	}
	,move: function() {
		var multiplier = 1.25;
		if(catalyst_GameData.get_current().fastMode) {
			multiplier = 1.875;
		}
		this.cat.sp.speed = multiplier;
		var move = haxepunk_HXP.elapsed * 896 * multiplier;
		this.track.x -= move;
		this.track.x %= 512;
		if(this.obstacle != null) {
			this.obstacleX -= move;
			if(js_Boot.__instanceof(this.obstacle,catalyst_graphics_TrackEntity)) {
				this.obstacle.setCoords(this.obstacleX,haxepunk_HXP.height / 2);
			} else {
				this.obstacle.set_x(((this.obstacleX / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - haxepunk_HXP.height / 2) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width);
				this.obstacle.set_y(haxepunk_HXP.height / (1 + (haxepunk_HXP.height - haxepunk_HXP.height / 2) / haxepunk_HXP.height / 1.5));
			}
			var _this = this.obstacleLabel;
			var value = this.obstacle.get_x();
			var _this1 = this.obstacleLabel;
			if(_this1._dirty) {
				_this1.parseText();
			}
			_this.x = value - _this1.textWidth / 2;
			this.obstacleLabel.y = this.obstacle.get_y() - 256;
		}
	}
	,update: function() {
		var _gthis = this;
		haxepunk_EntityList.prototype.update.call(this);
		if(this.catShow == null) {
			var _this = catalyst_GameData.get_current();
			this.catShow = _this.labs.get(_this.currentRegion).catShow;
		}
		if(this.catShow == null) {
			var _this1 = this.addButton;
			_this1.set_active(_this1.set_visible(_this1.set_collidable(true)));
			var _this2 = this.surrenderButton;
			_this2.set_active(_this2.set_visible(_this2.set_collidable(false)));
			this.fameLabel._visible = false;
		} else {
			if(this.hpMeter == null) {
				var _this3 = catalyst_GameData.get_current();
				var _this4 = _this3.labs.get(_this3.currentRegion).cats;
				var room = "fairgrounds";
				this.add(this.hpMeter = new catalyst_entities_CatHealthMeter(_this4.cats.get(room).length > 0 ? _this4.cats.get(room)[0] : null,true));
				this.hpMeter.set_x(haxepunk_HXP.width / 8);
				this.hpMeter.set_y(haxepunk_HXP.height / 8);
			}
			var _this5 = this.addButton;
			_this5.set_active(_this5.set_visible(_this5.set_collidable(false)));
			var _this6 = this.surrenderButton;
			_this6.set_active(_this6.set_visible(_this6.set_collidable(true)));
			this.fameLabel._visible = true;
			switch(this.state) {
			case 0:
				var _this7 = catalyst_GameData.get_current();
				var _this8 = _this7.labs.get(_this7.currentRegion).cats;
				var room1 = "fairgrounds";
				this.cat = new catalyst_entities_StaticCatEntity(_this8.cats.get(room1).length > 0 ? _this8.cats.get(room1)[0] : null);
				this.cat.set_x(haxepunk_HXP.width * 0.25);
				var tmp = this.cat;
				this.cat.get_x();
				tmp.set_y(haxepunk_HXP.height / (1 + (haxepunk_HXP.height - haxepunk_HXP.height / 2) / haxepunk_HXP.height / 1.5));
				this.cat.sp.set_facingRight(true);
				this.add(this.cat);
				var tmp1 = this.cat;
				var y = this.cat.get_y();
				tmp1.set_layer((haxepunk_HXP.height - y) / 8 | 0);
				++this.state;
				break;
			case 1:
				this.event = this.catShow.poll();
				this.fameLabel.set_text("<ribbon-icon/> <blue>" + this.event.finalFame + "</blue>");
				var _this9 = this.fameLabel;
				var value = haxepunk_HXP.width;
				var _this10 = this.fameLabel;
				if(_this10._dirty) {
					_this10.parseText();
				}
				_this9.x = (value - _this10.textWidth) / 2;
				this.hpMeter.updateHp(this.event.finalHp);
				if(this.event != null && this.event.pending) {
					switch(this.event.stat) {
					case "cha":
						var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/yarn-ball.png",false));
						img.smooth = true;
						img.pixelSnapping = false;
						img.originX = img.originY = img.get_width() / 2;
						this.obstacle = new haxepunk_Entity(null,null,img);
						break;
					case "int":
						this.obstacle = this.track.getChild(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/track-ring.png",false));
						break;
					case "str":
						var rat = new catalyst_entities_Rat();
						rat.sp.set_facingRight(false);
						rat.sp.x = this.cat.get_width() / 2;
						this.obstacle = rat;
						break;
					}
					this.obstacle.set_x(this.obstacleX = haxepunk_HXP.width + 512);
					this.obstacle.set_y(haxepunk_HXP.height * 0.7);
					this.add(this.obstacle);
					var tmp2 = this.obstacle;
					var y1 = this.obstacle.get_y();
					tmp2.set_layer((haxepunk_HXP.height - y1) / 8 | 0);
					this.obstacleLabel.set_text("<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(this.event.stat) + "/> " + this.event.difficulty);
					this.obstacleLabel._visible = true;
					++this.state;
				}
				break;
			case 3:
				this.catShow.poll();
				this.fameLabel.set_text("<ribbon-icon/> <blue>" + this.event.finalFame + "</blue>");
				var _this11 = this.fameLabel;
				var value1 = haxepunk_HXP.width;
				var _this12 = this.fameLabel;
				if(_this12._dirty) {
					_this12.parseText();
				}
				_this11.x = (value1 - _this12.textWidth) / 2;
				this.hpMeter.updateHp(this.event.finalHp);
				switch(this.event.stat) {
				case "cha":
					this.obstacle.set_visible(false);
					this.cat.onHit = $bind(this,this.advanceState);
					var onFinish = function() {
						++_gthis.state;
						_gthis.obstacle.set_visible(false);
					};
					this.cat.sp.setAnimation("play",false,onFinish);
					break;
				case "int":
					this.cat.onHit = $bind(this,this.advanceState);
					this.cat.sp.setAnimation("jump",false,$bind(this,this.advanceState));
					break;
				case "str":
					this.cat.onHit = function() {
						++_gthis.state;
						_gthis.obstacle.sp.setAnimation("hit",false);
					};
					this.cat.sp.setAnimation("attack-str-crit",false,$bind(this,this.advanceState));
					break;
				}
				++this.state;
				break;
			case 4:
				if(this.event.stat != "cha") {
					this.move();
				}
				break;
			case 5:
				this.obstacleLabel.set_text(this.event.success ? "<success-icon/>" : "<failure-icon/>");
				catalyst_Sound.sfxQueue.push(this.event.success ? "upgrade" : "noblip");
				catalyst_Sound.volumeQueue.push(1);
				if(!this.event.success) {
					var dmg = new catalyst_entities_DamageNumber(Std.string(this.event.outcome));
					dmg.set_x(this.cat.get_x());
					dmg.set_y(this.cat.get_y());
					dmg.set_layer(this.cat._layer - 1);
					this.add(dmg);
				}
				++this.state;
				break;
			case 6:
				if(this.event.stat != "cha") {
					this.move();
				}
				break;
			case 2:case 7:
				this.cat.sp.setAnimation("run",true);
				this.move();
				if(this.state == 2) {
					var target = haxepunk_HXP.width * 0.25 + this.cat.get_width();
					if(this.obstacleX <= target) {
						this.obstacleX = target;
						++this.state;
					}
				} else if(this.state == 7 && (this.obstacle == null || this.obstacleX < -512)) {
					if(this.obstacle != null) {
						this.remove(this.obstacle);
						this.obstacle = null;
						this.obstacleLabel._visible = false;
					}
					this.state = this.catShow.finished ? 8 : 1;
				}
				break;
			case 8:
				this.finish();
				break;
			}
		}
	}
	,chooseCat: function() {
		var _gthis = this;
		catalyst_GameData.get_current().checkTutorial("cat_show");
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatInRoomScene("<ribbon-icon/>Compete",function(cat) {
			var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
			var txt1 = "<right><blue>LV " + cat.level + "/";
			var cat1 = cat._maxLevel;
			var x;
			if(cat.wild) {
				x = 0;
			} else {
				var _this = catalyst_GameData.get_current();
				x = _this.labs.get(_this.currentRegion).tech / 100;
			}
			var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
			var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
			var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			}
			if(cat.mutations > 0) {
				txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
			}
			return txt2;
		},function(cat2) {
			_gthis.startCatShow(cat2);
		},null,function(cat3) {
			return cat3.hp >= 1;
		}));
	}
	,surrender: function() {
		this.finish();
	}
	,finish: function() {
		this.catShow = null;
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).finishCatShow();
		this._scene.remove(this);
	}
	,__class__: catalyst_entities_CatShowEntity
});
var catalyst_entities_CatnipCounter = function(size) {
	if(size == null) {
		size = 1.35;
	}
	this.small = false;
	catalyst_entities_CounterPanel.call(this,"catnip-icon",null,"0",10988691,11257911,size);
	this.small = size < 1.35;
	if(this.small) {
		this.set_maxValue("");
	}
};
$hxClasses["catalyst.entities.CatnipCounter"] = catalyst_entities_CatnipCounter;
catalyst_entities_CatnipCounter.__name__ = ["catalyst","entities","CatnipCounter"];
catalyst_entities_CatnipCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_CatnipCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	small: null
	,update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var maxCatnip = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"catnip_capacity",_this1.bonuses);
		var _this2 = catalyst_GameData.get_current();
		var current = _this2.labs.get(_this2.currentRegion).catnip | 0;
		var v = (current == null ? "null" : "" + current) + (this.small ? " " : "");
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		if(!this.small) {
			this.set_maxValue(maxCatnip == null ? "null" : "" + maxCatnip);
		}
		var _this3 = catalyst_GameData.get_current();
		var v1 = _this3.labs.get(_this3.currentRegion).catnip / maxCatnip;
		if(v1 < 0) {
			v1 = 0;
		}
		if(v1 > 1) {
			v1 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
		}
		this.fill = v1;
	}
	,__class__: catalyst_entities_CatnipCounter
});
var catalyst_entities_CatnipPlants = function() {
	haxepunk_EntityList.call(this);
};
$hxClasses["catalyst.entities.CatnipPlants"] = catalyst_entities_CatnipPlants;
catalyst_entities_CatnipPlants.__name__ = ["catalyst","entities","CatnipPlants"];
catalyst_entities_CatnipPlants.__super__ = haxepunk_EntityList;
catalyst_entities_CatnipPlants.prototype = $extend(haxepunk_EntityList.prototype,{
	update: function() {
		haxepunk_EntityList.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var plantCount = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"catnip_plants",_this1.bonuses);
		var changed = false;
		while(this.entities.length > plantCount) {
			this.pop();
			changed = true;
		}
		while(this.entities.length < plantCount) {
			var e = new catalyst_entities_PottedPlant();
			e.set_localX(48 + 96 * (this.entities.length - 1));
			e.set_localY(this.entities.length % 2 == 0 ? 32 : -32);
			e.sp.set_color(this.entities.length % 2 == 0 ? 16777215 : 12632256);
			changed = true;
			this.add(e);
		}
		if(changed) {
			this.layoutChildren();
		}
		var y = this.get_y();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
	}
	,layoutChildren: function() {
		this.set_x((haxepunk_HXP.width - this.entities.length * 96) / 2);
		this.set_y(haxepunk_HXP.height * 0.65);
	}
	,__class__: catalyst_entities_CatnipPlants
});
var catalyst_entities_CatnipRateCounter = function() {
	catalyst_entities_CounterPanel.call(this,"catnip-icon",false,"0",54357,null,1.25);
	this.set_maxValue("sec");
};
$hxClasses["catalyst.entities.CatnipRateCounter"] = catalyst_entities_CatnipRateCounter;
catalyst_entities_CatnipRateCounter.__name__ = ["catalyst","entities","CatnipRateCounter"];
catalyst_entities_CatnipRateCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_CatnipRateCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var v = (_this1.catBonusLevel("plant_lab") / 10 + catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this1.upgrades,"catnip_production",_this1.bonuses)) * catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"catnip_plants",_this1.bonuses);
		var v1;
		var _this2 = catalyst_GameData.get_current();
		if(_this2.labs.get(_this2.currentRegion).fastCatnip) {
			v1 = 1.5;
		} else {
			v1 = 1;
		}
		var v2 = "+" + catalyst_GameData.formatNumber(v * v1,1);
		if(this.value != v2) {
			this.value = v2;
			this.setLabel();
		}
	}
	,__class__: catalyst_entities_CatnipRateCounter
});
var catalyst_entities_CatnipSacks = function() {
	haxepunk_EntityList.call(this);
	this.skipFrames = 3;
};
$hxClasses["catalyst.entities.CatnipSacks"] = catalyst_entities_CatnipSacks;
catalyst_entities_CatnipSacks.__name__ = ["catalyst","entities","CatnipSacks"];
catalyst_entities_CatnipSacks.__super__ = haxepunk_EntityList;
catalyst_entities_CatnipSacks.prototype = $extend(haxepunk_EntityList.prototype,{
	update: function() {
		haxepunk_EntityList.prototype.update.call(this);
		var count = 0;
		var _g = 0;
		var _g1 = catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex("catnip_capacity")];
		while(_g < _g1.length) {
			var phase = _g1[_g];
			++_g;
			var _this = catalyst_GameData.get_current();
			var this1 = _this.labs.get(_this.currentRegion).upgrades;
			var tmp;
			var _this1 = this1;
			if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
				var _this2 = this1;
				tmp = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
			} else {
				tmp = 0;
			}
			if(tmp > 0) {
				++count;
			}
		}
		var changed = false;
		while(this.entities.length > count) {
			this.pop();
			changed = true;
		}
		while(this.entities.length < count) {
			var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/sack.png",false));
			img.smooth = true;
			img.pixelSnapping = false;
			var e = new haxepunk_Entity(null,null,img);
			e.set_localX(112 * (this.entities.length - 1));
			e.set_localY(this.entities.length * 8);
			changed = true;
			this.add(e);
		}
		if(changed) {
			this.layoutChildren();
		}
		var y = this.get_y();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
	}
	,layoutChildren: function() {
		this.set_x(haxepunk_HXP.width * 0.7);
		this.set_y(haxepunk_HXP.height * 0.25);
	}
	,__class__: catalyst_entities_CatnipSacks
});
var catalyst_entities_Cauldron = function(setLayer) {
	if(setLayer == null) {
		setLayer = false;
	}
	this.setLayer = false;
	this.particle = 0;
	this.particleTime = 0;
	var _gthis = this;
	haxepunk_Entity.call(this);
	this.setLayer = setLayer;
	this.fire = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ball-particle.png",false));
	this.fire.flexibleLayer = true;
	this.fire.smooth = true;
	this.fire.pixelSnapping = false;
	var blend = null;
	if(blend == null) {
		blend = 0;
	}
	_gthis.fire.addType("red-flame",blend);
	_gthis.fire.setMotion("red-flame",90,64,1.5,0,128,3);
	_gthis.fire.setGravity("red-flame",-1);
	_gthis.fire.setAlpha("red-flame",0.1,0,catalyst_entities_Cauldron.alphaEase);
	_gthis.fire.setColor("red-flame",16737792,16711680);
	var blend1 = null;
	if(blend1 == null) {
		blend1 = 0;
	}
	_gthis.fire.addType("yellow-flame",blend1);
	_gthis.fire.setMotion("yellow-flame",90,64,1.5,0,128,3);
	_gthis.fire.setGravity("yellow-flame",-1);
	_gthis.fire.setAlpha("yellow-flame",0.1,0,catalyst_entities_Cauldron.alphaEase);
	_gthis.fire.setColor("yellow-flame",16768341,16737792);
	var blend2 = 1;
	if(blend2 == null) {
		blend2 = 0;
	}
	_gthis.fire.addType("smoke",blend2);
	_gthis.fire.setMotion("smoke",90,64,1.5,0,128,3);
	_gthis.fire.setGravity("smoke",-1);
	_gthis.fire.setAlpha("smoke",0.1,0,catalyst_entities_Cauldron.alphaEase);
	_gthis.fire.setColor("smoke",0,0);
	this.fire.y = 64;
	this.addGraphic(this.fire);
	this.sp = new catalyst_graphics_SpineBase("cauldron");
	this.sp.setAnimation("idle");
	this.addGraphic(this.sp);
	this.steam = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ball-particle.png",false));
	this.steam.smooth = true;
	this.steam.pixelSnapping = false;
	this.steam.flexibleLayer = true;
	this.steam.addType("steam",1);
	this.steam.setMotion("steam",90,64,1.5,0,128,3);
	this.steam.setGravity("steam",-1);
	this.steam.setAlpha("steam",0.1,0,catalyst_entities_Cauldron.alphaEase);
	this.steam.addType("smoke",1);
	this.steam.setMotion("smoke",90,64,1.5,0,128,3);
	this.steam.setGravity("smoke",-1);
	this.steam.setColor("smoke",0,0);
	this.steam.setAlpha("smoke",0.1,0,catalyst_entities_Cauldron.alphaEase);
	this.steam.addType("purple-smoke",1);
	this.steam.setMotion("purple-smoke",90,64,1.5,0,128,3);
	this.steam.setGravity("purple-smoke",-1);
	this.steam.setColor("purple-smoke",13369599,13369599);
	this.steam.setAlpha("purple-smoke",0.1,0,catalyst_entities_Cauldron.alphaEase);
	this.steam.y = -192;
	this.addGraphic(this.steam);
};
$hxClasses["catalyst.entities.Cauldron"] = catalyst_entities_Cauldron;
catalyst_entities_Cauldron.__name__ = ["catalyst","entities","Cauldron"];
catalyst_entities_Cauldron.alphaEase = function(t) {
	t = Math.sqrt(t);
	return 1 - (t < 0.5 ? t * 2 : (1 - t) * 2);
};
catalyst_entities_Cauldron.__super__ = haxepunk_Entity;
catalyst_entities_Cauldron.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,fire: null
	,steam: null
	,particleTime: null
	,particle: null
	,setLayer: null
	,update: function() {
		this.particleTime += haxepunk_HXP.elapsed * 3 * 5;
		while(this.particleTime > 0) {
			--this.particleTime;
			switch(this.particle) {
			case 0:
				this.fire.emitInRectangle("red-flame",-96,-32,192,64);
				break;
			case 1:
				this.fire.emitInRectangle("yellow-flame",-96,-32,192,64);
				break;
			case 2:
				this.fire.emitInRectangle("smoke",-96,-32,192,64);
				break;
			case 3:
				this.steam.emitInRectangle("steam",-96,-32,192,64);
				break;
			default:
				this.steam.emitInRectangle("smoke",-96,-32,192,64);
				var _g1 = 0;
				var _this = catalyst_GameData.get_current();
				var _g = _this.labs.get(_this.currentRegion).potion.ingredients.length;
				while(_g1 < _g) {
					++_g1;
					this.steam.emitInRectangle("purple-smoke",-96,-32,192,64);
				}
			}
			this.particle = (this.particle + 1) % 5;
		}
		if(this.setLayer) {
			var y = this.get_y();
			this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
		}
	}
	,poof: function() {
		var _g = 0;
		while(_g < 10) {
			++_g;
			this.steam.emitInRectangle("steam",-96,-32,192,64);
			this.steam.emitInRectangle("smoke",-96,-32,192,64);
			this.steam.emitInRectangle("purple-smoke",-96,-32,192,64);
		}
	}
	,__class__: catalyst_entities_Cauldron
});
var catalyst_entities_CloseButton = function() {
	haxepunk_Entity.call(this);
	var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/close-button.png",false));
	img.smooth = true;
	this.graphic = img;
	this.set_width(img.get_width());
	this.set_height(img.get_height());
	this.set_type("ui");
};
$hxClasses["catalyst.entities.CloseButton"] = catalyst_entities_CloseButton;
catalyst_entities_CloseButton.__name__ = ["catalyst","entities","CloseButton"];
catalyst_entities_CloseButton.__super__ = haxepunk_Entity;
catalyst_entities_CloseButton.prototype = $extend(haxepunk_Entity.prototype,{
	__class__: catalyst_entities_CloseButton
});
var catalyst_entities_CreepyEyes = function() {
	haxepunk_Entity.call(this);
	var sp = new catalyst_graphics_SpineBase("eyes");
	sp.setAnimation("idle");
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	sp.shader = catalyst_Client._noiseShader;
	this.graphic = sp;
};
$hxClasses["catalyst.entities.CreepyEyes"] = catalyst_entities_CreepyEyes;
catalyst_entities_CreepyEyes.__name__ = ["catalyst","entities","CreepyEyes"];
catalyst_entities_CreepyEyes.__super__ = haxepunk_Entity;
catalyst_entities_CreepyEyes.prototype = $extend(haxepunk_Entity.prototype,{
	__class__: catalyst_entities_CreepyEyes
});
var catalyst_entities_CryoMachine = function() {
	haxepunk_Entity.call(this);
	this.sp = new catalyst_graphics_SpineBase("cryo");
	this.sp.setAnimation("idle");
	this.sp.state.update(5 * Math.random());
	this.graphic = this.sp;
};
$hxClasses["catalyst.entities.CryoMachine"] = catalyst_entities_CryoMachine;
catalyst_entities_CryoMachine.__name__ = ["catalyst","entities","CryoMachine"];
catalyst_entities_CryoMachine.__super__ = haxepunk_Entity;
catalyst_entities_CryoMachine.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,update: function() {
		var y = this.get_y();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
	}
	,__class__: catalyst_entities_CryoMachine
});
var catalyst_entities_DamageNumber = function(val,delay) {
	if(delay == null) {
		delay = 0;
	}
	this.time = 0;
	haxepunk_Entity.call(this);
	this.label = new catalyst_graphics_Label(val,false,1);
	var _this = this.label;
	var _this1 = this.label;
	if(_this1._dirty) {
		_this1.parseText();
	}
	_this.x = -_this1.textWidth / 2;
	var _this2 = this.label;
	var _this3 = this.label;
	if(_this3._dirty) {
		_this3.parseText();
	}
	_this2.y = -_this3.textHeight / 2;
	this.graphic = this.label;
	this.set_layer(-1000);
	this.delay = delay;
};
$hxClasses["catalyst.entities.DamageNumber"] = catalyst_entities_DamageNumber;
catalyst_entities_DamageNumber.__name__ = ["catalyst","entities","DamageNumber"];
catalyst_entities_DamageNumber.__super__ = haxepunk_Entity;
catalyst_entities_DamageNumber.prototype = $extend(haxepunk_Entity.prototype,{
	time: null
	,delay: null
	,label: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		if(this.delay > 0) {
			this.label.set_alpha(0);
			this.delay -= haxepunk_HXP.elapsed;
			if(this.delay < 0) {
				this.label.set_alpha(1);
				this.delay = 0;
			}
		} else {
			this.time += haxepunk_HXP.elapsed / 1.5;
			var t = Math.min(1,Math.pow(this.time * 4,2));
			var _this = this.label;
			var _this1 = this.label;
			if(_this1._dirty) {
				_this1.parseText();
			}
			var value = -_this1.textHeight / 2;
			var _this2 = this.label;
			if(_this2._dirty) {
				_this2.parseText();
			}
			_this.y = value + _this2.textHeight * 2 * Math.pow(t - 0.5,2);
			if(this.time >= 1) {
				this._scene.remove(this);
			} else if(this.time >= 0.75) {
				this.label.set_alpha(Math.pow(1 - (this.time - 0.75) * 4,0.5));
			}
		}
	}
	,__class__: catalyst_entities_DamageNumber
});
var catalyst_entities_FameCounter = function(size) {
	if(size == null) {
		size = 1;
	}
	this.small = false;
	catalyst_entities_CounterPanel.call(this,"ribbon-icon",true,"0",43732,43732,size);
	this.small = size < 1;
	if(this.small) {
		this.set_maxValue("");
	}
};
$hxClasses["catalyst.entities.FameCounter"] = catalyst_entities_FameCounter;
catalyst_entities_FameCounter.__name__ = ["catalyst","entities","FameCounter"];
catalyst_entities_FameCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_FameCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	small: null
	,update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).fame) + (this.small ? " " : "");
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		if(!this.small) {
			this.set_maxValue("250");
		}
		var _this1 = catalyst_GameData.get_current();
		var v1 = _this1.labs.get(_this1.currentRegion).fame / 250;
		if(v1 < 0) {
			v1 = 0;
		}
		if(v1 > 1) {
			v1 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
		}
		this.fill = v1;
	}
	,__class__: catalyst_entities_FameCounter
});
var catalyst_entities_TextButton = function(text,width,mouseManager,onUp,onDown) {
	if(width == null) {
		width = 3.5;
	}
	catalyst_entities_BaseButton.call(this,mouseManager,width,onUp,onDown);
	this.label = new catalyst_graphics_Label(text,null,3);
	this.addGraphic(this.label);
	this.label.set_text(text);
	var _this = this.label;
	var value = this.get_width();
	var _this1 = this.label;
	if(_this1._dirty) {
		_this1.parseText();
	}
	_this.x = (value - _this1.textWidth) / 2;
	var _this2 = this.label;
	var value1 = this.get_height();
	var _this3 = this.label;
	if(_this3._dirty) {
		_this3.parseText();
	}
	_this2.y = (value1 - _this3.textHeight) / 2 + 2;
	this.text = text;
};
$hxClasses["catalyst.entities.TextButton"] = catalyst_entities_TextButton;
catalyst_entities_TextButton.__name__ = ["catalyst","entities","TextButton"];
catalyst_entities_TextButton.__super__ = catalyst_entities_BaseButton;
catalyst_entities_TextButton.prototype = $extend(catalyst_entities_BaseButton.prototype,{
	text: null
	,label: null
	,__class__: catalyst_entities_TextButton
});
var catalyst_entities_FastModeToggleButton = function(mouseManager) {
	catalyst_entities_TextButton.call(this,"<fast-icon/> Fast Mode",3.5,mouseManager,$bind(this,this.toggle));
	this.color = catalyst_GameData.get_current().fastMode ? 16777215 : 8421504;
};
$hxClasses["catalyst.entities.FastModeToggleButton"] = catalyst_entities_FastModeToggleButton;
catalyst_entities_FastModeToggleButton.__name__ = ["catalyst","entities","FastModeToggleButton"];
catalyst_entities_FastModeToggleButton.__super__ = catalyst_entities_TextButton;
catalyst_entities_FastModeToggleButton.prototype = $extend(catalyst_entities_TextButton.prototype,{
	toggle: function() {
		var v = !catalyst_GameData.get_current().fastMode;
		catalyst_GameData.get_current().fastMode = v;
		catalyst_GameData.get_current().save();
		this.color = catalyst_GameData.get_current().fastMode ? 16777215 : 8421504;
	}
	,__class__: catalyst_entities_FastModeToggleButton
});
var catalyst_entities_FishCounter = function() {
	catalyst_entities_CounterPanel.call(this,"fish-icon",true,"0",6274259,2785279,1);
};
$hxClasses["catalyst.entities.FishCounter"] = catalyst_entities_FishCounter;
catalyst_entities_FishCounter.__name__ = ["catalyst","entities","FishCounter"];
catalyst_entities_FishCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_FishCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).fish);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		var maxFish = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_fish",_this2.bonuses);
		this.set_maxValue(maxFish == null ? "null" : "" + maxFish);
		var _this3 = catalyst_GameData.get_current();
		var v1 = _this3.labs.get(_this3.currentRegion).fish / maxFish;
		if(v1 < 0) {
			v1 = 0;
		}
		if(v1 > 1) {
			v1 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
		}
		this.fill = v1;
	}
	,__class__: catalyst_entities_FishCounter
});
var catalyst_entities_FishRateCounter = function() {
	catalyst_entities_CounterPanel.call(this,"fishing-lure-icon",false,"0",5627391,null,1.125);
	this.set_maxValue("min");
};
$hxClasses["catalyst.entities.FishRateCounter"] = catalyst_entities_FishRateCounter;
catalyst_entities_FishRateCounter.__name__ = ["catalyst","entities","FishRateCounter"];
catalyst_entities_FishRateCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_FishRateCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var v;
		var _this2 = _this1.cats;
		var room = "fishing_hole";
		if((_this2.cats.get(room).length > 0 ? _this2.cats.get(room)[0] : null) == null) {
			v = 0;
		} else {
			var fishSpeed = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this1.upgrades,"fishing_speed",_this1.bonuses) / 60;
			var mult = 0;
			var _g = 0;
			var _g1 = _this1.cats.cats.get("fishing_hole");
			while(_g < _g1.length) {
				var cat = _g1[_g];
				++_g;
				mult += 1 + cat.level / 100;
			}
			v = fishSpeed * mult;
		}
		var v1 = "+" + catalyst_GameData.formatNumber(v * 60,1);
		if(this.value != v1) {
			this.value = v1;
			this.setLabel();
		}
	}
	,__class__: catalyst_entities_FishRateCounter
});
var catalyst_entities_FoodCounter = function() {
	this.isGourmet = false;
	var _this = catalyst_GameData.get_current();
	var gourmet = _this.labs.get(_this.currentRegion).gourmetTime > 0;
	catalyst_entities_CounterPanel.call(this,gourmet ? "gourmet-icon" : "food-icon",null,"0",9531247,13121335,1.35);
	this.set_maxValue("");
	this.isGourmet = gourmet;
};
$hxClasses["catalyst.entities.FoodCounter"] = catalyst_entities_FoodCounter;
catalyst_entities_FoodCounter.__name__ = ["catalyst","entities","FoodCounter"];
catalyst_entities_FoodCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_FoodCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	isGourmet: null
	,update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var maxFood = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this1.upgrades,"food_capacity",_this1.bonuses);
		var _this2 = catalyst_GameData.get_current();
		var v = _this2.labs.get(_this2.currentRegion).food;
		var _this3 = catalyst_GameData.get_current();
		var _this4 = _this3.labs.get(_this3.currentRegion).cats;
		var count = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			count += _this4.cats.get(room).length;
		}
		var v1 = catalyst_GameData.formatTime(v / Math.max(count,1)) + " ";
		if(this.value != v1) {
			this.value = v1;
			this.setLabel();
		}
		var _this5 = catalyst_GameData.get_current();
		var v2 = _this5.labs.get(_this5.currentRegion).food / maxFood;
		if(v2 < 0) {
			v2 = 0;
		}
		if(v2 > 1) {
			v2 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v2 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v2 | 0) + (v2 == 1 ? 28 : 0);
		}
		this.fill = v2;
		var _this6 = catalyst_GameData.get_current();
		var gourmet = _this6.labs.get(_this6.currentRegion).gourmetTime > 0;
		if(this.isGourmet != gourmet) {
			this.graphic.remove(this.icon);
			this.addIcon(gourmet ? "gourmet-icon" : "food-icon");
			this.isGourmet = gourmet;
		}
	}
	,__class__: catalyst_entities_FoodCounter
});
var catalyst_entities_FrozenCatCounter = function() {
	catalyst_entities_CounterPanel.call(this,"cryo-icon",false,"0",52479,1);
};
$hxClasses["catalyst.entities.FrozenCatCounter"] = catalyst_entities_FrozenCatCounter;
catalyst_entities_FrozenCatCounter.__name__ = ["catalyst","entities","FrozenCatCounter"];
catalyst_entities_FrozenCatCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_FrozenCatCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).cats.cats.get("cryo_lab").length);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		this.set_maxValue(Std.string(catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_freeze",_this2.bonuses)));
	}
	,__class__: catalyst_entities_FrozenCatCounter
});
var catalyst_entities_GourmetTimer = function() {
	catalyst_entities_CounterPanel.call(this,"gourmet-icon",null,"0",9531247,13121335,1.35);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.GourmetTimer"] = catalyst_entities_GourmetTimer;
catalyst_entities_GourmetTimer.__name__ = ["catalyst","entities","GourmetTimer"];
catalyst_entities_GourmetTimer.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_GourmetTimer.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		this.set_visible(_this.labs.get(_this.currentRegion).gourmetTime > 0);
		if(this.get_visible()) {
			var _this1 = catalyst_GameData.get_current();
			var t = _this1.labs.get(_this1.currentRegion).gourmetTime;
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion);
			var t1;
			var t2;
			var _this4 = _this3.cats;
			var room = "cat_cafe";
			if((_this4.cats.get(room).length > 0 ? _this4.cats.get(room)[0] : null) != null) {
				t2 = _this3.food > 0;
			} else {
				t2 = false;
			}
			if(t2) {
				var _this5 = catalyst_GameData.get_current();
				var _this6 = _this5.labs.get(_this5.currentRegion);
				var t3 = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this6.upgrades,"gourmet_duration",_this6.bonuses) * 60;
				var _this7 = _this3.cats;
				var room1 = "cat_cafe";
				t1 = t3 + (_this7.cats.get(room1).length > 0 ? _this7.cats.get(room1)[0] : null).level * 30;
			} else {
				t1 = 600;
			}
			var t4 = t * t1;
			var h = t4 / 3600 | 0;
			var m = t4 % 3600 / 60 | 0;
			var s = t4 % 60 | 0;
			var v = (t4 >= 3600 ? (h == null ? "null" : "" + h) + ":" : "") + StringTools.lpad(m == null ? "null" : "" + m,"0",2) + ":" + StringTools.lpad(s == null ? "null" : "" + s,"0",2) + " ";
			if(this.value != v) {
				this.value = v;
				this.setLabel();
			}
			var _this8 = catalyst_GameData.get_current();
			var v1 = _this8.labs.get(_this8.currentRegion).gourmetTime;
			if(v1 < 0) {
				v1 = 0;
			}
			if(v1 > 1) {
				v1 = 1;
			}
			if(this.fillMeter != null) {
				this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
			}
			this.fill = v1;
		}
	}
	,__class__: catalyst_entities_GourmetTimer
});
var haxepunk_layout_LayoutGroup = function(wraps,childLayoutType,width,height) {
	if(childLayoutType == null) {
		childLayoutType = "stack";
	}
	this.anchorY = 0;
	this.anchorX = 0;
	this.layoutWidth = null;
	this.childLayoutType = "stack";
	haxepunk_EntityList.call(this);
	this.layoutX = this.layoutY = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(0), min : null, max : null};
	this.layoutWidth = width == null ? null : { value : width, min : null, max : null};
	this.layoutHeight = height == null ? null : { value : height, min : null, max : null};
	this.paddingTop = this.paddingBottom = this.paddingLeft = this.paddingRight = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(0), min : null, max : null};
	this.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(0), min : null, max : null};
	this.wraps = wraps;
	this.childLayoutType = childLayoutType;
	if(wraps != null) {
		haxepunk_EntityList.prototype.add.call(this,wraps);
	}
};
$hxClasses["haxepunk.layout.LayoutGroup"] = haxepunk_layout_LayoutGroup;
haxepunk_layout_LayoutGroup.__name__ = ["haxepunk","layout","LayoutGroup"];
haxepunk_layout_LayoutGroup.__super__ = haxepunk_EntityList;
haxepunk_layout_LayoutGroup.prototype = $extend(haxepunk_EntityList.prototype,{
	childLayoutType: null
	,spacing: null
	,layoutX: null
	,layoutY: null
	,layoutWidth: null
	,layoutHeight: null
	,anchorX: null
	,anchorY: null
	,padding: null
	,paddingTop: null
	,paddingBottom: null
	,paddingLeft: null
	,paddingRight: null
	,wraps: null
	,addLayout: function(e) {
		var wrapper = new haxepunk_layout_LayoutGroup(e);
		this.add(wrapper);
		return wrapper;
	}
	,layoutChildren: function(parentWidth,parentHeight) {
		if(parentWidth == null) {
			var _this = this._scene;
			parentWidth = haxepunk_HXP.width * (_this._width == null ? haxepunk_HXP.screen.width - _this.x : _this._width) / haxepunk_HXP.screen.width;
		}
		if(parentHeight == null) {
			var _this1 = this._scene;
			parentHeight = haxepunk_HXP.height * (_this1._height == null ? haxepunk_HXP.screen.height - _this1.y : _this1._height) / haxepunk_HXP.screen.height;
		}
		var this1 = this.paddingLeft;
		var this2 = this1.value;
		var val = this2.unit == "%" ? this2.value * parentWidth / 100 : this2.value;
		if(this1.min != null) {
			var this3 = this1.min;
			val = Math.max(this3.unit == "%" ? this3.value * parentWidth / 100 : this3.value,val);
		}
		if(this1.max != null) {
			var this4 = this1.max;
			val = Math.min(this4.unit == "%" ? this4.value * parentWidth / 100 : this4.value,val);
		}
		var paddingLeft = val;
		var this5 = this.paddingRight;
		var this6 = this5.value;
		var val1 = this6.unit == "%" ? this6.value * parentWidth / 100 : this6.value;
		if(this5.min != null) {
			var this7 = this5.min;
			val1 = Math.max(this7.unit == "%" ? this7.value * parentWidth / 100 : this7.value,val1);
		}
		if(this5.max != null) {
			var this8 = this5.max;
			val1 = Math.min(this8.unit == "%" ? this8.value * parentWidth / 100 : this8.value,val1);
		}
		var paddingRight = val1;
		var this9 = this.paddingTop;
		var this10 = this9.value;
		var val2 = this10.unit == "%" ? this10.value * parentHeight / 100 : this10.value;
		if(this9.min != null) {
			var this11 = this9.min;
			val2 = Math.max(this11.unit == "%" ? this11.value * parentHeight / 100 : this11.value,val2);
		}
		if(this9.max != null) {
			var this12 = this9.max;
			val2 = Math.min(this12.unit == "%" ? this12.value * parentHeight / 100 : this12.value,val2);
		}
		var paddingTop = val2;
		var this13 = this.paddingBottom;
		var this14 = this13.value;
		var val3 = this14.unit == "%" ? this14.value * parentHeight / 100 : this14.value;
		if(this13.min != null) {
			var this15 = this13.min;
			val3 = Math.max(this15.unit == "%" ? this15.value * parentHeight / 100 : this15.value,val3);
		}
		if(this13.max != null) {
			var this16 = this13.max;
			val3 = Math.min(this16.unit == "%" ? this16.value * parentHeight / 100 : this16.value,val3);
		}
		var paddingBottom = val3;
		var availableWidth = parentWidth - paddingLeft - paddingRight;
		var availableHeight = parentHeight - paddingTop - paddingBottom;
		if(this.layoutWidth != null) {
			var this17 = this.layoutWidth;
			var this18 = this17.value;
			var val4 = this18.unit == "%" ? this18.value * parentWidth / 100 : this18.value;
			if(this17.min != null) {
				var this19 = this17.min;
				val4 = Math.max(this19.unit == "%" ? this19.value * parentWidth / 100 : this19.value,val4);
			}
			if(this17.max != null) {
				var this20 = this17.max;
				val4 = Math.min(this20.unit == "%" ? this20.value * parentWidth / 100 : this20.value,val4);
			}
			this.set_width(val4 | 0);
			var this21 = this.paddingLeft;
			var maxValue = this.get_width();
			var this22 = this21.value;
			var val5 = this22.unit == "%" ? this22.value * maxValue / 100 : this22.value;
			if(this21.min != null) {
				var this23 = this21.min;
				val5 = Math.max(this23.unit == "%" ? this23.value * maxValue / 100 : this23.value,val5);
			}
			if(this21.max != null) {
				var this24 = this21.max;
				val5 = Math.min(this24.unit == "%" ? this24.value * maxValue / 100 : this24.value,val5);
			}
			paddingLeft = val5;
			var this25 = this.paddingRight;
			var maxValue1 = this.get_width();
			var this26 = this25.value;
			var val6 = this26.unit == "%" ? this26.value * maxValue1 / 100 : this26.value;
			if(this25.min != null) {
				var this27 = this25.min;
				val6 = Math.max(this27.unit == "%" ? this27.value * maxValue1 / 100 : this27.value,val6);
			}
			if(this25.max != null) {
				var this28 = this25.max;
				val6 = Math.min(this28.unit == "%" ? this28.value * maxValue1 / 100 : this28.value,val6);
			}
			paddingRight = val6;
			availableWidth = this.get_width() - paddingLeft - paddingRight;
			if(this.wraps != null) {
				this.wraps.set_width(availableWidth | 0);
			}
		}
		if(this.layoutHeight != null) {
			var this29 = this.layoutHeight;
			var this30 = this29.value;
			var val7 = this30.unit == "%" ? this30.value * parentHeight / 100 : this30.value;
			if(this29.min != null) {
				var this31 = this29.min;
				val7 = Math.max(this31.unit == "%" ? this31.value * parentHeight / 100 : this31.value,val7);
			}
			if(this29.max != null) {
				var this32 = this29.max;
				val7 = Math.min(this32.unit == "%" ? this32.value * parentHeight / 100 : this32.value,val7);
			}
			this.set_height(val7 | 0);
			var this33 = this.paddingTop;
			var maxValue2 = this.get_height();
			var this34 = this33.value;
			var val8 = this34.unit == "%" ? this34.value * maxValue2 / 100 : this34.value;
			if(this33.min != null) {
				var this35 = this33.min;
				val8 = Math.max(this35.unit == "%" ? this35.value * maxValue2 / 100 : this35.value,val8);
			}
			if(this33.max != null) {
				var this36 = this33.max;
				val8 = Math.min(this36.unit == "%" ? this36.value * maxValue2 / 100 : this36.value,val8);
			}
			paddingTop = val8;
			var this37 = this.paddingBottom;
			var maxValue3 = this.get_height();
			var this38 = this37.value;
			var val9 = this38.unit == "%" ? this38.value * maxValue3 / 100 : this38.value;
			if(this37.min != null) {
				var this39 = this37.min;
				val9 = Math.max(this39.unit == "%" ? this39.value * maxValue3 / 100 : this39.value,val9);
			}
			if(this37.max != null) {
				var this40 = this37.max;
				val9 = Math.min(this40.unit == "%" ? this40.value * maxValue3 / 100 : this40.value,val9);
			}
			paddingBottom = val9;
			availableHeight = this.get_height() - paddingTop - paddingBottom;
			if(this.wraps != null) {
				this.wraps.set_height(availableHeight | 0);
			}
		}
		if(this.get_width() < 0) {
			this.set_width(0);
		}
		if(this.get_height() < 0) {
			this.set_height(0);
		}
		var childrenWidth = 0;
		var childrenHeight = 0;
		var maxRowHeight = 0;
		var cursorX = 0;
		var cursorY = 0;
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			switch(this.childLayoutType) {
			case "grid":
				availableWidth -= cursorY;
				availableHeight -= cursorX;
				if(js_Boot.__instanceof(member,haxepunk_layout_LayoutGroup)) {
					member.set_localX(0);
					member.set_localY(0);
					member.layoutChildren(availableWidth,availableHeight);
					member.set_localX(member.get_localX() + paddingLeft);
					member.set_localY(member.get_localY() + paddingTop);
				} else {
					member.set_localX(paddingLeft);
					member.set_localY(paddingTop);
				}
				if(cursorX + member.get_width() > this.get_width() - paddingLeft - paddingRight) {
					cursorX = 0;
					var this41 = this.spacing;
					var this42 = this41.value;
					var val10 = this42.unit == "%" ? this42.value * parentWidth / 100 : this42.value;
					if(this41.min != null) {
						var this43 = this41.min;
						val10 = Math.max(this43.unit == "%" ? this43.value * parentWidth / 100 : this43.value,val10);
					}
					if(this41.max != null) {
						var this44 = this41.max;
						val10 = Math.min(this44.unit == "%" ? this44.value * parentWidth / 100 : this44.value,val10);
					}
					cursorY += val10 + maxRowHeight;
					maxRowHeight = 0;
				}
				member.set_x(member.get_x() + cursorX);
				member.set_y(member.get_y() + cursorY);
				var this45 = this.spacing;
				var this46 = this45.value;
				var val11 = this46.unit == "%" ? this46.value * parentWidth / 100 : this46.value;
				if(this45.min != null) {
					var this47 = this45.min;
					val11 = Math.max(this47.unit == "%" ? this47.value * parentWidth / 100 : this47.value,val11);
				}
				if(this45.max != null) {
					var this48 = this45.max;
					val11 = Math.min(this48.unit == "%" ? this48.value * parentWidth / 100 : this48.value,val11);
				}
				cursorX += val11 + member.get_width();
				maxRowHeight = Math.max(maxRowHeight,member.get_height());
				childrenWidth = Math.max(childrenWidth,cursorX);
				childrenHeight = Math.max(childrenHeight,cursorY);
				break;
			case "horizontal":
				availableWidth -= childrenWidth;
				if(js_Boot.__instanceof(member,haxepunk_layout_LayoutGroup)) {
					member.set_localX(0);
					member.set_localY(0);
					member.layoutChildren(availableWidth,availableHeight);
					member.set_localX(member.get_localX() + paddingLeft);
					member.set_localY(member.get_localY() + paddingTop);
				} else {
					member.set_localX(paddingLeft);
					member.set_localY(paddingTop);
				}
				member.set_x(member.get_x() + childrenWidth);
				var this49 = this.spacing;
				var this50 = this49.value;
				var val12 = this50.unit == "%" ? this50.value * parentWidth / 100 : this50.value;
				if(this49.min != null) {
					var this51 = this49.min;
					val12 = Math.max(this51.unit == "%" ? this51.value * parentWidth / 100 : this51.value,val12);
				}
				if(this49.max != null) {
					var this52 = this49.max;
					val12 = Math.min(this52.unit == "%" ? this52.value * parentWidth / 100 : this52.value,val12);
				}
				childrenWidth += val12 + member.get_width();
				childrenHeight = Math.max(childrenHeight,member.get_height());
				break;
			case "stack":
				if(js_Boot.__instanceof(member,haxepunk_layout_LayoutGroup)) {
					member.set_localX(0);
					member.set_localY(0);
					member.layoutChildren(availableWidth,availableHeight);
					member.set_localX(member.get_localX() + paddingLeft);
					member.set_localY(member.get_localY() + paddingTop);
				} else {
					member.set_localX(paddingLeft);
					member.set_localY(paddingTop);
				}
				childrenWidth = Math.max(childrenWidth,member.get_localX() + member.get_width() + paddingRight);
				childrenHeight = Math.max(childrenHeight,member.get_localY() + member.get_height() + paddingBottom);
				break;
			case "vertical":
				availableHeight -= childrenHeight;
				if(js_Boot.__instanceof(member,haxepunk_layout_LayoutGroup)) {
					member.set_localX(0);
					member.set_localY(0);
					member.layoutChildren(availableWidth,availableHeight);
					member.set_localX(member.get_localX() + paddingLeft);
					member.set_localY(member.get_localY() + paddingTop);
				} else {
					member.set_localX(paddingLeft);
					member.set_localY(paddingTop);
				}
				member.set_y(member.get_y() + childrenHeight);
				var this53 = this.spacing;
				var this54 = this53.value;
				var val13 = this54.unit == "%" ? this54.value * parentHeight / 100 : this54.value;
				if(this53.min != null) {
					var this55 = this53.min;
					val13 = Math.max(this55.unit == "%" ? this55.value * parentHeight / 100 : this55.value,val13);
				}
				if(this53.max != null) {
					var this56 = this53.max;
					val13 = Math.min(this56.unit == "%" ? this56.value * parentHeight / 100 : this56.value,val13);
				}
				childrenHeight += val13 + member.get_height();
				childrenWidth = Math.max(childrenWidth,member.get_width());
				break;
			default:
			}
		}
		if(this.wraps != null) {
			if(this.layoutWidth == null) {
				this.set_width(this.wraps.get_width());
			}
			if(this.layoutHeight == null) {
				this.set_height(this.wraps.get_height());
			}
		} else {
			if(this.layoutWidth == null) {
				this.set_width(childrenWidth | 0);
			}
			if(this.layoutHeight == null) {
				this.set_height(childrenHeight | 0);
			}
		}
		var this57 = this.layoutX;
		var this58 = this57.value;
		var val14 = this58.unit == "%" ? this58.value * parentWidth / 100 : this58.value;
		if(this57.min != null) {
			var this59 = this57.min;
			val14 = Math.max(this59.unit == "%" ? this59.value * parentWidth / 100 : this59.value,val14);
		}
		if(this57.max != null) {
			var this60 = this57.max;
			val14 = Math.min(this60.unit == "%" ? this60.value * parentWidth / 100 : this60.value,val14);
		}
		this.set_localX(val14 - this.get_width() * this.anchorX);
		var this61 = this.layoutY;
		var this62 = this61.value;
		var val15 = this62.unit == "%" ? this62.value * parentHeight / 100 : this62.value;
		if(this61.min != null) {
			var this63 = this61.min;
			val15 = Math.max(this63.unit == "%" ? this63.value * parentHeight / 100 : this63.value,val15);
		}
		if(this61.max != null) {
			var this64 = this61.max;
			val15 = Math.min(this64.unit == "%" ? this64.value * parentHeight / 100 : this64.value,val15);
		}
		this.set_localY(val15 - this.get_height() * this.anchorY);
	}
	,added: function() {
		haxepunk_EntityList.prototype.added.call(this);
		if(this.parent == null) {
			this.layoutChildren();
		}
	}
	,resized: function() {
		if(this.parent == null) {
			this.layoutChildren();
		}
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: haxepunk_layout_LayoutGroup
});
var catalyst_entities_HUD = function(mouseManager,scene) {
	haxepunk_layout_LayoutGroup.call(this,null,"stack");
	var m;
	var m1 = haxepunk_layout__$Measurement_Measurement_$Impl_$._new(32,"px");
	if(m1 == null) {
		m = null;
	} else {
		m = { value : m1, min : null, max : null};
	}
	this.padding = this.paddingLeft = this.paddingRight = this.paddingTop = this.paddingBottom = m;
	var meters = new haxepunk_layout_LayoutGroup(null,"horizontal");
	var m2;
	var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
	if(m3 == null) {
		m2 = null;
	} else {
		m2 = { value : m3, min : null, max : null};
	}
	meters.anchorX = 0.5;
	meters.layoutX = m2;
	this.add(meters);
	var _this = catalyst_GameData.get_current();
	var currentRoom = _this.labs.get(_this.currentRegion).currentRoom;
	switch(currentRoom) {
	case "coliseum":case "fairgrounds":
		break;
	default:
		this.catMeter = new catalyst_entities_CatCounter();
		meters.add(this.catMeter);
		this.catnipMeter = new catalyst_entities_CatnipCounter();
		meters.add(this.catnipMeter);
	}
	var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
	var m4;
	var m5 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
	if(m5 == null) {
		m4 = null;
	} else {
		m4 = { value : m5, min : null, max : null};
	}
	buttons.anchorY = 1;
	buttons.layoutY = m4;
	this.add(buttons);
	var counters = new haxepunk_layout_LayoutGroup(null,"horizontal");
	var m6;
	var m7 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
	if(m7 == null) {
		m6 = null;
	} else {
		m6 = { value : m7, min : null, max : null};
	}
	counters.anchorY = 1;
	counters.layoutY = m6;
	var m8;
	var m9 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
	if(m9 == null) {
		m8 = null;
	} else {
		m8 = { value : m9, min : null, max : null};
	}
	counters.anchorX = 0.5;
	counters.layoutX = m8;
	this.add(counters);
	switch(currentRoom) {
	case "backyard":
		var catsButton = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onWildCatsButtonPressed));
		catsButton.color = 13136183;
		buttons.add(catsButton);
		var upgradesButton = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton.addHighlightArrow();
		}
		buttons.add(upgradesButton);
		break;
	case "breeding_room":
		var heartButton = new catalyst_entities_IconButton("heart-icon",mouseManager,$bind(scene,scene.onBreedButtonPressed));
		heartButton.color = 15314909;
		buttons.add(heartButton);
		var upgradesButton1 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton1.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton1.addHighlightArrow();
		}
		buttons.add(upgradesButton1);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_AutoBreedTimer()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FishCounter()));
		break;
	case "cat_cafe":
		var gourmetButton = new catalyst_entities_IconButton("gourmet-icon",mouseManager,$bind(scene,scene.onGourmetButtonPressed));
		gourmetButton.color = 16722474;
		buttons.add(gourmetButton);
		var catsButton1 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton1.color = 13121451;
		buttons.add(catsButton1);
		var upgradesButton2 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton2.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton2.addHighlightArrow();
		}
		buttons.add(upgradesButton2);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_GourmetTimer()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FishCounter()));
		break;
	case "coliseum":
		var upgradesButton3 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton3.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton3.addHighlightArrow();
		}
		buttons.add(upgradesButton3);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_BattleCounter()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_MaxStarsCounter()));
		break;
	case "cryo_lab":
		var catsButton2 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton2.color = 13121451;
		buttons.add(catsButton2);
		var upgradesButton4 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton4.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton4.addHighlightArrow();
		}
		buttons.add(upgradesButton4);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FrozenCatCounter()));
		break;
	case "exercise_room":
		var catsButton3 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton3.color = 13121451;
		buttons.add(catsButton3);
		var upgradesButton5 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton5.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton5.addHighlightArrow();
		}
		buttons.add(upgradesButton5);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_WorkCounter()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_WorkGenerationCounter()));
		break;
	case "fairgrounds":
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FameCounter()));
		break;
	case "fishing_hole":
		var fishButton = new catalyst_entities_ToggleIconButton(function() {
			var _this1 = catalyst_GameData.get_current();
			return _this1.labs.get(_this1.currentRegion).refillFoodWithFish;
		},"fish-can-icon",mouseManager,$bind(scene,scene.onFishButtonPressed));
		fishButton.color = 8900062;
		buttons.add(fishButton);
		var catsButton4 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton4.color = 13121451;
		buttons.add(catsButton4);
		var upgradesButton6 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton6.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton6.addHighlightArrow();
		}
		buttons.add(upgradesButton6);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FishCounter()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FishRateCounter()));
		break;
	case "gift_room":
		var giftButton = new catalyst_entities_IconButton("gift-icon",mouseManager,$bind(scene,scene.onGiftButtonPressed));
		giftButton.color = 2785279;
		var _this2 = catalyst_GameData.get_current();
		if(_this2.labs.get(_this2.currentRegion).presentTime >= 1) {
			giftButton.addHighlightArrow();
		}
		buttons.add(giftButton);
		var catsButton5 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton5.color = 13121451;
		buttons.add(catsButton5);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_PresentTimer()));
		break;
	case "living_room":
		var foodButton = new catalyst_entities_IconButton("food-icon",mouseManager,$bind(scene,scene.onFoodButtonPressed));
		foodButton.color = 16722474;
		var tmp;
		var tmp1;
		var _this3 = catalyst_GameData.get_current();
		var tmp2 = _this3.labs.get(_this3.currentRegion).food;
		var _this4 = catalyst_GameData.get_current();
		var _this5 = _this4.labs.get(_this4.currentRegion);
		if(tmp2 < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this5.upgrades,"food_capacity",_this5.bonuses)) {
			tmp1 = catalyst_GameData.get_current().tutorialsEnabled;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = !catalyst_GameData.get_current().tutorials.exists("food");
		} else {
			tmp = false;
		}
		if(tmp) {
			foodButton.addHighlightArrow();
		}
		buttons.add(foodButton);
		var catsButton6 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton6.color = 13121451;
		buttons.add(catsButton6);
		var upgradesButton7 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton7.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton7.addHighlightArrow();
		}
		buttons.add(upgradesButton7);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_FoodCounter()));
		break;
	case "nap_room":
		var catsButton7 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton7.color = 13121451;
		buttons.add(catsButton7);
		var upgradesButton8 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton8.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton8.addHighlightArrow();
		}
		buttons.add(upgradesButton8);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_SleepingCatCounter()));
		break;
	case "plant_lab":
		var catnipButton = new catalyst_entities_IconButton("water-icon",mouseManager,$bind(scene,scene.onCatnipButtonUp),$bind(scene,scene.onCatnipButtonDown));
		catnipButton.color = 11193599;
		buttons.add(catnipButton);
		var catsButton8 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton8.color = 13121451;
		buttons.add(catsButton8);
		var upgradesButton9 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton9.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton9.addHighlightArrow();
		}
		buttons.add(upgradesButton9);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_CatnipRateCounter()));
		break;
	case "potion_lab":
		var searchButton = new catalyst_entities_IconButton("search-icon",mouseManager,$bind(scene,scene.onSearchButtonPressed));
		searchButton.color = 6262227;
		buttons.add(searchButton);
		var brewButton = new catalyst_entities_IconButton("brew-icon",mouseManager,$bind(scene,scene.onBrewButtonPressed));
		brewButton.color = 16744234;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("brew")) {
			var _g = 0;
			var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				var tmp3;
				var _this6 = catalyst_GameData.get_current();
				if(_this6.labs.get(_this6.currentRegion).ingredients.exists(t)) {
					var _this7 = catalyst_GameData.get_current();
					tmp3 = _this7.labs.get(_this7.currentRegion).ingredients.get(t) > 0;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					brewButton.addHighlightArrow();
					break;
				}
			}
		}
		buttons.add(brewButton);
		var potionButton = new catalyst_entities_IconButton("use-potion",mouseManager,$bind(scene,scene.onPotionButtonPressed));
		potionButton.color = 13469662;
		buttons.add(potionButton);
		var catsButton9 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton9.color = 13121451;
		buttons.add(catsButton9);
		var upgradesButton10 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton10.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton10.addHighlightArrow();
		}
		buttons.add(upgradesButton10);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_IngredientSearchTimer()));
		break;
	case "temple":
		var blessingButton = new catalyst_entities_IconButton("blessing-icon",mouseManager,$bind(scene,scene.onBlessingButtonPressed));
		blessingButton.color = 16765994;
		buttons.add(blessingButton);
		var prestigeButton = new catalyst_entities_IconButton("temple-icon",mouseManager,$bind(scene,scene.onPrestigeButtonPressed));
		prestigeButton.color = 16722474;
		buttons.add(prestigeButton);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_PietyCounter()));
		break;
	case "travel_agency":
		var searchButton1 = new catalyst_entities_IconButton("globe-icon",mouseManager,$bind(scene,scene.onTechButtonPressed));
		searchButton1.color = 6262227;
		buttons.add(searchButton1);
		var catsButton10 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton10.color = 13121451;
		buttons.add(catsButton10);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_TechCounter()));
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_TechSearchTimer()));
		break;
	case "workshop":
		var catsButton11 = new catalyst_entities_IconButton("cat-icon",mouseManager,$bind(scene,scene.onAllCatsButtonPressed));
		catsButton11.color = 13121451;
		buttons.add(catsButton11);
		var upgradesButton11 = new catalyst_entities_IconButton("upgrade-icon",mouseManager,$bind(scene,scene.onUpgradesButtonPressed));
		upgradesButton11.color = 5939244;
		if(catalyst_GameData.get_current().tutorialsEnabled && !catalyst_GameData.get_current().tutorials.exists("upgrades")) {
			upgradesButton11.addHighlightArrow();
		}
		buttons.add(upgradesButton11);
		counters.add(new haxepunk_layout_LayoutGroup(new catalyst_entities_WorkCounter()));
		break;
	}
	var rightButtons = new haxepunk_layout_LayoutGroup(null,"vertical");
	var m10;
	var m11 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
	if(m11 == null) {
		m10 = null;
	} else {
		m10 = { value : m11, min : null, max : null};
	}
	rightButtons.anchorY = 1;
	rightButtons.anchorX = 1;
	rightButtons.layoutX = rightButtons.layoutY = m10;
	this.add(rightButtons);
	rightButtons.add(new catalyst_entities_IconButton("settings-icon",mouseManager,$bind(scene,scene.onSettingsButtonPressed)));
	rightButtons.add(new catalyst_entities_IconButton("trophy-icon",mouseManager,$bind(scene,scene.onTrophyButtonPressed)));
	rightButtons.add(new catalyst_entities_IconButton("help-icon",mouseManager,$bind(scene,scene.onHelpButtonPressed)));
	this.exitButton = new catalyst_entities_IconButton("door-exit-icon",mouseManager,$bind(scene,scene.onExitButtonPressed));
	this.exitButton.color = 8421504;
	var tmp4;
	if(currentRoom == "living_room" && catalyst_GameData.get_current().tutorialsEnabled) {
		var _this8 = catalyst_GameData.get_current().tutorials;
		tmp4 = !(__map_reserved["backyard"] != null ? _this8.existsReserved("backyard") : _this8.h.hasOwnProperty("backyard"));
	} else {
		tmp4 = false;
	}
	if(tmp4) {
		this.exitButton.addHighlightArrow();
	}
	rightButtons.add(this.exitButton);
	var _this9 = this.exitButton;
	var v;
	var _this10 = catalyst_GameData.get_current();
	if(_this10.labs.get(_this10.currentRegion).currentRoom == "backyard") {
		v = "door-enter-icon";
	} else {
		v = "door-exit-icon";
	}
	if(!_this9.icons.exists(v)) {
		var icon = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + v + ".png",false));
		icon.smooth = true;
		icon.x = (176 - icon.get_width()) / 2;
		icon.y = (176 - icon.get_height()) / 2;
		_this9.addGraphic(icon);
		_this9.icons.set(v,icon);
	}
	var iconName = _this9.icons.keys();
	while(iconName.hasNext()) {
		var iconName1 = iconName.next();
		_this9.icons.get(iconName1)._visible = iconName1 == v;
	}
	_this9.icon = v;
	this.skipFrames = 1;
};
$hxClasses["catalyst.entities.HUD"] = catalyst_entities_HUD;
catalyst_entities_HUD.__name__ = ["catalyst","entities","HUD"];
catalyst_entities_HUD.__super__ = haxepunk_layout_LayoutGroup;
catalyst_entities_HUD.prototype = $extend(haxepunk_layout_LayoutGroup.prototype,{
	catMeter: null
	,catnipMeter: null
	,exitButton: null
	,added: function() {
		haxepunk_layout_LayoutGroup.prototype.added.call(this);
		this.followCamera = this._scene.camera;
	}
	,__class__: catalyst_entities_HUD
});
var catalyst_entities_HighlightArrow = function(parent) {
	this.timer = 0;
	this.arrow = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/upgrade-icon.png",false));
	this.arrow.smooth = true;
	this.arrow.pixelSnapping = false;
	haxepunk_Entity.call(this,null,null,this.arrow);
	this.set_x((parent.get_width() - this.arrow.get_width()) / 2);
	this.set_y(parent.get_height() / 2);
	this.parent = parent;
	this.set_layer(-5);
};
$hxClasses["catalyst.entities.HighlightArrow"] = catalyst_entities_HighlightArrow;
catalyst_entities_HighlightArrow.__name__ = ["catalyst","entities","HighlightArrow"];
catalyst_entities_HighlightArrow.__super__ = haxepunk_Entity;
catalyst_entities_HighlightArrow.prototype = $extend(haxepunk_Entity.prototype,{
	arrow: null
	,timer: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 0.75;
		this.timer %= 1;
		this.arrow.y = 16 * (1 - (-Math.cos(3.141592653589793 * this.timer) / 2 + .5));
	}
	,__class__: catalyst_entities_HighlightArrow
});
var catalyst_entities_IconButton = function(iconType,mouseManager,onUp,onDown) {
	this.icons = new haxe_ds_StringMap();
	catalyst_entities_BaseButton.call(this,mouseManager,1,onUp,onDown);
	if(!this.icons.exists(iconType)) {
		var icon = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + iconType + ".png",false));
		icon.smooth = true;
		icon.x = (176 - icon.get_width()) / 2;
		icon.y = (176 - icon.get_height()) / 2;
		this.addGraphic(icon);
		this.icons.set(iconType,icon);
	}
	var iconName = this.icons.keys();
	while(iconName.hasNext()) {
		var iconName1 = iconName.next();
		this.icons.get(iconName1)._visible = iconName1 == iconType;
	}
	this.icon = iconType;
};
$hxClasses["catalyst.entities.IconButton"] = catalyst_entities_IconButton;
catalyst_entities_IconButton.__name__ = ["catalyst","entities","IconButton"];
catalyst_entities_IconButton.__super__ = catalyst_entities_BaseButton;
catalyst_entities_IconButton.prototype = $extend(catalyst_entities_BaseButton.prototype,{
	icon: null
	,icons: null
	,__class__: catalyst_entities_IconButton
});
var catalyst_entities_IngredientPanel = function(ingredientType) {
	catalyst_entities_Panel.call(this,12632256,1);
	this.ingredientType = ingredientType;
	this.set_width(this.set_height(160));
	this.image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/potion/" + ingredientType + ".png",false));
	this.image.smooth = true;
	var tmp = this.image.get_width() / 2 | 0;
	this.image.originX = this.image.originY = tmp;
	this.image.x = this.get_width() / 2;
	this.image.y = this.get_height() / 2;
	this.addGraphic(this.image);
	this.label = new catalyst_graphics_Label(" ",null,0);
	this.addGraphic(this.label);
	this.set_type("ui");
};
$hxClasses["catalyst.entities.IngredientPanel"] = catalyst_entities_IngredientPanel;
catalyst_entities_IngredientPanel.__name__ = ["catalyst","entities","IngredientPanel"];
catalyst_entities_IngredientPanel.__super__ = catalyst_entities_Panel;
catalyst_entities_IngredientPanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	ingredientType: null
	,image: null
	,label: null
	,update: function() {
		catalyst_entities_Panel.prototype.update.call(this);
		var qty;
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).ingredients;
		var key = this.ingredientType;
		var _this1 = this1;
		if(__map_reserved[key] != null ? _this1.existsReserved(key) : _this1.h.hasOwnProperty(key)) {
			var _this2 = catalyst_GameData.get_current();
			var this2 = _this2.labs.get(_this2.currentRegion).ingredients;
			var key1 = this.ingredientType;
			var _this3 = this2;
			if(__map_reserved[key1] != null) {
				qty = _this3.getReserved(key1);
			} else {
				qty = _this3.h[key1];
			}
		} else {
			qty = 0;
		}
		this.label.set_text(qty == null ? "null" : "" + qty);
		var _this4 = this.label;
		var value = this.get_width();
		var _this5 = this.label;
		if(_this5._dirty) {
			_this5.parseText();
		}
		_this4.x = value - _this5.textWidth - 8;
		var _this6 = this.label;
		var value1 = this.get_width();
		var _this7 = this.label;
		if(_this7._dirty) {
			_this7.parseText();
		}
		_this6.y = value1 - _this7.textHeight - 4;
		if(!this.selected) {
			this.face.set_color(this.image.set_color(qty > 0 ? 16777215 : 4210752));
		}
	}
	,__class__: catalyst_entities_IngredientPanel
});
var catalyst_entities_IngredientSearchTimer = function() {
	catalyst_entities_CounterPanel.call(this,"search-icon",null,"0",15320751,3648456,1.35);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.IngredientSearchTimer"] = catalyst_entities_IngredientSearchTimer;
catalyst_entities_IngredientSearchTimer.__name__ = ["catalyst","entities","IngredientSearchTimer"];
catalyst_entities_IngredientSearchTimer.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_IngredientSearchTimer.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var tmp;
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).ingredientSearch != null) {
			var _this1 = catalyst_GameData.get_current();
			var _this2 = _this1.labs.get(_this1.currentRegion).cats;
			var room = "potion_lab";
			tmp = (_this2.cats.get(room).length > 0 ? _this2.cats.get(room)[0] : null) != null;
		} else {
			tmp = false;
		}
		this.set_visible(tmp);
		if(this.get_visible()) {
			var _this3 = catalyst_GameData.get_current();
			var remaining = _this3.labs.get(_this3.currentRegion).ingredientSearch.get_timeToFind();
			if(remaining >= 0) {
				var _this4 = catalyst_GameData.get_current();
				var cur = _this4.labs.get(_this4.currentRegion).ingredientSearch.ingredients.length;
				var _this5 = catalyst_GameData.get_current();
				var _this6 = _this5.labs.get(_this5.currentRegion);
				var v = "<small>Found " + cur + "/" + catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this6.upgrades,"max_found_ingredients",_this6.bonuses) + "  " + catalyst_GameData.formatTime(remaining) + " </small>";
				if(this.value != v) {
					this.value = v;
					this.setLabel();
				}
				var _this7 = catalyst_GameData.get_current();
				var v1 = _this7.labs.get(_this7.currentRegion).ingredientSearch.progress;
				if(v1 < 0) {
					v1 = 0;
				}
				if(v1 > 1) {
					v1 = 1;
				}
				if(this.fillMeter != null) {
					this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
				}
				this.fill = v1;
			} else {
				var _this8 = catalyst_GameData.get_current();
				var cur1 = _this8.labs.get(_this8.currentRegion).ingredientSearch.ingredients.length;
				var _this9 = catalyst_GameData.get_current();
				var _this10 = _this9.labs.get(_this9.currentRegion);
				var v2 = "<small>Found " + cur1 + "/" + catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this10.upgrades,"max_found_ingredients",_this10.bonuses) + "  </small>";
				if(this.value != v2) {
					this.value = v2;
					this.setLabel();
				}
				var v3 = 0;
				if(this.fillMeter != null) {
					this.fillMeter.clipRect.width = 0 + ((this.get_width() - 128 - 28) * v3 | 0) + 0;
				}
				this.fill = v3;
			}
		}
	}
	,__class__: catalyst_entities_IngredientSearchTimer
});
var catalyst_entities_LabelEntity = function(text,font,size,color) {
	if(color == null) {
		color = 16777215;
	}
	if(size == null) {
		size = 1;
	}
	if(font == null) {
		font = false;
	}
	haxepunk_Entity.call(this);
	this.label = new catalyst_graphics_Label(text,font,size,color);
	this.graphic = this.label;
	this.setDimensions();
};
$hxClasses["catalyst.entities.LabelEntity"] = catalyst_entities_LabelEntity;
catalyst_entities_LabelEntity.__name__ = ["catalyst","entities","LabelEntity"];
catalyst_entities_LabelEntity.__super__ = haxepunk_Entity;
catalyst_entities_LabelEntity.prototype = $extend(haxepunk_Entity.prototype,{
	label: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
	}
	,setDimensions: function() {
		var _this = this.label;
		if(_this._dirty) {
			_this.parseText();
		}
		this.set_width(_this.textWidth);
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		this.set_height(_this1.textHeight);
	}
	,__class__: catalyst_entities_LabelEntity
});
var catalyst_entities_LabelStretcher = function(label) {
	haxepunk_Entity.call(this,null,null,label);
	this.label = label;
};
$hxClasses["catalyst.entities.LabelStretcher"] = catalyst_entities_LabelStretcher;
catalyst_entities_LabelStretcher.__name__ = ["catalyst","entities","LabelStretcher"];
catalyst_entities_LabelStretcher.__super__ = haxepunk_Entity;
catalyst_entities_LabelStretcher.prototype = $extend(haxepunk_Entity.prototype,{
	label: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var _this = this.label;
		var v = this.get_width();
		if(v != _this.width) {
			_this._dirty = true;
		}
		_this.width = v;
		var _this1 = this.label;
		var v1 = this.get_height();
		if(v1 != _this1.height) {
			_this1._dirty = true;
		}
		_this1.height = v1;
	}
	,__class__: catalyst_entities_LabelStretcher
});
var catalyst_entities_LavaLamp = function() {
	haxepunk_Entity.call(this);
	this.sp = new catalyst_graphics_SpineBase("lava");
	this.sp.setAnimation("idle");
	this.sp.state.update(5 * Math.random());
	var tmp = Math.random() * 0.5;
	this.sp.speed = 0.25 + tmp;
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	this.sp.shader = catalyst_Client._noiseShader;
	this.graphic = this.sp;
};
$hxClasses["catalyst.entities.LavaLamp"] = catalyst_entities_LavaLamp;
catalyst_entities_LavaLamp.__name__ = ["catalyst","entities","LavaLamp"];
catalyst_entities_LavaLamp.__super__ = haxepunk_Entity;
catalyst_entities_LavaLamp.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,update: function() {
		var y = this.get_y();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
	}
	,__class__: catalyst_entities_LavaLamp
});
var catalyst_entities_Logo = function() {
	haxepunk_Entity.call(this);
	this.sp = new catalyst_graphics_SpineBase("logo");
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	this.sp.shader = catalyst_Client._noiseShader;
	this.sp.setAnimation("idle");
	this.graphic = this.sp;
	this.set_layer(-10);
};
$hxClasses["catalyst.entities.Logo"] = catalyst_entities_Logo;
catalyst_entities_Logo.__name__ = ["catalyst","entities","Logo"];
catalyst_entities_Logo.__super__ = haxepunk_Entity;
catalyst_entities_Logo.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,__class__: catalyst_entities_Logo
});
var catalyst_entities_MaxStarsCounter = function() {
	catalyst_entities_CounterPanel.call(this,"max-stars",false,"0",16763904,null,0.625);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.MaxStarsCounter"] = catalyst_entities_MaxStarsCounter;
catalyst_entities_MaxStarsCounter.__name__ = ["catalyst","entities","MaxStarsCounter"];
catalyst_entities_MaxStarsCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_MaxStarsCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var v = "" + (Math.min(99,5 + _this1.battleLevel * 5 + _this1.prestige) | 0) + " ";
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
	}
	,__class__: catalyst_entities_MaxStarsCounter
});
var catalyst_entities_MuteButton = function(music,mouseManager) {
	this.music = false;
	this.music = music;
	catalyst_entities_TextButton.call(this,"<sound-" + ((this.music ? catalyst_Music._muted : catalyst_Sound._muted) ? "off" : "on") + "/> " + (this.music ? "Music" : "SFX"),3.5,mouseManager,$bind(this,this.pressMute));
	this.color = (this.music ? catalyst_Music._muted : catalyst_Sound._muted) ? 8421504 : 16777215;
};
$hxClasses["catalyst.entities.MuteButton"] = catalyst_entities_MuteButton;
catalyst_entities_MuteButton.__name__ = ["catalyst","entities","MuteButton"];
catalyst_entities_MuteButton.__super__ = catalyst_entities_TextButton;
catalyst_entities_MuteButton.prototype = $extend(catalyst_entities_TextButton.prototype,{
	music: null
	,pressMute: function() {
		if(this.music) {
			if(catalyst_Music._muted != !catalyst_Music._muted) {
				catalyst_Music.toggleMute();
			}
			var v = catalyst_Music._muted;
			catalyst_GameData.get_current().muteMusic = v;
			catalyst_GameData.get_current().save();
		} else {
			if(catalyst_Sound._muted != !catalyst_Sound._muted) {
				catalyst_Sound.toggleMute();
			}
			var v1 = catalyst_Sound._muted;
			catalyst_GameData.get_current().muteSound = v1;
			catalyst_GameData.get_current().save();
		}
		var v2 = "<sound-" + ((this.music ? catalyst_Music._muted : catalyst_Sound._muted) ? "off" : "on") + "/> " + (this.music ? "Music" : "SFX");
		this.label.set_text(v2);
		var _this = this.label;
		var value = this.get_width();
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		_this.x = (value - _this1.textWidth) / 2;
		var _this2 = this.label;
		var value1 = this.get_height();
		var _this3 = this.label;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.y = (value1 - _this3.textHeight) / 2 + 2;
		this.text = v2;
		this.color = (this.music ? catalyst_Music._muted : catalyst_Sound._muted) ? 8421504 : 16777215;
	}
	,__class__: catalyst_entities_MuteButton
});
var catalyst_entities_PietyCounter = function() {
	catalyst_entities_CounterPanel.call(this,"blessing-icon",null,"0",7890721,13151031,1.35);
};
$hxClasses["catalyst.entities.PietyCounter"] = catalyst_entities_PietyCounter;
catalyst_entities_PietyCounter.__name__ = ["catalyst","entities","PietyCounter"];
catalyst_entities_PietyCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_PietyCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).piety);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this1 = catalyst_GameData.get_current();
		this.set_maxValue(Std.string(7777 * Math.pow(1.5,_this1.labs.get(_this1.currentRegion).prestige) | 0));
		var _this2 = catalyst_GameData.get_current();
		var v1 = _this2.labs.get(_this2.currentRegion).piety;
		var _this3 = catalyst_GameData.get_current();
		var v2 = v1 / (7777 * Math.pow(1.5,_this3.labs.get(_this3.currentRegion).prestige) | 0);
		if(v2 < 0) {
			v2 = 0;
		}
		if(v2 > 1) {
			v2 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v2 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v2 | 0) + (v2 == 1 ? 28 : 0);
		}
		this.fill = v2;
	}
	,__class__: catalyst_entities_PietyCounter
});
var catalyst_entities_PotionPanel = function(potion) {
	catalyst_entities_Panel.call(this,16777215,1);
	this.potion = potion;
	var c = 8421504;
	var _g1 = 0;
	var _g = potion.ingredients.length;
	while(_g1 < _g) {
		var i = _g1++;
		var toColor = catalyst__$IngredientType_IngredientType_$Impl_$.get_color(potion.ingredients[i]);
		var t = 1 / (i + 1);
		if(t <= 0) {
			c = c;
		} else if(t >= 1) {
			c = toColor;
		} else {
			var a = c >>> 24 & 255;
			var r = c >>> 16 & 255;
			var g = c >>> 8 & 255;
			var b = c & 255;
			a += ((toColor >>> 24 & 255) - a) * t | 0;
			r += ((toColor >>> 16 & 255) - r) * t | 0;
			g += ((toColor >>> 8 & 255) - g) * t | 0;
			b += ((toColor & 255) - b) * t | 0;
			c = a << 24 | r << 16 | g << 8 | b;
		}
	}
	var p = new catalyst_graphics_PotionImage(c);
	p.x = this.get_width() / 2;
	p.y = this.get_height() / 2;
	this.addGraphic(p);
	var _g11 = 0;
	while(_g11 < 1) {
		var star = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/star.png",false));
		star.smooth = true;
		star.y = this.get_height() - star.get_height();
		star.x = this.get_width() / 2 + star.get_width() * (_g11++ - 0.5);
		this.addGraphic(star);
	}
	this.set_type("ui");
};
$hxClasses["catalyst.entities.PotionPanel"] = catalyst_entities_PotionPanel;
catalyst_entities_PotionPanel.__name__ = ["catalyst","entities","PotionPanel"];
catalyst_entities_PotionPanel.__super__ = catalyst_entities_Panel;
catalyst_entities_PotionPanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	potion: null
	,__class__: catalyst_entities_PotionPanel
});
var catalyst_entities_PottedPlant = function() {
	this.rainTime = 0;
	haxepunk_Entity.call(this);
	this.sp = new catalyst_graphics_SpineBase("catnip-plant");
	this.sp.setAnimation("idle");
	this.sp.state.update(5 * Math.random());
	this.addGraphic(this.sp);
	this.set_width(64);
	this.set_height(128);
	this.originX = this.get_width() / 2 | 0;
	this.originY = this.get_height() * 0.75 | 0;
	this.rain = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/rain.png",false));
	this.rain.smooth = true;
	this.rain.pixelSnapping = false;
	this.rain.flexibleLayer = true;
	this.rain.addType("rain",null);
	this.rain.setMotion("rain",268,this.get_height() * 2,0.125,4,this.get_height() / 2,0.125);
	this.rain.setGravity("rain",1);
	this.rain.setAlpha("rain",1,0,catalyst_entities_PottedPlant.alphaEase);
	this.addGraphic(this.rain);
};
$hxClasses["catalyst.entities.PottedPlant"] = catalyst_entities_PottedPlant;
catalyst_entities_PottedPlant.__name__ = ["catalyst","entities","PottedPlant"];
catalyst_entities_PottedPlant.alphaEase = function(t) {
	t = Math.sqrt(t);
	return 1 - (t < 0.5 ? t * 2 : (1 - t) * 2);
};
catalyst_entities_PottedPlant.__super__ = haxepunk_Entity;
catalyst_entities_PottedPlant.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,rain: null
	,rainTime: null
	,update: function() {
		var y = this.get_y();
		this.set_layer((haxepunk_HXP.height - y) / 8 | 0);
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).fastCatnip) {
			this.rainTime += haxepunk_HXP.elapsed * 30;
		}
		while(this.rainTime > 1) {
			this.rain.emitInRectangle("rain",-this.get_width(),-this.get_height() * 4,this.get_width() * 2,this.get_height() * 2);
			--this.rainTime;
		}
	}
	,__class__: catalyst_entities_PottedPlant
});
var catalyst_entities_PresentTimer = function() {
	catalyst_entities_CounterPanel.call(this,"gift-icon",null,"0",14583722,26367,1.125);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.PresentTimer"] = catalyst_entities_PresentTimer;
catalyst_entities_PresentTimer.__name__ = ["catalyst","entities","PresentTimer"];
catalyst_entities_PresentTimer.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_PresentTimer.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var remaining = Math.min(14400,600 * Math.pow(1.2,_this1.presentCount)) / (1 + _this1.catBonusLevel("gift_room") / 100);
		var _this2 = catalyst_GameData.get_current();
		var remaining1 = remaining * (1 - _this2.labs.get(_this2.currentRegion).presentTime);
		var v = remaining1 <= 0 ? "<small>You've got mail! </small>" : catalyst_GameData.formatTime(remaining1);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this3 = catalyst_GameData.get_current();
		var v1 = _this3.labs.get(_this3.currentRegion).presentTime;
		if(v1 < 0) {
			v1 = 0;
		}
		if(v1 > 1) {
			v1 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
		}
		this.fill = v1;
	}
	,__class__: catalyst_entities_PresentTimer
});
var catalyst_entities_Professor = function() {
	haxepunk_Entity.call(this);
	var sp = new catalyst_graphics_SpineBase("professor");
	sp.setAnimation("idle");
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	sp.shader = catalyst_Client._noiseShader;
	this.graphic = sp;
};
$hxClasses["catalyst.entities.Professor"] = catalyst_entities_Professor;
catalyst_entities_Professor.__name__ = ["catalyst","entities","Professor"];
catalyst_entities_Professor.__super__ = haxepunk_Entity;
catalyst_entities_Professor.prototype = $extend(haxepunk_Entity.prototype,{
	__class__: catalyst_entities_Professor
});
var catalyst_entities_Rat = function() {
	haxepunk_Entity.call(this);
	this.sp = new catalyst_graphics_SpineBase("rat");
	this.sp.setAnimation("idle");
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	this.sp.shader = catalyst_Client._noiseShader;
	this.graphic = this.sp;
};
$hxClasses["catalyst.entities.Rat"] = catalyst_entities_Rat;
catalyst_entities_Rat.__name__ = ["catalyst","entities","Rat"];
catalyst_entities_Rat.__super__ = haxepunk_Entity;
catalyst_entities_Rat.prototype = $extend(haxepunk_Entity.prototype,{
	sp: null
	,__class__: catalyst_entities_Rat
});
var catalyst_entities_RoomPanel = function(room,showArrow,forceDisable) {
	if(forceDisable == null) {
		forceDisable = false;
	}
	if(showArrow == null) {
		showArrow = true;
	}
	catalyst_entities_Panel.call(this,12632256,1);
	this.room = room;
	this.set_width(this.set_height(192));
	var icon = catalyst__$Room_Room_$Impl_$.get_icon(room);
	var image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + icon + ".png",false));
	image.smooth = true;
	image.originX = image.originY = image.get_width() / 2 | 0;
	image.x = this.get_width() / 2;
	image.y = this.get_height() / 2;
	this.addGraphic(image);
	this.set_type("ui");
	this.baseColor = catalyst__$Room_Room_$Impl_$.get_color(room);
	var _this = catalyst_GameData.get_current();
	var visible = _this.labs.get(_this.currentRegion).roomVisible(room);
	var _this1 = catalyst_GameData.get_current();
	var _this2 = _this1.labs.get(_this1.currentRegion);
	var unlocked = _this2.unlockedRooms.exists(room) && _this2.unlockedRooms.get(room);
	if(!(visible && unlocked) || forceDisable) {
		var this1 = 0;
		var toColor = this.baseColor;
		var t = visible ? 0.5 : 0.125;
		var tmp;
		if(t <= 0) {
			tmp = this1;
		} else if(t >= 1) {
			tmp = toColor;
		} else {
			var a = this1 >>> 24 & 255;
			var r = this1 >>> 16 & 255;
			var g = this1 >>> 8 & 255;
			var b = this1 & 255;
			a = ((toColor >>> 24 & 255) - 0) * t | 0;
			r = ((toColor >>> 16 & 255) - 0) * t | 0;
			g = ((toColor >>> 8 & 255) - 0) * t | 0;
			b = ((toColor & 255) - 0) * t | 0;
			tmp = a << 24 | r << 16 | g << 8 | b;
		}
		this.baseColor = tmp;
		image.set_color(visible ? 10526880 : 1052688);
		if(!forceDisable) {
			var lockImage = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/lock.png",false));
			lockImage.smooth = true;
			lockImage.x = (this.get_width() - lockImage.get_width()) / 2;
			lockImage.y = (this.get_height() - lockImage.get_height()) / 2;
			this.addGraphic(lockImage);
		}
	}
	var tmp1;
	if(showArrow && visible && catalyst__$Room_Room_$Impl_$.get_tutorial(room) != null && catalyst_GameData.get_current().tutorialsEnabled) {
		var this2 = catalyst_GameData.get_current().tutorials;
		var key = catalyst__$Room_Room_$Impl_$.get_tutorial(room);
		var _this3 = this2;
		tmp1 = !(__map_reserved[key] != null ? _this3.existsReserved(key) : _this3.h.hasOwnProperty(key));
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		this.highlight = new catalyst_entities_HighlightArrow(this);
	}
	var tmp2;
	var tmp3;
	if(catalyst__$Room_Room_$Impl_$.get_holdsCats(room)) {
		var _this4 = catalyst_GameData.get_current();
		var _this5 = _this4.labs.get(_this4.currentRegion).unlockedRooms;
		if(__map_reserved[room] != null) {
			tmp3 = _this5.existsReserved(room);
		} else {
			tmp3 = _this5.h.hasOwnProperty(room);
		}
	} else {
		tmp3 = false;
	}
	if(tmp3) {
		var _this6 = catalyst_GameData.get_current();
		tmp2 = _this6.labs.get(_this6.currentRegion).cats.cats.get(room).length > 0;
	} else {
		tmp2 = false;
	}
	if(tmp2) {
		var _this7 = catalyst_GameData.get_current();
		var label = new catalyst_graphics_Label(Std.string(_this7.labs.get(_this7.currentRegion).cats.cats.get(room).length),null,3);
		this.addGraphic(label);
		var value = this.get_width();
		if(label._dirty) {
			label.parseText();
		}
		label.x = value - label.textWidth;
		var value1 = this.get_height();
		if(label._dirty) {
			label.parseText();
		}
		label.y = value1 - label.textHeight;
	}
	this.face.set_color(this.baseColor);
	this.selected = false;
};
$hxClasses["catalyst.entities.RoomPanel"] = catalyst_entities_RoomPanel;
catalyst_entities_RoomPanel.__name__ = ["catalyst","entities","RoomPanel"];
catalyst_entities_RoomPanel.__super__ = catalyst_entities_Panel;
catalyst_entities_RoomPanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	room: null
	,highlight: null
	,added: function() {
		catalyst_entities_Panel.prototype.added.call(this);
		if(this.highlight != null) {
			this._scene.add(this.highlight);
		}
	}
	,removed: function() {
		catalyst_entities_Panel.prototype.removed.call(this);
		if(this.highlight != null) {
			this._scene.remove(this.highlight);
		}
	}
	,addHighlightArrow: function() {
		if(this.highlight == null) {
			this.highlight = new catalyst_entities_HighlightArrow(this);
			if(this._scene != null) {
				this._scene.add(this.highlight);
			}
		}
	}
	,__class__: catalyst_entities_RoomPanel
});
var catalyst_entities_SubScene = function() {
	haxepunk_Entity.call(this);
	this.subScene = new haxepunk_Scene();
	this.subScene.bgAlpha = this.subScene.bgColor = 0;
};
$hxClasses["catalyst.entities.SubScene"] = catalyst_entities_SubScene;
catalyst_entities_SubScene.__name__ = ["catalyst","entities","SubScene"];
catalyst_entities_SubScene.__super__ = haxepunk_Entity;
catalyst_entities_SubScene.prototype = $extend(haxepunk_Entity.prototype,{
	subScene: null
	,add: function(child) {
		this.subScene.add(child);
	}
	,added: function() {
		this.subScene.batch = this._scene.batch;
	}
	,removed: function() {
		this.subScene.batch = null;
	}
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.subScene.updateLists();
		this.subScene.update();
		var camera = this._scene.camera;
		var x = this.get_x() - camera.x;
		this.subScene.x = x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) | 0;
		var x1 = this.get_y() - camera.y;
		this.subScene.y = x1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) | 0;
		this.subScene._width = this.get_width() * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) | 0;
		this.subScene._height = this.get_height() * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) | 0;
	}
	,render: function(camera) {
		var renderer = haxepunk_HXP.engine._renderer;
		var command = this.subScene.batch.iterator();
		while(command.hasNext()) renderer.render(command.next());
		renderer.startScene(this.subScene);
		this.subScene.render();
		var command1 = this.subScene.batch.iterator();
		while(command1.hasNext()) renderer.render(command1.next());
		var _this = this.subScene.batch;
		_this.head.recycle();
		_this.last = null;
		renderer.startScene(this._scene);
		var _this1 = this._scene;
		var _this2 = this._scene;
		this._scene.batch.visibleArea.setTo(0,0,_this1._width == null ? haxepunk_HXP.screen.width - _this1.x : _this1._width,_this2._height == null ? haxepunk_HXP.screen.height - _this2.y : _this2._height);
	}
	,__class__: catalyst_entities_SubScene
});
var catalyst_entities_ScrollWindow = function(child,mouseManager) {
	this.inertia = 0;
	this.lastPoints = new haxepunk_utils_CircularBuffer(4);
	this.scrolling = false;
	this.released = false;
	this.pressed = false;
	this.over = false;
	catalyst_entities_SubScene.call(this);
	this.add(this.child = child);
	this.scrollV = new catalyst_entities_VScroll(this,mouseManager);
	this.scrollV.parent = this;
	this.set_type("ui");
	mouseManager.add(this,$bind(this,this.onPress),$bind(this,this.onRelease),$bind(this,this.onEnter),$bind(this,this.onExit),$bind(this,this.onWheel));
	this.mouseManager = new haxepunk_input_MouseManager();
	this.subScene.add(this.mouseManager);
	this.mouseManager.set_active(false);
};
$hxClasses["catalyst.entities.ScrollWindow"] = catalyst_entities_ScrollWindow;
catalyst_entities_ScrollWindow.__name__ = ["catalyst","entities","ScrollWindow"];
catalyst_entities_ScrollWindow.__super__ = catalyst_entities_SubScene;
catalyst_entities_ScrollWindow.prototype = $extend(catalyst_entities_SubScene.prototype,{
	child: null
	,mouseManager: null
	,scrollV: null
	,over: null
	,pressed: null
	,released: null
	,scrolling: null
	,lastPoints: null
	,inertia: null
	,update: function() {
		catalyst_entities_SubScene.prototype.update.call(this);
		var _this = this.scrollV;
		_this.set_active(_this.set_visible(_this.set_collidable((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) > this.get_height())));
		this.mouseManager.update();
		if(((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height() ? 0 : this.subScene.camera.y / ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height())) < 0) {
			if(!((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height())) {
				this.subScene.camera.y = ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height()) * 0;
			}
		} else if(((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height() ? 0 : this.subScene.camera.y / ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height())) > 1) {
			if(!((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height())) {
				this.subScene.camera.y = (this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height();
			}
		}
	}
	,added: function() {
		catalyst_entities_SubScene.prototype.added.call(this);
		this._scene.add(this.scrollV);
	}
	,removed: function() {
		catalyst_entities_SubScene.prototype.removed.call(this);
		this._scene.remove(this.scrollV);
	}
	,onPress: function() {
		this.pressed = true;
		this.scrolling = false;
		var _this = this.lastPoints;
		var _this1 = this._scene;
		var _this2 = _this1.camera;
		_this.data[(_this.pos + _this.len) % _this.data.length] = (haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this1.y) / (_this2.scale * _this2.scaleY * haxepunk_HXP.screen.scaleY) + _this1.camera.y | 0;
		if(_this.len < _this.data.length) {
			++_this.len;
		} else {
			++_this.pos;
		}
		this.inertia = 0;
	}
	,onRelease: function() {
		this.pressed = false;
		this.released = true;
		var _this = this.lastPoints;
		_this.pos = _this.len = 0;
	}
	,onEnter: function() {
		this.over = true;
	}
	,onExit: function() {
		this.over = false;
	}
	,onWheel: function(delta) {
		var _g = this;
		if(!((_g.child == null ? _g.get_height() : Math.max(_g.child.get_height(),_g.get_height())) <= _g.get_height())) {
			_g.subScene.camera.y = ((_g.child == null ? _g.get_height() : Math.max(_g.child.get_height(),_g.get_height())) - _g.get_height()) * (((_g.child == null ? _g.get_height() : Math.max(_g.child.get_height(),_g.get_height())) <= _g.get_height() ? 0 : _g.subScene.camera.y / ((_g.child == null ? _g.get_height() : Math.max(_g.child.get_height(),_g.get_height())) - _g.get_height())) - delta * 160 / (this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())));
		}
		if(((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height() ? 0 : this.subScene.camera.y / ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height())) < 0) {
			if(!((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height())) {
				this.subScene.camera.y = ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height()) * 0;
			}
		} else if(((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height() ? 0 : this.subScene.camera.y / ((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height())) > 1) {
			if(!((this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) <= this.get_height())) {
				this.subScene.camera.y = (this.child == null ? this.get_height() : Math.max(this.child.get_height(),this.get_height())) - this.get_height();
			}
		}
	}
	,__class__: catalyst_entities_ScrollWindow
});
var catalyst_entities_ScrollList = function(layoutGroup,mouseManager) {
	catalyst_entities_ScrollWindow.call(this,this.layoutGroup = layoutGroup,mouseManager);
};
$hxClasses["catalyst.entities.ScrollList"] = catalyst_entities_ScrollList;
catalyst_entities_ScrollList.__name__ = ["catalyst","entities","ScrollList"];
catalyst_entities_ScrollList.__super__ = catalyst_entities_ScrollWindow;
catalyst_entities_ScrollList.prototype = $extend(catalyst_entities_ScrollWindow.prototype,{
	layoutGroup: null
	,update: function() {
		catalyst_entities_ScrollWindow.prototype.update.call(this);
		var w = this.get_width() - this.scrollV.get_width();
		if(this.layoutGroup.layoutWidth != { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(w), min : null, max : null}) {
			this.layoutGroup.layoutWidth = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(w), min : null, max : null};
			this.layoutGroup.layoutChildren();
		}
	}
	,__class__: catalyst_entities_ScrollList
});
var catalyst_entities_SleepingCatCounter = function() {
	catalyst_entities_CounterPanel.call(this,"nap-icon",false,"0",6758776,1);
};
$hxClasses["catalyst.entities.SleepingCatCounter"] = catalyst_entities_SleepingCatCounter;
catalyst_entities_SleepingCatCounter.__name__ = ["catalyst","entities","SleepingCatCounter"];
catalyst_entities_SleepingCatCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_SleepingCatCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).cats.cats.get("nap_room").length);
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		this.set_maxValue(Std.string(catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_nap",_this2.bonuses)));
	}
	,__class__: catalyst_entities_SleepingCatCounter
});
var catalyst_entities_StretchBackdrop = function(color) {
	if(color == null) {
		color = 16777215;
	}
	this.bg = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/anim-bg.png",false));
	this.bg.set_color(color);
	haxepunk_Entity.call(this,null,null,this.bg);
};
$hxClasses["catalyst.entities.StretchBackdrop"] = catalyst_entities_StretchBackdrop;
catalyst_entities_StretchBackdrop.__name__ = ["catalyst","entities","StretchBackdrop"];
catalyst_entities_StretchBackdrop.__super__ = haxepunk_Entity;
catalyst_entities_StretchBackdrop.prototype = $extend(haxepunk_Entity.prototype,{
	set_width: function(v) {
		if(this.bg != null) {
			var tmp = this.bg.get_width();
			this.bg.scaleX = v / tmp;
		}
		return this.width = v;
	}
	,set_height: function(v) {
		if(this.bg != null) {
			var tmp = this.bg.get_height();
			this.bg.scaleY = v / tmp;
		}
		return this.height = v;
	}
	,bg: null
	,__class__: catalyst_entities_StretchBackdrop
});
var catalyst_entities_TechCounter = function() {
	catalyst_entities_CounterPanel.call(this,"globe-icon",false,"0",54442,null,0.625);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.TechCounter"] = catalyst_entities_TechCounter;
catalyst_entities_TechCounter.__name__ = ["catalyst","entities","TechCounter"];
catalyst_entities_TechCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_TechCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = "" + _this.labs.get(_this.currentRegion).tech + " ";
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
	}
	,__class__: catalyst_entities_TechCounter
});
var catalyst_entities_TechSearchTimer = function() {
	catalyst_entities_CounterPanel.call(this,"search-icon",null,"0",11528614,6280077,1.35);
	this.set_maxValue("");
};
$hxClasses["catalyst.entities.TechSearchTimer"] = catalyst_entities_TechSearchTimer;
catalyst_entities_TechSearchTimer.__name__ = ["catalyst","entities","TechSearchTimer"];
catalyst_entities_TechSearchTimer.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_TechSearchTimer.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var bonusLevel = _this1.catBonusLevel("travel_agency") - (100 + 5 * _this1.tech);
		var techRate = bonusLevel <= 0 ? 0 : (1 + bonusLevel / 100) / 86400;
		this.set_visible(techRate > 0);
		if(this.get_visible()) {
			var _this2 = catalyst_GameData.get_current();
			if(_this2.labs.get(_this2.currentRegion).techTime < 1) {
				var _this3 = catalyst_GameData.get_current();
				var v = "<small>Exploring...  " + catalyst_GameData.formatTime((1 - _this3.labs.get(_this3.currentRegion).techTime) / techRate) + " </small>";
				if(this.value != v) {
					this.value = v;
					this.setLabel();
				}
				var _this4 = catalyst_GameData.get_current();
				var v1 = _this4.labs.get(_this4.currentRegion).techTime;
				if(v1 < 0) {
					v1 = 0;
				}
				if(v1 > 1) {
					v1 = 1;
				}
				if(this.fillMeter != null) {
					this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
				}
				this.fill = v1;
			} else {
				if(this.value != "<small>Ready to report  </small>") {
					this.value = "<small>Ready to report  </small>";
					this.setLabel();
				}
				var v2 = 1;
				if(this.fillMeter != null) {
					this.fillMeter.clipRect.width = 128 + ((this.get_width() - 128 - 28) * v2 | 0) + 28;
				}
				this.fill = v2;
			}
		}
	}
	,__class__: catalyst_entities_TechSearchTimer
});
var catalyst_entities_ToggleIconButton = function(objective,iconType,mouseManager,onUp,onDown) {
	catalyst_entities_IconButton.call(this,iconType,mouseManager,onUp,onDown);
	this.objective = objective;
};
$hxClasses["catalyst.entities.ToggleIconButton"] = catalyst_entities_ToggleIconButton;
catalyst_entities_ToggleIconButton.__name__ = ["catalyst","entities","ToggleIconButton"];
catalyst_entities_ToggleIconButton.__super__ = catalyst_entities_IconButton;
catalyst_entities_ToggleIconButton.prototype = $extend(catalyst_entities_IconButton.prototype,{
	objective: null
	,update: function() {
		this.color = this.objective() ? 3375104 : 8421504;
		catalyst_entities_IconButton.prototype.update.call(this);
	}
	,__class__: catalyst_entities_ToggleIconButton
});
var catalyst_entities_TrophyPanel = function(trophy,lv) {
	catalyst_entities_Panel.call(this,12632256,1);
	this.trophy = trophy;
	this.level = lv;
	this.set_width(this.set_height(172));
	this.imageBg = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/trophy-bg.png",false));
	this.imageBg.smooth = true;
	this.imageBg.pixelSnapping = false;
	var tmp = this.imageBg.get_width() / 2 | 0;
	this.imageBg.originX = this.imageBg.originY = tmp;
	this.imageBg.x = this.get_width() / 2;
	this.imageBg.y = this.get_height() / 2;
	this.addGraphic(this.imageBg);
	this.image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/trophy.png",false));
	this.image.smooth = true;
	this.image.pixelSnapping = false;
	var tmp1 = this.image.get_width() / 2 | 0;
	this.image.originX = this.image.originY = tmp1;
	this.image.x = this.get_width() / 2;
	this.image.y = this.get_height() / 2;
	this.image.set_color(catalyst__$Trophy_Trophy_$Impl_$.color(trophy,lv));
	this.addGraphic(this.image);
	this.set_type("ui");
	this.setColors();
	this.face.set_color(this.baseColor);
	this.selected = false;
};
$hxClasses["catalyst.entities.TrophyPanel"] = catalyst_entities_TrophyPanel;
catalyst_entities_TrophyPanel.__name__ = ["catalyst","entities","TrophyPanel"];
catalyst_entities_TrophyPanel.__super__ = catalyst_entities_Panel;
catalyst_entities_TrophyPanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	trophy: null
	,level: null
	,image: null
	,imageBg: null
	,update: function() {
		catalyst_entities_Panel.prototype.update.call(this);
		this.setColors();
	}
	,setColors: function() {
		var earned;
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).trophies;
		var key = this.trophy;
		var _this1 = this1;
		if(__map_reserved[key] != null ? _this1.existsReserved(key) : _this1.h.hasOwnProperty(key)) {
			var _this2 = catalyst_GameData.get_current();
			earned = catalyst__$Trophies_Trophies_$Impl_$.get(_this2.labs.get(_this2.currentRegion).trophies,this.trophy) >= this.level;
		} else {
			earned = false;
		}
		if(earned) {
			this.image.set_color(catalyst__$Trophy_Trophy_$Impl_$.color(this.trophy,this.level));
			this.imageBg.set_color(16777215);
			this.baseColor = 16777215;
			this.selectedColor = 13876319;
		} else {
			var visible;
			if(catalyst__$Trophy_Trophy_$Impl_$.get_room(this.trophy) != null) {
				var room = catalyst__$Trophy_Trophy_$Impl_$.get_room(this.trophy);
				var _this3 = catalyst_GameData.get_current();
				visible = _this3.labs.get(_this3.currentRegion).roomVisible(room);
			} else {
				visible = true;
			}
			var tmp = this.image;
			var tmp1;
			if(visible) {
				var this2 = catalyst__$Trophy_Trophy_$Impl_$.color(this.trophy,this.level);
				var toColor = 0;
				var a = this2 >>> 24 & 255;
				var r = this2 >>> 16 & 255;
				var g = this2 >>> 8 & 255;
				var b = this2 & 255;
				a += ((toColor >>> 24 & 255) - a) * 0.5 | 0;
				r += ((toColor >>> 16 & 255) - r) * 0.5 | 0;
				g += ((toColor >>> 8 & 255) - g) * 0.5 | 0;
				b += ((toColor & 255) - b) * 0.5 | 0;
				tmp1 = a << 24 | r << 16 | g << 8 | b;
			} else {
				tmp1 = 0;
			}
			tmp.set_color(tmp1);
			this.imageBg.set_color(visible ? 4210752 : 2105376);
			if(visible) {
				this.baseColor = 7099219;
				this.selectedColor = 9531247;
			} else {
				this.baseColor = 2105376;
				this.selectedColor = 4210752;
			}
		}
	}
	,__class__: catalyst_entities_TrophyPanel
});
var catalyst_entities_TutorialToggleButton = function(mouseManager) {
	catalyst_entities_TextButton.call(this,(catalyst_GameData.get_current().tutorialsEnabled ? "<help-icon/>" : "<help-off-icon/>") + " Tutorials",3.5,mouseManager,$bind(this,this.toggle));
	this.color = catalyst_GameData.get_current().tutorialsEnabled ? 16777215 : 8421504;
};
$hxClasses["catalyst.entities.TutorialToggleButton"] = catalyst_entities_TutorialToggleButton;
catalyst_entities_TutorialToggleButton.__name__ = ["catalyst","entities","TutorialToggleButton"];
catalyst_entities_TutorialToggleButton.__super__ = catalyst_entities_TextButton;
catalyst_entities_TutorialToggleButton.prototype = $extend(catalyst_entities_TextButton.prototype,{
	toggle: function() {
		var v = !catalyst_GameData.get_current().tutorialsEnabled;
		catalyst_GameData.get_current().tutorialsEnabled = v;
		catalyst_GameData.get_current().save();
		var v1 = (catalyst_GameData.get_current().tutorialsEnabled ? "<help-icon/>" : "<help-off-icon/>") + " Tutorials";
		this.label.set_text(v1);
		var _this = this.label;
		var value = this.get_width();
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		_this.x = (value - _this1.textWidth) / 2;
		var _this2 = this.label;
		var value1 = this.get_height();
		var _this3 = this.label;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.y = (value1 - _this3.textHeight) / 2 + 2;
		this.text = v1;
		this.color = catalyst_GameData.get_current().tutorialsEnabled ? 16777215 : 8421504;
	}
	,__class__: catalyst_entities_TutorialToggleButton
});
var catalyst_entities_UpgradePanel = function(phase) {
	catalyst_entities_Panel.call(this,12632256,1);
	this.phase = phase;
	this.set_width(this.set_height(272));
	this.image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_image(phase) + ".png",false));
	this.image.smooth = true;
	this.image.pixelSnapping = false;
	var tmp = this.image.get_width() / 2 | 0;
	this.image.originX = this.image.originY = tmp;
	this.image.x = this.get_width() / 2;
	this.image.y = this.get_height() / 2;
	this.addGraphic(this.image);
	var _this = catalyst_GameData.get_current();
	var this1 = _this.labs.get(_this.currentRegion).upgrades;
	var lv;
	var _this1 = this1;
	if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
		var _this2 = this1;
		lv = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
	} else {
		lv = 0;
	}
	this.levelLabel = new catalyst_graphics_Label("Lv" + lv,false,3,5624832);
	this.levelLabel.x = 32;
	var _this3 = this.levelLabel;
	var value = this.get_height() + 8;
	var _this4 = this.levelLabel;
	if(_this4._dirty) {
		_this4.parseText();
	}
	_this3.y = value - _this4.textHeight;
	this.addGraphic(this.levelLabel);
	this.lock = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/lock.png",false));
	this.lock.smooth = true;
	this.lock.pixelSnapping = false;
	var tmp1 = this.lock.get_width() / 2 | 0;
	this.lock.originX = this.lock.originY = tmp1;
	this.lock.x = this.get_width() / 2;
	this.lock.y = this.get_height() / 2;
	this.addGraphic(this.lock);
	this.set_type("ui");
};
$hxClasses["catalyst.entities.UpgradePanel"] = catalyst_entities_UpgradePanel;
catalyst_entities_UpgradePanel.__name__ = ["catalyst","entities","UpgradePanel"];
catalyst_entities_UpgradePanel.__super__ = catalyst_entities_Panel;
catalyst_entities_UpgradePanel.prototype = $extend(catalyst_entities_Panel.prototype,{
	phase: null
	,levelLabel: null
	,image: null
	,lock: null
	,update: function() {
		catalyst_entities_Panel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).upgrades;
		var phase = this.phase;
		var lv;
		var _this1 = this1;
		if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
			var _this2 = this1;
			lv = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
		} else {
			lv = 0;
		}
		if(lv == 0) {
			this.levelLabel._visible = false;
			var tmp = this.image;
			var tmp1;
			var phase1 = this.phase;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion);
			var tmp2;
			var tmp3;
			var this2 = _this4.upgrades;
			var level;
			var _this5 = this2;
			if(__map_reserved[phase1] != null ? _this5.existsReserved(phase1) : _this5.h.hasOwnProperty(phase1)) {
				var _this6 = this2;
				level = __map_reserved[phase1] != null ? _this6.getReserved(phase1) : _this6.h[phase1];
			} else {
				level = 0;
			}
			if(level < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase1) && _this4.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this4.upgrades,phase1,_this4.prestige,_this4.bonuses) && _this4.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase1) && _this4.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase1) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase1) * (Math.max(0,level - _this4.prestige) | 0)) {
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase1) != null) {
					var this3 = _this4.upgrades;
					var phase2 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase1);
					var tmp4;
					var _this7 = this3;
					if(__map_reserved[phase2] != null ? _this7.existsReserved(phase2) : _this7.h.hasOwnProperty(phase2)) {
						var _this8 = this3;
						tmp4 = __map_reserved[phase2] != null ? _this8.getReserved(phase2) : _this8.h[phase2];
					} else {
						tmp4 = 0;
					}
					tmp3 = tmp4 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase1);
				} else {
					tmp3 = true;
				}
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				tmp2 = _this4.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase1) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase1) * (Math.max(0,0) | 0);
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = 12632256;
			} else {
				tmp1 = 4210752;
			}
			this.baseColor = tmp.set_color(tmp1);
			this.lock._visible = true;
		} else {
			this.baseColor = this.image.set_color(16777215);
			this.levelLabel._visible = true;
			this.levelLabel.set_text("Lv" + lv);
			this.lock._visible = false;
		}
		var v = this.selected;
		this.face.set_color(v ? this.selectedColor : this.baseColor);
		this.selected = v;
	}
	,__class__: catalyst_entities_UpgradePanel
});
var catalyst_entities_VScroll = function(w,mouseManager) {
	this.pressY = 0;
	this.over = false;
	this.btnPressed = false;
	this.pressed = false;
	haxepunk_Entity.call(this);
	this.w = w;
	this.back = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/vscroll-back.png",false),32,32,64,64);
	this.back.width = 64;
	this.back.smooth = true;
	this.back.pixelSnapping = false;
	this.back.scaleBorder = true;
	this.addGraphic(this.back);
	this.bar = new haxepunk_graphics_NineSlice(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/vscroll.png",false),32,32,16,16);
	this.bar.width = 64;
	this.bar.smooth = true;
	this.bar.pixelSnapping = false;
	this.bar.scaleBorder = true;
	this.addGraphic(this.bar);
	this.topBtn = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/vscroll-button.png",false));
	this.topBtn.smooth = true;
	this.topBtn.pixelSnapping = false;
	this.addGraphic(this.topBtn);
	this.bottomBtn = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ui/vscroll-button.png",false));
	this.bottomBtn.scaleY = -1;
	this.bottomBtn.smooth = true;
	this.bottomBtn.pixelSnapping = false;
	this.addGraphic(this.bottomBtn);
	if(mouseManager != null) {
		this.set_type("ui");
		mouseManager.add(this,$bind(this,this.onDown),$bind(this,this.onUp),$bind(this,this.onOver),$bind(this,this.onOut),$bind(w,w.onWheel));
	}
	this.set_width(64);
	this.set_layer(-1);
};
$hxClasses["catalyst.entities.VScroll"] = catalyst_entities_VScroll;
catalyst_entities_VScroll.__name__ = ["catalyst","entities","VScroll"];
catalyst_entities_VScroll.__super__ = haxepunk_Entity;
catalyst_entities_VScroll.prototype = $extend(haxepunk_Entity.prototype,{
	w: null
	,back: null
	,bar: null
	,topBtn: null
	,bottomBtn: null
	,pressed: null
	,btnPressed: null
	,over: null
	,pressY: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		this.set_localX(this.w.get_width() - this.back.width + 8);
		this.back.height = this.set_height(this.w.get_height());
		var _this = this.w;
		this.bar.height = 128 + (this.get_height() - 120 - 128) * (this.get_height() / (_this.child == null ? _this.get_height() : Math.max(_this.child.get_height(),_this.get_height())));
		if(this.pressed) {
			if(this.btnPressed) {
				var _this1 = this._scene;
				var _this2 = _this1.camera;
				var my = ((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this1.y) / (_this2.scale * _this2.scaleY * haxepunk_HXP.screen.scaleY) + _this1.camera.y | 0) - this.get_y();
				if(this.over && my < 60) {
					this.w.onWheel(haxepunk_HXP.elapsed * 8);
				} else if(this.over && this.get_height() - my < 60) {
					this.w.onWheel(haxepunk_HXP.elapsed * -8.);
				}
			} else if(!haxepunk_input_Mouse.mouseDown) {
				this.onUp();
			} else {
				var _this3 = this._scene;
				var _this4 = _this3.camera;
				var _this5 = this.w;
				if(!((_this5.child == null ? _this5.get_height() : Math.max(_this5.child.get_height(),_this5.get_height())) <= _this5.get_height())) {
					_this5.subScene.camera.y = ((_this5.child == null ? _this5.get_height() : Math.max(_this5.child.get_height(),_this5.get_height())) - _this5.get_height()) * haxepunk_math_MathUtil.clamp((((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this3.y) / (_this4.scale * _this4.scaleY * haxepunk_HXP.screen.scaleY) + _this3.camera.y | 0) - this.pressY - 60) / (this.get_height() - this.bar.height - 120),0,1);
				}
			}
		}
		var goalAlpha = this.pressed ? 1 : this.over ? 0.9 : 0.5;
		if(this.back.alpha != goalAlpha) {
			var diff = goalAlpha - this.back.alpha;
			if(Math.abs(diff) < haxepunk_HXP.elapsed / 0.5) {
				this.back.set_alpha(this.bar.set_alpha(goalAlpha));
			} else {
				var _g = this.back;
				_g.set_alpha(_g.alpha + (diff > 0 ? 1 : -1) * (haxepunk_HXP.elapsed / 0.5));
				this.bar.set_alpha(this.back.alpha);
			}
		}
		var _this6 = this.w;
		this.bar.y = 60 + Math.max(0,this.get_height() - this.bar.height - 120) * ((_this6.child == null ? _this6.get_height() : Math.max(_this6.child.get_height(),_this6.get_height())) <= _this6.get_height() ? 0 : _this6.subScene.camera.y / ((_this6.child == null ? _this6.get_height() : Math.max(_this6.child.get_height(),_this6.get_height())) - _this6.get_height()));
		this.bottomBtn.y = this.get_height();
	}
	,onDown: function() {
		var _this = this._scene;
		var _this1 = _this.camera;
		var my = ((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this.y) / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + _this.camera.y | 0) - this.get_y();
		if(my < 60 || this.get_height() - my < 60) {
			this.btnPressed = true;
		} else if(my > this.bar.y + this.bar.height || my < this.bar.y) {
			var pos = (my > this.bar.y ? my - this.bar.height : my) | 0;
			var _this2 = this.w;
			if(!((_this2.child == null ? _this2.get_height() : Math.max(_this2.child.get_height(),_this2.get_height())) <= _this2.get_height())) {
				_this2.subScene.camera.y = ((_this2.child == null ? _this2.get_height() : Math.max(_this2.child.get_height(),_this2.get_height())) - _this2.get_height()) * haxepunk_math_MathUtil.clamp(pos / (this.get_height() - this.bar.height - 120),0,1);
			}
			this.bar.y = pos;
		}
		if(!this.btnPressed) {
			var _this3 = this._scene;
			var _this4 = _this3.camera;
			this.pressY = ((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this3.y) / (_this4.scale * _this4.scaleY * haxepunk_HXP.screen.scaleY) + _this3.camera.y | 0) - this.bar.y;
		}
		this.pressed = true;
	}
	,onUp: function() {
		this.pressed = false;
		this.btnPressed = false;
	}
	,onOver: function() {
		this.over = true;
	}
	,onOut: function() {
		this.over = false;
	}
	,__class__: catalyst_entities_VScroll
});
var catalyst_entities_WorkCounter = function(size) {
	if(size == null) {
		size = 1;
	}
	this.small = false;
	catalyst_entities_CounterPanel.call(this,"hammer-icon",true,"0",13121335,16737792,size);
	this.small = size < 1;
	if(this.small) {
		this.set_maxValue("");
	}
};
$hxClasses["catalyst.entities.WorkCounter"] = catalyst_entities_WorkCounter;
catalyst_entities_WorkCounter.__name__ = ["catalyst","entities","WorkCounter"];
catalyst_entities_WorkCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_WorkCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	small: null
	,update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var v = Std.string(_this.labs.get(_this.currentRegion).work) + (this.small ? " " : "");
		if(this.value != v) {
			this.value = v;
			this.setLabel();
		}
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		var maxWork = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_work",_this2.bonuses);
		if(!this.small) {
			this.set_maxValue(maxWork == null ? "null" : "" + maxWork);
		}
		var _this3 = catalyst_GameData.get_current();
		var v1 = _this3.labs.get(_this3.currentRegion).work / maxWork;
		if(v1 < 0) {
			v1 = 0;
		}
		if(v1 > 1) {
			v1 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v1 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v1 | 0) + (v1 == 1 ? 28 : 0);
		}
		this.fill = v1;
	}
	,__class__: catalyst_entities_WorkCounter
});
var catalyst_entities_WorkGenerationCounter = function() {
	catalyst_entities_CounterPanel.call(this,"hammer-icon",false,"0",16763904,null,1.125);
	this.set_maxValue("min");
};
$hxClasses["catalyst.entities.WorkGenerationCounter"] = catalyst_entities_WorkGenerationCounter;
catalyst_entities_WorkGenerationCounter.__name__ = ["catalyst","entities","WorkGenerationCounter"];
catalyst_entities_WorkGenerationCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_WorkGenerationCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var v;
		if(_this1.catBonusLevel("exercise_room") <= 0) {
			v = 0;
		} else {
			var fishSpeed = catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this1.upgrades,"work_gen_speed",_this1.bonuses) / 60;
			var mult = 0;
			var _g = 0;
			var _g1 = _this1.cats.cats.get("exercise_room");
			while(_g < _g1.length) {
				var cat = _g1[_g];
				++_g;
				mult += 1 + cat.level / 100;
			}
			v = fishSpeed * mult;
		}
		var v1 = "+" + catalyst_GameData.formatNumber(v * 60,1);
		if(this.value != v1) {
			this.value = v1;
			this.setLabel();
		}
	}
	,__class__: catalyst_entities_WorkGenerationCounter
});
var catalyst_entities_XPCounter = function(cat) {
	this.levelLabel = new catalyst_graphics_Label("0",null,5,3633608);
	this.meter = new catalyst_graphics_CircularMeter(0.875);
	catalyst_entities_CounterPanel.call(this,"level-badge",true,null,5465964,6262227,1.375);
	this.icon._visible = false;
	this.cat = cat;
	this.meter.set_color(11220936);
	this.addGraphic(this.meter);
	this.addGraphic(this.levelLabel);
	this.skipFrames = 2;
};
$hxClasses["catalyst.entities.XPCounter"] = catalyst_entities_XPCounter;
catalyst_entities_XPCounter.__name__ = ["catalyst","entities","XPCounter"];
catalyst_entities_XPCounter.__super__ = catalyst_entities_CounterPanel;
catalyst_entities_XPCounter.prototype = $extend(catalyst_entities_CounterPanel.prototype,{
	cat: null
	,meter: null
	,levelLabel: null
	,update: function() {
		catalyst_entities_CounterPanel.prototype.update.call(this);
		this.levelLabel.set_text(Std.string(this.cat.level));
		var _this = this.cat;
		var xp = _this.xp;
		var lv = _this.level - 1;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g = 0;
			while(_g < 500) {
				var i = _g++;
				if(i == 0) {
					catalyst_XP.xpTotals[i] = 60;
				} else {
					var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
					if(i > 50) {
						newTotal *= Math.pow(1.09,i - 50);
					}
					catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
				}
			}
		}
		var v = xp - (lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1]);
		var lv1 = this.cat.level;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g1 = 0;
			while(_g1 < 500) {
				var i1 = _g1++;
				if(i1 == 0) {
					catalyst_XP.xpTotals[i1] = 60;
				} else {
					var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
					if(i1 > 50) {
						newTotal1 *= Math.pow(1.09,i1 - 50);
					}
					catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
				}
			}
		}
		var v1 = lv1 < 1 ? 0 : catalyst_XP.xpTotals[lv1 - 1];
		var lv2 = lv1 - 1;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g2 = 0;
			while(_g2 < 500) {
				var i2 = _g2++;
				if(i2 == 0) {
					catalyst_XP.xpTotals[i2] = 60;
				} else {
					var newTotal2 = 60 * Math.pow(1.08,Math.min(i2,50));
					if(i2 > 50) {
						newTotal2 *= Math.pow(1.09,i2 - 50);
					}
					catalyst_XP.xpTotals[i2] = Math.round((catalyst_XP.xpTotals[i2 - 1] + newTotal2) / 1) | 0;
				}
			}
		}
		var v2 = v / (v1 - (lv2 < 1 ? 0 : catalyst_XP.xpTotals[lv2 - 1]));
		if(v2 < 0) {
			v2 = 0;
		}
		if(v2 > 1) {
			v2 = 1;
		}
		if(this.fillMeter != null) {
			this.fillMeter.clipRect.width = (v2 == 0 ? 0 : 128) + ((this.get_width() - 128 - 28) * v2 | 0) + (v2 == 1 ? 28 : 0);
		}
		this.fill = v2;
		var v3 = this.cat.get_xpString();
		if(this.value != v3) {
			this.value = v3;
			this.setLabel();
		}
		this.set_maxValue(this.cat.get_neededXpString());
		var tmp = this.cat.level - 1;
		var _this1 = this.cat;
		var _this2 = _this1._maxLevel;
		var x;
		if(_this1.wild) {
			x = 0;
		} else {
			var _this3 = catalyst_GameData.get_current();
			x = _this3.labs.get(_this3.currentRegion).tech / 100;
		}
		this.meter.fill = tmp / ((_this2 * (1 + x) | 0) - 1);
	}
	,setLabel: function() {
		catalyst_entities_CounterPanel.prototype.setLabel.call(this);
		var _this = this.levelLabel;
		var value = this.icon.x;
		var value1 = this.icon.get_width();
		var _this1 = this.levelLabel;
		if(_this1._dirty) {
			_this1.parseText();
		}
		_this.x = value + (value1 - _this1.textWidth) / 2;
		var _this2 = this.levelLabel;
		var value2 = this.icon.y;
		var value3 = this.icon.get_height();
		var _this3 = this.levelLabel;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.y = value2 + (value3 - _this3.textHeight) / 2;
		this.meter.x = this.icon.x + this.icon.get_width() / 2;
		this.meter.y = this.icon.y + this.icon.get_height() / 2 + this.meter.height * 0.125;
	}
	,__class__: catalyst_entities_XPCounter
});
var haxepunk_Graphic = function() {
	this._visible = true;
	this._point = new haxepunk_math_Vector2();
	this.relative = true;
	this.alpha = 1;
	this.originY = 0;
	this.originX = 0;
	this.scrollY = 1;
	this.scrollX = 1;
	this.y = 0;
	this.x = 0;
	this.blend = 1;
	this.flexibleLayer = false;
	this.pixelSnapping = false;
	this.active = false;
	this.smooth = true;
	this.set_color(16777215);
	if(haxepunk_graphics_shader_TextureShader.defaultShader == null) {
		haxepunk_graphics_shader_TextureShader.defaultShader = new haxepunk_graphics_shader_TextureShader();
	}
	this.shader = haxepunk_graphics_shader_TextureShader.defaultShader;
	this._class = Type.getClassName(js_Boot.getClass(this));
};
$hxClasses["haxepunk.Graphic"] = haxepunk_Graphic;
haxepunk_Graphic.__name__ = ["haxepunk","Graphic"];
haxepunk_Graphic.prototype = {
	active: null
	,smooth: null
	,pixelSnapping: null
	,flexibleLayer: null
	,blend: null
	,clipRect: null
	,shader: null
	,x: null
	,y: null
	,scrollX: null
	,scrollY: null
	,originX: null
	,originY: null
	,alpha: null
	,set_alpha: function(value) {
		return this.alpha = value < 0 ? 0 : value > 1 ? 1 : value;
	}
	,color: null
	,set_color: function(value) {
		return this.color = value & 16777215;
	}
	,relative: null
	,_screenClipRect: null
	,update: function() {
	}
	,doRender: function(point,camera) {
		if(this.pixelSnapping || camera.pixelSnapping) {
			this.pixelPerfectRender(point,camera);
		} else {
			this.render(point,camera);
		}
	}
	,render: function(point,camera) {
	}
	,pixelPerfectRender: function(point,camera) {
		this.render(point,camera);
	}
	,_class: null
	,_point: null
	,_visible: null
	,__class__: haxepunk_Graphic
	,__properties__: {set_color:"set_color",set_alpha:"set_alpha"}
};
var spinepunk_SpinePunk = function(skeletonData,stateData,smooth) {
	if(smooth == null) {
		smooth = true;
	}
	this.atlasDataMap = new haxe_ds_ObjectMap();
	this.scale = 1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.speed = 1;
	this.angle = 0;
	haxepunk_Graphic.call(this);
	spinehaxe_Bone.yDown = true;
	this.skeletonData = skeletonData;
	this.name = skeletonData.toString();
	if(stateData == null) {
		stateData = new spinehaxe_animation_AnimationStateData(skeletonData);
	}
	this.stateData = stateData;
	this.state = new spinehaxe_animation_AnimationState(stateData);
	this.skeleton = new spinehaxe_Skeleton(skeletonData);
	this.skeleton.x = 0;
	this.skeleton.y = 0;
	this.smooth = smooth;
	this.active = true;
};
$hxClasses["spinepunk.SpinePunk"] = spinepunk_SpinePunk;
spinepunk_SpinePunk.__name__ = ["spinepunk","SpinePunk"];
spinepunk_SpinePunk.readSkeletonData = function(dataName,dataPath,scale,assetCache) {
	if(scale == null) {
		scale = 1;
	}
	if(dataPath.lastIndexOf("/") < 0) {
		dataPath += "/";
	}
	var textureLoader = new spinepunk_HaxePunkTextureLoader(dataPath,assetCache);
	var json = new spinehaxe_SkeletonJson(new spinehaxe_attachments_AtlasAttachmentLoader(new spinehaxe_atlas_Atlas(haxepunk_assets_AssetLoader.getText(dataPath + dataName + ".atlas"),textureLoader)));
	json.scale = scale;
	return json.readSkeletonData(haxepunk_assets_AssetLoader.getText(dataPath + dataName + ".json"),dataName);
};
spinepunk_SpinePunk.__super__ = haxepunk_Graphic;
spinepunk_SpinePunk.prototype = $extend(haxepunk_Graphic.prototype,{
	skeleton: null
	,skeletonData: null
	,state: null
	,stateData: null
	,angle: null
	,speed: null
	,scaleX: null
	,scaleY: null
	,scale: null
	,atlasDataMap: null
	,name: null
	,update: function() {
		this.state.update(haxepunk_HXP.elapsed * this.speed);
		this.state.apply(this.skeleton);
		this.skeleton.updateWorldTransform();
		haxepunk_Graphic.prototype.update.call(this);
	}
	,render: function(point,camera) {
		var _gthis = this;
		this.skeleton.updateWorldTransform();
		var drawOrder = this.skeleton.drawOrder;
		var radians = this.angle * (Math.PI / -180);
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		var sx = this.scaleX * this.scale;
		var sy = this.scaleY * this.scale;
		var attachment;
		var _g = 0;
		while(_g < drawOrder.length) {
			var slot = drawOrder[_g];
			++_g;
			var blend = slot._data.blendMode == "additive" ? 0 : this.blend;
			attachment = slot._attachment;
			if(attachment != null) {
				var atlasData;
				var uvs;
				var triangles;
				spinepunk_SpinePunk._vertices.length = 0;
				var r;
				var g;
				var b;
				var a;
				if(js_Boot.__instanceof(attachment,spinehaxe_attachments_RegionAttachment)) {
					var region = attachment;
					atlasData = this.getAtlasData(region);
					region.computeWorldVertices(0,0,slot._bone,spinepunk_SpinePunk._vertices);
					uvs = region.uvs;
					triangles = spinepunk_SpinePunk._triangles;
					r = region.r;
					g = region.g;
					b = region.b;
					a = region.a;
				} else if(js_Boot.__instanceof(attachment,spinehaxe_attachments_MeshAttachment)) {
					var mesh = attachment;
					atlasData = this.getAtlasData(mesh);
					mesh.computeWorldVertices(slot,spinepunk_SpinePunk._vertices);
					uvs = mesh.uvs;
					triangles = mesh.triangles;
					r = mesh.r;
					g = mesh.g;
					b = mesh.b;
					a = mesh.a;
				} else {
					continue;
				}
				var i = 0;
				var color = (haxepunk_math_MathUtil.iclamp(r * (_$UInt_UInt_$Impl_$.toFloat(this.color >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * slot.r * 256 | 0,0,255) & 255) << 16 | (haxepunk_math_MathUtil.iclamp(g * (_$UInt_UInt_$Impl_$.toFloat(this.color >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * slot.g * 256 | 0,0,255) & 255) << 8 | haxepunk_math_MathUtil.iclamp(b * (_$UInt_UInt_$Impl_$.toFloat(this.color & 255) / _$UInt_UInt_$Impl_$.toFloat(255)) * slot.b * 256 | 0,0,255) & 255;
				this.set_alpha(a * this.alpha * slot.a);
				while(i < triangles.length) {
					var t1 = triangles[i] * 2;
					var t2 = triangles[i + 1] * 2;
					var t3 = triangles[i + 2] * 2;
					var x = _gthis.x;
					var x1 = point.x;
					var x2 = camera.x * _gthis.scrollX;
					var y = _gthis.y;
					var y1 = point.y;
					var y2 = camera.y * _gthis.scrollY;
					var x3 = _gthis.x;
					var x4 = point.x;
					var x5 = camera.x * _gthis.scrollX;
					var y3 = _gthis.y;
					var y4 = point.y;
					var y5 = camera.y * _gthis.scrollY;
					var x6 = _gthis.x;
					var x7 = point.x;
					var x8 = camera.x * _gthis.scrollX;
					var y6 = _gthis.y;
					var y7 = point.y;
					var y8 = camera.y * _gthis.scrollY;
					atlasData.prepareTriangle(((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + _gthis.skeleton.x + spinepunk_SpinePunk._vertices[t1] * sx * cos - spinepunk_SpinePunk._vertices[t1 + 1] * sy * sin + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2)) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + _gthis.skeleton.y + spinepunk_SpinePunk._vertices[t1] * sx * sin + spinepunk_SpinePunk._vertices[t1 + 1] * sy * cos + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2)) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),uvs[t1],uvs[t1 + 1],((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) + _gthis.skeleton.x + spinepunk_SpinePunk._vertices[t2] * sx * cos - spinepunk_SpinePunk._vertices[t2 + 1] * sy * sin + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x4) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x5 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x5)) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) + _gthis.skeleton.y + spinepunk_SpinePunk._vertices[t2] * sx * sin + spinepunk_SpinePunk._vertices[t2 + 1] * sy * cos + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y4) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y5 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y5)) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),uvs[t2],uvs[t2 + 1],((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x6) + _gthis.skeleton.x + spinepunk_SpinePunk._vertices[t3] * sx * cos - spinepunk_SpinePunk._vertices[t3 + 1] * sy * sin + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x7 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x7) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x8 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x8)) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y6) + _gthis.skeleton.y + spinepunk_SpinePunk._vertices[t3] * sx * sin + spinepunk_SpinePunk._vertices[t3 + 1] * sy * cos + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y7 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y7) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y8 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y8)) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),uvs[t3],uvs[t3 + 1],color,this.alpha,this.shader,this.smooth,blend,null,this.flexibleLayer);
					i += 3;
				}
			}
		}
	}
	,getAtlasData: function(attachment) {
		if(this.atlasDataMap.h.__keys__[attachment.__id__] == null) {
			var region;
			if(js_Boot.__instanceof(attachment,spinehaxe_attachments_RegionAttachment)) {
				region = attachment.rendererObject;
			} else if(js_Boot.__instanceof(attachment,spinehaxe_attachments_MeshAttachment)) {
				region = attachment.rendererObject;
			} else {
				throw new js__$Boot_HaxeError("Unsupported attachment type: " + Std.string(attachment));
			}
			this.atlasDataMap.set(attachment,new haxepunk_graphics_atlas_AtlasData(region.page.rendererObject));
		}
		return this.atlasDataMap.h[attachment.__id__];
	}
	,__class__: spinepunk_SpinePunk
});
var catalyst_graphics_SpineBase = function(name,scale,assetCache) {
	if(scale == null) {
		scale = 1;
	}
	if(assetCache == null) {
		assetCache = haxepunk_HXP.engine._scene.assetCache;
	}
	var skeletonInfo = assetCache.getCustom("s",name);
	spinepunk_SpinePunk.call(this,skeletonInfo.skeletonData,skeletonInfo.stateData);
	this._name = name;
	this.baseScale = this.scale = scale;
	this.smooth = true;
	this.pixelSnapping = false;
};
$hxClasses["catalyst.graphics.SpineBase"] = catalyst_graphics_SpineBase;
catalyst_graphics_SpineBase.__name__ = ["catalyst","graphics","SpineBase"];
catalyst_graphics_SpineBase.__super__ = spinepunk_SpinePunk;
catalyst_graphics_SpineBase.prototype = $extend(spinepunk_SpinePunk.prototype,{
	currentAnimation: null
	,baseScale: null
	,_name: null
	,set_facingRight: function(v) {
		if(!this.skeleton.flipX != v) {
			this.skeleton.flipX = !v;
			this.skeleton.setToSetupPose();
		}
		return !v;
	}
	,setAnimation: function(name,loop,onFinish) {
		if(loop == null) {
			loop = true;
		}
		if(!loop || this.currentAnimation != name) {
			var trackEntry = this.state.setAnimationByName(0,name,loop);
			if(onFinish != null) {
				trackEntry.onComplete.add(function(_) {
					onFinish();
				});
			}
			this.currentAnimation = name;
		}
	}
	,__class__: catalyst_graphics_SpineBase
	,__properties__: $extend(spinepunk_SpinePunk.prototype.__properties__,{set_facingRight:"set_facingRight"})
});
var catalyst_graphics_CatSpinePunk = function(cat) {
	this.eyesOpen = false;
	this.hat = null;
	catalyst_graphics_SpineBase.call(this,"cat");
	if(!catalyst_graphics_CatSpinePunk._loaded) {
		var _g = 0;
		var _g1 = this.skeletonData.animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			this.stateData.setMixByName(animation.name,"scruff",0.1);
		}
		catalyst_graphics_CatSpinePunk._loaded = true;
	}
	this.cat = cat;
	this.regenerateSkin();
	this.setColors();
	this.setAnimation("sit");
	this.state.update(Math.random());
	this.active = true;
	var scale = cat.size;
	if(cat.level < 500) {
		var a = scale * 0.75;
		scale = a + (scale - a) * (cat.level / 500);
	}
	this.scale = scale;
};
$hxClasses["catalyst.graphics.CatSpinePunk"] = catalyst_graphics_CatSpinePunk;
catalyst_graphics_CatSpinePunk.__name__ = ["catalyst","graphics","CatSpinePunk"];
catalyst_graphics_CatSpinePunk.__super__ = catalyst_graphics_SpineBase;
catalyst_graphics_CatSpinePunk.prototype = $extend(catalyst_graphics_SpineBase.prototype,{
	hat: null
	,set_facingRight: function(v) {
		if(!this.skeleton.flipX != v) {
			this.skeleton.flipX = !v;
			var _this = this.skeleton;
			var newSkin = v ? this.customSkin : this.customSkinFlipped;
			if(newSkin != null) {
				if(_this._skin != null) {
					newSkin.attachAll(_this,_this._skin);
				} else {
					var i = 0;
					var _g = 0;
					var _g1 = _this.slots;
					while(_g < _g1.length) {
						var slot = _g1[_g];
						++_g;
						var name = slot._data.attachmentName;
						if(name != null) {
							var attachment = newSkin.getAttachment(i,name);
							if(attachment != null) {
								if(slot._attachment != attachment) {
									slot._attachment = attachment;
									slot._attachmentTime = slot._bone._skeleton.time;
									var array = slot.attachmentVertices;
									while(array.length < 0) array.push(null);
									while(array.length > 0) array.pop();
								}
							}
						}
						++i;
					}
				}
			}
			_this._skin = newSkin;
			this.skeleton.setToSetupPose();
			this.setColors();
		}
		return !v;
	}
	,eyesOpen: null
	,cat: null
	,customSkin: null
	,customSkinFlipped: null
	,regenerateSkin: function() {
		this.customSkin = new spinehaxe_Skin("custom");
		this.customSkinFlipped = new spinehaxe_Skin("custom2");
		var _g = 0;
		var _g1 = catalyst__$CatPartType_CatPartType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var partType = _g1[_g];
			++_g;
			var _this = this.cat.parts;
			var part = __map_reserved[partType] != null ? _this.getReserved(partType) : _this.h[partType];
			if(part != null && part.attachment != null) {
				var attachment = part.attachment;
				var tmp;
				if(this.cat.variant != null) {
					var _this1 = catalyst__$CatVariant_CatVariant_$Impl_$.__attachments[catalyst__$CatVariant_CatVariant_$Impl_$.get___dataIndex(this.cat.variant)];
					if(__map_reserved[partType] != null) {
						tmp = _this1.existsReserved(partType);
					} else {
						tmp = _this1.h.hasOwnProperty(partType);
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this2 = catalyst__$CatVariant_CatVariant_$Impl_$.__attachments[catalyst__$CatVariant_CatVariant_$Impl_$.get___dataIndex(this.cat.variant)];
					if(__map_reserved[partType] != null) {
						attachment = _this2.getReserved(partType);
					} else {
						attachment = _this2.h[partType];
					}
				}
				var slotIndex = this.skeleton.findSlotIndex(partType);
				this.customSkin.addAttachment(slotIndex,"custom",this.skeleton.getAttachmentForSlotIndex(slotIndex,"cat_" + (catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(partType) == null ? partType : catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(partType)) + "_" + attachment));
				var otherSlotIndex = this.skeleton.findSlotIndex(catalyst__$CatPartType_CatPartType_$Impl_$.get_reverse(partType) == null ? partType : catalyst__$CatPartType_CatPartType_$Impl_$.get_reverse(partType));
				this.customSkinFlipped.addAttachment(otherSlotIndex,"custom",this.skeleton.getAttachmentForSlotIndex(otherSlotIndex,"cat_" + (catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(partType) == null ? partType : catalyst__$CatPartType_CatPartType_$Impl_$.get__attach(partType)) + "_" + attachment));
			}
		}
		var _this3 = this.skeleton;
		var newSkin = !this.skeleton.flipX ? this.customSkin : this.customSkinFlipped;
		if(newSkin != null) {
			if(_this3._skin != null) {
				newSkin.attachAll(_this3,_this3._skin);
			} else {
				var i = 0;
				var _g2 = 0;
				var _g11 = _this3.slots;
				while(_g2 < _g11.length) {
					var slot = _g11[_g2];
					++_g2;
					var name = slot._data.attachmentName;
					if(name != null) {
						var attachment1 = newSkin.getAttachment(i,name);
						if(attachment1 != null) {
							if(slot._attachment != attachment1) {
								slot._attachment = attachment1;
								slot._attachmentTime = slot._bone._skeleton.time;
								var array = slot.attachmentVertices;
								while(array.length < 0) array.push(null);
								while(array.length > 0) array.pop();
							}
						}
					}
					++i;
				}
			}
		}
		_this3._skin = newSkin;
	}
	,setColors: function() {
		var _g = 0;
		var _g1 = catalyst__$CatPartType_CatPartType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var partType = _g1[_g];
			++_g;
			var colorFrom = !(!this.skeleton.flipX) && catalyst__$CatPartType_CatPartType_$Impl_$.get_reverse(partType) != null ? catalyst__$CatPartType_CatPartType_$Impl_$.get_reverse(partType) : partType;
			var slot = this.skeleton.findSlot(partType);
			var _this = this.cat.parts;
			var part = __map_reserved[colorFrom] != null ? _this.getReserved(colorFrom) : _this.h[colorFrom];
			if(part != null) {
				slot.r = _$UInt_UInt_$Impl_$.toFloat(part.color >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
				slot.g = _$UInt_UInt_$Impl_$.toFloat(part.color >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
				slot.b = _$UInt_UInt_$Impl_$.toFloat(part.color & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
			}
		}
	}
	,update: function() {
		var _this = this.cat;
		var scale = _this.size;
		if(_this.level < 500) {
			var a = scale * 0.75;
			scale = a + (scale - a) * (_this.level / 500);
		}
		var s = scale * this.baseScale;
		if(this.scale != s) {
			var diff = 0.1 * haxepunk_HXP.elapsed * (this.scale < s ? 1 : -1);
			if(Math.abs(diff) > Math.abs(this.scale - s)) {
				this.scale = s;
			} else {
				this.scale += diff;
			}
		}
		catalyst_graphics_SpineBase.prototype.update.call(this);
	}
	,setAnimation: function(name,loop,onFinish) {
		if(loop == null) {
			loop = true;
		}
		var v = name == "sleep" ? false : true;
		if(this.eyesOpen != v) {
			this.state.setAnimationByName(1,v ? "eyes blink" : "eyes closed",true);
			this.state.setAnimationByName(2,v ? "flap wings" : "rest wings",true);
		}
		this.eyesOpen = v;
		catalyst_graphics_SpineBase.prototype.setAnimation.call(this,name,loop,onFinish);
	}
	,wearHat: function(job) {
		if(job == null) {
			job = this.cat.assignedJob;
		}
		var h = job != null && catalyst__$CatJob_CatJob_$Impl_$.get_hat(job) ? job : null;
		if(this.hat == h) {
			return;
		}
		var slotIndex = this.skeleton.findSlotIndex("hat");
		if(job != null && catalyst__$CatJob_CatJob_$Impl_$.get_hat(job)) {
			this.customSkin.addAttachment(slotIndex,"custom",this.skeleton.getAttachmentForSlotIndex(slotIndex,"cat_hat_" + job));
			this.customSkinFlipped.addAttachment(slotIndex,"custom",this.skeleton.getAttachmentForSlotIndex(slotIndex,"cat_hat_" + job));
			this.skeleton.setToSetupPose();
			this.setColors();
		} else {
			var _this = this.customSkin.attachments[slotIndex];
			if(__map_reserved["custom"] != null) {
				_this.setReserved("custom",null);
			} else {
				_this.h["custom"] = null;
			}
			var _this1 = this.customSkinFlipped.attachments[slotIndex];
			if(__map_reserved["custom"] != null) {
				_this1.setReserved("custom",null);
			} else {
				_this1.h["custom"] = null;
			}
			this.skeleton.setToSetupPose();
			this.setColors();
		}
		this.hat = h;
	}
	,__class__: catalyst_graphics_CatSpinePunk
});
var haxepunk_graphics_text_RenderData = function() {
	this.scale = 1;
	this.alpha = 1;
	this.color = 16777215;
	this.y = 0;
	this.x = 0;
};
$hxClasses["haxepunk.graphics.text.RenderData"] = haxepunk_graphics_text_RenderData;
haxepunk_graphics_text_RenderData.__name__ = ["haxepunk","graphics","text","RenderData"];
haxepunk_graphics_text_RenderData.prototype = {
	'char': null
	,img: null
	,x: null
	,y: null
	,color: null
	,alpha: null
	,scale: null
	,__class__: haxepunk_graphics_text_RenderData
};
var haxepunk_assets_AssetCache = function(name) {
	this.custom = new haxe_ds_StringMap();
	this.atlasData = new haxe_ds_StringMap();
	this.bitmapFonts = new haxe_ds_StringMap();
	this.regions = new haxe_ds_StringMap();
	this.text = new haxe_ds_StringMap();
	this.textures = new haxe_ds_StringMap();
	this.name = name;
};
$hxClasses["haxepunk.assets.AssetCache"] = haxepunk_assets_AssetCache;
haxepunk_assets_AssetCache.__name__ = ["haxepunk","assets","AssetCache"];
haxepunk_assets_AssetCache.addCustomLoader = function(name,loader) {
	var _this = haxepunk_assets_AssetCache.customLoaders;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,loader);
	} else {
		_this.h[name] = loader;
	}
};
haxepunk_assets_AssetCache.prototype = {
	name: null
	,textures: null
	,text: null
	,regions: null
	,bitmapFonts: null
	,atlasData: null
	,custom: null
	,getTexture: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		var _this = this.textures;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.textures;
			if(__map_reserved[id] != null) {
				result = _this1.getReserved(id);
			} else {
				result = _this1.h[id];
			}
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				var _this2 = otherCache.textures;
				if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
					var _this3 = otherCache.textures;
					var cached = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
					if(addRef && cached != null) {
						var _this4 = this.textures;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,cached);
						} else {
							_this4.h[id] = cached;
						}
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.textures;
				var texture = haxepunk_assets_AssetLoader.getTexture(id);
				var _this5 = this.atlasData;
				if(!(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id))) {
					var data = new haxepunk_graphics_atlas_AtlasData(texture,id);
					this.addAtlasData(id,data);
					var _this6 = this.regions;
					if(!(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id))) {
						this.addAtlasRegion(id,haxepunk_graphics_atlas_Atlas.loadImageAsRegion(data));
					}
				}
				var _this7 = this1;
				if(__map_reserved[id] != null) {
					_this7.setReserved(id,texture);
				} else {
					_this7.h[id] = texture;
				}
				result = texture;
			}
		}
		return result;
	}
	,removeTexture: function(id) {
		var _this = this.textures;
		var texture = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		this.textures.remove(id);
		var stillNeeded = false;
		var _g = 0;
		var _g1 = haxepunk_assets_AssetCache.active;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			var _this1 = cache.textures;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				stillNeeded = true;
				break;
			}
		}
		if(!stillNeeded) {
			texture.dispose();
		}
	}
	,getText: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		var _this = this.text;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.text;
			if(__map_reserved[id] != null) {
				result = _this1.getReserved(id);
			} else {
				result = _this1.h[id];
			}
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				var _this2 = otherCache.text;
				if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
					var _this3 = otherCache.text;
					var cached = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
					if(addRef && cached != null) {
						var _this4 = this.text;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,cached);
						} else {
							_this4.h[id] = cached;
						}
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.text;
				var v = haxepunk_assets_AssetLoader.getText(id);
				var _this5 = this1;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,v);
				} else {
					_this5.h[id] = v;
				}
				result = v;
			}
		}
		return result;
	}
	,addAtlasData: function(id,data) {
		var _this = this.atlasData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,data);
		} else {
			_this.h[id] = data;
		}
	}
	,getAtlasData: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		var _this = this.atlasData;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.atlasData;
			if(__map_reserved[id] != null) {
				result = _this1.getReserved(id);
			} else {
				result = _this1.h[id];
			}
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				var _this2 = otherCache.atlasData;
				if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
					var _this3 = otherCache.atlasData;
					var cached = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
					if(addRef && cached != null) {
						var _this4 = this.atlasData;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,cached);
						} else {
							_this4.h[id] = cached;
						}
						this.getTexture(id,true);
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.atlasData;
				var data = new haxepunk_graphics_atlas_AtlasData(this.getTexture(id,true),id);
				var _this5 = this.regions;
				if(!(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id))) {
					this.addAtlasRegion(id,haxepunk_graphics_atlas_Atlas.loadImageAsRegion(data));
				}
				var _this6 = this1;
				if(__map_reserved[id] != null) {
					_this6.setReserved(id,data);
				} else {
					_this6.h[id] = data;
				}
				result = data;
			}
		}
		return result;
	}
	,addAtlasRegion: function(id,region) {
		var _this = this.regions;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,region);
		} else {
			_this.h[id] = region;
		}
	}
	,getAtlasRegion: function(id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		var _this = this.regions;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.regions;
			if(__map_reserved[id] != null) {
				result = _this1.getReserved(id);
			} else {
				result = _this1.h[id];
			}
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				var _this2 = otherCache.regions;
				if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
					var _this3 = otherCache.regions;
					var cached = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
					if(addRef && cached != null) {
						var _this4 = this.regions;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,cached);
						} else {
							_this4.h[id] = cached;
						}
						this.getAtlasData(id,true);
					}
					result = cached;
				}
			}
			if(result == null) {
				var this1 = this.regions;
				var v = haxepunk_graphics_atlas_Atlas.loadImageAsRegion(this.getAtlasData(id,true));
				var _this5 = this1;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,v);
				} else {
					_this5.h[id] = v;
				}
				result = v;
			}
		}
		return result;
	}
	,addBitmapFont: function(fontName,font) {
		var _this = this.bitmapFonts;
		if(__map_reserved[fontName] != null) {
			_this.setReserved(fontName,font);
		} else {
			_this.h[fontName] = font;
		}
	}
	,getBitmapFont: function(fontName,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var result = null;
		var _this = this.bitmapFonts;
		if(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName)) {
			var _this1 = this.bitmapFonts;
			if(__map_reserved[fontName] != null) {
				result = _this1.getReserved(fontName);
			} else {
				result = _this1.h[fontName];
			}
		} else {
			var _g = 0;
			var _g1 = haxepunk_assets_AssetCache.active;
			while(_g < _g1.length) {
				var otherCache = _g1[_g];
				++_g;
				var _this2 = otherCache.bitmapFonts;
				if(__map_reserved[fontName] != null ? _this2.existsReserved(fontName) : _this2.h.hasOwnProperty(fontName)) {
					var _this3 = otherCache.bitmapFonts;
					var cached = __map_reserved[fontName] != null ? _this3.getReserved(fontName) : _this3.h[fontName];
					if(addRef && cached != null) {
						var _this4 = this.bitmapFonts;
						if(__map_reserved[fontName] != null) {
							_this4.setReserved(fontName,cached);
						} else {
							_this4.h[fontName] = cached;
						}
					}
					result = cached;
				}
			}
			if(result == null) {
				var _this5 = this.bitmapFonts;
				if(__map_reserved[fontName] != null) {
					_this5.setReserved(fontName,null);
				} else {
					_this5.h[fontName] = null;
				}
				result = null;
			}
		}
		return result;
	}
	,addBitmapFontSizes: function(fontName,fonts,format,extraParams) {
		if(format == null) {
			format = 1;
		}
		var bmf = new haxepunk_graphics_text_BitmapFont(fontName);
		var _this = this.bitmapFonts;
		if(!(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName))) {
			var _this1 = this.bitmapFonts;
			if(__map_reserved[fontName] != null) {
				_this1.setReserved(fontName,bmf);
			} else {
				_this1.h[fontName] = bmf;
			}
		}
		__map_reserved;
		var _g = 0;
		while(_g < fonts.length) {
			var font = fonts[_g];
			++_g;
			bmf.addSize(haxepunk_graphics_text_BitmapFontAtlas.getFont(font,format,extraParams));
		}
		return bmf;
	}
	,getCustom: function(loader,id,addRef) {
		if(addRef == null) {
			addRef = true;
		}
		var _g = 0;
		var _g1 = haxepunk_assets_AssetCache.active;
		while(_g < _g1.length) {
			var cache = _g1[_g];
			++_g;
			var _this = cache.custom;
			if(!(__map_reserved[loader] != null ? _this.existsReserved(loader) : _this.h.hasOwnProperty(loader))) {
				var v = new haxe_ds_StringMap();
				var _this1 = cache.custom;
				if(__map_reserved[loader] != null) {
					_this1.setReserved(loader,v);
				} else {
					_this1.h[loader] = v;
				}
			}
		}
		var result = null;
		var _this2 = this.custom;
		var _this3 = __map_reserved[loader] != null ? _this2.getReserved(loader) : _this2.h[loader];
		if(__map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id)) {
			var _this4 = this.custom;
			var _this5 = __map_reserved[loader] != null ? _this4.getReserved(loader) : _this4.h[loader];
			if(__map_reserved[id] != null) {
				result = _this5.getReserved(id);
			} else {
				result = _this5.h[id];
			}
		} else {
			var _g2 = 0;
			var _g11 = haxepunk_assets_AssetCache.active;
			while(_g2 < _g11.length) {
				var otherCache = _g11[_g2];
				++_g2;
				var _this6 = otherCache.custom;
				var _this7 = __map_reserved[loader] != null ? _this6.getReserved(loader) : _this6.h[loader];
				if(__map_reserved[id] != null ? _this7.existsReserved(id) : _this7.h.hasOwnProperty(id)) {
					var _this8 = otherCache.custom;
					var _this9 = __map_reserved[loader] != null ? _this8.getReserved(loader) : _this8.h[loader];
					var cached = __map_reserved[id] != null ? _this9.getReserved(id) : _this9.h[id];
					if(addRef && cached != null) {
						var _this10 = this.custom;
						var v1 = cached;
						var _this11 = __map_reserved[loader] != null ? _this10.getReserved(loader) : _this10.h[loader];
						if(__map_reserved[id] != null) {
							_this11.setReserved(id,v1);
						} else {
							_this11.h[id] = v1;
						}
						var _this12 = haxepunk_assets_AssetCache.customLoaders;
						if(__map_reserved[loader] != null) {
							_this12.getReserved(loader);
						} else {
							_this12.h[loader];
						}
					}
					result = cached;
				}
			}
			if(result == null) {
				var _this13 = this.custom;
				var this1 = __map_reserved[loader] != null ? _this13.getReserved(loader) : _this13.h[loader];
				var _this14 = haxepunk_assets_AssetCache.customLoaders;
				var resource = (__map_reserved[loader] != null ? _this14.getReserved(loader) : _this14.h[loader]).load(id);
				var _this15 = haxepunk_assets_AssetCache.customLoaders;
				if(__map_reserved[loader] != null) {
					_this15.getReserved(loader);
				} else {
					_this15.h[loader];
				}
				var _this16 = this1;
				if(__map_reserved[id] != null) {
					_this16.setReserved(id,resource);
				} else {
					_this16.h[id] = resource;
				}
				result = resource;
			}
		}
		return result;
	}
	,enable: function() {
		if(haxepunk_assets_AssetCache.active.indexOf(this) <= -1) {
			haxepunk_assets_AssetCache.active.push(this);
		}
	}
	,dispose: function() {
		if(haxepunk_assets_AssetCache.active.indexOf(this) > -1) {
			haxepunk_assets_AssetCache.active.indexOf(this);
			HxOverrides.remove(haxepunk_assets_AssetCache.active,this);
			var key = this.textures.keys();
			while(key.hasNext()) this.removeTexture(key.next());
		}
	}
	,__class__: haxepunk_assets_AssetCache
};
var haxepunk_graphics_Image = function(source,clipRect) {
	haxepunk_Graphic.call(this);
	this.angle = 0;
	this.scale = this.scaleX = this.scaleY = 1;
	this.originX = this.originY = 0;
	this.set_alpha(1);
	this.set_color(16777215);
	this._sourceRect = new haxepunk_math_Rectangle(0,0,1,1);
	if(source != null) {
		this._region = source;
		this._sourceRect.width = this._region.get_width();
		this._sourceRect.height = this._region.get_height();
	}
	if(clipRect != null) {
		if(clipRect.width == 0) {
			clipRect.width = this._sourceRect.width;
		}
		if(clipRect.height == 0) {
			clipRect.height = this._sourceRect.height;
		}
		this._region = this._region.clip(clipRect);
		this._sourceRect = clipRect;
	}
};
$hxClasses["haxepunk.graphics.Image"] = haxepunk_graphics_Image;
haxepunk_graphics_Image.__name__ = ["haxepunk","graphics","Image"];
haxepunk_graphics_Image.createRect = function(width,height,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(width == 0 || height == 0) {
		throw new js__$Boot_HaxeError("Illegal rect, sizes cannot be 0.");
	}
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(new haxepunk_graphics_atlas_AtlasData(new openfl_display_BitmapData(width,height,true,-1))));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.createCircle = function(radius,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(radius == 0) {
		throw new js__$Boot_HaxeError("Illegal circle, radius cannot be 0.");
	}
	var texture = new openfl_display_BitmapData(radius * 2,radius * 2,true,0);
	haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.drawCircle(texture,radius,radius,radius);
	var image = new haxepunk_graphics_Image(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(new haxepunk_graphics_atlas_AtlasData(texture)));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
haxepunk_graphics_Image.__super__ = haxepunk_Graphic;
haxepunk_graphics_Image.prototype = $extend(haxepunk_Graphic.prototype,{
	angle: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,render: function(point,camera) {
		var sx = this.scale * this.scaleX;
		var sy = this.scale * this.scaleY;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = this.x;
		var x1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x;
		var y = this.y;
		var y1 = this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y;
		if(this.angle == 0) {
			var x2 = point.x;
			var x3 = this.originX * sx;
			var x4 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x4) + x1;
			var y2 = point.y;
			var y3 = this.originY * sy;
			var y4 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y4) + y1;
			var x5 = this._point.x;
			var y5 = this._point.y;
			var clipRect;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((x5 + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(y5 + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
				clipRect = this._screenClipRect;
			} else {
				clipRect = null;
			}
			this._region.draw(this._point.x * fsx,this._point.y * fsy,sx * fsx,sy * fsy,this.angle,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect,this.flexibleLayer);
		} else {
			var x6 = point.x;
			var x7 = this.originX;
			var x8 = camera.x * this.scrollX;
			this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x6) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x7 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x7) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x8 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x8) + x1;
			var y6 = point.y;
			var y7 = this.originY;
			var y8 = camera.y * this.scrollY;
			this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y6) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y7 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y7) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y8 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y8) + y1;
			var angle = this.angle * (Math.PI / -180);
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var tx = -this.originX * sx * cos + this.originY * sy * sin + this.originX + this._point.x;
			var ty = -this.originX * sx * sin - this.originY * sy * cos + this.originY + this._point.y;
			var clipRect1;
			if(this.clipRect != null) {
				if(this._screenClipRect == null) {
					this._screenClipRect = new haxepunk_math_Rectangle();
				}
				this._screenClipRect.setTo((tx + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(ty + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
				clipRect1 = this._screenClipRect;
			} else {
				clipRect1 = null;
			}
			this._region.drawMatrix(tx * fsx,ty * fsy,sx * cos * fsx,sx * sin * fsy,-sy * sin * fsx,sy * cos * fsy,this.color,this.alpha,this.shader,this.smooth,this.blend,clipRect1,this.flexibleLayer);
		}
	}
	,centerOrigin: function() {
		this.originX = this.get_width() / 2 | 0;
		this.originY = this.get_height() / 2 | 0;
	}
	,get_width: function() {
		return this._region.get_width();
	}
	,get_height: function() {
		return this._region.get_height();
	}
	,_sourceRect: null
	,_region: null
	,__class__: haxepunk_graphics_Image
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{get_height:"get_height",get_width:"get_width"})
});
var haxepunk_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.setTo(x,y,width,height);
};
$hxClasses["haxepunk.math.Rectangle"] = haxepunk_math_Rectangle;
haxepunk_math_Rectangle.__name__ = ["haxepunk","math","Rectangle"];
haxepunk_math_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,setTo: function(x,y,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,clone: function() {
		return new haxepunk_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,intersects: function(other) {
		if(this.x <= other.x + other.width && other.x <= this.x + this.width && this.y <= other.y + other.height) {
			return other.y <= this.y + this.height;
		} else {
			return false;
		}
	}
	,__class__: haxepunk_math_Rectangle
};
var haxepunk_graphics_shader_Shader = function(vertexSource,fragmentSource) {
	this.uniformValues = new haxe_ds_StringMap();
	this.uniformNames = [];
	this.uniformIndices = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.attributeNames = [];
	this.position = new haxepunk_graphics_shader_Attribute(this);
	this.texCoord = new haxepunk_graphics_shader_Attribute(this);
	this.color = new haxepunk_graphics_shader_Attribute(this);
	this.vertexSource = vertexSource;
	this.fragmentSource = fragmentSource;
	this.build();
	this.id = haxepunk_graphics_shader_Shader.idSeq++;
};
$hxClasses["haxepunk.graphics.shader.Shader"] = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_Shader.__name__ = ["haxepunk","graphics","shader","Shader"];
haxepunk_graphics_shader_Shader.prototype = {
	glProgram: null
	,get_floatsPerVertex: function() {
		var a = 2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0);
		var _this = this.attributes;
		var v = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.get_isEnabled()) {
				a += v1.valuesPerElement;
			}
		}
		return a;
	}
	,vertexSource: null
	,fragmentSource: null
	,id: null
	,position: null
	,texCoord: null
	,color: null
	,attributeNames: null
	,attributes: null
	,uniformIndices: null
	,uniformNames: null
	,uniformValues: null
	,build: function() {
		var vertexShader = this.compile(35633,this.vertexSource);
		var fragmentShader = this.compile(35632,this.fragmentSource);
		this.glProgram = lime_graphics_opengl_GL.context.__context.createProgram();
		lime_graphics_opengl_GL.context.__context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.__context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.__context.linkProgram(this.glProgram);
		this.position.rebind();
		this.texCoord.rebind();
		this.color.rebind();
		var _this = this.attributes;
		var v = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(v.hasNext()) v.next().rebind();
	}
	,compile: function(type,source) {
		var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
		lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
		lime_graphics_opengl_GL.context.__context.compileShader(shader);
		return shader;
	}
	,destroy: function() {
		var key = this.uniformIndices.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.uniformIndices.remove(key1);
		}
		var key2 = this.attributes.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			this.attributes.remove(key3);
		}
	}
	,prepare: function(drawCommand,buffer) {
		var _gthis = this;
		if(!this.position.get_isEnabled()) {
			return;
		}
		var attribs = this.attributeNames.map(function(n) {
			var _this = _gthis.attributes;
			if(__map_reserved[n] != null) {
				return _this.getReserved(n);
			} else {
				return _this.h[n];
			}
		}).filter(function(a) {
			return a.get_isEnabled();
		});
		buffer["use"]();
		if(this.texCoord.get_isEnabled()) {
			if(this.color.get_isEnabled()) {
				buffer.prepareVertexUVandColor(drawCommand);
			} else {
				buffer.prepareVertexAndUV(drawCommand);
			}
		} else if(this.color.get_isEnabled()) {
			buffer.prepareVertexAndColor(drawCommand);
		} else {
			buffer.prepareVertexOnly(drawCommand);
		}
		var nbVertices = drawCommand.triangleCount * 3;
		var _g = 0;
		while(_g < attribs.length) {
			var attrib = attribs[_g];
			++_g;
			var attribData = attrib.data;
			var _g2 = 0;
			var _g1 = nbVertices * attrib.valuesPerElement;
			while(_g2 < _g1) {
				++_g2;
				var v = attribData[attrib.set_dataPos(attrib.dataPos + 1)];
				buffer.buffer[buffer.byteOffset] = v;
				buffer.byteOffset += 1;
			}
		}
		lime_graphics_opengl_GL.context.__context.bufferSubData(34962,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(buffer.buffer),buffer.buffer.length * 4));
		this.setAttributePointers(drawCommand.triangleCount);
	}
	,setAttributePointers: function(nbTriangles) {
		var offset = 0;
		var stride = (2 + (this.texCoord.get_isEnabled() ? 2 : 0) + (this.color.get_isEnabled() ? 1 : 0)) * 4;
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(this.position.index,2,5126,false,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		offset = 8;
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.vertexAttribPointer(this.texCoord.index,2,5126,false,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(8)));
			offset = 16;
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.vertexAttribPointer(this.color.index,4,5121,true,stride,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset)));
			offset += 4;
		}
		offset *= nbTriangles * 3;
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var _this = this.attributes;
			var attrib = __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n];
			if(attrib.get_isEnabled()) {
				lime_graphics_opengl_GL.context.__context.vertexAttribPointer(attrib.index,attrib.valuesPerElement,5126,false,0,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(offset)));
				offset += nbTriangles * 3 * attrib.valuesPerElement * 4;
			}
		}
	}
	,bind: function() {
		if(this.glProgram == null) {
			this.destroy();
			this.build();
		}
		var program = this.glProgram;
		lime_graphics_opengl_GL.__currentProgram = program;
		lime_graphics_opengl_GL.context.__context.useProgram(program);
		var _g = 0;
		var _g1 = this.uniformNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(!this.uniformIndices.exists(name)) {
				this.uniformIndices.set(name,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name));
			}
			var location = this.uniformIndices.get(name);
			var _this = this.uniformValues;
			lime_graphics_opengl_GL.context.__context.uniform1f(location,__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]);
		}
		lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.enableVertexAttribArray(this.color.index);
		}
		var _g2 = 0;
		var _g11 = this.attributeNames;
		while(_g2 < _g11.length) {
			var n = _g11[_g2];
			++_g2;
			var _this1 = this.attributes;
			if((__map_reserved[n] != null ? _this1.getReserved(n) : _this1.h[n]).get_isEnabled()) {
				var _this2 = this.attributes;
				lime_graphics_opengl_GL.context.__context.enableVertexAttribArray((__map_reserved[n] != null ? _this2.getReserved(n) : _this2.h[n]).index);
			}
		}
		lime_graphics_opengl_GL.context.__context.getError();
	}
	,unbind: function() {
		lime_graphics_opengl_GL.__currentProgram = null;
		lime_graphics_opengl_GL.context.__context.useProgram(null);
		lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.position.index);
		if(this.texCoord.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.texCoord.index);
		}
		if(this.color.get_isEnabled()) {
			lime_graphics_opengl_GL.context.__context.disableVertexAttribArray(this.color.index);
		}
		var _g = 0;
		var _g1 = this.attributeNames;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var _this = this.attributes;
			if((__map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]).get_isEnabled()) {
				var _this1 = this.attributes;
				lime_graphics_opengl_GL.context.__context.disableVertexAttribArray((__map_reserved[n] != null ? _this1.getReserved(n) : _this1.h[n]).index);
			}
		}
	}
	,__class__: haxepunk_graphics_shader_Shader
	,__properties__: {get_floatsPerVertex:"get_floatsPerVertex"}
};
var haxepunk_graphics_shader_TextureShader = function(vertex,fragment) {
	haxepunk_graphics_shader_Shader.call(this,vertex == null ? haxepunk_graphics_shader_TextureShader.VERTEX_SHADER : vertex,fragment == null ? haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	var _this1 = this.texCoord;
	_this1.name = "aTexCoord";
	_this1.rebind();
	var _this2 = this.color;
	_this2.name = "aColor";
	_this2.rebind();
};
$hxClasses["haxepunk.graphics.shader.TextureShader"] = haxepunk_graphics_shader_TextureShader;
haxepunk_graphics_shader_TextureShader.__name__ = ["haxepunk","graphics","shader","TextureShader"];
haxepunk_graphics_shader_TextureShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_TextureShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_TextureShader
});
var haxepunk_graphics_shader_Attribute = function(parent) {
	this.dataPos = -1;
	this.index = -1;
	this.parent = parent;
};
$hxClasses["haxepunk.graphics.shader.Attribute"] = haxepunk_graphics_shader_Attribute;
haxepunk_graphics_shader_Attribute.__name__ = ["haxepunk","graphics","shader","Attribute"];
haxepunk_graphics_shader_Attribute.prototype = {
	index: null
	,data: null
	,valuesPerElement: null
	,dataPos: null
	,set_dataPos: function(v) {
		return this.dataPos = v > -1 && this.data != null ? v % this.data.length : v;
	}
	,name: null
	,get_isEnabled: function() {
		if(this.name != null) {
			return this.index != -1;
		} else {
			return false;
		}
	}
	,parent: null
	,rebind: function() {
		if(this.name != null) {
			this.index = lime_graphics_opengl_GL.context.__context.getAttribLocation(this.parent.glProgram,this.name);
		}
		this.set_dataPos(-1);
	}
	,__class__: haxepunk_graphics_shader_Attribute
	,__properties__: {get_isEnabled:"get_isEnabled",set_dataPos:"set_dataPos"}
};
var haxepunk_graphics_text_TextOpcode = $hxClasses["haxepunk.graphics.text.TextOpcode"] = { __ename__ : ["haxepunk","graphics","text","TextOpcode"], __constructs__ : ["SetColor","SetAlpha","SetScale","SetFont","SetSize","TextBlock","NewLine","Image","Align","Custom","PopColor","PopAlpha","PopScale","PopFont","PopSize","PopCustom"] };
haxepunk_graphics_text_TextOpcode.SetColor = function(color) { var $x = ["SetColor",0,color]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetAlpha = function(alpha) { var $x = ["SetAlpha",1,alpha]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetScale = function(scale) { var $x = ["SetScale",2,scale]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetFont = function(font) { var $x = ["SetFont",3,font]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.SetSize = function(size) { var $x = ["SetSize",4,size]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.TextBlock = function(text) { var $x = ["TextBlock",5,text]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.NewLine = function(width,height,align) { var $x = ["NewLine",6,width,height,align]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Image = function(image,padding) { var $x = ["Image",7,image,padding]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Align = function(alignType) { var $x = ["Align",8,alignType]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.Custom = function(f) { var $x = ["Custom",9,f]; $x.__enum__ = haxepunk_graphics_text_TextOpcode; $x.toString = $estr; return $x; };
haxepunk_graphics_text_TextOpcode.PopColor = ["PopColor",10];
haxepunk_graphics_text_TextOpcode.PopColor.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopColor.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopAlpha = ["PopAlpha",11];
haxepunk_graphics_text_TextOpcode.PopAlpha.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopAlpha.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopScale = ["PopScale",12];
haxepunk_graphics_text_TextOpcode.PopScale.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopScale.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopFont = ["PopFont",13];
haxepunk_graphics_text_TextOpcode.PopFont.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopFont.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopSize = ["PopSize",14];
haxepunk_graphics_text_TextOpcode.PopSize.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopSize.__enum__ = haxepunk_graphics_text_TextOpcode;
haxepunk_graphics_text_TextOpcode.PopCustom = ["PopCustom",15];
haxepunk_graphics_text_TextOpcode.PopCustom.toString = $estr;
haxepunk_graphics_text_TextOpcode.PopCustom.__enum__ = haxepunk_graphics_text_TextOpcode;
var haxepunk_graphics_text_BitmapText = function(text,x,y,width,height,options) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._dirty = false;
	this.autoHeight = false;
	this.autoWidth = false;
	this.opCodes = [];
	this.charCount = 0;
	this.displayCharCount = -1;
	this.charSpacing = 0;
	this.lineSpacing = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.wrap = false;
	this.size = 0;
	this.height = 0;
	this.width = 0;
	this.textHeight = 0;
	this.textWidth = 0;
	haxepunk_Graphic.call(this);
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"font")) {
		options.font = haxepunk_HXP.defaultFont + ".fnt";
	}
	if(!Object.prototype.hasOwnProperty.call(options,"size")) {
		options.size = 16;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"color")) {
		options.color = 16777215;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"wordWrap")) {
		options.wordWrap = false;
	}
	var font = haxepunk_assets_AssetCache.global.getBitmapFont(options.font,false);
	if(font == null) {
		font = haxepunk_graphics_text_BitmapFontAtlas.getFont(options.font,options.format,options.extraParams);
		haxepunk_assets_AssetCache.global.addBitmapFont(options.font,font);
	}
	this._font = font;
	if(this._font == null) {
		throw new js__$Boot_HaxeError("Invalid font glyphs provided.");
	}
	this.x = x;
	this.y = y;
	if(width != this.width) {
		this._dirty = true;
	}
	this.width = width;
	if(height != this.height) {
		this._dirty = true;
	}
	this.height = height;
	var v = options.wordWrap;
	if(v != this.wrap) {
		this._dirty = true;
	}
	this.wrap = v;
	var v1 = options.size;
	if(v1 != this.size) {
		this._dirty = true;
	}
	this.size = v1;
	this.autoWidth = width == 0;
	this.autoHeight = height == 0;
	this.set_color(options.color);
	this.set_text(text != null ? text : "");
};
$hxClasses["haxepunk.graphics.text.BitmapText"] = haxepunk_graphics_text_BitmapText;
haxepunk_graphics_text_BitmapText.__name__ = ["haxepunk","graphics","text","BitmapText"];
haxepunk_graphics_text_BitmapText.defineFormatTag = function(tag,options) {
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var tagOps = [];
	var closeTagOps = [];
	if(Object.prototype.hasOwnProperty.call(options,"color")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetColor(options.color));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopColor);
	}
	if(Object.prototype.hasOwnProperty.call(options,"alpha")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetAlpha(options.alpha));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopAlpha);
	}
	if(Object.prototype.hasOwnProperty.call(options,"scale")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetScale(options.scale));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopScale);
	}
	if(Object.prototype.hasOwnProperty.call(options,"font")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetFont(options.font));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopFont);
	}
	if(Object.prototype.hasOwnProperty.call(options,"size")) {
		tagOps.push(haxepunk_graphics_text_TextOpcode.SetSize(options.size));
		closeTagOps.push(haxepunk_graphics_text_TextOpcode.PopSize);
	}
	var closeTag = "/" + tag;
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,tagOps);
	} else {
		_this1.h[tag] = tagOps;
	}
	var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[closeTag] != null) {
		_this2.setReserved(closeTag,closeTagOps);
	} else {
		_this2.h[closeTag] = closeTagOps;
	}
};
haxepunk_graphics_text_BitmapText.defineImageTag = function(tag,image,padding) {
	if(padding == null) {
		padding = 0;
	}
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var v = [haxepunk_graphics_text_TextOpcode.Image(image,padding)];
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,v);
	} else {
		_this1.h[tag] = v;
	}
};
haxepunk_graphics_text_BitmapText.defineCustomTag = function(tag,func) {
	var _this = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null ? _this.existsReserved(tag) : _this.h.hasOwnProperty(tag)) {
		throw new js__$Boot_HaxeError("Duplicate format tag: <" + tag + "> already exists");
	}
	var closeTag = "/" + tag;
	var v = [haxepunk_graphics_text_TextOpcode.Custom(func)];
	var _this1 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[tag] != null) {
		_this1.setReserved(tag,v);
	} else {
		_this1.h[tag] = v;
	}
	var v1 = [haxepunk_graphics_text_TextOpcode.PopCustom];
	var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
	if(__map_reserved[closeTag] != null) {
		_this2.setReserved(closeTag,v1);
	} else {
		_this2.h[closeTag] = v1;
	}
};
haxepunk_graphics_text_BitmapText.dynamicImage = function(src) {
	haxepunk_graphics_text_BitmapText._imgArray.length = 0;
	var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion(src,false));
	haxepunk_graphics_text_BitmapText._imgArray.push(haxepunk_graphics_text_TextOpcode.Image(img,0));
	return haxepunk_graphics_text_BitmapText._imgArray;
};
haxepunk_graphics_text_BitmapText.__super__ = haxepunk_Graphic;
haxepunk_graphics_text_BitmapText.prototype = $extend(haxepunk_Graphic.prototype,{
	textWidth: null
	,textHeight: null
	,width: null
	,height: null
	,size: null
	,wrap: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,lineSpacing: null
	,charSpacing: null
	,displayCharCount: null
	,charCount: null
	,opCodes: null
	,text: null
	,set_text: function(text) {
		if(this.text != text) {
			this.text = text;
			this._dirty = true;
		}
		return text;
	}
	,parseText: function() {
		var _gthis = this;
		this.opCodes.length = 0;
		haxepunk_graphics_text_BitmapText._fontStack.length = 0;
		haxepunk_graphics_text_BitmapText._sizeStack.length = 0;
		haxepunk_graphics_text_BitmapText._scaleStack.length = 0;
		haxepunk_graphics_text_BitmapText._colorStack.length = 0;
		haxepunk_graphics_text_BitmapText._alphaStack.length = 0;
		haxepunk_graphics_text_BitmapText._word.length = 0;
		haxepunk_graphics_text_BitmapText._fontStack.push(this._font);
		haxepunk_graphics_text_BitmapText._sizeStack.push(this.size);
		haxepunk_graphics_text_BitmapText._scaleStack.push(1);
		haxepunk_graphics_text_BitmapText._colorStack.push(this.color);
		haxepunk_graphics_text_BitmapText._alphaStack.push(this.alpha);
		var fsx = haxepunk_HXP.screen.scaleX;
		var fsy = haxepunk_HXP.screen.scaleY;
		var sx = this.size * this.scale * this.scaleX;
		var sy = this.size * this.scale * this.scaleY;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var remaining = this.text;
		var cursorX = 0;
		var cursorY = 0;
		var trailingWhitespace = 0;
		var currentWord = "";
		var wordLength = 0;
		var wordTrailingWhitespace = 0;
		var wordHeight = 0;
		var currentScale = 1;
		var currentFont = this._font;
		var currentSizeRatio = 1;
		var currentAlign = 0;
		var currentWordTrailingWhitespace = 0;
		var textWidth = 0;
		this.charCount = 0;
		this.opCodes.push(null);
		var newLineIndex = 0;
		while(true) {
			var matched = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.match(remaining);
			var line = matched ? haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedLeft() : remaining;
			if(line.length > 0) {
				var i = 0;
				while(i < line.length) {
					var unicode = HxOverrides.cca(line,i);
					var u = new haxe_Utf8(4);
					u.__b += String.fromCharCode(unicode);
					var $char = u.__b;
					wordHeight = Math.max(wordHeight,lineHeight * currentScale * currentSizeRatio);
					switch($char) {
					case "\n":
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g = 0;
							var _g1 = haxepunk_graphics_text_BitmapText._word;
							while(_g < _g1.length) {
								var opCode = _g1[_g];
								++_g;
								if(opCode == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode);
								} else if(opCode[1] == 5) {
									var _g2 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g2[1] == 5) {
										_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g2[2],opCode[2]));
									} else {
										_gthis.opCodes.push(opCode);
									}
								} else {
									_gthis.opCodes.push(opCode);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
						trailingWhitespace = 0;
						cursorX = trailingWhitespace;
						cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
						thisLineHeight = lineHeight * currentScale * currentSizeRatio;
						_gthis.opCodes.push(null);
						newLineIndex = _gthis.opCodes.length - 1;
						++_gthis.charCount;
						break;
					case " ":
						var gd = currentFont.getChar($char,sx * fsx * currentScale * currentSizeRatio);
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						var charLength = gd.xAdvance * gd.scale / fsx + _gthis.charSpacing * currentScale * currentSizeRatio;
						currentWordTrailingWhitespace += charLength;
						wordLength += charLength;
						++_gthis.charCount;
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						if(haxepunk_graphics_text_BitmapText._word.length != 0) {
							if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								cursorX = wordLength;
							} else {
								cursorX += wordLength;
							}
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							var _g3 = 0;
							var _g11 = haxepunk_graphics_text_BitmapText._word;
							while(_g3 < _g11.length) {
								var opCode1 = _g11[_g3];
								++_g3;
								if(opCode1 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
									_gthis.opCodes.push(opCode1);
								} else if(opCode1[1] == 5) {
									var _g4 = _gthis.opCodes[_gthis.opCodes.length - 1];
									if(_g4[1] == 5) {
										_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g4[2],opCode1[2]));
									} else {
										_gthis.opCodes.push(opCode1);
									}
								} else {
									_gthis.opCodes.push(opCode1);
								}
							}
							thisLineHeight = Math.max(wordHeight,thisLineHeight);
							haxepunk_graphics_text_BitmapText._word.length = 0;
							wordLength = 0;
							wordHeight = 0;
							trailingWhitespace = wordTrailingWhitespace;
							wordTrailingWhitespace = 0;
						}
						break;
					case "-":
						var hyphen = currentWord != "";
						if(hyphen && i < line.length - 1) {
							var unicode1 = HxOverrides.cca(line,i + 1);
							var u1 = new haxe_Utf8(4);
							u1.__b += String.fromCharCode(unicode1);
							var nextChar = u1.__b;
							if(nextChar == " " || nextChar == "-") {
								hyphen = false;
							}
						}
						var gd1 = currentFont.getChar($char,sx * fsx * currentScale * currentSizeRatio);
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						currentWordTrailingWhitespace = 0;
						wordLength += gd1.xAdvance * gd1.scale / fsx + _gthis.charSpacing * currentScale * currentSizeRatio;
						++_gthis.charCount;
						if(hyphen) {
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g5 = 0;
								var _g12 = haxepunk_graphics_text_BitmapText._word;
								while(_g5 < _g12.length) {
									var opCode2 = _g12[_g5];
									++_g5;
									if(opCode2 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode2);
									} else if(opCode2[1] == 5) {
										var _g6 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g6[1] == 5) {
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g6[2],opCode2[2]));
										} else {
											_gthis.opCodes.push(opCode2);
										}
									} else {
										_gthis.opCodes.push(opCode2);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
						}
						break;
					default:
						if($char == "\t") {
							$char = " ";
						}
						var gd2 = currentFont.getChar($char,sx * fsx * currentScale * currentSizeRatio);
						currentWord = haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(currentWord,$char);
						currentWordTrailingWhitespace = 0;
						wordLength += gd2.xAdvance * gd2.scale / fsx + _gthis.charSpacing * currentScale * currentSizeRatio;
						++_gthis.charCount;
					}
					++i;
				}
			}
			if(matched) {
				var tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(2);
				if(tag == null) {
					tag = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(1);
				}
				var tmp;
				if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) != null) {
					var _this = haxepunk_graphics_text_BitmapText.dynamicTags;
					if(__map_reserved[tag] != null) {
						tmp = _this.existsReserved(tag);
					} else {
						tmp = _this.h.hasOwnProperty(tag);
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					var _g7 = 0;
					var _this1 = haxepunk_graphics_text_BitmapText.dynamicTags;
					var _g13 = (__map_reserved[tag] != null ? _this1.getReserved(tag) : _this1.h[tag])(haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(5));
					while(_g7 < _g13.length) {
						var tag1 = _g13[_g7];
						++_g7;
						switch(tag1[1]) {
						case 0:
							haxepunk_graphics_text_BitmapText._colorStack.push(tag1[2]);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 1:
							haxepunk_graphics_text_BitmapText._alphaStack.push(tag1[2]);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 2:
							var scale = tag1[2];
							currentScale = scale;
							haxepunk_graphics_text_BitmapText._scaleStack.push(scale);
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 3:
							var font = tag1[2];
							haxepunk_graphics_text_BitmapText._fontStack.push(font);
							currentFont = font;
							lineHeight = font.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 4:
							var size = tag1[2];
							haxepunk_graphics_text_BitmapText._sizeStack.push(size);
							currentSizeRatio = size / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							break;
						case 6:
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g8 = 0;
								var _g14 = haxepunk_graphics_text_BitmapText._word;
								while(_g8 < _g14.length) {
									var opCode3 = _g14[_g8];
									++_g8;
									if(opCode3 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode3);
									} else if(opCode3[1] == 5) {
										var _g9 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g9[1] == 5) {
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g9[2],opCode3[2]));
										} else {
											_gthis.opCodes.push(opCode3);
										}
									} else {
										_gthis.opCodes.push(opCode3);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
							trailingWhitespace = 0;
							cursorX = trailingWhitespace;
							cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
							thisLineHeight = lineHeight * currentScale * currentSizeRatio;
							_gthis.opCodes.push(null);
							newLineIndex = _gthis.opCodes.length - 1;
							++_gthis.charCount;
							break;
						case 7:
							var image = tag1[2];
							var imageWidth = (image.get_width() * image.scale * image.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
							haxepunk_graphics_text_BitmapText._word.push(tag1);
							currentWordTrailingWhitespace = 0;
							wordLength += imageWidth + tag1[3] * 2;
							wordHeight = Math.max(wordHeight,image.get_height() * currentScale * image.scale * image.scaleY * _gthis.scale * _gthis.scaleY);
							if(cursorX > textWidth) {
								textWidth = cursorX | 0;
							}
							++_gthis.charCount;
							break;
						case 8:
							var alignType = tag1[2];
							if(currentWord != "") {
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
								currentWord = "";
								wordTrailingWhitespace = currentWordTrailingWhitespace;
								currentWordTrailingWhitespace = 0;
							}
							if(haxepunk_graphics_text_BitmapText._word.length != 0) {
								if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
									cursorX = wordLength;
								} else {
									cursorX += wordLength;
								}
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								var _g10 = 0;
								var _g15 = haxepunk_graphics_text_BitmapText._word;
								while(_g10 < _g15.length) {
									var opCode4 = _g15[_g10];
									++_g10;
									if(opCode4 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
										_gthis.opCodes.push(opCode4);
									} else if(opCode4[1] == 5) {
										var _g16 = _gthis.opCodes[_gthis.opCodes.length - 1];
										if(_g16[1] == 5) {
											_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g16[2],opCode4[2]));
										} else {
											_gthis.opCodes.push(opCode4);
										}
									} else {
										_gthis.opCodes.push(opCode4);
									}
								}
								thisLineHeight = Math.max(wordHeight,thisLineHeight);
								haxepunk_graphics_text_BitmapText._word.length = 0;
								wordLength = 0;
								wordHeight = 0;
								trailingWhitespace = wordTrailingWhitespace;
								wordTrailingWhitespace = 0;
							}
							if(cursorX > 0) {
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
							}
							if(alignType != 0 && !_gthis.autoWidth) {
								textWidth = _gthis.width | 0;
							}
							currentAlign = alignType;
							break;
						case 10:
							if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
								haxepunk_graphics_text_BitmapText._colorStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
							break;
						case 11:
							if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
								haxepunk_graphics_text_BitmapText._alphaStack.pop();
							}
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
							break;
						case 12:
							if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
								haxepunk_graphics_text_BitmapText._scaleStack.pop();
							}
							currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
							break;
						case 13:
							if(haxepunk_graphics_text_BitmapText._fontStack.length > 1) {
								haxepunk_graphics_text_BitmapText._fontStack.pop();
							}
							currentFont = haxepunk_graphics_text_BitmapText._fontStack[haxepunk_graphics_text_BitmapText._fontStack.length - 1];
							lineHeight = currentFont.getLineHeight(sy * fsy) / fsy;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetFont(currentFont));
							break;
						case 14:
							if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
								haxepunk_graphics_text_BitmapText._sizeStack.pop();
							}
							currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
							break;
						default:
							haxepunk_graphics_text_BitmapText._word.push(tag1);
						}
					}
				} else {
					var tmp1;
					if(tag != null && haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null) {
						var _this2 = haxepunk_graphics_text_BitmapText.formatTags;
						if(__map_reserved[tag] != null) {
							tmp1 = _this2.existsReserved(tag);
						} else {
							tmp1 = _this2.h.hasOwnProperty(tag);
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						if(currentWord != "") {
							haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
							currentWord = "";
							wordTrailingWhitespace = currentWordTrailingWhitespace;
							currentWordTrailingWhitespace = 0;
						}
						var _g17 = 0;
						var _this3 = haxepunk_graphics_text_BitmapText.formatTags;
						var _g18 = __map_reserved[tag] != null ? _this3.getReserved(tag) : _this3.h[tag];
						while(_g17 < _g18.length) {
							var tag2 = _g18[_g17];
							++_g17;
							switch(tag2[1]) {
							case 0:
								haxepunk_graphics_text_BitmapText._colorStack.push(tag2[2]);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 1:
								haxepunk_graphics_text_BitmapText._alphaStack.push(tag2[2]);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 2:
								var scale1 = tag2[2];
								currentScale = scale1;
								haxepunk_graphics_text_BitmapText._scaleStack.push(scale1);
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 3:
								var font1 = tag2[2];
								haxepunk_graphics_text_BitmapText._fontStack.push(font1);
								currentFont = font1;
								lineHeight = font1.getLineHeight(sy * fsy) / fsy;
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 4:
								var size1 = tag2[2];
								haxepunk_graphics_text_BitmapText._sizeStack.push(size1);
								currentSizeRatio = size1 / _gthis.size;
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								break;
							case 6:
								if(currentWord != "") {
									haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
									currentWord = "";
									wordTrailingWhitespace = currentWordTrailingWhitespace;
									currentWordTrailingWhitespace = 0;
								}
								if(haxepunk_graphics_text_BitmapText._word.length != 0) {
									if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
										_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
										trailingWhitespace = 0;
										cursorX = trailingWhitespace;
										cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
										thisLineHeight = lineHeight * currentScale * currentSizeRatio;
										_gthis.opCodes.push(null);
										newLineIndex = _gthis.opCodes.length - 1;
										++_gthis.charCount;
										cursorX = wordLength;
									} else {
										cursorX += wordLength;
									}
									if(cursorX > textWidth) {
										textWidth = cursorX | 0;
									}
									var _g19 = 0;
									var _g110 = haxepunk_graphics_text_BitmapText._word;
									while(_g19 < _g110.length) {
										var opCode5 = _g110[_g19];
										++_g19;
										if(opCode5 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
											_gthis.opCodes.push(opCode5);
										} else if(opCode5[1] == 5) {
											var _g20 = _gthis.opCodes[_gthis.opCodes.length - 1];
											if(_g20[1] == 5) {
												_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g20[2],opCode5[2]));
											} else {
												_gthis.opCodes.push(opCode5);
											}
										} else {
											_gthis.opCodes.push(opCode5);
										}
									}
									thisLineHeight = Math.max(wordHeight,thisLineHeight);
									haxepunk_graphics_text_BitmapText._word.length = 0;
									wordLength = 0;
									wordHeight = 0;
									trailingWhitespace = wordTrailingWhitespace;
									wordTrailingWhitespace = 0;
								}
								_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
								trailingWhitespace = 0;
								cursorX = trailingWhitespace;
								cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
								thisLineHeight = lineHeight * currentScale * currentSizeRatio;
								_gthis.opCodes.push(null);
								newLineIndex = _gthis.opCodes.length - 1;
								++_gthis.charCount;
								break;
							case 7:
								var image1 = tag2[2];
								var imageWidth1 = (image1.get_width() * image1.scale * image1.scaleX * _gthis.scale * _gthis.scaleX + _gthis.charSpacing) * currentScale;
								haxepunk_graphics_text_BitmapText._word.push(tag2);
								currentWordTrailingWhitespace = 0;
								wordLength += imageWidth1 + tag2[3] * 2;
								wordHeight = Math.max(wordHeight,image1.get_height() * currentScale * image1.scale * image1.scaleY * _gthis.scale * _gthis.scaleY);
								if(cursorX > textWidth) {
									textWidth = cursorX | 0;
								}
								++_gthis.charCount;
								break;
							case 8:
								var alignType1 = tag2[2];
								if(currentWord != "") {
									haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
									currentWord = "";
									wordTrailingWhitespace = currentWordTrailingWhitespace;
									currentWordTrailingWhitespace = 0;
								}
								if(haxepunk_graphics_text_BitmapText._word.length != 0) {
									if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
										_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
										trailingWhitespace = 0;
										cursorX = trailingWhitespace;
										cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
										thisLineHeight = lineHeight * currentScale * currentSizeRatio;
										_gthis.opCodes.push(null);
										newLineIndex = _gthis.opCodes.length - 1;
										++_gthis.charCount;
										cursorX = wordLength;
									} else {
										cursorX += wordLength;
									}
									if(cursorX > textWidth) {
										textWidth = cursorX | 0;
									}
									var _g21 = 0;
									var _g111 = haxepunk_graphics_text_BitmapText._word;
									while(_g21 < _g111.length) {
										var opCode6 = _g111[_g21];
										++_g21;
										if(opCode6 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
											_gthis.opCodes.push(opCode6);
										} else if(opCode6[1] == 5) {
											var _g22 = _gthis.opCodes[_gthis.opCodes.length - 1];
											if(_g22[1] == 5) {
												_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g22[2],opCode6[2]));
											} else {
												_gthis.opCodes.push(opCode6);
											}
										} else {
											_gthis.opCodes.push(opCode6);
										}
									}
									thisLineHeight = Math.max(wordHeight,thisLineHeight);
									haxepunk_graphics_text_BitmapText._word.length = 0;
									wordLength = 0;
									wordHeight = 0;
									trailingWhitespace = wordTrailingWhitespace;
									wordTrailingWhitespace = 0;
								}
								if(cursorX > 0) {
									_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
									trailingWhitespace = 0;
									cursorX = trailingWhitespace;
									cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
									thisLineHeight = lineHeight * currentScale * currentSizeRatio;
									_gthis.opCodes.push(null);
									newLineIndex = _gthis.opCodes.length - 1;
									++_gthis.charCount;
								}
								if(alignType1 != 0 && !_gthis.autoWidth) {
									textWidth = _gthis.width | 0;
								}
								currentAlign = alignType1;
								break;
							case 10:
								if(haxepunk_graphics_text_BitmapText._colorStack.length > 1) {
									haxepunk_graphics_text_BitmapText._colorStack.pop();
								}
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetColor(haxepunk_graphics_text_BitmapText._colorStack[haxepunk_graphics_text_BitmapText._colorStack.length - 1]));
								break;
							case 11:
								if(haxepunk_graphics_text_BitmapText._alphaStack.length > 1) {
									haxepunk_graphics_text_BitmapText._alphaStack.pop();
								}
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetAlpha(haxepunk_graphics_text_BitmapText._alphaStack[haxepunk_graphics_text_BitmapText._alphaStack.length - 1]));
								break;
							case 12:
								if(haxepunk_graphics_text_BitmapText._scaleStack.length > 1) {
									haxepunk_graphics_text_BitmapText._scaleStack.pop();
								}
								currentScale = haxepunk_graphics_text_BitmapText._scaleStack[haxepunk_graphics_text_BitmapText._scaleStack.length - 1];
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetScale(currentScale));
								break;
							case 13:
								if(haxepunk_graphics_text_BitmapText._fontStack.length > 1) {
									haxepunk_graphics_text_BitmapText._fontStack.pop();
								}
								currentFont = haxepunk_graphics_text_BitmapText._fontStack[haxepunk_graphics_text_BitmapText._fontStack.length - 1];
								lineHeight = currentFont.getLineHeight(sy * fsy) / fsy;
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetFont(currentFont));
								break;
							case 14:
								if(haxepunk_graphics_text_BitmapText._sizeStack.length > 1) {
									haxepunk_graphics_text_BitmapText._sizeStack.pop();
								}
								currentSizeRatio = haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1] / _gthis.size;
								haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.SetSize(haxepunk_graphics_text_BitmapText._sizeStack[haxepunk_graphics_text_BitmapText._sizeStack.length - 1]));
								break;
							default:
								haxepunk_graphics_text_BitmapText._word.push(tag2);
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Unrecognized " + (haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matched(4) == null ? "format" : "dynamic") + " tag: <" + tag + ">");
					}
				}
				remaining = haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE.matchedRight();
			} else {
				break;
			}
		}
		if(currentWord != "") {
			haxepunk_graphics_text_BitmapText._word.push(haxepunk_graphics_text_TextOpcode.TextBlock(currentWord));
			currentWord = "";
			wordTrailingWhitespace = currentWordTrailingWhitespace;
			currentWordTrailingWhitespace = 0;
		}
		if(haxepunk_graphics_text_BitmapText._word.length != 0) {
			if(_gthis.wrap && cursorX > 0 && cursorX - wordTrailingWhitespace + wordLength > _gthis.width) {
				_gthis.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX - trailingWhitespace,thisLineHeight,currentAlign);
				trailingWhitespace = 0;
				cursorX = trailingWhitespace;
				cursorY += thisLineHeight + (cursorY == 0 ? 0 : lineSpacing);
				thisLineHeight = lineHeight * currentScale * currentSizeRatio;
				_gthis.opCodes.push(null);
				newLineIndex = _gthis.opCodes.length - 1;
				++_gthis.charCount;
				cursorX = wordLength;
			} else {
				cursorX += wordLength;
			}
			if(cursorX > textWidth) {
				textWidth = cursorX | 0;
			}
			var _g23 = 0;
			var _g112 = haxepunk_graphics_text_BitmapText._word;
			while(_g23 < _g112.length) {
				var opCode7 = _g112[_g23];
				++_g23;
				if(opCode7 == null || _gthis.opCodes[_gthis.opCodes.length - 1] == null) {
					_gthis.opCodes.push(opCode7);
				} else if(opCode7[1] == 5) {
					var _g24 = _gthis.opCodes[_gthis.opCodes.length - 1];
					if(_g24[1] == 5) {
						_gthis.opCodes[_gthis.opCodes.length - 1] = haxepunk_graphics_text_TextOpcode.TextBlock(haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat(_g24[2],opCode7[2]));
					} else {
						_gthis.opCodes.push(opCode7);
					}
				} else {
					_gthis.opCodes.push(opCode7);
				}
			}
			thisLineHeight = Math.max(wordHeight,thisLineHeight);
			haxepunk_graphics_text_BitmapText._word.length = 0;
			wordLength = 0;
			wordHeight = 0;
			trailingWhitespace = wordTrailingWhitespace;
			wordTrailingWhitespace = 0;
		}
		if(this.opCodes[newLineIndex] == null) {
			this.opCodes[newLineIndex] = haxepunk_graphics_text_TextOpcode.NewLine(cursorX,thisLineHeight,currentAlign);
		}
		this.textWidth = textWidth;
		if(this.autoWidth) {
			if(textWidth != this.width) {
				this._dirty = true;
			}
			this.width = textWidth;
		}
		this.textHeight = cursorY + (cursorX > 0 ? thisLineHeight : 0) | 0;
		this._dirty = false;
	}
	,render: function(point,camera) {
		var _gthis = this;
		if(this._dirty) {
			this.parseText();
		}
		haxepunk_graphics_text_BitmapText._customStack.length = 0;
		var pixelPerfect = this.pixelSnapping || camera.pixelSnapping;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = this.x;
		var x1 = this.originX * this.scaleX * this.scale;
		var x2 = camera.x * this.scrollX;
		this._point.x = point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2);
		var y = this.y;
		var y1 = this.originY * this.scaleY * this.scale;
		var y2 = camera.y * this.scrollY;
		this._point.y = point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2);
		var sx = this.scale * this.scaleX * this.size;
		var sy = this.scale * this.scaleY * this.size;
		var lineHeight = this._font.getLineHeight(sy * fsy) / fsy;
		var lineSpacing = this.lineSpacing * this.scale * this.scaleY;
		var thisLineHeight = 0;
		var lineOffsetX = 0;
		var currentColor = this.color;
		var currentAlpha = this.alpha;
		var currentScale = 1;
		var currentFont = this._font;
		var currentSizeRatio = 1;
		var cursorX = 0;
		var cursorY = 0;
		var charCount = 0;
		var _g = 0;
		var _g1 = this.opCodes;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
				break;
			}
			switch(op[1]) {
			case 0:
				currentColor = op[2];
				break;
			case 1:
				currentAlpha = op[2];
				break;
			case 2:
				currentScale = op[2];
				break;
			case 3:
				var font = op[2];
				currentFont = font;
				lineHeight = font.getLineHeight(sy * fsy) / fsy;
				break;
			case 4:
				currentSizeRatio = op[2] / this.size;
				break;
			case 5:
				var text = op[2];
				var _g3 = 0;
				var _g2 = text.length;
				while(_g3 < _g2) {
					var i = _g3++;
					if(this.displayCharCount > -1 && charCount >= this.displayCharCount) {
						break;
					}
					++charCount;
					var unicode = HxOverrides.cca(text,i);
					var u = new haxe_Utf8(4);
					u.__b += String.fromCharCode(unicode);
					var $char = u.__b;
					var maxFullScale = sx * fsx;
					var gd = currentFont.getChar($char,maxFullScale * currentScale * currentSizeRatio);
					if($char == " ") {
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					} else {
						haxepunk_graphics_text_BitmapText._renderData["char"] = $char;
						haxepunk_graphics_text_BitmapText._renderData.img = null;
						haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
						haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
						haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
						haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
						haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
						var data = haxepunk_graphics_text_BitmapText._renderData;
						var _g4 = 0;
						var _g11 = haxepunk_graphics_text_BitmapText._customStack;
						while(_g4 < _g11.length) {
							var func = _g11[_g4];
							++_g4;
							func(_gthis,data);
						}
						var x3 = haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + gd.xOffset * gd.scale / fsx;
						var y3 = haxepunk_graphics_text_BitmapText._renderData.y + gd.yOffset * gd.scale * sy / maxFullScale + thisLineHeight - lineHeight * currentScale * currentSizeRatio;
						var _this = gd.region;
						var x4 = (this._point.x + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3)) * fsx;
						var y4 = (this._point.y + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3)) * fsy;
						var scaleX = gd.scale;
						var scaleY = gd.scale * sy * fsy / maxFullScale;
						var angle = 0;
						var color = haxepunk_graphics_text_BitmapText._renderData.color;
						var alpha = haxepunk_graphics_text_BitmapText._renderData.alpha;
						if(_this.rotated) {
							angle += 90;
						}
						var rect = _this._rect;
						var a;
						var b;
						var c;
						var d;
						if(angle == 0) {
							a = scaleX;
							b = 0;
							c = 0;
							d = scaleY;
						} else {
							var cos = Math.cos(-angle * (Math.PI / -180));
							var sin = Math.sin(-angle * (Math.PI / -180));
							a = cos * scaleX;
							b = -sin * scaleY;
							c = sin * scaleX;
							d = cos * scaleY;
						}
						var texture = _this._parent.texture;
						var rx = rect.x;
						var ry = rect.y;
						var rw = rect.width;
						var rh = rect.height;
						if(alpha > 0) {
							var uvx1;
							var uvy1;
							var uvx2;
							var uvy2;
							if(texture == null) {
								uvy1 = 0;
								uvx1 = uvy1;
								uvx2 = rw;
								uvy2 = rh;
							} else {
								uvx1 = rx / (texture == null ? 0 : texture.width);
								uvy1 = ry / (texture == null ? 0 : texture.height);
								uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
								uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
							}
							var xa = rw * a + x4;
							var yb = rw * b + y4;
							var xc = rh * c + x4;
							var yd = rh * d + y4;
							var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,this.shader,this.smooth,this.blend,this.clipRect,x4,y4,xa,yb,xc,yd,this.flexibleLayer);
							if(alpha > 0) {
								var onScreen;
								if(command.shader.attributeNames.length <= 0) {
									var onScreen1;
									var onScreen2;
									var _this1 = command.visibleArea;
									if((x4 > xa ? xa > xc ? xc : xa : x4 > xc ? xc : x4) <= _this1.x + _this1.width) {
										onScreen2 = (x4 < xa ? xa < xc ? xc : xa : x4 < xc ? xc : x4) >= command.visibleArea.x;
									} else {
										onScreen2 = false;
									}
									if(onScreen2) {
										var _this2 = command.visibleArea;
										onScreen1 = (y4 > yb ? yb > yd ? yd : yb : y4 > yd ? yd : y4) <= _this2.y + _this2.height;
									} else {
										onScreen1 = false;
									}
									if(onScreen1) {
										onScreen = (y4 < yb ? yb < yd ? yd : yb : y4 < yd ? yd : y4) >= command.visibleArea.y;
									} else {
										onScreen = false;
									}
								} else {
									onScreen = true;
								}
								if(onScreen) {
									var data1;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data1 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data1._next = null;
									} else {
										data1 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data2 = data1;
									data2.tx1 = x4;
									data2.ty1 = y4;
									data2.uvx1 = uvx1;
									data2.uvy1 = uvy1;
									data2.tx2 = xa;
									data2.ty2 = yb;
									data2.uvx2 = uvx2;
									data2.uvy2 = uvy1;
									data2.tx3 = xc;
									data2.ty3 = yd;
									data2.uvx3 = uvx1;
									data2.uvy3 = uvy2;
									data2.color = color;
									data2.alpha = alpha;
									if(command.data == null) {
										command.data = data2;
									} else {
										command._lastData._next = data2;
									}
									command._lastData = data2;
									++command.triangleCount;
									var a1 = data2.tx1;
									var b1 = data2.tx2;
									var c1 = data2.tx3;
									var x11 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
									var a2 = data2.tx1;
									var b2 = data2.tx2;
									var c2 = data2.tx3;
									var x21 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
									var a3 = data2.ty1;
									var b3 = data2.ty2;
									var c3 = data2.ty3;
									var y11 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
									var a4 = data2.ty1;
									var b4 = data2.ty2;
									var c4 = data2.ty3;
									var y21 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
									if(command.bounds.width == 0) {
										command.bounds.x = x11;
										command.bounds.width = x21 - x11;
									} else {
										if(x11 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x11;
											command.bounds.x = x11;
										}
										var _this3 = command.bounds;
										if(x21 > _this3.x + _this3.width) {
											command.bounds.width = x21 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y11;
										command.bounds.height = y21 - y11;
									} else {
										if(y11 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y11;
											command.bounds.y = y11;
										}
										var _this4 = command.bounds;
										if(y21 > _this4.y + _this4.height) {
											command.bounds.height = y21 - command.bounds.y;
										}
									}
								}
							}
							var tx3 = xa + rh * c;
							var ty3 = yb + rh * d;
							if(alpha > 0) {
								var onScreen3;
								if(command.shader.attributeNames.length <= 0) {
									var onScreen4;
									var onScreen5;
									var _this5 = command.visibleArea;
									if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this5.x + _this5.width) {
										onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
									} else {
										onScreen5 = false;
									}
									if(onScreen5) {
										var _this6 = command.visibleArea;
										onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this6.y + _this6.height;
									} else {
										onScreen4 = false;
									}
									if(onScreen4) {
										onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
									} else {
										onScreen3 = false;
									}
								} else {
									onScreen3 = true;
								}
								if(onScreen3) {
									var data3;
									if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
										data3 = haxepunk_graphics_hardware_DrawCommand._dataPool;
										haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
										data3._next = null;
									} else {
										data3 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
									}
									var data4 = data3;
									data4.tx1 = xc;
									data4.ty1 = yd;
									data4.uvx1 = uvx1;
									data4.uvy1 = uvy2;
									data4.tx2 = xa;
									data4.ty2 = yb;
									data4.uvx2 = uvx2;
									data4.uvy2 = uvy1;
									data4.tx3 = tx3;
									data4.ty3 = ty3;
									data4.uvx3 = uvx2;
									data4.uvy3 = uvy2;
									data4.color = color;
									data4.alpha = alpha;
									if(command.data == null) {
										command.data = data4;
									} else {
										command._lastData._next = data4;
									}
									command._lastData = data4;
									++command.triangleCount;
									var a5 = data4.tx1;
									var b5 = data4.tx2;
									var c5 = data4.tx3;
									var x12 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
									var a6 = data4.tx1;
									var b6 = data4.tx2;
									var c6 = data4.tx3;
									var x22 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
									var a7 = data4.ty1;
									var b7 = data4.ty2;
									var c7 = data4.ty3;
									var y12 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
									var a8 = data4.ty1;
									var b8 = data4.ty2;
									var c8 = data4.ty3;
									var y22 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
									if(command.bounds.width == 0) {
										command.bounds.x = x12;
										command.bounds.width = x22 - x12;
									} else {
										if(x12 < command.bounds.x) {
											command.bounds.width += command.bounds.x - x12;
											command.bounds.x = x12;
										}
										var _this7 = command.bounds;
										if(x22 > _this7.x + _this7.width) {
											command.bounds.width = x22 - command.bounds.x;
										}
									}
									if(command.bounds.height == 0) {
										command.bounds.y = y12;
										command.bounds.height = y22 - y12;
									} else {
										if(y12 < command.bounds.y) {
											command.bounds.height += command.bounds.y - y12;
											command.bounds.y = y12;
										}
										var _this8 = command.bounds;
										if(y22 > _this8.y + _this8.height) {
											command.bounds.height = y22 - command.bounds.y;
										}
									}
								}
							}
						}
						cursorX += gd.xAdvance * gd.scale / fsx + this.charSpacing * currentScale * currentSizeRatio;
					}
				}
				break;
			case 6:
				var lineHeight1 = op[3];
				cursorX = 0;
				cursorY += thisLineHeight + (cursorY > 0 && thisLineHeight > 0 ? lineSpacing : 0);
				var lineOffsetX1 = this.width - op[2];
				var lineOffsetX2;
				switch(op[4]) {
				case 1:
					lineOffsetX2 = 0.5;
					break;
				case 2:
					lineOffsetX2 = 1;
					break;
				default:
					lineOffsetX2 = 0;
				}
				lineOffsetX = lineOffsetX1 * lineOffsetX2;
				thisLineHeight = lineHeight1;
				if(cursorY != 0) {
					++charCount;
				}
				break;
			case 7:
				var padding = op[3];
				var image = op[2];
				var originalX = image.x;
				var originalY = image.y;
				var originalScaleX = image.scaleX;
				var originalScaleY = image.scaleY;
				image.originX = image.originY = 0;
				haxepunk_graphics_text_BitmapText._renderData["char"] = null;
				haxepunk_graphics_text_BitmapText._renderData.img = image;
				haxepunk_graphics_text_BitmapText._renderData.x = cursorX;
				haxepunk_graphics_text_BitmapText._renderData.y = cursorY;
				haxepunk_graphics_text_BitmapText._renderData.color = currentColor;
				haxepunk_graphics_text_BitmapText._renderData.alpha = currentAlpha;
				haxepunk_graphics_text_BitmapText._renderData.scale = currentScale;
				var data5 = haxepunk_graphics_text_BitmapText._renderData;
				var _g5 = 0;
				var _g12 = haxepunk_graphics_text_BitmapText._customStack;
				while(_g5 < _g12.length) {
					var func1 = _g12[_g5];
					++_g5;
					func1(_gthis,data5);
				}
				image.x = this._point.x + haxepunk_graphics_text_BitmapText._renderData.x + lineOffsetX + originalX + padding;
				image.y = this._point.y + haxepunk_graphics_text_BitmapText._renderData.y + thisLineHeight + originalY - image.get_height() * image.scale * image.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale * this.scale * this.scaleY;
				image.set_color(haxepunk_graphics_text_BitmapText._renderData.color);
				image.set_alpha(haxepunk_graphics_text_BitmapText._renderData.alpha);
				image.scaleX *= this.scale * this.scaleX * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.scaleY *= this.scale * this.scaleY * haxepunk_graphics_text_BitmapText._renderData.scale;
				image.pixelSnapping = pixelPerfect;
				var _this9 = haxepunk_HXP.point;
				_this9.x = 0;
				_this9.y = 0;
				image.render(haxepunk_HXP.point,haxepunk_HXP.zeroCamera);
				image.x = originalX;
				image.y = originalY;
				image.scaleX = originalScaleX;
				image.scaleY = originalScaleY;
				image.flexibleLayer = this.flexibleLayer;
				cursorX += (image.get_width() * image.scale * image.scaleX * this.scale * this.scaleX + this.charSpacing + padding * 2) * haxepunk_graphics_text_BitmapText._renderData.scale;
				++charCount;
				break;
			case 8:
				break;
			case 9:
				haxepunk_graphics_text_BitmapText._customStack.push(op[2]);
				break;
			case 10:case 11:case 12:case 13:case 14:
				break;
			case 15:
				haxepunk_graphics_text_BitmapText._customStack.pop();
				break;
			}
		}
	}
	,autoWidth: null
	,autoHeight: null
	,_dirty: null
	,_font: null
	,__class__: haxepunk_graphics_text_BitmapText
	,__properties__: $extend(haxepunk_Graphic.prototype.__properties__,{set_text:"set_text"})
});
var catalyst_graphics_Label = function(text,font,size,color,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(color == null) {
		color = 16777215;
	}
	if(size == null) {
		size = 1;
	}
	if(font == null) {
		font = false;
	}
	var tmp = font == false ? "coiny" : "monofonto";
	var tmp1;
	switch(font) {
	case false:
		switch(size) {
		case 0:
			tmp1 = 36;
			break;
		case 1:
			tmp1 = 48;
			break;
		case 2:
			tmp1 = 54;
			break;
		case 3:
			tmp1 = 60;
			break;
		case 4:
			tmp1 = 84;
			break;
		default:
			tmp1 = 96;
		}
		break;
	case true:
		if(size == 0) {
			tmp1 = 48;
		} else {
			tmp1 = 60;
		}
		break;
	}
	haxepunk_graphics_text_BitmapText.call(this,text,0,0,width,height,{ font : tmp, size : tmp1, wordWrap : width > 0});
	this.set_color(color);
	var v = font == true ? -4 : -2;
	if(v != this.charSpacing) {
		this._dirty = true;
	}
	this.charSpacing = v;
	this.smooth = true;
	this.pixelSnapping = false;
};
$hxClasses["catalyst.graphics.Label"] = catalyst_graphics_Label;
catalyst_graphics_Label.__name__ = ["catalyst","graphics","Label"];
catalyst_graphics_Label.__super__ = haxepunk_graphics_text_BitmapText;
catalyst_graphics_Label.prototype = $extend(haxepunk_graphics_text_BitmapText.prototype,{
	__class__: catalyst_graphics_Label
});
var catalyst_graphics_CatStatMeter = function(cat) {
	this.cat = cat;
	catalyst_graphics_Label.call(this,this.getStatsLabelText(),true);
	this.active = true;
	if(0.625 != this.scale) {
		this._dirty = true;
	}
	this.scale = 0.625;
};
$hxClasses["catalyst.graphics.CatStatMeter"] = catalyst_graphics_CatStatMeter;
catalyst_graphics_CatStatMeter.__name__ = ["catalyst","graphics","CatStatMeter"];
catalyst_graphics_CatStatMeter.__super__ = catalyst_graphics_Label;
catalyst_graphics_CatStatMeter.prototype = $extend(catalyst_graphics_Label.prototype,{
	cat: null
	,update: function() {
		this.set_text(this.getStatsLabelText());
		if(this._dirty) {
			this.parseText();
		}
		this.x = -this.textWidth / 2;
	}
	,getStatsLabelText: function() {
		var txt = "";
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			txt += "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/>" + catalyst__$Stats_Stats_$Impl_$.get(this.cat.stats,stat);
		}
		return txt;
	}
	,__class__: catalyst_graphics_CatStatMeter
});
var catalyst_graphics_CircularMeter = function(scale) {
	if(scale == null) {
		scale = 1;
	}
	this.radius = 0;
	this.fill = 0;
	haxepunk_Graphic.call(this);
	this.radius = 84 * scale | 0;
	this.width = this.height = this.radius * 2;
	this.scale = scale;
	if(catalyst_graphics_CircularMeter.context == null) {
		catalyst_graphics_CircularMeter.context = new haxepunk_utils_DrawContext();
	}
	this.active = true;
};
$hxClasses["catalyst.graphics.CircularMeter"] = catalyst_graphics_CircularMeter;
catalyst_graphics_CircularMeter.__name__ = ["catalyst","graphics","CircularMeter"];
catalyst_graphics_CircularMeter.__super__ = haxepunk_Graphic;
catalyst_graphics_CircularMeter.prototype = $extend(haxepunk_Graphic.prototype,{
	fill: null
	,radius: null
	,width: null
	,height: null
	,scale: null
	,render: function(point,camera) {
		var sx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var sy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = point.x + this.x - camera.x;
		var y = point.y + this.y - camera.y;
		catalyst_graphics_CircularMeter.context.color = 0;
		catalyst_graphics_CircularMeter.context.alpha = 1;
		catalyst_graphics_CircularMeter.context.lineThickness = 72 * sy;
		catalyst_graphics_CircularMeter.context.arc(x * sx,y * sy,this.radius * sy,1.65625 * Math.PI,-1.3125 * Math.PI,24);
		if(this.fill > 0) {
			catalyst_graphics_CircularMeter.context.color = this.color;
			catalyst_graphics_CircularMeter.context.alpha = this.alpha;
			catalyst_graphics_CircularMeter.context.lineThickness = 60 * sy;
			catalyst_graphics_CircularMeter.context.arc(x * sx,y * sy,this.radius * sy,1.625 * Math.PI,-1.25 * Math.PI * this.fill,Math.max(4,24 * this.fill) | 0);
		}
	}
	,__class__: catalyst_graphics_CircularMeter
});
var catalyst_graphics_FastColoredRect = function(width,height,color) {
	haxepunk_graphics_Image.call(this,haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/empty.png",false));
	this.scaleX = width / this.get_width();
	this.scaleY = height / this.get_height();
	this.smooth = true;
	this.pixelSnapping = false;
	this.set_color(color);
};
$hxClasses["catalyst.graphics.FastColoredRect"] = catalyst_graphics_FastColoredRect;
catalyst_graphics_FastColoredRect.__name__ = ["catalyst","graphics","FastColoredRect"];
catalyst_graphics_FastColoredRect.__super__ = haxepunk_graphics_Image;
catalyst_graphics_FastColoredRect.prototype = $extend(haxepunk_graphics_Image.prototype,{
	__class__: catalyst_graphics_FastColoredRect
});
var haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic = function(graphic) {
	this._camera = new haxepunk_Camera();
	this._temp = [];
	this._graphics = [];
	this.count = 0;
	this._graphics = [];
	this._temp = [];
	this._camera = new haxepunk_Camera();
	haxepunk_Graphic.call(this);
	if(graphic != null) {
		var _g = 0;
		while(_g < graphic.length) {
			var g = graphic[_g];
			++_g;
			this.add(g);
		}
	}
};
$hxClasses["haxepunk.graphics.BaseGraphicList_haxepunk_Graphic"] = haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic;
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.__name__ = ["haxepunk","graphics","BaseGraphicList_haxepunk_Graphic"];
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.__super__ = haxepunk_Graphic;
haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.prototype = $extend(haxepunk_Graphic.prototype,{
	set_alpha: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_alpha(v);
		}
		return haxepunk_Graphic.prototype.set_alpha.call(this,v);
	}
	,set_color: function(v) {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var graphic = _g1[_g];
			++_g;
			graphic.set_color(v);
		}
		return haxepunk_Graphic.prototype.set_color.call(this,v);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) {
				g.update();
			}
		}
	}
	,render: function(point,camera) {
		var cx = camera.x;
		var cy = camera.y;
		camera.x = cx * this.scrollX - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy * this.scrollY - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g._visible) {
				if(g.relative) {
					var x = point.x;
					var x1 = this.x;
					var x2 = this.originX;
					this._point.x = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2);
					var y = point.y;
					var y1 = this.y;
					var y2 = this.originY;
					this._point.y = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2);
				} else {
					this._point.x = this._point.y = 0;
				}
				g.doRender(this._point,camera);
			}
		}
		camera.x = cx - haxepunk_HXP.width / (camera.scale * camera.scaleX) * 0;
		camera.y = cy - haxepunk_HXP.height / (camera.scale * camera.scaleY) * 0;
	}
	,add: function(graphic) {
		if(graphic == null) {
			return graphic;
		}
		this._graphics[this.count++] = graphic;
		if(!this.active) {
			this.active = graphic.active;
		}
		return graphic;
	}
	,remove: function(graphic) {
		if(this._graphics.indexOf(graphic) < 0) {
			return graphic;
		}
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g == graphic) {
				this.count--;
			} else {
				this._temp[this._temp.length] = g;
			}
		}
		var temp = this._graphics;
		this._graphics = this._temp;
		this._temp = temp;
		this.updateCheck();
		return graphic;
	}
	,count: null
	,updateCheck: function() {
		this.active = false;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) {
				this.active = true;
				return;
			}
		}
	}
	,_graphics: null
	,_temp: null
	,_camera: null
	,__class__: haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic
});
var catalyst_graphics_MiniXPMeter = function(cat) {
	haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.call(this);
	this.cat = cat;
	this.active = true;
	var borderBar = new catalyst_graphics_FastColoredRect(200,24,0);
	borderBar.x = -100.;
	borderBar.y = 20.;
	this.add(borderBar);
	var outerBar = new catalyst_graphics_FastColoredRect(192,16,3620424);
	outerBar.x = -96.;
	outerBar.y = 24.;
	this.add(outerBar);
	this.bar = new catalyst_graphics_FastColoredRect(0,16,6262227);
	this.bar.x = -96.;
	this.bar.y = 24.;
	this.add(this.bar);
	this.statLabel = new catalyst_graphics_Label(" ",true,2);
	this.statLabel.y = 58;
	var _this = this.statLabel;
	if(0.5 != _this.scale) {
		_this._dirty = true;
	}
	_this.scale = 0.5;
	this.statLabel.flexibleLayer = true;
	this.add(this.statLabel);
	this.label = new catalyst_graphics_Label(" ",false);
	this.label.flexibleLayer = true;
	this.label.y = 2;
	this.add(this.label);
	this.addRightIcon();
	this.y = 16;
};
$hxClasses["catalyst.graphics.MiniXPMeter"] = catalyst_graphics_MiniXPMeter;
catalyst_graphics_MiniXPMeter.__name__ = ["catalyst","graphics","MiniXPMeter"];
catalyst_graphics_MiniXPMeter.__super__ = haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic;
catalyst_graphics_MiniXPMeter.prototype = $extend(haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.prototype,{
	cat: null
	,label: null
	,statLabel: null
	,bar: null
	,update: function() {
		if(this.label.text != Std.string(this.cat.level)) {
			this.label.set_text(Std.string(this.cat.level));
			var _this = this.label;
			var _this1 = this.label;
			if(_this1._dirty) {
				_this1.parseText();
			}
			_this.x = -96. - _this1.textWidth - 8;
		}
		this.statLabel.set_text(this.getStatsLabelText());
		var _this2 = this.statLabel;
		var _this3 = this.statLabel;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.x = -_this3.textWidth / 2;
		var _this4 = this.cat;
		var xp = _this4.xp;
		var lv = _this4.level - 1;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g = 0;
			while(_g < 500) {
				var i = _g++;
				if(i == 0) {
					catalyst_XP.xpTotals[i] = 60;
				} else {
					var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
					if(i > 50) {
						newTotal *= Math.pow(1.09,i - 50);
					}
					catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
				}
			}
		}
		var tmp = xp - (lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1]);
		var lv1 = this.cat.level;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g1 = 0;
			while(_g1 < 500) {
				var i1 = _g1++;
				if(i1 == 0) {
					catalyst_XP.xpTotals[i1] = 60;
				} else {
					var newTotal1 = 60 * Math.pow(1.08,Math.min(i1,50));
					if(i1 > 50) {
						newTotal1 *= Math.pow(1.09,i1 - 50);
					}
					catalyst_XP.xpTotals[i1] = Math.round((catalyst_XP.xpTotals[i1 - 1] + newTotal1) / 1) | 0;
				}
			}
		}
		var tmp1 = lv1 < 1 ? 0 : catalyst_XP.xpTotals[lv1 - 1];
		var lv2 = lv1 - 1;
		if(catalyst_XP.xpTotals == null) {
			catalyst_XP.xpTotals = new Array(500);
			var _g2 = 0;
			while(_g2 < 500) {
				var i2 = _g2++;
				if(i2 == 0) {
					catalyst_XP.xpTotals[i2] = 60;
				} else {
					var newTotal2 = 60 * Math.pow(1.08,Math.min(i2,50));
					if(i2 > 50) {
						newTotal2 *= Math.pow(1.09,i2 - 50);
					}
					catalyst_XP.xpTotals[i2] = Math.round((catalyst_XP.xpTotals[i2 - 1] + newTotal2) / 1) | 0;
				}
			}
		}
		var tmp2 = haxepunk_math_MathUtil.clamp(192 * (tmp / (tmp1 - (lv2 < 1 ? 0 : catalyst_XP.xpTotals[lv2 - 1]))),0,192);
		var tmp3 = this.bar.get_width();
		this.bar.scaleX = tmp2 / tmp3;
	}
	,getStatsLabelText: function() {
		var txt = "";
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			txt += "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/>" + catalyst__$Stats_Stats_$Impl_$.get(this.cat.stats,stat);
		}
		return txt;
	}
	,addRightIcon: function() {
		var sexIcon = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/" + (this.cat.sex ? "male" : "female") + "-icon.png",false));
		sexIcon.flexibleLayer = true;
		sexIcon.scale = 0.5;
		sexIcon.x = 96.;
		this.add(sexIcon);
	}
	,__class__: catalyst_graphics_MiniXPMeter
});
var catalyst_graphics_PotionImage = function(color) {
	this.height = 0;
	this.width = 0;
	var _gthis = this;
	haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.call(this);
	var image = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/potion-item-empty.png",false));
	image.set_color(16777215);
	image.smooth = true;
	image.originX = image.originY = image.get_width() / 2 | 0;
	_gthis.width = image.get_width();
	_gthis.height = image.get_height();
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	image.shader = catalyst_Client._noiseShader;
	_gthis.add(image);
	var image1 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/potion-item-full.png",false));
	image1.set_color(color);
	image1.smooth = true;
	image1.originX = image1.originY = image1.get_width() / 2 | 0;
	_gthis.width = image1.get_width();
	_gthis.height = image1.get_height();
	if(catalyst_Client._noiseShader == null) {
		catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
	}
	image1.shader = catalyst_Client._noiseShader;
	_gthis.add(image1);
};
$hxClasses["catalyst.graphics.PotionImage"] = catalyst_graphics_PotionImage;
catalyst_graphics_PotionImage.__name__ = ["catalyst","graphics","PotionImage"];
catalyst_graphics_PotionImage.__super__ = haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic;
catalyst_graphics_PotionImage.prototype = $extend(haxepunk_graphics_BaseGraphicList_$haxepunk_$Graphic.prototype,{
	width: null
	,height: null
	,__class__: catalyst_graphics_PotionImage
});
var catalyst_graphics_SaveIndicator = function() {
	this.t = 0;
	haxepunk_graphics_Image.call(this,haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/save-icon.png",false));
	this.smooth = true;
	this.pixelSnapping = false;
	this.active = true;
	this.originX = this.get_width() / 2;
	this.originY = this.get_height() / 2;
};
$hxClasses["catalyst.graphics.SaveIndicator"] = catalyst_graphics_SaveIndicator;
catalyst_graphics_SaveIndicator.__name__ = ["catalyst","graphics","SaveIndicator"];
catalyst_graphics_SaveIndicator.__super__ = haxepunk_graphics_Image;
catalyst_graphics_SaveIndicator.prototype = $extend(haxepunk_graphics_Image.prototype,{
	t: null
	,update: function() {
		haxepunk_graphics_Image.prototype.update.call(this);
		this.angle += 360 * haxepunk_HXP.elapsed / 5;
		this.angle %= 360;
		if((1 - catalyst_GameData.get_current().totalSaveTimer) * 60 < 0.75) {
			this.t += haxepunk_HXP.elapsed / 0.75;
		} else if(this.t > 0) {
			this.t -= haxepunk_HXP.elapsed / 0.75;
			if(this.t < 0) {
				this.t = 0;
			}
		}
		var t = this.t;
		this.set_alpha(t * t);
		this._visible = this.alpha > 0;
	}
	,__class__: catalyst_graphics_SaveIndicator
});
var catalyst_graphics_TrackEntity = function(source,track) {
	haxepunk_EntityList.call(this);
	var img = new haxepunk_graphics_Image(source);
	haxepunk_HXP.rect.setTo(0,0,img.get_width() / 2,img.get_height());
	this.img1 = new haxepunk_graphics_Image(source,haxepunk_HXP.rect);
	var tmp = img.get_width();
	this.img1.originX = tmp / 2;
	this.img1.originY = img.get_height();
	this.img1.smooth = true;
	this.img1.pixelSnapping = false;
	this.backE = new haxepunk_Entity(null,null,this.img1);
	this.add(this.backE);
	haxepunk_HXP.rect.setTo(img.get_width() / 2,0,img.get_width() / 2,img.get_height());
	this.img2 = new haxepunk_graphics_Image(source,haxepunk_HXP.rect);
	this.img2.originX = 0;
	this.img2.originY = img.get_height();
	this.img2.smooth = true;
	this.img2.pixelSnapping = false;
	this.frontE = new haxepunk_Entity(null,null,this.img2);
	this.add(this.frontE);
	this.set_width(img.get_width() + img.get_width());
	this.set_height(img.get_height());
};
$hxClasses["catalyst.graphics.TrackEntity"] = catalyst_graphics_TrackEntity;
catalyst_graphics_TrackEntity.__name__ = ["catalyst","graphics","TrackEntity"];
catalyst_graphics_TrackEntity.__super__ = haxepunk_EntityList;
catalyst_graphics_TrackEntity.prototype = $extend(haxepunk_EntityList.prototype,{
	img1: null
	,img2: null
	,backE: null
	,frontE: null
	,setCoords: function(mx,my) {
		this.set_x(((mx / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - my) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width);
		this.set_y(haxepunk_HXP.height / (1 + (haxepunk_HXP.height - my) / haxepunk_HXP.height / 1.5) + 16);
		var tmp = this.backE;
		var y = this.get_y() - 32;
		tmp.set_layer((haxepunk_HXP.height - y) / 8 | 0);
		var tmp1 = this.frontE;
		var y1 = this.get_y() + 32;
		tmp1.set_layer((haxepunk_HXP.height - y1) / 8 | 0);
		var sx = (((mx / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - (my + this.get_width() / 2)) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width - ((mx / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - (my - this.get_width() / 2)) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width) / this.get_width();
		if(Math.abs(sx) < 0.0625) {
			sx = 0.0625 * (sx < 0 ? -1 : 1);
		}
		this.img1.scaleX = this.img2.scaleX = sx;
	}
	,__class__: catalyst_graphics_TrackEntity
});
var catalyst_graphics_Track = function() {
	this.height = 0;
	this.width = 0;
	haxepunk_Graphic.call(this);
	this._region = haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/track-tile.png",false);
	this._data = this._region._parent;
	this.x = 0;
	this.width = haxepunk_HXP.width;
	this.height = haxepunk_HXP.height;
	this.smooth = true;
	this.pixelSnapping = true;
};
$hxClasses["catalyst.graphics.Track"] = catalyst_graphics_Track;
catalyst_graphics_Track.__name__ = ["catalyst","graphics","Track"];
catalyst_graphics_Track.__super__ = haxepunk_Graphic;
catalyst_graphics_Track.prototype = $extend(haxepunk_Graphic.prototype,{
	_region: null
	,_data: null
	,width: null
	,height: null
	,getChild: function(src) {
		return new catalyst_graphics_TrackEntity(src,this);
	}
	,render: function(point,camera) {
		var _gthis = this;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x = point.x;
		var x1 = camera.x;
		this._point.x = ((this.pixelSnapping || camera.pixelSnapping ? Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1)) * fsx;
		var y = point.y;
		var y1 = camera.y;
		this._point.y = ((this.pixelSnapping || camera.pixelSnapping ? Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1)) * fsy;
		var rw = this._region._rect.width | 0;
		var rh = this._region._rect.height | 0;
		var x0 = this.x % rw | 0;
		var _g1 = 0;
		var _g = Math.ceil(this.height / rh) | 0;
		while(_g1 < _g) {
			var yi = _g1++;
			var y2 = haxepunk_HXP.height / (1 + (haxepunk_HXP.height - yi * rh) / haxepunk_HXP.height / 1.5);
			if(this._point.y + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) * fsy > haxepunk_HXP.height * fsy) {
				break;
			}
			var xi = 0;
			while(true) {
				var x2 = (((x0 + xi * rw) / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - yi * rh) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width;
				if(!(this._point.x + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) * fsx > 0)) {
					break;
				}
				--xi;
			}
			while(true) {
				var x11 = x0 + xi * rw;
				var y11 = yi * rh;
				var x21 = x0 + (xi + 1) * rw + 2;
				var y21 = (yi + 1) * rh + 2;
				var offset = this.smooth ? 0.5 : 0;
				var x3 = ((x11 / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - y11) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width;
				var y3 = haxepunk_HXP.height / (1 + (haxepunk_HXP.height - y11) / haxepunk_HXP.height / 1.5);
				var x4 = ((x21 / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - y11) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width;
				var tx2 = this._point.x + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x4) * fsx + offset;
				var y4 = haxepunk_HXP.height / (1 + (haxepunk_HXP.height - y11) / haxepunk_HXP.height / 1.5);
				var ty2 = this._point.y + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y4) * fsy - offset;
				var x5 = ((x11 / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - y21) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width;
				var tx3 = this._point.x + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x5 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x5) * fsx - offset;
				var y5 = haxepunk_HXP.height / (1 + (haxepunk_HXP.height - y21) / haxepunk_HXP.height / 1.5);
				var ty3 = this._point.y + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y5 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y5) * fsy + offset;
				var x6 = ((x21 / haxepunk_HXP.width * 2 - 1) / (1 + (haxepunk_HXP.height - y21) / haxepunk_HXP.height / 1.5) + 1) / 2 * haxepunk_HXP.width;
				var tx4 = this._point.x + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x6) * fsx + offset;
				var y6 = haxepunk_HXP.height / (1 + (haxepunk_HXP.height - y21) / haxepunk_HXP.height / 1.5);
				var ty4 = this._point.y + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y6) * fsy + offset;
				var this1 = this._data.texture;
				var uvx1 = (this._region._rect.x + offset) / (this1 == null ? 0 : this1.width);
				var this2 = this._data.texture;
				var uvy1 = (this._region._rect.y + offset) / (this2 == null ? 0 : this2.height);
				var this3 = this._data.texture;
				var uvx2 = (this._region._rect.x + rw - offset) / (this3 == null ? 0 : this3.width);
				var this4 = this._data.texture;
				var uvy2 = (this._region._rect.y + rh - offset) / (this4 == null ? 0 : this4.height);
				this._data.prepareTriangle(this._point.x + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) * fsx - offset,this._point.y + (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) * fsy - offset,uvx1,uvy1,tx2,ty2,uvx2,uvy1,tx3,ty3,uvx1,uvy2,this.color,this.alpha,this.shader,this.smooth,this.blend,null,this.flexibleLayer);
				this._data.prepareTriangle(tx4,ty4,uvx2,uvy2,tx2,ty2,uvx2,uvy1,tx3,ty3,uvx1,uvy2,this.color,this.alpha,this.shader,this.smooth,this.blend,null,this.flexibleLayer);
				if(tx2 > haxepunk_HXP.width * fsx) {
					break;
				}
				++xi;
			}
		}
	}
	,__class__: catalyst_graphics_Track
});
var haxepunk_utils_DrawContext = function(lineThickness,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(lineThickness == null) {
		lineThickness = 1;
	}
	this.lineThickness = 1;
	this.alpha = 1;
	this.color = 16777215;
	this.smooth = true;
	this.blend = 1;
	this.lineThickness = lineThickness;
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["haxepunk.utils.DrawContext"] = haxepunk_utils_DrawContext;
haxepunk_utils_DrawContext.__name__ = ["haxepunk","utils","DrawContext"];
haxepunk_utils_DrawContext.prototype = {
	scene: null
	,blend: null
	,shader: null
	,smooth: null
	,color: null
	,alpha: null
	,lineThickness: null
	,polyline: function(points,miterJoint) {
		if(miterJoint == null) {
			miterJoint = false;
		}
		if(points.length < 4 || points.length % 2 == 1) {
			throw new js__$Boot_HaxeError("Invalid number of values. Expected an even number greater than 4.");
		}
		var halfThick = this.lineThickness / 2;
		var last = points.length / 2 | 0;
		var a_y;
		var a_x = 0;
		a_y = 0;
		var b_y;
		var b_x = 0;
		b_y = 0;
		var pos_y;
		var pos_x = points[0];
		pos_y = points[1];
		var prev_y;
		var prev_x;
		var x = pos_x - points[2];
		var y = pos_y - points[3];
		prev_x = x;
		prev_y = y;
		var next_y;
		var next_x;
		var x1 = x;
		var y1 = y;
		next_x = x1;
		next_y = y1;
		var inner_y;
		var inner_x = 0;
		inner_y = 0;
		var outer_y;
		var outer_x = 0;
		outer_y = 0;
		var nextPrev_y;
		var nextPrev_x = 0;
		nextPrev_y = 0;
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		this.command = (this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene).batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		a_x = pos_x;
		a_y = pos_y;
		b_x = pos_x;
		b_y = pos_y;
		next_x = -y1;
		next_y = x1;
		if(!(next_x == 0 && next_y == 0)) {
			var normal = halfThick / Math.sqrt(next_x * next_x + next_y * next_y);
			next_x *= normal;
			next_y *= normal;
		}
		a_x += next_x;
		a_y += next_y;
		b_x -= next_x;
		b_y -= next_y;
		if(!(x == 0 && y == 0)) {
			var normal1 = 1 / Math.sqrt(x * x + y * y);
			prev_x = x * normal1;
			prev_y = y * normal1;
		}
		var over180;
		var angle;
		var index;
		var _g1 = 1;
		var _g = last - 1;
		while(_g1 < _g) {
			index = _g1++ * 2;
			pos_x = points[index];
			pos_y = points[index + 1];
			next_x = pos_x - points[index + 2];
			next_y = pos_y - points[index + 3];
			if(!(next_x == 0 && next_y == 0)) {
				var normal2 = 1 / Math.sqrt(next_x * next_x + next_y * next_y);
				next_x *= normal2;
				next_y *= normal2;
			}
			nextPrev_x = next_x;
			nextPrev_y = next_y;
			over180 = prev_x * next_y - prev_y * next_x > 0;
			angle = Math.acos(prev_x * next_x + prev_y * next_y) / 2;
			inner_x = prev_x;
			inner_y = prev_y;
			inner_x += next_x;
			inner_y += next_y;
			var y2 = inner_x;
			inner_x = -inner_y;
			inner_y = y2;
			if(over180) {
				inner_x = -inner_x;
				inner_y = -inner_y;
			}
			if(!(inner_x == 0 && inner_y == 0)) {
				var normal3 = halfThick / Math.cos(angle) / Math.sqrt(inner_x * inner_x + inner_y * inner_y);
				inner_x *= normal3;
				inner_y *= normal3;
			}
			if(miterJoint) {
				outer_x = pos_x;
				outer_y = pos_y;
				outer_x -= inner_x;
				outer_y -= inner_y;
			}
			inner_x += pos_x;
			inner_y += pos_y;
			var y3 = prev_x;
			prev_x = -prev_y;
			prev_y = y3;
			if(!(prev_x == 0 && prev_y == 0)) {
				var normal4 = halfThick / Math.sqrt(prev_x * prev_x + prev_y * prev_y);
				prev_x *= normal4;
				prev_y *= normal4;
			}
			var y4 = next_x;
			next_x = -next_y;
			next_y = y4;
			if(!(next_x == 0 && next_y == 0)) {
				var normal5 = halfThick / Math.sqrt(next_x * next_x + next_y * next_y);
				next_x *= normal5;
				next_y *= normal5;
			}
			if(!over180) {
				prev_x = -prev_x;
				prev_y = -prev_y;
				next_x = -next_x;
				next_y = -next_y;
			}
			prev_x += pos_x;
			prev_y += pos_y;
			next_x += pos_x;
			next_y += pos_y;
			if(over180) {
				var _this = this.command;
				var tx1 = a_x;
				var ty1 = a_y;
				var tx2 = b_x;
				var ty2 = b_y;
				var tx3 = prev_x;
				var ty3 = prev_y;
				var alpha = this.alpha;
				if(alpha > 0) {
					var onScreen;
					if(_this.shader.attributeNames.length <= 0) {
						var onScreen1;
						var onScreen2;
						var _this1 = _this.visibleArea;
						if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this1.x + _this1.width) {
							onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= _this.visibleArea.x;
						} else {
							onScreen2 = false;
						}
						if(onScreen2) {
							var _this2 = _this.visibleArea;
							onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this2.y + _this2.height;
						} else {
							onScreen1 = false;
						}
						if(onScreen1) {
							onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= _this.visibleArea.y;
						} else {
							onScreen = false;
						}
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = ty1;
						data1.uvx1 = 0;
						data1.uvy1 = 0;
						data1.tx2 = tx2;
						data1.ty2 = ty2;
						data1.uvx2 = 0;
						data1.uvy2 = 0;
						data1.tx3 = tx3;
						data1.ty3 = ty3;
						data1.uvx3 = 0;
						data1.uvy3 = 0;
						data1.color = this.color;
						data1.alpha = alpha;
						if(_this.data == null) {
							_this.data = data1;
						} else {
							_this._lastData._next = data1;
						}
						_this._lastData = data1;
						++_this.triangleCount;
						var a = data1.tx1;
						var b = data1.tx2;
						var c = data1.tx3;
						var x11 = a > b ? b > c ? c : b : a > c ? c : a;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c1 = data1.tx3;
						var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
						var a2 = data1.ty1;
						var b2 = data1.ty2;
						var c2 = data1.ty3;
						var y11 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c3 = data1.ty3;
						var y21 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
						if(_this.bounds.width == 0) {
							_this.bounds.x = x11;
							_this.bounds.width = x2 - x11;
						} else {
							if(x11 < _this.bounds.x) {
								_this.bounds.width += _this.bounds.x - x11;
								_this.bounds.x = x11;
							}
							var _this3 = _this.bounds;
							if(x2 > _this3.x + _this3.width) {
								_this.bounds.width = x2 - _this.bounds.x;
							}
						}
						if(_this.bounds.height == 0) {
							_this.bounds.y = y11;
							_this.bounds.height = y21 - y11;
						} else {
							if(y11 < _this.bounds.y) {
								_this.bounds.height += _this.bounds.y - y11;
								_this.bounds.y = y11;
							}
							var _this4 = _this.bounds;
							if(y21 > _this4.y + _this4.height) {
								_this.bounds.height = y21 - _this.bounds.y;
							}
						}
					}
				}
			} else {
				var _this5 = this.command;
				var tx11 = a_x;
				var ty11 = a_y;
				var tx21 = b_x;
				var ty21 = b_y;
				var tx31 = inner_x;
				var ty31 = inner_y;
				var alpha1 = this.alpha;
				if(alpha1 > 0) {
					var onScreen3;
					if(_this5.shader.attributeNames.length <= 0) {
						var onScreen4;
						var onScreen5;
						var _this6 = _this5.visibleArea;
						if((tx11 > tx21 ? tx21 > tx31 ? tx31 : tx21 : tx11 > tx31 ? tx31 : tx11) <= _this6.x + _this6.width) {
							onScreen5 = (tx11 < tx21 ? tx21 < tx31 ? tx31 : tx21 : tx11 < tx31 ? tx31 : tx11) >= _this5.visibleArea.x;
						} else {
							onScreen5 = false;
						}
						if(onScreen5) {
							var _this7 = _this5.visibleArea;
							onScreen4 = (ty11 > ty21 ? ty21 > ty31 ? ty31 : ty21 : ty11 > ty31 ? ty31 : ty11) <= _this7.y + _this7.height;
						} else {
							onScreen4 = false;
						}
						if(onScreen4) {
							onScreen3 = (ty11 < ty21 ? ty21 < ty31 ? ty31 : ty21 : ty11 < ty31 ? ty31 : ty11) >= _this5.visibleArea.y;
						} else {
							onScreen3 = false;
						}
					} else {
						onScreen3 = true;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = tx11;
						data3.ty1 = ty11;
						data3.uvx1 = 0;
						data3.uvy1 = 0;
						data3.tx2 = tx21;
						data3.ty2 = ty21;
						data3.uvx2 = 0;
						data3.uvy2 = 0;
						data3.tx3 = tx31;
						data3.ty3 = ty31;
						data3.uvx3 = 0;
						data3.uvy3 = 0;
						data3.color = this.color;
						data3.alpha = alpha1;
						if(_this5.data == null) {
							_this5.data = data3;
						} else {
							_this5._lastData._next = data3;
						}
						_this5._lastData = data3;
						++_this5.triangleCount;
						var a4 = data3.tx1;
						var b4 = data3.tx2;
						var c4 = data3.tx3;
						var x12 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c5 = data3.tx3;
						var x21 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
						var a6 = data3.ty1;
						var b6 = data3.ty2;
						var c6 = data3.ty3;
						var y12 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c7 = data3.ty3;
						var y22 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
						if(_this5.bounds.width == 0) {
							_this5.bounds.x = x12;
							_this5.bounds.width = x21 - x12;
						} else {
							if(x12 < _this5.bounds.x) {
								_this5.bounds.width += _this5.bounds.x - x12;
								_this5.bounds.x = x12;
							}
							var _this8 = _this5.bounds;
							if(x21 > _this8.x + _this8.width) {
								_this5.bounds.width = x21 - _this5.bounds.x;
							}
						}
						if(_this5.bounds.height == 0) {
							_this5.bounds.y = y12;
							_this5.bounds.height = y22 - y12;
						} else {
							if(y12 < _this5.bounds.y) {
								_this5.bounds.height += _this5.bounds.y - y12;
								_this5.bounds.y = y12;
							}
							var _this9 = _this5.bounds;
							if(y22 > _this9.y + _this9.height) {
								_this5.bounds.height = y22 - _this5.bounds.y;
							}
						}
					}
				}
			}
			var _this10 = this.command;
			var tx12 = b_x;
			var ty12 = b_y;
			var tx22 = prev_x;
			var ty22 = prev_y;
			var tx32 = inner_x;
			var ty32 = inner_y;
			var alpha2 = this.alpha;
			if(alpha2 > 0) {
				var onScreen6;
				if(_this10.shader.attributeNames.length <= 0) {
					var onScreen7;
					var onScreen8;
					var _this11 = _this10.visibleArea;
					if((tx12 > tx22 ? tx22 > tx32 ? tx32 : tx22 : tx12 > tx32 ? tx32 : tx12) <= _this11.x + _this11.width) {
						onScreen8 = (tx12 < tx22 ? tx22 < tx32 ? tx32 : tx22 : tx12 < tx32 ? tx32 : tx12) >= _this10.visibleArea.x;
					} else {
						onScreen8 = false;
					}
					if(onScreen8) {
						var _this12 = _this10.visibleArea;
						onScreen7 = (ty12 > ty22 ? ty22 > ty32 ? ty32 : ty22 : ty12 > ty32 ? ty32 : ty12) <= _this12.y + _this12.height;
					} else {
						onScreen7 = false;
					}
					if(onScreen7) {
						onScreen6 = (ty12 < ty22 ? ty22 < ty32 ? ty32 : ty22 : ty12 < ty32 ? ty32 : ty12) >= _this10.visibleArea.y;
					} else {
						onScreen6 = false;
					}
				} else {
					onScreen6 = true;
				}
				if(onScreen6) {
					var data4;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data4._next = null;
					} else {
						data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data5 = data4;
					data5.tx1 = tx12;
					data5.ty1 = ty12;
					data5.uvx1 = 0;
					data5.uvy1 = 0;
					data5.tx2 = tx22;
					data5.ty2 = ty22;
					data5.uvx2 = 0;
					data5.uvy2 = 0;
					data5.tx3 = tx32;
					data5.ty3 = ty32;
					data5.uvx3 = 0;
					data5.uvy3 = 0;
					data5.color = this.color;
					data5.alpha = alpha2;
					if(_this10.data == null) {
						_this10.data = data5;
					} else {
						_this10._lastData._next = data5;
					}
					_this10._lastData = data5;
					++_this10.triangleCount;
					var a8 = data5.tx1;
					var b8 = data5.tx2;
					var c8 = data5.tx3;
					var x13 = a8 > b8 ? b8 > c8 ? c8 : b8 : a8 > c8 ? c8 : a8;
					var a9 = data5.tx1;
					var b9 = data5.tx2;
					var c9 = data5.tx3;
					var x22 = a9 < b9 ? b9 < c9 ? c9 : b9 : a9 < c9 ? c9 : a9;
					var a10 = data5.ty1;
					var b10 = data5.ty2;
					var c10 = data5.ty3;
					var y13 = a10 > b10 ? b10 > c10 ? c10 : b10 : a10 > c10 ? c10 : a10;
					var a11 = data5.ty1;
					var b11 = data5.ty2;
					var c11 = data5.ty3;
					var y23 = a11 < b11 ? b11 < c11 ? c11 : b11 : a11 < c11 ? c11 : a11;
					if(_this10.bounds.width == 0) {
						_this10.bounds.x = x13;
						_this10.bounds.width = x22 - x13;
					} else {
						if(x13 < _this10.bounds.x) {
							_this10.bounds.width += _this10.bounds.x - x13;
							_this10.bounds.x = x13;
						}
						var _this13 = _this10.bounds;
						if(x22 > _this13.x + _this13.width) {
							_this10.bounds.width = x22 - _this10.bounds.x;
						}
					}
					if(_this10.bounds.height == 0) {
						_this10.bounds.y = y13;
						_this10.bounds.height = y23 - y13;
					} else {
						if(y13 < _this10.bounds.y) {
							_this10.bounds.height += _this10.bounds.y - y13;
							_this10.bounds.y = y13;
						}
						var _this14 = _this10.bounds;
						if(y23 > _this14.y + _this14.height) {
							_this10.bounds.height = y23 - _this10.bounds.y;
						}
					}
				}
			}
			var _this15 = this.command;
			var tx13 = next_x;
			var ty13 = next_y;
			var tx23 = prev_x;
			var ty23 = prev_y;
			var tx33 = inner_x;
			var ty33 = inner_y;
			var alpha3 = this.alpha;
			if(alpha3 > 0) {
				var onScreen9;
				if(_this15.shader.attributeNames.length <= 0) {
					var onScreen10;
					var onScreen11;
					var _this16 = _this15.visibleArea;
					if((tx13 > tx23 ? tx23 > tx33 ? tx33 : tx23 : tx13 > tx33 ? tx33 : tx13) <= _this16.x + _this16.width) {
						onScreen11 = (tx13 < tx23 ? tx23 < tx33 ? tx33 : tx23 : tx13 < tx33 ? tx33 : tx13) >= _this15.visibleArea.x;
					} else {
						onScreen11 = false;
					}
					if(onScreen11) {
						var _this17 = _this15.visibleArea;
						onScreen10 = (ty13 > ty23 ? ty23 > ty33 ? ty33 : ty23 : ty13 > ty33 ? ty33 : ty13) <= _this17.y + _this17.height;
					} else {
						onScreen10 = false;
					}
					if(onScreen10) {
						onScreen9 = (ty13 < ty23 ? ty23 < ty33 ? ty33 : ty23 : ty13 < ty33 ? ty33 : ty13) >= _this15.visibleArea.y;
					} else {
						onScreen9 = false;
					}
				} else {
					onScreen9 = true;
				}
				if(onScreen9) {
					var data6;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data6._next = null;
					} else {
						data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data7 = data6;
					data7.tx1 = tx13;
					data7.ty1 = ty13;
					data7.uvx1 = 0;
					data7.uvy1 = 0;
					data7.tx2 = tx23;
					data7.ty2 = ty23;
					data7.uvx2 = 0;
					data7.uvy2 = 0;
					data7.tx3 = tx33;
					data7.ty3 = ty33;
					data7.uvx3 = 0;
					data7.uvy3 = 0;
					data7.color = this.color;
					data7.alpha = alpha3;
					if(_this15.data == null) {
						_this15.data = data7;
					} else {
						_this15._lastData._next = data7;
					}
					_this15._lastData = data7;
					++_this15.triangleCount;
					var a12 = data7.tx1;
					var b12 = data7.tx2;
					var c12 = data7.tx3;
					var x14 = a12 > b12 ? b12 > c12 ? c12 : b12 : a12 > c12 ? c12 : a12;
					var a13 = data7.tx1;
					var b13 = data7.tx2;
					var c13 = data7.tx3;
					var x23 = a13 < b13 ? b13 < c13 ? c13 : b13 : a13 < c13 ? c13 : a13;
					var a14 = data7.ty1;
					var b14 = data7.ty2;
					var c14 = data7.ty3;
					var y14 = a14 > b14 ? b14 > c14 ? c14 : b14 : a14 > c14 ? c14 : a14;
					var a15 = data7.ty1;
					var b15 = data7.ty2;
					var c15 = data7.ty3;
					var y24 = a15 < b15 ? b15 < c15 ? c15 : b15 : a15 < c15 ? c15 : a15;
					if(_this15.bounds.width == 0) {
						_this15.bounds.x = x14;
						_this15.bounds.width = x23 - x14;
					} else {
						if(x14 < _this15.bounds.x) {
							_this15.bounds.width += _this15.bounds.x - x14;
							_this15.bounds.x = x14;
						}
						var _this18 = _this15.bounds;
						if(x23 > _this18.x + _this18.width) {
							_this15.bounds.width = x23 - _this15.bounds.x;
						}
					}
					if(_this15.bounds.height == 0) {
						_this15.bounds.y = y14;
						_this15.bounds.height = y24 - y14;
					} else {
						if(y14 < _this15.bounds.y) {
							_this15.bounds.height += _this15.bounds.y - y14;
							_this15.bounds.y = y14;
						}
						var _this19 = _this15.bounds;
						if(y24 > _this19.y + _this19.height) {
							_this15.bounds.height = y24 - _this15.bounds.y;
						}
					}
				}
			}
			if(miterJoint) {
				var _this20 = this.command;
				var tx14 = next_x;
				var ty14 = next_y;
				var tx24 = prev_x;
				var ty24 = prev_y;
				var tx34 = outer_x;
				var ty34 = outer_y;
				var alpha4 = this.alpha;
				if(alpha4 > 0) {
					var onScreen12;
					if(_this20.shader.attributeNames.length <= 0) {
						var onScreen13;
						var onScreen14;
						var _this21 = _this20.visibleArea;
						if((tx14 > tx24 ? tx24 > tx34 ? tx34 : tx24 : tx14 > tx34 ? tx34 : tx14) <= _this21.x + _this21.width) {
							onScreen14 = (tx14 < tx24 ? tx24 < tx34 ? tx34 : tx24 : tx14 < tx34 ? tx34 : tx14) >= _this20.visibleArea.x;
						} else {
							onScreen14 = false;
						}
						if(onScreen14) {
							var _this22 = _this20.visibleArea;
							onScreen13 = (ty14 > ty24 ? ty24 > ty34 ? ty34 : ty24 : ty14 > ty34 ? ty34 : ty14) <= _this22.y + _this22.height;
						} else {
							onScreen13 = false;
						}
						if(onScreen13) {
							onScreen12 = (ty14 < ty24 ? ty24 < ty34 ? ty34 : ty24 : ty14 < ty34 ? ty34 : ty14) >= _this20.visibleArea.y;
						} else {
							onScreen12 = false;
						}
					} else {
						onScreen12 = true;
					}
					if(onScreen12) {
						var data8;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data8 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data8._next = null;
						} else {
							data8 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data9 = data8;
						data9.tx1 = tx14;
						data9.ty1 = ty14;
						data9.uvx1 = 0;
						data9.uvy1 = 0;
						data9.tx2 = tx24;
						data9.ty2 = ty24;
						data9.uvx2 = 0;
						data9.uvy2 = 0;
						data9.tx3 = tx34;
						data9.ty3 = ty34;
						data9.uvx3 = 0;
						data9.uvy3 = 0;
						data9.color = this.color;
						data9.alpha = alpha4;
						if(_this20.data == null) {
							_this20.data = data9;
						} else {
							_this20._lastData._next = data9;
						}
						_this20._lastData = data9;
						++_this20.triangleCount;
						var a16 = data9.tx1;
						var b16 = data9.tx2;
						var c16 = data9.tx3;
						var x15 = a16 > b16 ? b16 > c16 ? c16 : b16 : a16 > c16 ? c16 : a16;
						var a17 = data9.tx1;
						var b17 = data9.tx2;
						var c17 = data9.tx3;
						var x24 = a17 < b17 ? b17 < c17 ? c17 : b17 : a17 < c17 ? c17 : a17;
						var a18 = data9.ty1;
						var b18 = data9.ty2;
						var c18 = data9.ty3;
						var y15 = a18 > b18 ? b18 > c18 ? c18 : b18 : a18 > c18 ? c18 : a18;
						var a19 = data9.ty1;
						var b19 = data9.ty2;
						var c19 = data9.ty3;
						var y25 = a19 < b19 ? b19 < c19 ? c19 : b19 : a19 < c19 ? c19 : a19;
						if(_this20.bounds.width == 0) {
							_this20.bounds.x = x15;
							_this20.bounds.width = x24 - x15;
						} else {
							if(x15 < _this20.bounds.x) {
								_this20.bounds.width += _this20.bounds.x - x15;
								_this20.bounds.x = x15;
							}
							var _this23 = _this20.bounds;
							if(x24 > _this23.x + _this23.width) {
								_this20.bounds.width = x24 - _this20.bounds.x;
							}
						}
						if(_this20.bounds.height == 0) {
							_this20.bounds.y = y15;
							_this20.bounds.height = y25 - y15;
						} else {
							if(y15 < _this20.bounds.y) {
								_this20.bounds.height += _this20.bounds.y - y15;
								_this20.bounds.y = y15;
							}
							var _this24 = _this20.bounds;
							if(y25 > _this24.y + _this24.height) {
								_this20.bounds.height = y25 - _this20.bounds.y;
							}
						}
					}
				}
			}
			if(over180) {
				a_x = next_x;
				a_y = next_y;
				b_x = inner_x;
				b_y = inner_y;
			} else {
				a_x = inner_x;
				a_y = inner_y;
				b_x = next_x;
				b_y = next_y;
			}
			prev_x = nextPrev_x;
			prev_y = nextPrev_y;
		}
		next_x = points[points.length - 2];
		next_y = points[points.length - 1];
		pos_x -= next_x;
		pos_y -= next_y;
		var y5 = pos_x;
		pos_x = -pos_y;
		pos_y = y5;
		if(!(pos_x == 0 && pos_y == 0)) {
			var normal6 = halfThick / Math.sqrt(pos_x * pos_x + pos_y * pos_y);
			pos_x *= normal6;
			pos_y *= normal6;
		}
		prev_x = next_x;
		prev_y = next_y;
		prev_x += pos_x;
		prev_y += pos_y;
		next_x -= pos_x;
		next_y -= pos_y;
		var _this25 = this.command;
		var tx15 = a_x;
		var ty15 = a_y;
		var tx25 = b_x;
		var ty25 = b_y;
		var tx35 = prev_x;
		var ty35 = prev_y;
		var alpha5 = this.alpha;
		if(alpha5 > 0) {
			var onScreen15;
			if(_this25.shader.attributeNames.length <= 0) {
				var onScreen16;
				var onScreen17;
				var _this26 = _this25.visibleArea;
				if((tx15 > tx25 ? tx25 > tx35 ? tx35 : tx25 : tx15 > tx35 ? tx35 : tx15) <= _this26.x + _this26.width) {
					onScreen17 = (tx15 < tx25 ? tx25 < tx35 ? tx35 : tx25 : tx15 < tx35 ? tx35 : tx15) >= _this25.visibleArea.x;
				} else {
					onScreen17 = false;
				}
				if(onScreen17) {
					var _this27 = _this25.visibleArea;
					onScreen16 = (ty15 > ty25 ? ty25 > ty35 ? ty35 : ty25 : ty15 > ty35 ? ty35 : ty15) <= _this27.y + _this27.height;
				} else {
					onScreen16 = false;
				}
				if(onScreen16) {
					onScreen15 = (ty15 < ty25 ? ty25 < ty35 ? ty35 : ty25 : ty15 < ty35 ? ty35 : ty15) >= _this25.visibleArea.y;
				} else {
					onScreen15 = false;
				}
			} else {
				onScreen15 = true;
			}
			if(onScreen15) {
				var data10;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data10 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data10._next = null;
				} else {
					data10 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data11 = data10;
				data11.tx1 = tx15;
				data11.ty1 = ty15;
				data11.uvx1 = 0;
				data11.uvy1 = 0;
				data11.tx2 = tx25;
				data11.ty2 = ty25;
				data11.uvx2 = 0;
				data11.uvy2 = 0;
				data11.tx3 = tx35;
				data11.ty3 = ty35;
				data11.uvx3 = 0;
				data11.uvy3 = 0;
				data11.color = this.color;
				data11.alpha = alpha5;
				if(_this25.data == null) {
					_this25.data = data11;
				} else {
					_this25._lastData._next = data11;
				}
				_this25._lastData = data11;
				++_this25.triangleCount;
				var a20 = data11.tx1;
				var b20 = data11.tx2;
				var c20 = data11.tx3;
				var x16 = a20 > b20 ? b20 > c20 ? c20 : b20 : a20 > c20 ? c20 : a20;
				var a21 = data11.tx1;
				var b21 = data11.tx2;
				var c21 = data11.tx3;
				var x25 = a21 < b21 ? b21 < c21 ? c21 : b21 : a21 < c21 ? c21 : a21;
				var a22 = data11.ty1;
				var b22 = data11.ty2;
				var c22 = data11.ty3;
				var y16 = a22 > b22 ? b22 > c22 ? c22 : b22 : a22 > c22 ? c22 : a22;
				var a23 = data11.ty1;
				var b23 = data11.ty2;
				var c23 = data11.ty3;
				var y26 = a23 < b23 ? b23 < c23 ? c23 : b23 : a23 < c23 ? c23 : a23;
				if(_this25.bounds.width == 0) {
					_this25.bounds.x = x16;
					_this25.bounds.width = x25 - x16;
				} else {
					if(x16 < _this25.bounds.x) {
						_this25.bounds.width += _this25.bounds.x - x16;
						_this25.bounds.x = x16;
					}
					var _this28 = _this25.bounds;
					if(x25 > _this28.x + _this28.width) {
						_this25.bounds.width = x25 - _this25.bounds.x;
					}
				}
				if(_this25.bounds.height == 0) {
					_this25.bounds.y = y16;
					_this25.bounds.height = y26 - y16;
				} else {
					if(y16 < _this25.bounds.y) {
						_this25.bounds.height += _this25.bounds.y - y16;
						_this25.bounds.y = y16;
					}
					var _this29 = _this25.bounds;
					if(y26 > _this29.y + _this29.height) {
						_this25.bounds.height = y26 - _this25.bounds.y;
					}
				}
			}
		}
		var _this30 = this.command;
		var tx16 = b_x;
		var ty16 = b_y;
		var tx26 = prev_x;
		var ty26 = prev_y;
		var tx36 = next_x;
		var ty36 = next_y;
		var alpha6 = this.alpha;
		if(alpha6 > 0) {
			var onScreen18;
			if(_this30.shader.attributeNames.length <= 0) {
				var onScreen19;
				var onScreen20;
				var _this31 = _this30.visibleArea;
				if((tx16 > tx26 ? tx26 > tx36 ? tx36 : tx26 : tx16 > tx36 ? tx36 : tx16) <= _this31.x + _this31.width) {
					onScreen20 = (tx16 < tx26 ? tx26 < tx36 ? tx36 : tx26 : tx16 < tx36 ? tx36 : tx16) >= _this30.visibleArea.x;
				} else {
					onScreen20 = false;
				}
				if(onScreen20) {
					var _this32 = _this30.visibleArea;
					onScreen19 = (ty16 > ty26 ? ty26 > ty36 ? ty36 : ty26 : ty16 > ty36 ? ty36 : ty16) <= _this32.y + _this32.height;
				} else {
					onScreen19 = false;
				}
				if(onScreen19) {
					onScreen18 = (ty16 < ty26 ? ty26 < ty36 ? ty36 : ty26 : ty16 < ty36 ? ty36 : ty16) >= _this30.visibleArea.y;
				} else {
					onScreen18 = false;
				}
			} else {
				onScreen18 = true;
			}
			if(onScreen18) {
				var data12;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data12 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data12._next = null;
				} else {
					data12 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data13 = data12;
				data13.tx1 = tx16;
				data13.ty1 = ty16;
				data13.uvx1 = 0;
				data13.uvy1 = 0;
				data13.tx2 = tx26;
				data13.ty2 = ty26;
				data13.uvx2 = 0;
				data13.uvy2 = 0;
				data13.tx3 = tx36;
				data13.ty3 = ty36;
				data13.uvx3 = 0;
				data13.uvy3 = 0;
				data13.color = this.color;
				data13.alpha = alpha6;
				if(_this30.data == null) {
					_this30.data = data13;
				} else {
					_this30._lastData._next = data13;
				}
				_this30._lastData = data13;
				++_this30.triangleCount;
				var a24 = data13.tx1;
				var b24 = data13.tx2;
				var c24 = data13.tx3;
				var x17 = a24 > b24 ? b24 > c24 ? c24 : b24 : a24 > c24 ? c24 : a24;
				var a25 = data13.tx1;
				var b25 = data13.tx2;
				var c25 = data13.tx3;
				var x26 = a25 < b25 ? b25 < c25 ? c25 : b25 : a25 < c25 ? c25 : a25;
				var a26 = data13.ty1;
				var b26 = data13.ty2;
				var c26 = data13.ty3;
				var y17 = a26 > b26 ? b26 > c26 ? c26 : b26 : a26 > c26 ? c26 : a26;
				var a27 = data13.ty1;
				var b27 = data13.ty2;
				var c27 = data13.ty3;
				var y27 = a27 < b27 ? b27 < c27 ? c27 : b27 : a27 < c27 ? c27 : a27;
				if(_this30.bounds.width == 0) {
					_this30.bounds.x = x17;
					_this30.bounds.width = x26 - x17;
				} else {
					if(x17 < _this30.bounds.x) {
						_this30.bounds.width += _this30.bounds.x - x17;
						_this30.bounds.x = x17;
					}
					var _this33 = _this30.bounds;
					if(x26 > _this33.x + _this33.width) {
						_this30.bounds.width = x26 - _this30.bounds.x;
					}
				}
				if(_this30.bounds.height == 0) {
					_this30.bounds.y = y17;
					_this30.bounds.height = y27 - y17;
				} else {
					if(y17 < _this30.bounds.y) {
						_this30.bounds.height += _this30.bounds.y - y17;
						_this30.bounds.y = y17;
					}
					var _this34 = _this30.bounds;
					if(y27 > _this34.y + _this34.height) {
						_this30.bounds.height = y27 - _this30.bounds.y;
					}
				}
			}
		}
	}
	,rectFilled: function(x,y,width,height) {
		if(this.shader == null) {
			this.shader = new haxepunk_graphics_shader_ColorShader();
		}
		this.command = (this.scene == null ? haxepunk_HXP.renderingScene == null ? haxepunk_HXP.engine._scene : haxepunk_HXP.renderingScene : this.scene).batch.getDrawCommand(null,this.shader,this.smooth,this.blend,null);
		var x2 = x + width;
		var x3 = x + width;
		var y3 = y + height;
		var y4 = y + height;
		var _this = this.command;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			if(_this.shader.attributeNames.length <= 0) {
				var onScreen1;
				var onScreen2;
				var _this1 = _this.visibleArea;
				if((x > x2 ? x2 > x3 ? x3 : x2 : x > x3 ? x3 : x) <= _this1.x + _this1.width) {
					onScreen2 = (x < x2 ? x2 < x3 ? x3 : x2 : x < x3 ? x3 : x) >= _this.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this2 = _this.visibleArea;
					onScreen1 = (y > y ? y > y3 ? y3 : y : y > y3 ? y3 : y) <= _this2.y + _this2.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y < y ? y < y3 ? y3 : y : y < y3 ? y3 : y) >= _this.visibleArea.y;
				} else {
					onScreen = false;
				}
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = x;
				data1.ty1 = y;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = x2;
				data1.ty2 = y;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = x3;
				data1.ty3 = y3;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = this.color;
				data1.alpha = alpha;
				if(_this.data == null) {
					_this.data = data1;
				} else {
					_this._lastData._next = data1;
				}
				_this._lastData = data1;
				++_this.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x1 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x21 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(_this.bounds.width == 0) {
					_this.bounds.x = x1;
					_this.bounds.width = x21 - x1;
				} else {
					if(x1 < _this.bounds.x) {
						_this.bounds.width += _this.bounds.x - x1;
						_this.bounds.x = x1;
					}
					var _this3 = _this.bounds;
					if(x21 > _this3.x + _this3.width) {
						_this.bounds.width = x21 - _this.bounds.x;
					}
				}
				if(_this.bounds.height == 0) {
					_this.bounds.y = y1;
					_this.bounds.height = y2 - y1;
				} else {
					if(y1 < _this.bounds.y) {
						_this.bounds.height += _this.bounds.y - y1;
						_this.bounds.y = y1;
					}
					var _this4 = _this.bounds;
					if(y2 > _this4.y + _this4.height) {
						_this.bounds.height = y2 - _this.bounds.y;
					}
				}
			}
		}
		var _this5 = this.command;
		var alpha1 = this.alpha;
		if(alpha1 > 0) {
			var onScreen3;
			if(_this5.shader.attributeNames.length <= 0) {
				var onScreen4;
				var onScreen5;
				var _this6 = _this5.visibleArea;
				if((x > x3 ? x3 > x ? x : x3 : x > x ? x : x) <= _this6.x + _this6.width) {
					onScreen5 = (x < x3 ? x3 < x ? x : x3 : x < x ? x : x) >= _this5.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this7 = _this5.visibleArea;
					onScreen4 = (y > y3 ? y3 > y4 ? y4 : y3 : y > y4 ? y4 : y) <= _this7.y + _this7.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (y < y3 ? y3 < y4 ? y4 : y3 : y < y4 ? y4 : y) >= _this5.visibleArea.y;
				} else {
					onScreen3 = false;
				}
			} else {
				onScreen3 = true;
			}
			if(onScreen3) {
				var data2;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data2._next = null;
				} else {
					data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data3 = data2;
				data3.tx1 = x;
				data3.ty1 = y;
				data3.uvx1 = 0;
				data3.uvy1 = 0;
				data3.tx2 = x3;
				data3.ty2 = y3;
				data3.uvx2 = 0;
				data3.uvy2 = 0;
				data3.tx3 = x;
				data3.ty3 = y4;
				data3.uvx3 = 0;
				data3.uvy3 = 0;
				data3.color = this.color;
				data3.alpha = alpha1;
				if(_this5.data == null) {
					_this5.data = data3;
				} else {
					_this5._lastData._next = data3;
				}
				_this5._lastData = data3;
				++_this5.triangleCount;
				var a4 = data3.tx1;
				var b4 = data3.tx2;
				var c4 = data3.tx3;
				var x11 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
				var a5 = data3.tx1;
				var b5 = data3.tx2;
				var c5 = data3.tx3;
				var x22 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
				var a6 = data3.ty1;
				var b6 = data3.ty2;
				var c6 = data3.ty3;
				var y11 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
				var a7 = data3.ty1;
				var b7 = data3.ty2;
				var c7 = data3.ty3;
				var y21 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
				if(_this5.bounds.width == 0) {
					_this5.bounds.x = x11;
					_this5.bounds.width = x22 - x11;
				} else {
					if(x11 < _this5.bounds.x) {
						_this5.bounds.width += _this5.bounds.x - x11;
						_this5.bounds.x = x11;
					}
					var _this8 = _this5.bounds;
					if(x22 > _this8.x + _this8.width) {
						_this5.bounds.width = x22 - _this5.bounds.x;
					}
				}
				if(_this5.bounds.height == 0) {
					_this5.bounds.y = y11;
					_this5.bounds.height = y21 - y11;
				} else {
					if(y11 < _this5.bounds.y) {
						_this5.bounds.height += _this5.bounds.y - y11;
						_this5.bounds.y = y11;
					}
					var _this9 = _this5.bounds;
					if(y21 > _this9.y + _this9.height) {
						_this5.bounds.height = y21 - _this5.bounds.y;
					}
				}
			}
		}
	}
	,arc: function(x,y,radius,start,angle,segments) {
		if(segments == null) {
			segments = 25;
		}
		var radians = angle / segments;
		var points = [];
		var _g1 = 0;
		var _g = segments + 1;
		while(_g1 < _g) {
			var theta = _g1++ * radians + start;
			points.push(x + Math.sin(theta) * radius);
			points.push(y + Math.cos(theta) * radius);
		}
		this.polyline(points,true);
	}
	,command: null
	,__class__: haxepunk_utils_DrawContext
};
var haxepunk_Scene = function() {
	this.onInputReleased = new haxepunk_Signals();
	this.onInputPressed = new haxepunk_Signals();
	this.onResize = new haxepunk_Signal0();
	this.postRender = new haxepunk_Signal0();
	this.preRender = new haxepunk_Signal0();
	this.postUpdate = new haxepunk_Signal0();
	this.preUpdate = new haxepunk_Signal0();
	this._height = null;
	this._width = null;
	this.y = 0;
	this.x = 0;
	this.started = false;
	this.trackDrawCalls = true;
	this.bgAlpha = 1;
	this.bgColor = null;
	this.visible = true;
	haxepunk_Tweener.call(this);
	this.camera = new haxepunk_Camera();
	this.assetCache = new haxepunk_assets_AssetCache(Type.getClassName(js_Boot.getClass(this)));
	this.batch = new haxepunk_graphics_hardware_DrawCommandBatch();
	this._layerList = [];
	this._add = [];
	this._remove = [];
	this._recycle = [];
	this._update = new List();
	this._layerDisplay = new haxe_ds_IntMap();
	this._layers = new haxe_ds_IntMap();
	this._types = new haxe_ds_StringMap();
	this._classCount = new haxe_ds_StringMap();
	this._recycled = new haxe_ds_StringMap();
	this._entityNames = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.Scene"] = haxepunk_Scene;
haxepunk_Scene.__name__ = ["haxepunk","Scene"];
haxepunk_Scene.__super__ = haxepunk_Tweener;
haxepunk_Scene.prototype = $extend(haxepunk_Tweener.prototype,{
	visible: null
	,bgColor: null
	,bgAlpha: null
	,trackDrawCalls: null
	,camera: null
	,started: null
	,assetCache: null
	,x: null
	,y: null
	,_width: null
	,_height: null
	,batch: null
	,shaders: null
	,preUpdate: null
	,postUpdate: null
	,preRender: null
	,postRender: null
	,onResize: null
	,onInputPressed: null
	,onInputReleased: null
	,begin: function() {
	}
	,resume: function() {
	}
	,end: function() {
	}
	,_resize: function() {
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			val.resized();
		}
		var _g = 0;
		var _g1 = this.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,update: function() {
		this.camera.update();
		var _g_head = this._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.get_active()) {
				if(val.get_hasTween()) {
					val.updateTweens(haxepunk_HXP.elapsed);
				}
				if(val.get_active()) {
					if(val.shouldUpdate()) {
						var _g = 0;
						var _g1 = val.preUpdate.callbacks;
						while(_g < _g1.length) {
							var callback = _g1[_g];
							++_g;
							callback();
						}
						val.update();
						var _g2 = 0;
						var _g11 = val.postUpdate.callbacks;
						while(_g2 < _g11.length) {
							var callback1 = _g11[_g2];
							++_g2;
							callback1();
						}
					}
				}
			}
			if(val.graphic != null && val.graphic.active) {
				val.graphic.update();
			}
		}
		this.camera.update();
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_active()) {
			haxepunk_HXP.cursor.update();
		}
	}
	,layerSort: function(a,b) {
		return b - a;
	}
	,render: function() {
		var batch = this.batch;
		haxepunk_graphics_atlas_AtlasData._batch = batch;
		batch.head.recycle();
		batch.last = null;
		this.batch.visibleArea.setTo(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		if(this.bgAlpha > 0) {
			haxepunk_Scene.drawContext.scene = this;
			haxepunk_Scene.drawContext.blend = 1;
			var _this = haxepunk_Scene.drawContext;
			_this.color = this.bgColor == null ? haxepunk_HXP.screen.color : this.bgColor;
			_this.alpha = this.bgAlpha;
			haxepunk_Scene.drawContext.rectFilled(0,0,this._width == null ? haxepunk_HXP.screen.width - this.x : this._width,this._height == null ? haxepunk_HXP.screen.height - this.y : this._height);
		}
		var _g = 0;
		var _g1 = this.preRender.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		var _g2 = 0;
		var _g11 = this._layerList;
		while(_g2 < _g11.length) {
			var layer = _g11[_g2];
			++_g2;
			if(!(!this._layerDisplay.exists(layer) || this._layerDisplay.get(layer))) {
				continue;
			}
			var _g2_head = this._layers.h[layer].h;
			while(_g2_head != null) {
				var val = _g2_head.item;
				_g2_head = _g2_head.next;
				if(val.get_visible()) {
					val.render(val.camera == null ? this.camera : val.camera);
				}
			}
		}
		if(haxepunk_HXP.cursor != null && haxepunk_HXP.cursor.get_visible() && this == haxepunk_HXP.engine._scene) {
			haxepunk_HXP.cursor.render(this.camera);
		}
		var _g3 = 0;
		var _g12 = this.postRender.callbacks;
		while(_g3 < _g12.length) {
			var callback1 = _g12[_g3];
			++_g3;
			callback1();
		}
	}
	,add: function(e) {
		this._add[this._add.length] = e;
		return e;
	}
	,remove: function(e) {
		this._remove[this._remove.length] = e;
		return e;
	}
	,addGraphic: function(graphic,layer,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var e = new haxepunk_Entity(x,y,graphic);
		e.set_layer(layer);
		e.set_active(false);
		return this.add(e);
	}
	,collideRectInto: function(type,rX,rY,rWidth,rHeight,into) {
		var n = into.length;
		var _this = this._types;
		if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
			var _g_head;
			var _this1 = this._types;
			_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(val.get_collidable() && val.collideRect(val.get_x(),val.get_y(),rX,rY,rWidth,rHeight)) {
					into[n++] = val;
				}
			}
		}
	}
	,collidePointInto: function(type,pX,pY,into,cameraAdjust) {
		if(cameraAdjust == null) {
			cameraAdjust = false;
		}
		var _this = this._types;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			return;
		}
		var n = into.length;
		var _g_head;
		var _this1 = this._types;
		_g_head = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]).h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.get_collidable()) {
				if(cameraAdjust && val.camera != null) {
					var _this2 = this.camera;
					var _this3 = val.camera;
					var px = (pX + val.camera.x - this.camera.x) * (_this2.scale * _this2.scaleX) / (_this3.scale * _this3.scaleX);
					var _this4 = this.camera;
					var _this5 = val.camera;
					var py = (pY + val.camera.y - this.camera.y) * (_this4.scale * _this4.scaleY) / (_this5.scale * _this5.scaleY);
					if(val.collidePoint(val.get_x(),val.get_y(),px,py)) {
						into[n++] = val;
					}
				} else if(val.collidePoint(val.get_x(),val.get_y(),pX,pY)) {
					into[n++] = val;
				}
			}
		}
	}
	,updateLists: function(shouldAdd) {
		if(shouldAdd == null) {
			shouldAdd = true;
		}
		if(haxepunk_HXP.cursor != null) {
			haxepunk_HXP.cursor._scene = this;
		}
		if(this._remove.length > 0) {
			var _g = 0;
			var _g1 = this._remove;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e._scene == null) {
					var idx = this._add.indexOf(e);
					if(idx >= 0) {
						this._add.splice(idx,1);
					}
					continue;
				}
				if(e._scene != this) {
					continue;
				}
				e.removed();
				e._scene = null;
				this.removeUpdate(e);
				this.removeRender(e);
				if(e._type != "") {
					this.removeType(e);
				}
				if(e._name != "") {
					this._entityNames.remove(e._name);
				}
				if(e.autoClear && e.get_hasTween()) {
					e.clearTweens();
				}
			}
			this._remove.length = 0;
		}
		if(shouldAdd && this._add.length > 0) {
			var _g2 = 0;
			var _g11 = this._add;
			while(_g2 < _g11.length) {
				var e1 = _g11[_g2];
				++_g2;
				if(e1._scene != null) {
					continue;
				}
				e1._scene = this;
				this.addUpdate(e1);
				this.addRender(e1);
				if(e1._type != "") {
					this.addType(e1);
				}
				if(e1._name != "") {
					this._entityNames.set(e1._name,e1);
				}
				e1.added();
			}
			this._add.length = 0;
		}
		if(this._recycle.length > 0) {
			var _g3 = 0;
			var _g12 = this._recycle;
			while(_g3 < _g12.length) {
				var e2 = _g12[_g3];
				++_g3;
				if(e2._scene != null || e2._recycleNext != null) {
					continue;
				}
				var key = e2._class;
				var _this = this._recycled;
				e2._recycleNext = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				var key1 = e2._class;
				var _this1 = this._recycled;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,e2);
				} else {
					_this1.h[key1] = e2;
				}
			}
			this._recycle.length = 0;
		}
	}
	,getTexture: function(id) {
		return this.assetCache.getTexture(id);
	}
	,addUpdate: function(e) {
		this._update.add(e);
		var key = e._class;
		var _this = this._classCount;
		if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) != 0) {
			var key1 = e._class;
			var _this1 = this._classCount;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,0);
			} else {
				_this1.h[key1] = 0;
			}
		}
		var key2 = e._class;
		var key3 = e._class;
		var _this2 = this._classCount;
		var value = (__map_reserved[key3] != null ? _this2.getReserved(key3) : _this2.h[key3]) + 1;
		var _this3 = this._classCount;
		if(__map_reserved[key2] != null) {
			_this3.setReserved(key2,value);
		} else {
			_this3.h[key2] = value;
		}
	}
	,removeUpdate: function(e) {
		this._update.remove(e);
		var key = e._class;
		var key1 = e._class;
		var _this = this._classCount;
		var value = (__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]) - 1;
		var _this1 = this._classCount;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,value);
		} else {
			_this1.h[key] = value;
		}
	}
	,addRender: function(e) {
		var list;
		if(this._layers.h.hasOwnProperty(e._layer)) {
			list = this._layers.h[e._layer];
		} else {
			if(haxepunk_Scene._pooledEntityLists.length > 0) {
				list = haxepunk_Scene._pooledEntityLists.pop();
			} else {
				list = new List();
			}
			this._layers.h[e._layer] = list;
			if(this._layerList.length == 0) {
				this._layerList[0] = e._layer;
			} else {
				haxepunk_HXP.insertSortedKey(this._layerList,e._layer,$bind(this,this.layerSort));
			}
		}
		list.add(e);
	}
	,removeRender: function(e) {
		var list = this._layers.h[e._layer];
		list.remove(e);
		if(list.length == 0) {
			HxOverrides.remove(this._layerList,e._layer);
			this._layers.remove(e._layer);
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,addType: function(e) {
		var list;
		var key = e._type;
		var _this = this._types;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = e._type;
			var _this1 = this._types;
			if(__map_reserved[key1] != null) {
				list = _this1.getReserved(key1);
			} else {
				list = _this1.h[key1];
			}
		} else {
			if(haxepunk_Scene._pooledEntityLists.length > 0) {
				list = haxepunk_Scene._pooledEntityLists.pop();
			} else {
				list = new List();
			}
			var key2 = e._type;
			var _this2 = this._types;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,list);
			} else {
				_this2.h[key2] = list;
			}
		}
		list.push(e);
	}
	,removeType: function(e) {
		var key = e._type;
		var _this = this._types;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			return;
		}
		var key1 = e._type;
		var _this1 = this._types;
		var list = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		list.remove(e);
		if(list.length == 0) {
			this._types.remove(e._type);
			haxepunk_Scene._pooledEntityLists.push(list);
		}
	}
	,_add: null
	,_remove: null
	,_recycle: null
	,_update: null
	,_layerList: null
	,_layerDisplay: null
	,_layers: null
	,_classCount: null
	,_types: null
	,_recycled: null
	,_entityNames: null
	,__class__: haxepunk_Scene
});
var catalyst_scenes_BaseScene = function() {
	haxepunk_Scene.call(this);
};
$hxClasses["catalyst.scenes.BaseScene"] = catalyst_scenes_BaseScene;
catalyst_scenes_BaseScene.__name__ = ["catalyst","scenes","BaseScene"];
catalyst_scenes_BaseScene.__super__ = haxepunk_Scene;
catalyst_scenes_BaseScene.prototype = $extend(haxepunk_Scene.prototype,{
	layout: null
	,mouseManager: null
	,begin: function() {
		this.layout = new haxepunk_layout_LayoutGroup(null,null,100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%"),100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%"));
		var _this = this.layout;
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		_this.anchorX = 0.5;
		_this.layoutX = m;
		this.add(this.layout);
		this.mouseManager = new haxepunk_input_MouseManager();
		this.add(this.mouseManager);
	}
	,__class__: catalyst_scenes_BaseScene
});
var catalyst_scenes_AnimationScene = function(background,closable,onFinish) {
	if(closable == null) {
		closable = true;
	}
	if(background == null) {
		background = 16777215;
	}
	this.particleTime = 0;
	catalyst_scenes_BaseScene.call(this);
	this.onFinish = onFinish;
	this.closable = closable;
	this.background = background;
	this.bgColor = 4210752;
	this.bgAlpha = 0.5;
};
$hxClasses["catalyst.scenes.AnimationScene"] = catalyst_scenes_AnimationScene;
catalyst_scenes_AnimationScene.__name__ = ["catalyst","scenes","AnimationScene"];
catalyst_scenes_AnimationScene.__super__ = catalyst_scenes_BaseScene;
catalyst_scenes_AnimationScene.prototype = $extend(catalyst_scenes_BaseScene.prototype,{
	emitter: null
	,bg: null
	,particleTime: null
	,onFinish: null
	,closable: null
	,background: null
	,begin: function() {
		catalyst_scenes_BaseScene.prototype.begin.call(this);
		var m = 20 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[20] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(20,"%");
		this.layout.paddingTop = this.layout.paddingBottom = m == null ? null : { value : m, min : null, max : null};
		this.layout.paddingLeft = this.layout.paddingRight = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(0), min : null, max : null};
		this.bg = new catalyst_entities_StretchBackdrop(this.background);
		var stretcher = new haxepunk_layout_LayoutGroup(this.bg);
		var m1 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		stretcher.layoutWidth = stretcher.layoutHeight = m1 == null ? null : { value : m1, min : null, max : null};
		stretcher.add(this.bg);
		this.layout.add(stretcher);
		if(this.closable) {
			this.onInputPressed.resolve("back").callbacks.push($bind(this,this.close));
			var btn = new catalyst_entities_CloseButton();
			var wrapper = new haxepunk_layout_LayoutGroup(btn);
			var m2;
			var m3 = 98 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[98] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(98,"%");
			if(m3 == null) {
				m2 = null;
			} else {
				m2 = { value : m3, min : null, max : null};
			}
			wrapper.anchorX = 1;
			wrapper.layoutX = m2;
			this.layout.add(wrapper);
			this.mouseManager.add(btn,null,$bind(this,this.close));
		}
		this.emitter = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/anim-particle.png",false));
		this.emitter.smooth = true;
		this.emitter.pixelSnapping = false;
		this.emitter.addType("motionblur",haxepunk_utils__$BlendMode_BlendMode_$Impl_$.fromFlashBlendMode(0));
		this.emitter.setMotion("motionblur",-1,haxepunk_HXP.width / 2,0.5,2,haxepunk_HXP.width / 2,0.25,haxepunk_utils_Ease.quadInOut);
		this.emitter.setAlpha("motionblur",1,0);
		this.emitter.addType("coloredblur",haxepunk_utils__$BlendMode_BlendMode_$Impl_$.fromFlashBlendMode(0));
		this.emitter.setMotion("coloredblur",-1,haxepunk_HXP.width / 2,0.5,2,haxepunk_HXP.width / 2,0.25,haxepunk_utils_Ease.quadInOut);
		this.emitter.setAlpha("coloredblur",1,0);
		var this1 = 16777215;
		var toColor = this.bgColor;
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		a = ((toColor >>> 24 & 255) - 0) * 0.5 | 0;
		r = 255 + (((toColor >>> 16 & 255) - 255) * 0.5 | 0);
		g = 255 + (((toColor >>> 8 & 255) - 255) * 0.5 | 0);
		b = 255 + (((toColor & 255) - 255) * 0.5 | 0);
		var c = a << 24 | r << 16 | g << 8 | b;
		this.emitter.setColor("coloredblur",c,c);
		this.addGraphic(this.emitter).set_layer(-1);
		if(catalyst_GameData.get_current().fastMode) {
			this.postUpdate.callbacks.push($bind(this,this.close));
		}
	}
	,update: function() {
		catalyst_scenes_BaseScene.prototype.update.call(this);
		this.particleTime += haxepunk_HXP.elapsed * 20;
		while(this.particleTime >= 1) {
			--this.particleTime;
			this.emitter.emitInRectangle("motionblur",this.bg.get_x() - this.bg.get_width() / 2,this.bg.get_y(),this.bg.get_width() * 2,this.bg.get_height());
			this.emitter.emitInRectangle("coloredblur",this.bg.get_x() - this.bg.get_width() / 2,this.bg.get_y(),this.bg.get_width() * 2,this.bg.get_height());
		}
	}
	,close: function() {
		haxepunk_HXP.engine.popScene();
		if(this.onFinish != null) {
			this.onFinish();
		}
	}
	,__class__: catalyst_scenes_AnimationScene
});
var catalyst_scenes_PopupScene = function(paddingLeftRight,paddingTopBottom,closable,maintainLandscapeDimensions) {
	if(maintainLandscapeDimensions == null) {
		maintainLandscapeDimensions = false;
	}
	if(closable == null) {
		closable = true;
	}
	if(paddingTopBottom == null) {
		paddingTopBottom = 64;
	}
	if(paddingLeftRight == null) {
		paddingLeftRight = 64;
	}
	this._soundPlayed = false;
	this.playSound = true;
	this.closing = false;
	this.showPopups = true;
	this.fadeIn = 0;
	catalyst_scenes_BaseScene.call(this);
	this.paddingLeftRight = paddingLeftRight;
	this.paddingTopBottom = paddingTopBottom;
	this.closable = closable;
	this.maintainLandscapeDimensions = maintainLandscapeDimensions;
	this.bgColor = 12632256;
	this.bgAlpha = 0;
};
$hxClasses["catalyst.scenes.PopupScene"] = catalyst_scenes_PopupScene;
catalyst_scenes_PopupScene.__name__ = ["catalyst","scenes","PopupScene"];
catalyst_scenes_PopupScene.__super__ = catalyst_scenes_BaseScene;
catalyst_scenes_PopupScene.prototype = $extend(catalyst_scenes_BaseScene.prototype,{
	bg: null
	,fadeIn: null
	,showPopups: null
	,closing: null
	,playSound: null
	,_soundPlayed: null
	,paddingLeftRight: null
	,paddingTopBottom: null
	,closable: null
	,maintainLandscapeDimensions: null
	,begin: function() {
		catalyst_scenes_BaseScene.prototype.begin.call(this);
		this.layout.paddingTop = this.layout.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(this.paddingTopBottom), min : null, max : null};
		this.layout.paddingLeft = this.layout.paddingRight = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(this.paddingLeftRight), min : null, max : null};
		this.layout.set_y(-haxepunk_HXP.height);
		this.bg = new catalyst_entities_Panel(14737632,0.8);
		var stretcher = new haxepunk_layout_LayoutGroup(this.bg);
		var m = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		stretcher.layoutWidth = stretcher.layoutHeight = m == null ? null : { value : m, min : null, max : null};
		stretcher.add(this.bg);
		this.layout.add(stretcher);
		if(this.closable) {
			this.onInputPressed.resolve("back").callbacks.push($bind(this,this.requestClose));
			var btn = new catalyst_entities_CloseButton();
			var wrapper = new haxepunk_layout_LayoutGroup(btn);
			var m1;
			var m2 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
			if(m2 == null) {
				m1 = null;
			} else {
				m1 = { value : m2, min : null, max : null};
			}
			wrapper.anchorX = 1;
			wrapper.layoutX = m1;
			this.layout.add(wrapper);
			this.mouseManager.add(btn,null,$bind(this,this.requestClose));
			this.onInputPressed.resolve("back").callbacks.push($bind(this,this.close));
		}
		if(this.playSound && !this._soundPlayed) {
			catalyst_Sound.sfxQueue.push("panel");
			catalyst_Sound.volumeQueue.push(1);
		}
		this._soundPlayed = true;
	}
	,update: function() {
		if(this.closing) {
			this.fadeIn -= haxepunk_HXP.elapsed / 0.2 * (catalyst_GameData.get_current().fastMode ? 2 : 1);
			if(this.fadeIn <= 0) {
				this.closeNow();
				return;
			}
			this.bgAlpha = 0.5 * this.fadeIn;
			var t = 1 - this.fadeIn;
			this.layout.set_y(haxepunk_HXP.height * (t <= .5 ? t * t * 2 : 1 - --t * t * 2));
		} else if(this.fadeIn < 1) {
			this.fadeIn += haxepunk_HXP.elapsed / 0.2 * (catalyst_GameData.get_current().fastMode ? 2 : 1);
			if(this.fadeIn > 1) {
				this.fadeIn = 1;
			}
			this.bgAlpha = 0.5 * this.fadeIn;
			var t1 = this.fadeIn - 1;
			this.layout.set_y(haxepunk_HXP.height * (t1 <= .5 ? t1 * t1 * 2 : 1 - --t1 * t1 * 2));
		}
		if(this.showPopups) {
			catalyst_Client.showPopups();
		}
		catalyst_scenes_BaseScene.prototype.update.call(this);
	}
	,close: function() {
		this.closing = true;
		this.layout.set_collidable(false);
	}
	,closeNow: function() {
		haxepunk_HXP.engine.popScene();
	}
	,requestClose: function() {
		this.close();
	}
	,__class__: catalyst_scenes_PopupScene
});
var catalyst_scenes_MessageScene = function(message) {
	catalyst_scenes_PopupScene.call(this,256);
	this.message = message;
	this.showPopups = false;
};
$hxClasses["catalyst.scenes.MessageScene"] = catalyst_scenes_MessageScene;
catalyst_scenes_MessageScene.__name__ = ["catalyst","scenes","MessageScene"];
catalyst_scenes_MessageScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_MessageScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	label: null
	,labelWrapper: null
	,message: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		this.label = new catalyst_graphics_Label(this.message,false,1,16777215,haxepunk_HXP.width - 640);
		var e = new haxepunk_Entity(null,null,this.label);
		var _this = this.label;
		if(_this._dirty) {
			_this.parseText();
		}
		e.set_width(_this.textWidth);
		var _this1 = this.label;
		if(_this1._dirty) {
			_this1.parseText();
		}
		e.set_height(_this1.textHeight);
		this.labelWrapper = new haxepunk_layout_LayoutGroup(e);
		var _this2 = this.labelWrapper;
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		_this2.anchorX = 0.5;
		_this2.layoutX = m;
		var _this3 = this.labelWrapper;
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		_this3.anchorY = 0.5;
		_this3.layoutY = m2;
		this.layout.add(this.labelWrapper);
	}
	,__class__: catalyst_scenes_MessageScene
});
var catalyst_scenes_BattleResultScene = function(battle) {
	this.battle = battle;
	var txt;
	if(battle.won) {
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).battle.type;
		var reward = catalyst_GameData.formatNumber(catalyst__$BattleData_BattleData_$Impl_$.get_reward(this1) == -1 ? 500 * Math.pow(1.15,catalyst__$BattleData_BattleData_$Impl_$.ordered.indexOf(this1) + 1 - 1) | 0 : catalyst__$BattleData_BattleData_$Impl_$.get_reward(this1));
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		txt = "<center><sword-icon/><green>You won!</green>\n\nReward: <catnip-icon/><green>" + reward + "</green>\nMax stars: <max-stars/><blue>" + (Math.min(99,5 + _this2.battleLevel * 5 + _this2.prestige) | 0) + "</blue>\n\nCome back later for a tougher challenge.</center>";
	} else {
		txt = "<red>You lost...</red>\n\nHurt cats will need to rest to recover their HP.";
	}
	catalyst_scenes_MessageScene.call(this,txt);
};
$hxClasses["catalyst.scenes.BattleResultScene"] = catalyst_scenes_BattleResultScene;
catalyst_scenes_BattleResultScene.__name__ = ["catalyst","scenes","BattleResultScene"];
catalyst_scenes_BattleResultScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_BattleResultScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	battle: null
	,begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		if(this.battle.won) {
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
		}
	}
	,closeNow: function() {
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).finishBattle();
		catalyst_scenes_MessageScene.prototype.closeNow.call(this);
	}
	,__class__: catalyst_scenes_BattleResultScene
});
var catalyst_scenes_BlessingScene = function(cat) {
	catalyst_scenes_PopupScene.call(this,128,64);
	this.cat = cat;
};
$hxClasses["catalyst.scenes.BlessingScene"] = catalyst_scenes_BlessingScene;
catalyst_scenes_BlessingScene.__name__ = ["catalyst","scenes","BlessingScene"];
catalyst_scenes_BlessingScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_BlessingScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	cat: null
	,statLabel: null
	,instructions: null
	,instructionsEntity: null
	,btn: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var _this = this.bg;
		_this.face.set_color(_this.color = 13876319);
		var catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		catEntity.sp.setAnimation("sit");
		var wrapper = new haxepunk_layout_LayoutGroup(catEntity);
		var m = 40 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[40] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(40,"%");
		wrapper.layoutX = m == null ? null : { value : m, min : null, max : null};
		var m1 = 55 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[55] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(55,"%");
		wrapper.layoutY = m1 == null ? null : { value : m1, min : null, max : null};
		this.layout.add(wrapper);
		var _this1 = this.cat;
		var txt = "<center>" + ("<big><" + (_this1.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((_this1.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this1) : _this1.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this1.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this1) : _this1.assignedJob)) + "/><small>") + "</center>";
		var txt1 = "<right><blue>LV " + _this1.level + "/";
		var _this2 = _this1._maxLevel;
		var x;
		if(_this1.wild) {
			x = 0;
		} else {
			var _this3 = catalyst_GameData.get_current();
			x = _this3.labs.get(_this3.currentRegion).tech / 100;
		}
		var amt = _this1.hp / (_this1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"cha"));
		var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
		var txt2 = txt + (txt1 + (_this2 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(_this1.hp) | 0) + ("</" + c + ">/") + (_this1.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(_this1.stars)," ",3) + "</yellow>");
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(_this1.stats,stat))," ",3);
		}
		if(_this1.mutations > 0) {
			txt2 += "\n<dna-icon/> " + (_this1.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(_this1.mutations)," ",3) + (_this1.ownMutations == 0 ? "" : "</purple>");
		}
		this.statLabel = new catalyst_graphics_Label(txt2,true,2);
		var wrapper1 = new haxepunk_layout_LayoutGroup(new haxepunk_Entity(null,null,this.statLabel));
		var m2 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		wrapper1.layoutX = m2 == null ? null : { value : m2, min : null, max : null};
		var m3 = 10 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[10] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(10,"%");
		wrapper1.layoutY = m3 == null ? null : { value : m3, min : null, max : null};
		this.layout.add(wrapper1);
		this.btn = new catalyst_entities_TextButton("<blessing-icon/> Bless",5,this.mouseManager,$bind(this,this.bless));
		this.btn.color = 13151031;
		var buttonWrapper = new haxepunk_layout_LayoutGroup(this.btn);
		var m4;
		var m5 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		buttonWrapper.anchorY = 1;
		buttonWrapper.layoutY = m4;
		var m6;
		var m7 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		buttonWrapper.anchorX = 1;
		buttonWrapper.layoutX = m6;
		this.layout.add(buttonWrapper);
		this.instructions = new catalyst_graphics_Label("<center>Cats who have reached max level can be <blessing-icon/><blue>blessed</blue>. They will start over at <blue>level 1</blue>, but with a higher <blue>max level</blue>.",null,0,16777215,1);
		this.instructionsEntity = new haxepunk_Entity(null,null,this.instructions);
		var wrapper2 = new haxepunk_layout_LayoutGroup(this.instructionsEntity);
		var m8;
		var m9 = 15 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[15] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(15,"%");
		if(m9 == null) {
			m8 = null;
		} else {
			m8 = { value : m9, min : null, max : null};
		}
		wrapper2.anchorY = 0;
		wrapper2.layoutY = m8;
		var m10;
		var m11 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
		if(m11 == null) {
			m10 = null;
		} else {
			m10 = { value : m11, min : null, max : null};
		}
		wrapper2.anchorX = 1;
		wrapper2.layoutX = m10;
		var m12 = 40 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[40] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(40,"%");
		wrapper2.layoutWidth = m12 == null ? null : { value : m12, min : null, max : null};
		this.layout.add(wrapper2);
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		var tmp = this.statLabel;
		var _this = this.cat;
		var txt = "<center>" + ("<big><" + (_this.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((_this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this) : _this.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(_this.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(_this) : _this.assignedJob)) + "/><small>") + "</center>";
		var txt1 = "<right><blue>LV " + _this.level + "/";
		var _this1 = _this._maxLevel;
		var x;
		if(_this.wild) {
			x = 0;
		} else {
			var _this2 = catalyst_GameData.get_current();
			x = _this2.labs.get(_this2.currentRegion).tech / 100;
		}
		var amt = _this.hp / (_this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha"));
		var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
		var txt2 = txt + (txt1 + (_this1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(_this.hp) | 0) + ("</" + c + ">/") + (_this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(_this.stars)," ",3) + "</yellow>");
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(_this.stats,stat))," ",3);
		}
		if(_this.mutations > 0) {
			txt2 += "\n<dna-icon/> " + (_this.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(_this.mutations)," ",3) + (_this.ownMutations == 0 ? "" : "</purple>");
		}
		tmp.set_text(txt2);
		this.setButtonText();
		var _this3 = this.instructions;
		var v = this.instructionsEntity.get_width();
		if(v != _this3.width) {
			_this3._dirty = true;
		}
		_this3.width = v;
	}
	,setButtonText: function() {
		var _this = this.cat;
		var cost;
		var _this1 = _this.level;
		var _this2 = _this._maxLevel;
		var x;
		if(_this.wild) {
			x = 0;
		} else {
			var _this3 = catalyst_GameData.get_current();
			x = _this3.labs.get(_this3.currentRegion).tech / 100;
		}
		if(_this1 < (_this2 * (1 + x) | 0)) {
			cost = -1;
		} else {
			var _this4 = _this._maxLevel;
			var x1;
			if(_this.wild) {
				x1 = 0;
			} else {
				var _this5 = catalyst_GameData.get_current();
				x1 = _this5.labs.get(_this5.currentRegion).tech / 100;
			}
			var _this6 = _this._maxLevel;
			var x2;
			if(_this.wild) {
				x2 = 0;
			} else {
				var _this7 = catalyst_GameData.get_current();
				x2 = _this7.labs.get(_this7.currentRegion).tech / 100;
			}
			cost = (_this4 * (1 + x1) | 0) * (_this6 * (1 + x2) | 0);
		}
		if(cost > -1) {
			var _this8 = this.btn;
			var v = "Bless <blessing-icon/> " + cost;
			_this8.label.set_text(v);
			var _this9 = _this8.label;
			var value = _this8.get_width();
			var _this10 = _this8.label;
			if(_this10._dirty) {
				_this10.parseText();
			}
			_this9.x = (value - _this10.textWidth) / 2;
			var _this11 = _this8.label;
			var value1 = _this8.get_height();
			var _this12 = _this8.label;
			if(_this12._dirty) {
				_this12.parseText();
			}
			_this11.y = (value1 - _this12.textHeight) / 2 + 2;
			_this8.text = v;
		} else {
			var _this13 = this.btn;
			_this13.label.set_text("<blessing-icon/><red>Not yet eligible</red>");
			var _this14 = _this13.label;
			var value2 = _this13.get_width();
			var _this15 = _this13.label;
			if(_this15._dirty) {
				_this15.parseText();
			}
			_this14.x = (value2 - _this15.textWidth) / 2;
			var _this16 = _this13.label;
			var value3 = _this13.get_height();
			var _this17 = _this13.label;
			if(_this17._dirty) {
				_this17.parseText();
			}
			_this16.y = (value3 - _this17.textHeight) / 2 + 2;
			_this13.text = "<blessing-icon/><red>Not yet eligible</red>";
		}
		var tmp = this.btn;
		var tmp1;
		if(cost > -1) {
			var _this18 = catalyst_GameData.get_current();
			tmp1 = _this18.labs.get(_this18.currentRegion).piety >= cost;
		} else {
			tmp1 = false;
		}
		tmp.set_collidable(tmp1);
		var tmp2 = this.btn.get_collidable() ? 3375104 : 8421504;
		this.btn.color = tmp2;
	}
	,bless: function() {
		var _gthis = this;
		var _this = this.cat;
		var cost;
		var _this1 = _this.level;
		var _this2 = _this._maxLevel;
		var x;
		if(_this.wild) {
			x = 0;
		} else {
			var _this3 = catalyst_GameData.get_current();
			x = _this3.labs.get(_this3.currentRegion).tech / 100;
		}
		if(_this1 < (_this2 * (1 + x) | 0)) {
			cost = -1;
		} else {
			var _this4 = _this._maxLevel;
			var x1;
			if(_this.wild) {
				x1 = 0;
			} else {
				var _this5 = catalyst_GameData.get_current();
				x1 = _this5.labs.get(_this5.currentRegion).tech / 100;
			}
			var _this6 = _this._maxLevel;
			var x2;
			if(_this.wild) {
				x2 = 0;
			} else {
				var _this7 = catalyst_GameData.get_current();
				x2 = _this7.labs.get(_this7.currentRegion).tech / 100;
			}
			cost = (_this4 * (1 + x1) | 0) * (_this6 * (1 + x2) | 0);
		}
		var tmp;
		if(cost > -1) {
			var _this8 = catalyst_GameData.get_current();
			tmp = _this8.labs.get(_this8.currentRegion).piety >= cost;
		} else {
			tmp = false;
		}
		if(tmp) {
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_BlessScene(this.cat,function() {
				_gthis.closeNow();
				var cat = _gthis.cat;
				var _this9 = catalyst_GameData.get_current();
				_this9.labs.get(_this9.currentRegion).bless(cat);
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(_gthis.cat));
			}));
		}
	}
	,__class__: catalyst_scenes_BlessingScene
});
var catalyst_scenes_BreedDiscoveryScene = function(cat,breed) {
	this.cat = cat;
	catalyst_scenes_MessageScene.call(this,"<center>You discovered a rare breed!\n\n<star/> <red>" + catalyst__$CatBreed_CatBreed_$Impl_$.get_name(breed) + "</red> <star/>");
};
$hxClasses["catalyst.scenes.BreedDiscoveryScene"] = catalyst_scenes_BreedDiscoveryScene;
catalyst_scenes_BreedDiscoveryScene.__name__ = ["catalyst","scenes","BreedDiscoveryScene"];
catalyst_scenes_BreedDiscoveryScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_BreedDiscoveryScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	cat: null
	,begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		var catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		catEntity.sp.setAnimation("sit");
		var wrapper = new haxepunk_layout_LayoutGroup(catEntity);
		var m = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		wrapper.layoutX = m == null ? null : { value : m, min : null, max : null};
		var m1 = 35 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[35] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(35,"%");
		wrapper.layoutY = m1 == null ? null : { value : m1, min : null, max : null};
		this.layout.add(wrapper);
		var _this = this.labelWrapper;
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		_this.anchorY = 0;
		_this.layoutY = m2;
	}
	,__class__: catalyst_scenes_BreedDiscoveryScene
});
var catalyst_scenes_BreedScene = function(cats) {
	catalyst_scenes_PopupScene.call(this,128,64);
	this.cats = cats;
};
$hxClasses["catalyst.scenes.BreedScene"] = catalyst_scenes_BreedScene;
catalyst_scenes_BreedScene.__name__ = ["catalyst","scenes","BreedScene"];
catalyst_scenes_BreedScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_BreedScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	cats: null
	,statLabels: null
	,breedButton: null
	,breedCost: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		this.statLabels = [];
		var lv = Math.round(Math.pow(this.cats[0].stars * this.cats[1].stars,0.5)) | 0;
		var _this = catalyst_GameData.get_current();
		this.breedCost = (50 * Math.pow(1.065,Math.max(lv - _this.labs.get(_this.currentRegion).prestige,1) - 1) | 0) * 1.5 | 0;
		var _g1 = 0;
		var _g = this.cats.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cat = this.cats[i];
			var wrapper = new haxepunk_layout_LayoutGroup(new catalyst_entities_StaticCatEntity(cat));
			var m;
			var m1 = 40 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[40] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(40,"%");
			if(m1 == null) {
				m = null;
			} else {
				m = { value : m1, min : null, max : null};
			}
			wrapper.anchorX = 0.5;
			wrapper.layoutX = m;
			var v = 40 + 40 * i;
			var m2 = v % 1 == 0 && v >= 0 && v <= 100 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[v | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(v,"%");
			wrapper.layoutY = m2 == null ? null : { value : m2, min : null, max : null};
			this.layout.add(wrapper);
			var txt = "<center><big><" + (cat.sex ? "male" : "female") + "-icon/>G" + cat.generation + "</big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/></center>" + "<right><blue>" + cat.level + "<small>/";
			var cat1 = cat._maxLevel;
			var x;
			if(cat.wild) {
				x = 0;
			} else {
				var _this1 = catalyst_GameData.get_current();
				x = _this1.labs.get(_this1.currentRegion).tech / 100;
			}
			var txt1 = txt + (cat1 * (1 + x) | 0) + "</small></blue></right>" + "<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>\n";
			var _g2 = 0;
			var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g2 < _g11.length) {
				var stat = _g11[_g2];
				++_g2;
				txt1 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			}
			if(cat.mutations > 0) {
				txt1 += "\n<dna-icon/> " + StringTools.lpad(Std.string(cat.mutations)," ",3);
			}
			var statLabel = new catalyst_graphics_Label(txt1,true,1);
			var wrapper1 = new haxepunk_layout_LayoutGroup(new haxepunk_Entity(null,null,statLabel));
			var v1 = 5 + 35 * i;
			var m3 = v1 % 1 == 0 && v1 >= 0 && v1 <= 100 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[v1 | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(v1,"%");
			wrapper1.layoutX = m3 == null ? null : { value : m3, min : null, max : null};
			var m4 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
			wrapper1.layoutY = m4 == null ? null : { value : m4, min : null, max : null};
			this.layout.add(wrapper1);
			this.statLabels.push(statLabel);
		}
		var breedLabel = new catalyst_graphics_Label("<sine><heart-icon/><rainbow>Kitten Dance</rainbow></sine>");
		var entity = new haxepunk_Entity(null,null,breedLabel);
		if(breedLabel._dirty) {
			breedLabel.parseText();
		}
		entity.set_width(breedLabel.textWidth);
		if(breedLabel._dirty) {
			breedLabel.parseText();
		}
		entity.set_height(breedLabel.textHeight * 1.5 | 0);
		var wrapper2 = new haxepunk_layout_LayoutGroup(entity);
		var m5;
		var m6 = 25 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[25] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(25,"%");
		if(m6 == null) {
			m5 = null;
		} else {
			m5 = { value : m6, min : null, max : null};
		}
		wrapper2.anchorY = 0;
		wrapper2.layoutY = m5;
		var m7;
		var m8 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m8 == null) {
			m7 = null;
		} else {
			m7 = { value : m8, min : null, max : null};
		}
		wrapper2.anchorX = 1;
		wrapper2.layoutX = m7;
		this.layout.add(wrapper2);
		var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
		buttons.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		this.breedButton = new catalyst_entities_TextButton("<cat-icon/>+1 <catnip-icon/>" + this.breedCost,null,this.mouseManager,$bind(this,this.breedCats));
		buttons.add(this.breedButton);
		buttons.add(new catalyst_entities_TextButton("Cancel",null,this.mouseManager,$bind(this,this.close)));
		var m9;
		var m10 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m10 == null) {
			m9 = null;
		} else {
			m9 = { value : m10, min : null, max : null};
		}
		buttons.anchorY = 1;
		buttons.layoutY = m9;
		var m11;
		var m12 = 97.5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[97.5 | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(97.5,"%");
		if(m12 == null) {
			m11 = null;
		} else {
			m11 = { value : m12, min : null, max : null};
		}
		buttons.anchorX = 1;
		buttons.layoutX = m11;
		this.layout.add(buttons);
	}
	,update: function() {
		var _g1 = 0;
		var _g = this.cats.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cat = this.cats[i];
			var tmp = this.statLabels[i];
			var txt = "<center><big><" + (cat.sex ? "male" : "female") + "-icon/>G" + cat.generation + "</big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/></center>" + "<right><blue>" + cat.level + "<small>/";
			var cat1 = cat._maxLevel;
			var x;
			if(cat.wild) {
				x = 0;
			} else {
				var _this = catalyst_GameData.get_current();
				x = _this.labs.get(_this.currentRegion).tech / 100;
			}
			var txt1 = txt + (cat1 * (1 + x) | 0) + "</small></blue></right>" + "<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>\n";
			var _g2 = 0;
			var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g2 < _g11.length) {
				var stat = _g11[_g2];
				++_g2;
				txt1 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			}
			if(cat.mutations > 0) {
				txt1 += "\n<dna-icon/> " + StringTools.lpad(Std.string(cat.mutations)," ",3);
			}
			tmp.set_text(txt1);
		}
		var _this1 = catalyst_GameData.get_current();
		var canBreed = _this1.labs.get(_this1.currentRegion).catnip >= this.breedCost;
		this.breedButton.set_collidable(canBreed);
		this.breedButton.color = canBreed ? 3375104 : 8421504;
		catalyst_scenes_PopupScene.prototype.update.call(this);
	}
	,breedCats: function() {
		var _gthis = this;
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).catnip >= this.breedCost) {
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			var _this1 = catalyst_GameData.get_current();
			var v = _this1.labs.get(_this1.currentRegion).catnip - this.breedCost;
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).catnip = v;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion);
			var litterSize = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this4.upgrades,"litter_size",_this4.bonuses);
			var _g = [];
			var _g2 = 0;
			while(_g2 < litterSize) {
				++_g2;
				_g.push(catalyst_Cat.breed(this.cats[0],this.cats[1]));
			}
			var children = _g;
			this.closeNow();
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_KittenDanceScene(this.cats[0],this.cats[1],function() {
				catalyst_GameData.get_current().checkTutorial("new_litter");
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatScene(children,"<cat-icon/> Adopt",function(cat) {
					var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
					var txt1 = "<right><blue>LV " + cat.level + "/";
					var cat1 = cat._maxLevel;
					var x;
					if(cat.wild) {
						x = 0;
					} else {
						var _this5 = catalyst_GameData.get_current();
						x = _this5.labs.get(_this5.currentRegion).tech / 100;
					}
					var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
					var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
					var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
					var _g1 = 0;
					var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
					while(_g1 < _g11.length) {
						var stat = _g11[_g1];
						++_g1;
						txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
					}
					if(cat.mutations > 0) {
						txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
					}
					return txt2;
				},function(child) {
					var kittenSleeping = _gthis.cats[0].room == "nap_room" && _gthis.cats[1].room == "nap_room";
					var _this6 = catalyst_GameData.get_current();
					_this6.labs.get(_this6.currentRegion).cats.remove(_gthis.cats[0]);
					var _this7 = catalyst_GameData.get_current();
					_this7.labs.get(_this7.currentRegion).cats.remove(_gthis.cats[1]);
					child.adopt();
					var _this8 = catalyst_GameData.get_current();
					_this8.labs.get(_this8.currentRegion).cats.move(child,"living_room");
					var _this9 = catalyst_GameData.get_current();
					_this9.labs.get(_this9.currentRegion).checkBreed(child);
					if(kittenSleeping) {
						var _this10 = catalyst_GameData.get_current();
						_this10.labs.get(_this10.currentRegion).cats.move(child,"nap_room");
					}
					catalyst_Sound.sfxQueue.push("getstuff");
					catalyst_Sound.volumeQueue.push(1);
					haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(child));
				}));
			}));
		}
	}
	,__class__: catalyst_scenes_BreedScene
});
var catalyst_scenes_BrewScene = function() {
	this.panels = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this);
};
$hxClasses["catalyst.scenes.BrewScene"] = catalyst_scenes_BrewScene;
catalyst_scenes_BrewScene.__name__ = ["catalyst","scenes","BrewScene"];
catalyst_scenes_BrewScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_BrewScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	selected: null
	,set_selected: function(v) {
		var _this = this.panels;
		var panel = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(panel.hasNext()) {
			var panel1 = panel.next();
			var v1 = panel1.ingredientType == v;
			panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
			panel1.selected = v1;
		}
		this.selectedLabel._visible = v != null;
		if(this.selectedLabel._visible && v != this.selected) {
			this.selected = v;
			var txt = "<blue>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_name(v) + "</blue>";
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				var mod = catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(v)].exists(stat) ? catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(v)].get(stat) : 0;
				if(mod != 0) {
					txt += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + (mod < 0 ? "<red>" : "<green>+") + mod + (mod < 0 ? "</red>" : "</green>");
				}
			}
			if(catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(v) > 0) {
				txt += "\n<mutagen-icon/> <purple>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(v) + "%</purple>";
			}
			this.selectedLabel.set_text(txt);
			if(this.selected != v && catalyst_scenes_BrewScene.lastSelected != v) {
				catalyst_Sound.sfxQueue.push("blip");
				catalyst_Sound.volumeQueue.push(1);
			}
			this.updateAddIngredientButton();
		}
		var _this1 = this.addIngredientButton;
		_this1.set_active(_this1.set_visible(_this1.set_collidable(this.selectedLabel._visible)));
		return catalyst_scenes_BrewScene.lastSelected = v;
	}
	,panels: null
	,selectedLabel: null
	,currentLabel: null
	,addIngredientButton: null
	,brewButton: null
	,cauldron: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(48), min : null, max : null};
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(4), min : null, max : null};
		var scrollList = new catalyst_entities_ScrollList(vbox,this.mouseManager);
		var mouseManager = scrollList.mouseManager;
		var n = 0;
		var hbox = null;
		var _g = 0;
		var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var ingredientType = _g1[_g];
			++_g;
			var qty;
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion).ingredients;
			if(__map_reserved[ingredientType] != null ? _this1.existsReserved(ingredientType) : _this1.h.hasOwnProperty(ingredientType)) {
				var _this2 = catalyst_GameData.get_current();
				var _this3 = _this2.labs.get(_this2.currentRegion).ingredients;
				if(__map_reserved[ingredientType] != null) {
					qty = _this3.getReserved(ingredientType);
				} else {
					qty = _this3.h[ingredientType];
				}
			} else {
				qty = 0;
			}
			if(qty > 0) {
				if(hbox == null) {
					var hbox1 = new haxepunk_layout_LayoutGroup(null,"horizontal");
					hbox1.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(4), min : null, max : null};
					hbox = hbox1;
				}
				var panel = new catalyst_entities_IngredientPanel(ingredientType);
				var _this4 = this.panels;
				if(__map_reserved[ingredientType] != null) {
					_this4.setReserved(ingredientType,panel);
				} else {
					_this4.h[ingredientType] = panel;
				}
				mouseManager.add(panel,null,(function(v,f) {
					return function() {
						return f[0](v[0]);
					};
				})([ingredientType],[$bind(this,this.set_selected)]));
				hbox.add(panel);
				if(++n % 2 == 0) {
					vbox.add(hbox);
					hbox = null;
				}
			}
		}
		if(hbox != null) {
			vbox.add(hbox);
		}
		var l = cols.addLayout(scrollList);
		l.layoutWidth = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(400.), min : null, max : null};
		var m = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		l.layoutHeight = m == null ? null : { value : m, min : null, max : null};
		var descBox = new haxepunk_layout_LayoutGroup(null,null,35 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[35] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(35,"%"));
		this.selectedLabel = new catalyst_graphics_Label("",null,2);
		descBox.add(new haxepunk_Entity(0,0,this.selectedLabel));
		cols.add(descBox);
		var currentBox = new haxepunk_layout_LayoutGroup(null,"vertical");
		this.currentLabel = new catalyst_graphics_Label("abc",null,2);
		var labelEntity = new haxepunk_Entity(0,0,this.currentLabel);
		labelEntity.set_height(304);
		currentBox.add(labelEntity);
		cols.add(currentBox);
		var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
		var m1;
		var m2 = 97.5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[97.5 | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(97.5,"%");
		if(m2 == null) {
			m1 = null;
		} else {
			m1 = { value : m2, min : null, max : null};
		}
		buttons.anchorX = 1;
		buttons.layoutX = m1;
		var m3;
		var m4 = 65 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[65] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(65,"%");
		if(m4 == null) {
			m3 = null;
		} else {
			m3 = { value : m4, min : null, max : null};
		}
		buttons.anchorY = 0.5;
		buttons.layoutY = m3;
		this.addIngredientButton = new catalyst_entities_TextButton("Add",null,this.mouseManager,$bind(this,this.addIngredient));
		buttons.add(this.addIngredientButton);
		this.brewButton = new catalyst_entities_TextButton("<potion-icon/>Distill",null,this.mouseManager,$bind(this,this.brewPotion));
		buttons.add(this.brewButton);
		this.layout.add(buttons);
		var wrapper = new haxepunk_layout_LayoutGroup(new catalyst_entities_CatnipCounter());
		var m5;
		var m6 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		if(m6 == null) {
			m5 = null;
		} else {
			m5 = { value : m6, min : null, max : null};
		}
		wrapper.anchorY = 1;
		wrapper.anchorX = 1;
		wrapper.layoutX = wrapper.layoutY = m5;
		this.layout.add(wrapper);
		this.layout.add(cols);
		this.cauldron = new catalyst_entities_Cauldron();
		var wrapper1 = new haxepunk_layout_LayoutGroup(this.cauldron);
		var m7;
		var m8 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m8 == null) {
			m7 = null;
		} else {
			m7 = { value : m8, min : null, max : null};
		}
		wrapper1.anchorX = 0.5;
		wrapper1.layoutX = m7;
		var m9;
		var m10 = 80 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[80] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(80,"%");
		if(m10 == null) {
			m9 = null;
		} else {
			m9 = { value : m10, min : null, max : null};
		}
		wrapper1.anchorY = 1;
		wrapper1.layoutY = m9;
		this.layout.add(wrapper1);
		var v1 = catalyst_scenes_BrewScene.lastSelected;
		var panel1 = this.panels.iterator();
		while(panel1.hasNext()) {
			var panel2 = panel1.next();
			var v2 = panel2.ingredientType == v1;
			panel2.face.set_color(v2 ? panel2.selectedColor : panel2.baseColor);
			panel2.selected = v2;
		}
		this.selectedLabel._visible = v1 != null;
		if(this.selectedLabel._visible && v1 != this.selected) {
			this.selected = v1;
			var txt = "<blue>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_name(v1) + "</blue>";
			var _g2 = 0;
			var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g2 < _g11.length) {
				var stat = _g11[_g2];
				++_g2;
				var mod = catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(v1)].exists(stat) ? catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(v1)].get(stat) : 0;
				if(mod != 0) {
					txt += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + (mod < 0 ? "<red>" : "<green>+") + mod + (mod < 0 ? "</red>" : "</green>");
				}
			}
			if(catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(v1) > 0) {
				txt += "\n<mutagen-icon/> <purple>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(v1) + "%</purple>";
			}
			this.selectedLabel.set_text(txt);
			if(this.selected != v1 && catalyst_scenes_BrewScene.lastSelected != v1) {
				catalyst_Sound.sfxQueue.push("blip");
				catalyst_Sound.volumeQueue.push(1);
			}
			this.updateAddIngredientButton();
		}
		var _this5 = this.addIngredientButton;
		_this5.set_active(_this5.set_visible(_this5.set_collidable(this.selectedLabel._visible)));
		catalyst_scenes_BrewScene.lastSelected = v1;
		this.updateAddIngredientButton();
		this.updatePotionLabel();
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var potion = _this.labs.get(_this.currentRegion).potion;
		var canAdd;
		var canAdd1;
		var canAdd2;
		var canAdd3;
		if(this.selected != null) {
			var _this1 = catalyst_GameData.get_current();
			var this1 = _this1.labs.get(_this1.currentRegion).ingredients;
			var key = this.selected;
			var _this2 = this1;
			if(__map_reserved[key] != null) {
				canAdd3 = _this2.existsReserved(key);
			} else {
				canAdd3 = _this2.h.hasOwnProperty(key);
			}
		} else {
			canAdd3 = false;
		}
		if(canAdd3) {
			var _this3 = catalyst_GameData.get_current();
			var this2 = _this3.labs.get(_this3.currentRegion).ingredients;
			var key1 = this.selected;
			var _this4 = this2;
			canAdd2 = (__map_reserved[key1] != null ? _this4.getReserved(key1) : _this4.h[key1]) > 0;
		} else {
			canAdd2 = false;
		}
		if(canAdd2) {
			var potion1 = potion.ingredients.length;
			var _this5 = catalyst_GameData.get_current();
			var _this6 = _this5.labs.get(_this5.currentRegion);
			canAdd1 = potion1 < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this6.upgrades,"max_ingredients",_this6.bonuses);
		} else {
			canAdd1 = false;
		}
		if(canAdd1) {
			var _this7 = catalyst_GameData.get_current();
			canAdd = _this7.labs.get(_this7.currentRegion).catnip >= (100 * Math.pow(1.75,potion.ingredients.length) | 0);
		} else {
			canAdd = false;
		}
		this.addIngredientButton.color = canAdd ? 3375104 : 8421504;
		var canBrew;
		if(potion.ingredients.length > 0) {
			var _this8 = catalyst_GameData.get_current();
			canBrew = _this8.labs.get(_this8.currentRegion).potions.length < 12;
		} else {
			canBrew = false;
		}
		this.brewButton.color = canBrew ? 3375104 : 8421504;
		if(this.fadeIn >= 1) {
			catalyst_GameData.get_current().checkTutorial("brew");
		}
	}
	,updateAddIngredientButton: function() {
		var _this = this.addIngredientButton;
		_this.set_active(_this.set_visible(_this.set_collidable(this.selected != null)));
		var _this1 = this.addIngredientButton;
		if(_this1.get_active() && _this1.get_visible() && _this1.get_collidable()) {
			var _this2 = catalyst_GameData.get_current();
			var potion = _this2.labs.get(_this2.currentRegion).potion.ingredients.length;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion);
			if(potion < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this4.upgrades,"max_ingredients",_this4.bonuses)) {
				var _this5 = this.addIngredientButton;
				var v = "<" + this.selected + "/>+1 <catnip-icon/>";
				var _this6 = catalyst_GameData.get_current();
				var v1 = v + (100 * Math.pow(1.75,_this6.labs.get(_this6.currentRegion).potion.ingredients.length) | 0);
				_this5.label.set_text(v1);
				var _this7 = _this5.label;
				var value = _this5.get_width();
				var _this8 = _this5.label;
				if(_this8._dirty) {
					_this8.parseText();
				}
				_this7.x = (value - _this8.textWidth) / 2;
				var _this9 = _this5.label;
				var value1 = _this5.get_height();
				var _this10 = _this5.label;
				if(_this10._dirty) {
					_this10.parseText();
				}
				_this9.y = (value1 - _this10.textHeight) / 2 + 2;
				_this5.text = v1;
			} else {
				var _this11 = this.addIngredientButton;
				var v2 = "<" + this.selected + "/> MAX!";
				_this11.label.set_text(v2);
				var _this12 = _this11.label;
				var value2 = _this11.get_width();
				var _this13 = _this11.label;
				if(_this13._dirty) {
					_this13.parseText();
				}
				_this12.x = (value2 - _this13.textWidth) / 2;
				var _this14 = _this11.label;
				var value3 = _this11.get_height();
				var _this15 = _this11.label;
				if(_this15._dirty) {
					_this15.parseText();
				}
				_this14.y = (value3 - _this15.textHeight) / 2 + 2;
				_this11.text = v2;
			}
		}
	}
	,updatePotionLabel: function() {
		var _this = catalyst_GameData.get_current();
		var potion = _this.labs.get(_this.currentRegion).potion;
		var txt = "<blue>Current</blue>\n";
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			var val = catalyst__$Stats_Stats_$Impl_$.get(potion.stats,stat);
			if(val != 0) {
				txt += "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/>" + (val < 0 ? "<red>" : "<green>+") + val + (val < 0 ? "</red>" : "</green>");
			}
		}
		if(potion.mutagen > 0) {
			txt += "\n<mutagen-icon/><purple>" + potion.mutagen + "%</purple>";
		}
		txt += "\n";
		var _g2 = 0;
		var _g11 = potion.ingredients;
		while(_g2 < _g11.length) {
			var ingredient = _g11[_g2];
			++_g2;
			txt += "<" + ingredient + "/>";
		}
		this.currentLabel.set_text(txt);
	}
	,addIngredient: function() {
		if(this.selected != null) {
			var _this = catalyst_GameData.get_current();
			var potion = _this.labs.get(_this.currentRegion).potion;
			var tmp;
			var potion1 = potion.ingredients.length;
			var _this1 = catalyst_GameData.get_current();
			var _this2 = _this1.labs.get(_this1.currentRegion);
			if(potion1 < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_ingredients",_this2.bonuses)) {
				var _this3 = catalyst_GameData.get_current();
				tmp = _this3.labs.get(_this3.currentRegion).catnip >= (100 * Math.pow(1.75,potion.ingredients.length) | 0);
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this4 = catalyst_GameData.get_current();
				var v = _this4.labs.get(_this4.currentRegion).catnip - (100 * Math.pow(1.75,potion.ingredients.length) | 0);
				var _this5 = catalyst_GameData.get_current();
				_this5.labs.get(_this5.currentRegion).catnip = v;
				potion.addIngredient(this.selected);
				var type = this.selected;
				var _this6 = catalyst_GameData.get_current();
				_this6.labs.get(_this6.currentRegion).removeIngredient(type);
				this.updatePotionLabel();
				this.updateAddIngredientButton();
				this.cauldron.poof();
			}
			var tmp1;
			var _this7 = catalyst_GameData.get_current();
			var this1 = _this7.labs.get(_this7.currentRegion).ingredients;
			var key = this.selected;
			var _this8 = this1;
			if(!(!(__map_reserved[key] != null ? _this8.existsReserved(key) : _this8.h.hasOwnProperty(key)))) {
				var _this9 = catalyst_GameData.get_current();
				var this2 = _this9.labs.get(_this9.currentRegion).ingredients;
				var key1 = this.selected;
				var _this10 = this2;
				if(__map_reserved[key1] != null ? _this10.existsReserved(key1) : _this10.h.hasOwnProperty(key1)) {
					var _this11 = catalyst_GameData.get_current();
					var this3 = _this11.labs.get(_this11.currentRegion).ingredients;
					var key2 = this.selected;
					var _this12 = this3;
					tmp1 = (__map_reserved[key2] != null ? _this12.getReserved(key2) : _this12.h[key2]) == 0;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				var key3 = this.selected;
				var _this13 = this.panels;
				this.remove(__map_reserved[key3] != null ? _this13.getReserved(key3) : _this13.h[key3]);
				this.panels.remove(this.selected);
				var panel = this.panels.iterator();
				while(panel.hasNext()) {
					var panel1 = panel.next();
					var v1 = panel1.ingredientType == null;
					panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
					panel1.selected = v1;
				}
				this.selectedLabel._visible = false;
				if(this.selectedLabel._visible && null != this.selected) {
					this.selected = null;
					var txt = "<blue>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_name(null) + "</blue>";
					var _g = 0;
					var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
					while(_g < _g1.length) {
						var stat = _g1[_g];
						++_g;
						var mod = catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(null)].exists(stat) ? catalyst__$IngredientType_IngredientType_$Impl_$.__stats[catalyst__$IngredientType_IngredientType_$Impl_$.get___dataIndex(null)].get(stat) : 0;
						if(mod != 0) {
							txt += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + (mod < 0 ? "<red>" : "<green>+") + mod + (mod < 0 ? "</red>" : "</green>");
						}
					}
					if(catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(null) > 0) {
						txt += "\n<mutagen-icon/> <purple>" + catalyst__$IngredientType_IngredientType_$Impl_$.get_mutagen(null) + "%</purple>";
					}
					this.selectedLabel.set_text(txt);
					if(this.selected != null && catalyst_scenes_BrewScene.lastSelected != null) {
						catalyst_Sound.sfxQueue.push("blip");
						catalyst_Sound.volumeQueue.push(1);
					}
					this.updateAddIngredientButton();
				}
				var _this14 = this.addIngredientButton;
				_this14.set_active(_this14.set_visible(_this14.set_collidable(this.selectedLabel._visible)));
				catalyst_scenes_BrewScene.lastSelected = null;
			}
		}
	}
	,brewPotion: function() {
		var _this = catalyst_GameData.get_current();
		var potion = _this.labs.get(_this.currentRegion).potion;
		if(potion.ingredients.length > 0) {
			var _this1 = catalyst_GameData.get_current();
			_this1.labs.get(_this1.currentRegion).potions.push(potion);
			var v = new catalyst_Potion();
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).potion = v;
			this.closeNow();
			catalyst_scenes_PotionInventoryScene.lastSelected = potion;
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_DistillScene(potion,function() {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_PotionInventoryScene());
			}));
			catalyst_GameData.get_current().save();
		}
	}
	,__class__: catalyst_scenes_BrewScene
	,__properties__: $extend(catalyst_scenes_PopupScene.prototype.__properties__,{set_selected:"set_selected"})
});
var catalyst_scenes_IContextHandlingScene = function() { };
$hxClasses["catalyst.scenes.IContextHandlingScene"] = catalyst_scenes_IContextHandlingScene;
catalyst_scenes_IContextHandlingScene.__name__ = ["catalyst","scenes","IContextHandlingScene"];
var catalyst_scenes_GameScene = function(room) {
	this.onCatClick = null;
	this.canClickCats = true;
	this.canScruffCats = true;
	this.roomTitleTime = 1;
	this.fadeTime = 1;
	this.catList = [];
	this.catEntities = new haxe_ds_ObjectMap();
	this.clickY = 0;
	this.clickX = 0;
	this.clickTime = 0;
	catalyst_scenes_BaseScene.call(this);
	this.room = room;
};
$hxClasses["catalyst.scenes.GameScene"] = catalyst_scenes_GameScene;
catalyst_scenes_GameScene.__name__ = ["catalyst","scenes","GameScene"];
catalyst_scenes_GameScene.__interfaces__ = [catalyst_scenes_IContextHandlingScene,catalyst_IHUD];
catalyst_scenes_GameScene.__super__ = catalyst_scenes_BaseScene;
catalyst_scenes_GameScene.prototype = $extend(catalyst_scenes_BaseScene.prototype,{
	room: null
	,hud: null
	,backdrop: null
	,clicked: null
	,scruffed: null
	,highlighted: null
	,clickTime: null
	,clickX: null
	,clickY: null
	,roomTitle: null
	,saveIndicator: null
	,catEntities: null
	,catList: null
	,fadeout: null
	,fadeTime: null
	,roomTitleTime: null
	,battleEntity: null
	,catShowEntity: null
	,fishingCat1: null
	,fishingCat2: null
	,treadmillCat: null
	,canScruffCats: null
	,canClickCats: null
	,onCatClick: null
	,begin: function() {
		var _gthis = this;
		catalyst_scenes_BaseScene.prototype.begin.call(this);
		this.addBackdrop();
		switch(this.room) {
		case "breeding_room":
			var x = haxepunk_HXP.width * 0.1;
			var y = haxepunk_HXP.height * 0.5;
			var c = new catalyst_entities_LavaLamp();
			c.set_localX(x);
			c.set_localY(y);
			_gthis.add(c);
			var x1 = haxepunk_HXP.width * 0.9;
			var y1 = haxepunk_HXP.height * 0.435;
			var c1 = new catalyst_entities_LavaLamp();
			c1.set_localX(x1);
			c1.set_localY(y1);
			_gthis.add(c1);
			break;
		case "cryo_lab":
			var c2 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c2.sp.shader = catalyst_Client._noiseShader;
			c2.set_localX(360);
			c2.set_localY(450);
			_gthis.add(c2);
			var c3 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c3.sp.shader = catalyst_Client._noiseShader;
			c3.set_localX(1200);
			c3.set_localY(450);
			_gthis.add(c3);
			var c4 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c4.sp.shader = catalyst_Client._noiseShader;
			c4.set_localX(1650);
			c4.set_localY(450);
			_gthis.add(c4);
			var c5 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c5.sp.shader = catalyst_Client._noiseShader;
			c5.set_localX(540);
			c5.set_localY(550);
			_gthis.add(c5);
			var c6 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c6.sp.shader = catalyst_Client._noiseShader;
			c6.set_localX(1080);
			c6.set_localY(550);
			_gthis.add(c6);
			var c7 = new catalyst_entities_CryoMachine();
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			c7.sp.shader = catalyst_Client._noiseShader;
			c7.set_localX(1530);
			c7.set_localY(550);
			_gthis.add(c7);
			break;
		case "fishing_hole":
			var pond = new haxepunk_graphics_Image(haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(new haxepunk_graphics_atlas_AtlasData(this.assetCache.getTexture("assets/graphics/fish-pond.png")))));
			pond.originX = pond.originY = pond.get_width() / 2;
			pond.smooth = true;
			pond.x = haxepunk_HXP.width * 0.35;
			pond.y = haxepunk_HXP.height * 0.6;
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			pond.shader = catalyst_Client._noiseShader;
			var tmp = this.addGraphic(pond);
			var y2 = pond.y - pond.get_height() / 2;
			tmp.set_layer((haxepunk_HXP.height - y2) / 8 | 0);
			break;
		case "plant_lab":
			this.add(new catalyst_entities_CatnipPlants());
			this.add(new catalyst_entities_CatnipSacks());
			break;
		case "potion_lab":
			var cauldron = new catalyst_entities_Cauldron(true);
			if(catalyst_Client._noiseShader == null) {
				catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
			}
			cauldron.sp.shader = catalyst_Client._noiseShader;
			cauldron.set_localX(haxepunk_HXP.width / 2);
			cauldron.set_localY(haxepunk_HXP.height * 0.65);
			this.add(cauldron);
			break;
		case "temple":
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion);
			if(_this1.prestige < catalyst_Lab.MAX_PRESTIGE && _this1.piety >= (7777 * Math.pow(1.5,_this1.prestige) | 0)) {
				var eyes = new catalyst_entities_CreepyEyes();
				eyes.set_x(haxepunk_HXP.width / 2);
				eyes.set_y(192);
				this.add(eyes);
			}
			break;
		default:
		}
		this.hud = new catalyst_entities_HUD(this.mouseManager,this);
		this.hud.set_layer((haxepunk_HXP.height - (haxepunk_HXP.height + 1)) / 8 | 0);
		this.layout.add(this.hud);
		this.mouseManager.addDefault($bind(this,this.click),$bind(this,this.unclick),null,$bind(this,this.unclick));
		this.bgAlpha = 0;
		this.postUpdate.callbacks.push($bind(this,this.updateAllCats));
		this.roomTitle = new catalyst_graphics_Label("<white><big-img><" + catalyst__$Room_Room_$Impl_$.get_icon(this.room) + "></big-img></white> " + catalyst__$Room_Room_$Impl_$.get_name(this.room),null,4,catalyst__$Room_Room_$Impl_$.get_color(this.room));
		if(catalyst_Client._noiseShader == null) {
			catalyst_Client._noiseShader = new catalyst_shaders_NoiseShader();
		}
		this.roomTitle.shader = catalyst_Client._noiseShader;
		var _this2 = this.roomTitle;
		var value = haxepunk_HXP.width;
		var _this3 = this.roomTitle;
		if(_this3._dirty) {
			_this3.parseText();
		}
		_this2.x = (value - _this3.textWidth) / 2;
		this.roomTitle.y = haxepunk_HXP.height * 0.2;
		this.roomTitle._visible = true;
		this.roomTitleTime = 1;
		this.addGraphic(this.roomTitle);
		this.fadeout = new haxepunk_graphics_ColoredRect(haxepunk_HXP.width,haxepunk_HXP.height,0);
		var tmp1 = (haxepunk_HXP.height - (haxepunk_HXP.height + 3)) / 8 | 0;
		this.addGraphic(this.fadeout).set_layer(tmp1);
		this.fadeout.set_alpha(1);
		var tmp2;
		switch(this.room) {
		case "breeding_room":
			tmp2 = true;
			break;
		case "exercise_room":case "fishing_hole":
			tmp2 = false;
			break;
		default:
			if(!catalyst__$Room_Room_$Impl_$.get_canSendCats(this.room)) {
				tmp2 = catalyst__$Room_Room_$Impl_$.get_canRetrieveCats(this.room);
			} else {
				tmp2 = true;
			}
		}
		this.canScruffCats = tmp2;
		var tmp3;
		switch(this.room) {
		case "breeding_room":case "fairgrounds":case "workshop":
			tmp3 = false;
			break;
		default:
			tmp3 = true;
		}
		this.canClickCats = tmp3;
		this.saveIndicator = new catalyst_graphics_SaveIndicator();
		this.saveIndicator.x = haxepunk_HXP.width - this.saveIndicator.get_width();
		this.saveIndicator.y = this.saveIndicator.get_height();
		this.addGraphic(this.saveIndicator).set_layer(-6);
		this.resume();
	}
	,addBackdrop: function() {
		var bd = this.getTexture("assets/graphics/rooms/" + catalyst__$Room_Room_$Impl_$.get_bg(this.room) + ".png");
		bd.disposeImage();
		var img = new haxepunk_graphics_Image(haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(new haxepunk_graphics_atlas_AtlasData(bd))),new haxepunk_math_Rectangle(0,0,1024,576));
		img.smooth = true;
		img.scale = haxepunk_HXP.height / 576;
		if(this.backdrop != null) {
			this.remove(this.backdrop);
		}
		this.backdrop = this.addGraphic(img);
		this.backdrop.set_layer(haxepunk_HXP.height * 2);
	}
	,resume: function() {
		catalyst_scenes_BaseScene.prototype.resume.call(this);
		this.saveIndicator._visible = true;
		this.hud.set_visible(true);
		if(this.room == "coliseum") {
			var _this = catalyst_GameData.get_current();
			_this.labs.get(_this.currentRegion).checkBattle();
		}
		if(catalyst__$Room_Room_$Impl_$.get_music(this.room) != "") {
			catalyst_Music.play(catalyst__$Room_Room_$Impl_$.get_music(this.room));
		} else {
			catalyst_Music.stop();
		}
	}
	,end: function() {
		this.saveIndicator._visible = false;
		this.hud.set_visible(false);
	}
	,update: function() {
		catalyst_scenes_BaseScene.prototype.update.call(this);
		if(!haxepunk_input_Mouse.mouseDown) {
			var _this = catalyst_GameData.get_current();
			_this.labs.get(_this.currentRegion).releaseCatnipButton();
		}
		catalyst_GameData.get_current().checkTutorial("intro");
		this.updateAllCats();
		var _this1 = catalyst_GameData.get_current();
		if(_this1.labs.get(_this1.currentRegion).currentRoom != this.room) {
			this.hud.set_visible(false);
			this.fadeTime += haxepunk_HXP.elapsed / 0.25 * (catalyst_GameData.get_current().fastMode ? 2 : 1);
			if(this.fadeTime >= 1) {
				this.fadeTime = 1;
				haxepunk_HXP.engine.popScene();
				var tmp = haxepunk_HXP.engine;
				var _this2 = catalyst_GameData.get_current();
				tmp.pushScene(new catalyst_scenes_GameScene(_this2.labs.get(_this2.currentRegion).currentRoom));
				return;
			}
		} else if(this.fadeTime > 0) {
			this.fadeTime -= haxepunk_HXP.elapsed / 0.4 * (catalyst_GameData.get_current().fastMode ? 2 : 1);
			if(this.fadeTime < 0) {
				this.fadeTime = 0;
			}
		} else {
			haxepunk_input_Input.pressed("back");
			catalyst_Client.showPopups();
			switch(this.room) {
			case "backyard":
				catalyst_GameData.get_current().checkTutorial("backyard");
				break;
			case "breeding_room":
				catalyst_GameData.get_current().checkTutorial("auto_breed");
				break;
			case "cat_cafe":
				catalyst_GameData.get_current().checkTutorial("cat_cafe");
				var tmp1;
				var _this3 = catalyst_GameData.get_current();
				if(_this3.labs.get(_this3.currentRegion).gourmetTime > 0) {
					var _this4 = catalyst_GameData.get_current();
					var _this5 = _this4.labs.get(_this4.currentRegion).cats;
					var room = "cat_cafe";
					tmp1 = (_this5.cats.get(room).length > 0 ? _this5.cats.get(room)[0] : null) == null;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					catalyst_GameData.get_current().checkTutorial("cat_cafe_suboptimal");
				}
				break;
			case "coliseum":
				catalyst_GameData.get_current().checkTutorial("coliseum");
				break;
			case "cryo_lab":
				catalyst_GameData.get_current().checkTutorial("cryo");
				break;
			case "fishing_hole":
				catalyst_GameData.get_current().checkTutorial("fishing");
				break;
			case "gift_room":
				var _this6 = catalyst_GameData.get_current();
				if(_this6.labs.get(_this6.currentRegion).presentTime >= 1) {
					catalyst_GameData.get_current().checkTutorial("present");
				}
				break;
			case "living_room":
				var _this7 = catalyst_GameData.get_current();
				if(_this7.labs.get(_this7.currentRegion).prestige >= 1) {
					catalyst_GameData.get_current().checkTutorial("prestige");
				}
				var _this8 = catalyst_GameData.get_current();
				if(_this8.labs.get(_this8.currentRegion).cats.cats.get("living_room").length > 2) {
					catalyst_GameData.get_current().checkTutorial("room_bonus");
				}
				var _this9 = catalyst_GameData.get_current();
				if(_this9.labs.get(_this9.currentRegion).food < 100) {
					catalyst_GameData.get_current().checkTutorial("low_food");
				}
				break;
			case "plant_lab":
				catalyst_GameData.get_current().checkTutorial("catnip");
				break;
			case "potion_lab":
				catalyst_GameData.get_current().checkTutorial("potion_lab");
				break;
			case "workshop":
				catalyst_GameData.get_current().checkTutorial("work");
				break;
			default:
			}
		}
		this.fadeout.set_alpha(Math.pow(this.fadeTime,0.5));
		if(this.roomTitleTime > 0) {
			this.roomTitleTime -= haxepunk_HXP.elapsed / 3.5;
			if(this.roomTitleTime <= 0) {
				this.roomTitle._visible = false;
			} else {
				this.roomTitle.set_alpha(Math.min(Math.sqrt(this.roomTitleTime * 2),1));
			}
		}
		if(this.fadeTime <= 0 && this.canScruffCats) {
			if(this.clicked != null && this.clickTime < 1) {
				this.clickTime += haxepunk_HXP.elapsed / 0.5;
				var _this10 = this.camera;
				var _this11 = this.camera;
				if(Math.abs(((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - this.x) / (_this10.scale * _this10.scaleX * haxepunk_HXP.screen.scaleX) + this.camera.x | 0) - this.clickX) + Math.abs(((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - this.y) / (_this11.scale * _this11.scaleY * haxepunk_HXP.screen.scaleY) + this.camera.y | 0) - this.clickY) > 128) {
					this.clickTime = 1;
				}
				if(this.clickTime >= 1) {
					this.scruffed = this.clicked;
					this.highlighted = null;
					this.scruffed.scruff(this.clickX,this.clickY);
				}
			}
			if(this.scruffed != null && this.scruffed.cat.room != "cryo_lab") {
				var canBreed;
				var canBreed1;
				if(!this.scruffed.cat.wild) {
					var _this12 = this.scruffed.cat;
					canBreed1 = !(_this12.hp < _this12.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this12.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this12.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this12.stats,"cha"));
				} else {
					canBreed1 = false;
				}
				if(canBreed1) {
					canBreed = this.scruffed.cat.level >= 5;
				} else {
					canBreed = false;
				}
				if(canBreed) {
					var _g = 0;
					var _g1 = this.catList;
					while(_g < _g1.length) {
						var presentCat = _g1[_g];
						++_g;
						var ce = this.catEntities.h[presentCat.__id__];
						if(presentCat.sex == this.scruffed.cat.sex || presentCat.hp < presentCat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(presentCat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(presentCat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(presentCat.stats,"cha") || presentCat.level < 5) {
							ce.sp.set_color(16777215);
							ce.highlightColor = null;
						} else {
							ce.sp.set_color(65280);
							ce.highlightColor = 65280;
						}
					}
					var _this13 = this.camera;
					var _this14 = this.camera;
					var collide = this.getCatAt((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - this.x) / (_this13.scale * _this13.scaleX * haxepunk_HXP.screen.scaleX) + this.camera.x | 0,(haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - this.y) / (_this14.scale * _this14.scaleY * haxepunk_HXP.screen.scaleY) + this.camera.y | 0,!this.scruffed.cat.sex,true);
					if(collide != null && collide.cat.level >= 5) {
						var this1 = collide.highlightColor;
						var toColor = 0;
						var a = this1 >>> 24 & 255;
						var r = this1 >>> 16 & 255;
						var g = this1 >>> 8 & 255;
						var b = this1 & 255;
						a += ((toColor >>> 24 & 255) - a) * 0.5 | 0;
						r += ((toColor >>> 16 & 255) - r) * 0.5 | 0;
						g += ((toColor >>> 8 & 255) - g) * 0.5 | 0;
						b += ((toColor & 255) - b) * 0.5 | 0;
						var v = a << 24 | r << 16 | g << 8 | b;
						collide.sp.set_color(v == null ? 16777215 : v);
						collide.highlightColor = v;
					}
					this.highlighted = collide;
				}
			}
		}
		switch(this.room) {
		case "coliseum":
			if(this.battleEntity != null && this.battleEntity._scene != this) {
				this.battleEntity = null;
			}
			if(this.battleEntity == null) {
				var _this15 = catalyst_GameData.get_current();
				if(_this15.labs.get(_this15.currentRegion).battle == null) {
					var _this16 = catalyst_GameData.get_current();
					_this16.labs.get(_this16.currentRegion).checkBattle();
				}
				var tmp2;
				var _this17 = catalyst_GameData.get_current();
				if(_this17.labs.get(_this17.currentRegion).battle != null) {
					tmp2 = catalyst_GameData.get_current().popups.length == 0;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					var _this18 = catalyst_GameData.get_current();
					this.battleEntity = new catalyst_entities_BattleEntity(_this18.labs.get(_this18.currentRegion).battle,this.mouseManager);
					this.add(this.battleEntity);
				} else if(this.fadeTime <= 0) {
					catalyst_Client.showPopups();
				}
			}
			break;
		case "exercise_room":
			var _this19 = catalyst_GameData.get_current();
			var _this20 = _this19.labs.get(_this19.currentRegion).cats;
			var room1 = "exercise_room";
			var runningCat = _this20.cats.get(room1).length > 0 ? _this20.cats.get(room1)[0] : null;
			if(runningCat != null && this.treadmillCat == null) {
				this.treadmillCat = new catalyst_entities_StaticCatEntity(runningCat);
				this.treadmillCat.sp.set_facingRight(true);
				this.treadmillCat.set_x(haxepunk_HXP.width * 0.5);
				this.treadmillCat.set_y(haxepunk_HXP.height * 0.625);
				this.treadmillCat.sp.setAnimation("run");
				this.treadmillCat.sp.speed = 1.25;
				var tmp3 = this.treadmillCat;
				var y = this.treadmillCat.get_y();
				tmp3.set_layer((haxepunk_HXP.height - y) / 8 | 0);
				this.add(this.treadmillCat);
			} else if(this.treadmillCat != null && runningCat == null) {
				this.remove(this.treadmillCat);
				this.treadmillCat = null;
			}
			break;
		case "fairgrounds":
			if(this.catShowEntity != null && this.catShowEntity._scene != this) {
				this.catShowEntity = null;
			}
			if(this.catShowEntity == null) {
				this.catShowEntity = new catalyst_entities_CatShowEntity(this.mouseManager);
				this.add(this.catShowEntity);
			}
			break;
		case "fishing_hole":
			var _this21 = catalyst_GameData.get_current();
			var fishingCats = _this21.labs.get(_this21.currentRegion).cats.cats.get("fishing_hole");
			if(this.fishingCat2 != null && (fishingCats.length < 2 || this.fishingCat2.cat != fishingCats[1])) {
				this.remove(this.fishingCat2);
				this.fishingCat2 = null;
			} else if(this.fishingCat1 != null && (fishingCats.length < 1 || this.fishingCat1.cat != fishingCats[0])) {
				this.remove(this.fishingCat1);
				this.fishingCat1 = null;
			}
			if(this.fishingCat1 == null && fishingCats.length > 0) {
				this.fishingCat1 = new catalyst_entities_StaticCatEntity(fishingCats[0]);
				this.fishingCat1.sp.set_facingRight(false);
				this.fishingCat1.set_x(haxepunk_HXP.width * 0.5);
				this.fishingCat1.set_y(haxepunk_HXP.height * 0.6);
				this.fishingCat1.sp.setAnimation("fishing");
				var tmp4 = this.fishingCat1;
				var y1 = this.fishingCat1.get_y();
				tmp4.set_layer((haxepunk_HXP.height - y1) / 8 | 0);
				this.add(this.fishingCat1);
			}
			if(this.fishingCat2 == null && fishingCats.length > 1) {
				this.fishingCat2 = new catalyst_entities_StaticCatEntity(fishingCats[1]);
				this.fishingCat2.sp.set_facingRight(true);
				this.fishingCat2.set_x(haxepunk_HXP.width * 0.20);
				this.fishingCat2.set_y(haxepunk_HXP.height * 0.6);
				this.fishingCat2.sp.setAnimation("fishing");
				var tmp5 = this.fishingCat2;
				var y2 = this.fishingCat2.get_y();
				tmp5.set_layer((haxepunk_HXP.height - y2) / 8 | 0);
				this.add(this.fishingCat2);
			}
			break;
		case "living_room":
			var maleCat = false;
			var femaleCat = false;
			var maleHighEnough = false;
			var femaleHighEnough = false;
			var _g2 = 0;
			var _this22 = catalyst_GameData.get_current();
			var _g11 = _this22.labs.get(_this22.currentRegion).cats.cats.get("living_room");
			while(_g2 < _g11.length) {
				var cat = _g11[_g2];
				++_g2;
				if(cat.sex == true) {
					maleCat = true;
				} else {
					femaleCat = true;
				}
				if(!(cat.hp < cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha")) && cat.level >= 5) {
					if(cat.sex == true) {
						maleHighEnough = true;
					} else {
						femaleHighEnough = true;
					}
				}
			}
			if(maleHighEnough && femaleHighEnough) {
				catalyst_GameData.get_current().checkTutorial("can_breed");
			} else if(maleCat && femaleCat) {
				catalyst_GameData.get_current().checkTutorial("wait_to_breed");
			}
			break;
		default:
		}
	}
	,updateAllCats: function() {
		var tmp;
		var tmp1;
		var tmp2 = this.room;
		var _this = catalyst_GameData.get_current();
		if(tmp2 == _this.labs.get(_this.currentRegion).currentRoom) {
			tmp1 = catalyst__$Room_Room_$Impl_$.get_holdsCats(this.room);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = catalyst__$Room_Room_$Impl_$.get_catsVisible(this.room);
		} else {
			tmp = false;
		}
		if(tmp) {
			var cats;
			if(this.room == "potion_lab") {
				var _this1 = catalyst_GameData.get_current();
				var _this2 = _this1.labs.get(_this1.currentRegion);
				var maxIngredients = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this2.upgrades,"max_found_ingredients",_this2.bonuses);
				var cats1;
				var _this3 = catalyst_GameData.get_current();
				if(_this3.labs.get(_this3.currentRegion).ingredientSearch != null) {
					var _this4 = catalyst_GameData.get_current();
					cats1 = _this4.labs.get(_this4.currentRegion).ingredientSearch.ingredients.length < maxIngredients;
				} else {
					cats1 = false;
				}
				if(cats1) {
					cats = catalyst_scenes_GameScene._workingCats;
				} else {
					var _this5 = catalyst_GameData.get_current();
					cats = _this5.labs.get(_this5.currentRegion).cats.cats.get(this.room);
				}
			} else {
				var _this6 = catalyst_GameData.get_current();
				cats = _this6.labs.get(_this6.currentRegion).cats.cats.get(this.room);
			}
			var _g = 0;
			while(_g < cats.length) {
				var cat = cats[_g];
				++_g;
				if(!this.catEntities.exists(cat)) {
					this.addCat(cat,catalyst__$Room_Room_$Impl_$.get_canRetrieveCats(this.room));
				}
			}
			var _g1 = 0;
			var _g11 = this.catList;
			while(_g1 < _g11.length) {
				var cat1 = _g11[_g1];
				++_g1;
				if(cats.indexOf(cat1) == -1) {
					var ce = this.catEntities.get(cat1);
					var _g2 = ce.sp;
					_g2.set_alpha(_g2.alpha - haxepunk_HXP.elapsed / 0.5);
					if(ce.sp.alpha <= 0) {
						this.removeCat(cat1);
					}
				}
			}
		}
	}
	,addCat: function(cat,xpMeter) {
		if(xpMeter == null) {
			xpMeter = true;
		}
		var e = new catalyst_entities_CatEntity(cat,xpMeter);
		e.set_localX(catalyst_Client.randomX(this.room));
		e.set_localY(catalyst_Client.randomY(this.room));
		var v = Math.random() > 0.5;
		e.sp.set_facingRight(v);
		this.catEntities.set(cat,e);
		this.catList.push(cat);
		this.add(e);
	}
	,removeCat: function(cat) {
		this.remove(this.catEntities.h[cat.__id__]);
		this.catEntities.remove(cat);
		HxOverrides.remove(this.catList,cat);
		this.updateLists();
	}
	,click: function() {
		var _this = this.camera;
		var _this1 = this.camera;
		this.clicked = this.getCatAt((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - this.x) / (_this.scale * _this.scaleX * haxepunk_HXP.screen.scaleX) + this.camera.x | 0,(haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - this.y) / (_this1.scale * _this1.scaleY * haxepunk_HXP.screen.scaleY) + this.camera.y | 0);
		var _this2 = this.camera;
		this.clickX = (haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - this.x) / (_this2.scale * _this2.scaleX * haxepunk_HXP.screen.scaleX) + this.camera.x | 0;
		var _this3 = this.camera;
		this.clickY = (haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - this.y) / (_this3.scale * _this3.scaleY * haxepunk_HXP.screen.scaleY) + this.camera.y | 0;
		this.clickTime = 0;
	}
	,unclick: function() {
		if(this.fadeTime <= 0) {
			if(this.scruffed != null) {
				if(this.highlighted != null) {
					if(this.scruffed.cat.level >= 5 && this.highlighted.cat.level >= 5) {
						haxepunk_HXP.engine.pushScene(new catalyst_scenes_BreedScene([this.scruffed.cat,this.highlighted.cat]));
					}
				}
				this.scruffed.unscruff();
			} else if(this.clicked != null) {
				this.clickOnCat(this.clicked);
			}
			this.clicked = this.scruffed = null;
			if(this.highlighted != null) {
				this.highlighted = null;
			}
			var _g = 0;
			var _g1 = this.catList;
			while(_g < _g1.length) {
				var cat = _g1[_g];
				++_g;
				var ce = this.catEntities.h[cat.__id__];
				ce.sp.set_color(16777215);
				ce.highlightColor = null;
			}
		}
	}
	,getCatAt: function(x,y,sex,fullHealth) {
		if(fullHealth == null) {
			fullHealth = false;
		}
		this.collideRectInto("cat",x,y,0,0,catalyst_scenes_GameScene._collide);
		var collide = null;
		var d = 0;
		while(catalyst_scenes_GameScene._collide.length > 0) {
			var next = catalyst_scenes_GameScene._collide.pop();
			if(this.scruffed != null && next == this.scruffed) {
				continue;
			}
			if(sex != null && next.cat.sex != sex) {
				continue;
			}
			var tmp;
			if(fullHealth) {
				var _this = next.cat;
				tmp = _this.hp < _this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha");
			} else {
				tmp = false;
			}
			if(tmp) {
				continue;
			}
			var x2 = next.get_x() - next.originX + next.get_width() / 2;
			var y2 = next.get_y() - next.originY + next.get_height() / 2;
			var nextDistance = (x2 - x) * (x2 - x) + (y2 - y) * (y2 - y);
			if(collide == null || nextDistance < d) {
				collide = next;
				d = nextDistance;
			}
		}
		return collide;
	}
	,clickOnCat: function(cat) {
		if(this.onCatClick != null) {
			this.onCatClick(cat.cat);
		} else if(this.canClickCats) {
			var f = $bind(this,this.removeCat);
			var a1 = cat.cat;
			var tmp = function() {
				f(a1);
			};
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(cat.cat,null,tmp));
		}
	}
	,onUpgradesButtonPressed: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_UpgradeScene(this.room));
	}
	,onAllCatsButtonPressed: function() {
		var tmp;
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).cats.cats.get("cryo_lab").length <= 0) {
			var _this1 = catalyst_GameData.get_current();
			var _this2 = _this1.labs.get(_this1.currentRegion).cats;
			var count = 0;
			var _g = 0;
			var _g1 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
			while(_g < _g1.length) {
				var room = _g1[_g];
				++_g;
				count += _this2.cats.get(room).length;
			}
			tmp = count > 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatInRoomScene("<cat-icon/>Info",function(cat) {
				var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
				var txt1 = "<right><blue>LV " + cat.level + "/";
				var cat1 = cat._maxLevel;
				var x;
				if(cat.wild) {
					x = 0;
				} else {
					var _this3 = catalyst_GameData.get_current();
					x = _this3.labs.get(_this3.currentRegion).tech / 100;
				}
				var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
				var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
				var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
				var _g2 = 0;
				var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
				while(_g2 < _g11.length) {
					var stat = _g11[_g2];
					++_g2;
					txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
				}
				if(cat.mutations > 0) {
					txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
				}
				return txt2;
			},function(cat2) {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(cat2));
			}));
		} else {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You don't have any <cat-icon/><blue>cats</blue>...\n\n<door-exit-icon/><blue>Head out</blue> to the <tree-icon/><blue>backyard</blue> to find some.</center>"));
		}
	}
	,onWildCatsButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).cats.cats.get("backyard").length > 0) {
			var tmp = haxepunk_HXP.engine;
			var _this1 = catalyst_GameData.get_current();
			tmp.pushScene(new catalyst_scenes_SelectCatScene(_this1.labs.get(_this1.currentRegion).cats.cats.get("backyard"),"<cat-icon/>Info",function(cat) {
				var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
				var txt1 = "<right><blue>LV " + cat.level + "/";
				var cat1 = cat._maxLevel;
				var x;
				if(cat.wild) {
					x = 0;
				} else {
					var _this2 = catalyst_GameData.get_current();
					x = _this2.labs.get(_this2.currentRegion).tech / 100;
				}
				var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
				var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
				var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
				var _g = 0;
				var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
				while(_g < _g1.length) {
					var stat = _g1[_g];
					++_g;
					txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
				}
				if(cat.mutations > 0) {
					txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
				}
				return txt2;
			},function(cat2) {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(cat2));
			}));
		} else {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>There aren't any strays right now...\n\nCheck back later!</center>"));
		}
	}
	,onFoodButtonPressed: function() {
		catalyst_Sound.sfxQueue.push("upgrade");
		catalyst_Sound.volumeQueue.push(1);
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).refillFood();
		catalyst_GameData.get_current().checkTutorial("food");
	}
	,onGiftButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).presentTime >= 1) {
			var _this1 = catalyst_GameData.get_current();
			_this1.labs.get(_this1.currentRegion).openGift(true);
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
		} else {
			var _this2 = catalyst_GameData.get_current();
			var _this3 = _this2.labs.get(_this2.currentRegion);
			var remaining = Math.min(14400,600 * Math.pow(1.2,_this3.presentCount)) / (1 + _this3.catBonusLevel("gift_room") / 100);
			var _this4 = catalyst_GameData.get_current();
			var remaining1 = catalyst_GameData.formatTime(remaining * (1 - _this4.labs.get(_this4.currentRegion).presentTime));
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>Your next <gift-icon/><blue>free gift</blue> isn't ready yet...\n\nCheck back in <red>" + remaining1 + "</red>.</center>"));
		}
	}
	,onSearchButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).cats;
		var room = "potion_lab";
		if((_this1.cats.get(room).length > 0 ? _this1.cats.get(room)[0] : null) == null) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>Send a cat to this room to begin a <search-icon/><blue>search</blue> for ingredients, then press this button to call your cat back.</center>"));
		} else {
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).finishSearch(false);
		}
	}
	,onPotionButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).potions.length == 0) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You don't have any <potion-icon/><blue>potions</blue>!\n\n<brew-icon/><blue>Brew</blue> some potions, and you can feed them to cats here.</center>"));
		} else {
			var _this1 = catalyst_GameData.get_current();
			if(_this1.labs.get(_this1.currentRegion).cats.cats.get("living_room").length == 0) {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You don't have any <cat-icon/><blue>cats</blue> in the living room to feed your potions to!</center>"));
			} else {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_PotionInventoryScene());
			}
		}
	}
	,onBrewButtonPressed: function() {
		var haveIngredients = false;
		var _g = 0;
		var _g1 = catalyst__$IngredientType_IngredientType_$Impl_$.ordered;
		while(_g < _g1.length) {
			var ingredientType = _g1[_g];
			++_g;
			var tmp;
			var _this = catalyst_GameData.get_current();
			var _this1 = _this.labs.get(_this.currentRegion).ingredients;
			if(__map_reserved[ingredientType] != null ? _this1.existsReserved(ingredientType) : _this1.h.hasOwnProperty(ingredientType)) {
				var _this2 = catalyst_GameData.get_current();
				var _this3 = _this2.labs.get(_this2.currentRegion).ingredients;
				tmp = (__map_reserved[ingredientType] != null ? _this3.getReserved(ingredientType) : _this3.h[ingredientType]) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				haveIngredients = true;
				break;
			}
		}
		var tmp1;
		if(!haveIngredients) {
			var _this4 = catalyst_GameData.get_current();
			tmp1 = _this4.labs.get(_this4.currentRegion).potion.ingredients.length > 0;
		} else {
			tmp1 = true;
		}
		if(tmp1) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_BrewScene());
		} else {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You don't have any potion ingredients!\n\nSend a cat on a <search-icon/><blue>search</blue> to find some.</center>"));
		}
	}
	,onFishButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		var v = !_this.labs.get(_this.currentRegion).refillFoodWithFish;
		var _this1 = catalyst_GameData.get_current();
		_this1.labs.get(_this1.currentRegion).refillFoodWithFish = v;
		var _this2 = catalyst_GameData.get_current();
		if(_this2.labs.get(_this2.currentRegion).refillFoodWithFish) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center><fish-can-icon/><blue>Fish food activated!</blue>\n\nWhen your <food-icon/><blue>food</blue> runs out, it will be refilled using <fish-icon/><blue>fish</blue> if any remain.</center>"));
		} else {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center><fish-can-icon/><red>Fish food deactivated!</red>\n\nWhen your <food-icon/><blue>food</blue> runs out, your cats will just be hungry, I guess...</center>"));
		}
		catalyst_GameData.get_current().save();
	}
	,onBreedButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).autoBreedNextLevel > 0) {
			var _this1 = catalyst_GameData.get_current();
			if(_this1.labs.get(_this1.currentRegion).autoBreedLevel == 0) {
				while(true) {
					var _this2 = catalyst_GameData.get_current();
					if(!(_this2.labs.get(_this2.currentRegion).cats.cats.get("breeding_room").length > 0)) {
						break;
					}
					var _this3 = catalyst_GameData.get_current();
					var tmp = _this3.labs.get(_this3.currentRegion).cats.cats.get("backyard");
					var _this4 = catalyst_GameData.get_current();
					tmp.push(_this4.labs.get(_this4.currentRegion).cats.cats.get("breeding_room").pop());
				}
				var _this5 = catalyst_GameData.get_current();
				_this5.labs.get(_this5.currentRegion).abortAutoBreed();
			} else {
				var _this6 = catalyst_GameData.get_current();
				if(_this6.labs.get(_this6.currentRegion).cats.cats.get("breeding_room").length < 2) {
					haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You need at least two cats in here to receive a kitten.\n\nAs strays appear in the <door-exit-icon/><blue>backyard</blue>, they'll be taken in automatically.</center>"));
				} else {
					var _this7 = catalyst_GameData.get_current();
					if(_this7.labs.get(_this7.currentRegion).cats.canMove("backyard","living_room")) {
						var _this8 = catalyst_GameData.get_current();
						var kittens = _this8.labs.get(_this8.currentRegion).finishAutoBreed();
						haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatScene(kittens,"<cat-icon/> Adopt",function(cat) {
							var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
							var txt1 = "<right><blue>LV " + cat.level + "/";
							var cat1 = cat._maxLevel;
							var x;
							if(cat.wild) {
								x = 0;
							} else {
								var _this9 = catalyst_GameData.get_current();
								x = _this9.labs.get(_this9.currentRegion).tech / 100;
							}
							var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
							var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
							var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
							var _g = 0;
							var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
							while(_g < _g1.length) {
								var stat = _g1[_g];
								++_g;
								txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
							}
							if(cat.mutations > 0) {
								txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
							}
							return txt2;
						},function(child) {
							child.adopt();
							var _this10 = catalyst_GameData.get_current();
							_this10.labs.get(_this10.currentRegion).cats.move(child,"living_room");
							catalyst_Sound.sfxQueue.push("getstuff");
							catalyst_Sound.volumeQueue.push(1);
							var _this11 = catalyst_GameData.get_current();
							_this11.labs.get(_this11.currentRegion).abortAutoBreed();
							haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(child));
						}));
					} else {
						haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>There's <red>not enough room</red> to bring in a new cat right now!</center>"));
					}
				}
			}
		} else {
			var _this12 = catalyst_GameData.get_current();
			_this12.labs.get(_this12.currentRegion).startAutoBreed();
		}
	}
	,onGourmetButtonPressed: function() {
		catalyst_Sound.sfxQueue.push("upgrade");
		catalyst_Sound.volumeQueue.push(1);
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).fish >= 5) {
			var _this1 = catalyst_GameData.get_current();
			var v = _this1.labs.get(_this1.currentRegion).fish - 5;
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).fish = v;
			var _this3 = catalyst_GameData.get_current();
			_this3.labs.get(_this3.currentRegion).gourmetTime = 1;
		} else {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>You need <fish-icon/><red>" + 5 + "</red> to make some <gourmet-icon/><blue>gourmet food</blue>!</center>"));
		}
		catalyst_GameData.get_current().save();
	}
	,onBlessingButtonPressed: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatInRoomScene("<blessing-icon/>Bless",function(cat) {
			var txt = "<center>" + ("<big><" + (cat.sex ? "male" : "female") + "-icon/></big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/><small>") + "</center>";
			var txt1 = "<right><blue>LV " + cat.level + "/";
			var cat1 = cat._maxLevel;
			var x;
			if(cat.wild) {
				x = 0;
			} else {
				var _this = catalyst_GameData.get_current();
				x = _this.labs.get(_this.currentRegion).tech / 100;
			}
			var amt = cat.hp / (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"));
			var c = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
			var txt2 = txt + (txt1 + (cat1 * (1 + x) | 0) + "</blue></right></small>") + ("<small><right>" + ("<red>HP</red> <" + c + ">" + (Math.round(cat.hp) | 0) + ("</" + c + ">/") + (cat.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(cat.stats,"cha"))) + "</right></small>") + ("<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>");
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				txt2 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			}
			if(cat.mutations > 0) {
				txt2 += "\n<dna-icon/> " + (cat.ownMutations == 0 ? "" : "<purple>") + StringTools.lpad(Std.string(cat.mutations)," ",3) + (cat.ownMutations == 0 ? "" : "</purple>");
			}
			return txt2;
		},function(cat2) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_BlessingScene(cat2));
		}));
	}
	,onPrestigeButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).prestige >= catalyst_Lab.MAX_PRESTIGE) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_MessageScene("<center>There's no one at the temple now...</center>"));
			return;
		}
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		if(!(_this2.prestige < catalyst_Lab.MAX_PRESTIGE && _this2.piety >= (7777 * Math.pow(1.5,_this2.prestige) | 0))) {
			var _this3 = catalyst_GameData.get_current();
			_this3.labs.get(_this3.currentRegion);
			var _this4 = catalyst_GameData.get_current();
			_this4.labs.get(_this4.currentRegion);
			var _this5 = catalyst_GameData.get_current();
			_this5.labs.get(_this5.currentRegion);
			var tmp = haxepunk_HXP.engine;
			var _this6 = catalyst_GameData.get_current();
			var tmp1 = "<center>Current prestige level: <temple-icon/><red>" + _this6.labs.get(_this6.currentRegion).prestige + "</red>\nTo perform a <red>sacrifice</red>, you need:\n\n<blessing-icon/> <blue>";
			var _this7 = catalyst_GameData.get_current();
			var tmp2 = tmp1 + (7777 * Math.pow(1.5,_this7.labs.get(_this7.currentRegion).prestige) | 0) + " [";
			var _this8 = catalyst_GameData.get_current();
			tmp.pushScene(new catalyst_scenes_MessageScene(tmp2 + _this8.labs.get(_this8.currentRegion).piety + "]</blue>"));
			return;
		}
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_PrestigeScene());
	}
	,onHelpButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).currentRoom == "temple") {
			var messages = catalyst__$HelpType_HelpType_$Impl_$.__messages[catalyst__$HelpType_HelpType_$Impl_$.get___dataIndex("temple")].slice();
			messages.reverse();
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_TutorialScene(messages));
		} else {
			var tmp = haxepunk_HXP.engine;
			var _g = [];
			var _g1 = 0;
			var _g2 = catalyst__$HelpType_HelpType_$Impl_$.ordered;
			while(_g1 < _g2.length) {
				var help = [_g2[_g1]];
				++_g1;
				var tmp1;
				if(!catalyst__$HelpType_HelpType_$Impl_$.get_hidden(help[0])) {
					if(catalyst__$HelpType_HelpType_$Impl_$.get_room(help[0]) != null) {
						var room = catalyst__$HelpType_HelpType_$Impl_$.get_room(help[0]);
						var _this1 = catalyst_GameData.get_current();
						tmp1 = _this1.labs.get(_this1.currentRegion).roomVisible(room);
					} else {
						tmp1 = true;
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					_g.push({ txt : "<" + catalyst__$HelpType_HelpType_$Impl_$.get_icon(help[0]) + "/> " + catalyst__$HelpType_HelpType_$Impl_$.get_name(help[0]), onPress : (function(help1) {
						return function() {
							var messages1 = catalyst__$HelpType_HelpType_$Impl_$.__messages[catalyst__$HelpType_HelpType_$Impl_$.get___dataIndex(help1[0])].slice();
							messages1.reverse();
							haxepunk_HXP.engine.pushScene(new catalyst_scenes_TutorialScene(messages1));
						};
					})(help)});
				}
			}
			tmp.pushScene(new catalyst_scenes_OptionsScene(_g));
		}
	}
	,onSettingsButtonPressed: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_SettingsScene());
	}
	,onTrophyButtonPressed: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_TrophyScene());
	}
	,onExitButtonPressed: function() {
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectRoomScene());
	}
	,onCatnipButtonDown: function() {
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).pressCatnipButton();
	}
	,onCatnipButtonUp: function() {
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).releaseCatnipButton();
	}
	,onTechButtonPressed: function() {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).techTime < 1) {
			var tmp = haxepunk_HXP.engine;
			var _this1 = catalyst_GameData.get_current();
			tmp.pushScene(new catalyst_scenes_MessageScene("<center>Send a cat to this room to begin <globe-icon/><blue>exploring</blue>. When the exploration meter is full, press this button.\n\nExploring will require a minimum <red>Lv.\t" + (100 + 5 * _this1.labs.get(_this1.currentRegion).tech) + "</red> cat.</center>"));
		} else {
			var _this2 = catalyst_GameData.get_current();
			_this2.labs.get(_this2.currentRegion).finishTech();
		}
	}
	,__class__: catalyst_scenes_GameScene
});
var catalyst_scenes_HelperImageScene = function(imgSrc) {
	catalyst_scenes_PopupScene.call(this,128,64);
	this.imgSrc = imgSrc;
};
$hxClasses["catalyst.scenes.HelperImageScene"] = catalyst_scenes_HelperImageScene;
catalyst_scenes_HelperImageScene.__name__ = ["catalyst","scenes","HelperImageScene"];
catalyst_scenes_HelperImageScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_HelperImageScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	imgSrc: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var _g = haxepunk_HXP.engine.iterator();
		while(_g.scenes.length > 0) {
			var scene = _g.scenes.pop();
			if(scene != this && js_Boot.__instanceof(scene,catalyst_scenes_PopupScene)) {
				this.playSound = false;
				break;
			}
		}
		var _this = this.bg;
		_this.face.set_color(_this.color = 8421504);
		var img = new haxepunk_graphics_Image(haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion(haxepunk_graphics_atlas_Atlas.loadImageAsRegion(new haxepunk_graphics_atlas_AtlasData(this.assetCache.getTexture("assets/graphics/" + this.imgSrc + ".png")))));
		img.smooth = true;
		img.pixelSnapping = false;
		var e = new haxepunk_Entity(null,null,img);
		e.set_width(img.get_width());
		e.set_height(img.get_height());
		var wrapper = new haxepunk_layout_LayoutGroup(e);
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		wrapper.anchorX = 0.5;
		wrapper.layoutX = m;
		var m2;
		var m3 = 40 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[40] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(40,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 0.5;
		wrapper.layoutY = m2;
		this.layout.add(wrapper);
		var wrapper1 = new haxepunk_layout_LayoutGroup(new catalyst_entities_TextButton("OK",null,this.mouseManager,$bind(this,this.nextMessage)));
		var m4;
		var m5 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		wrapper1.anchorX = 0.5;
		wrapper1.layoutX = m4;
		var m6;
		var m7 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		wrapper1.anchorY = 1;
		wrapper1.layoutY = m6;
		this.layout.add(wrapper1);
		this.showPopups = false;
	}
	,nextMessage: function() {
		catalyst_Sound.sfxQueue.push("upgrade");
		catalyst_Sound.volumeQueue.push(1);
		this.close();
	}
	,__class__: catalyst_scenes_HelperImageScene
});
var catalyst_scenes_LogoScene = function() {
	catalyst_scenes_PopupScene.call(this,256);
};
$hxClasses["catalyst.scenes.LogoScene"] = catalyst_scenes_LogoScene;
catalyst_scenes_LogoScene.__name__ = ["catalyst","scenes","LogoScene"];
catalyst_scenes_LogoScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_LogoScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	logo: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		this.assetCache.getTexture("assets/graphics/logo.png");
		this.bg.set_visible(false);
		this.logo = new catalyst_entities_Logo();
		var wrapper = new haxepunk_layout_LayoutGroup(this.logo);
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		wrapper.anchorX = 0.5;
		wrapper.layoutX = m;
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 0.5;
		wrapper.layoutY = m2;
		this.layout.add(wrapper);
		this.onInputPressed.resolve("start").callbacks.push($bind(this,this.close));
		this.showPopups = false;
	}
	,update: function() {
		if(this.closing) {
			this.fadeIn -= haxepunk_HXP.elapsed / 0.75;
			if(this.fadeIn <= 0) {
				haxepunk_HXP.engine.popScene();
				return;
			} else {
				this.logo.sp.set_alpha(this.fadeIn);
			}
		} else {
			catalyst_scenes_PopupScene.prototype.update.call(this);
		}
	}
	,__class__: catalyst_scenes_LogoScene
});
var catalyst_scenes_MoveCatScene = function(cat) {
	this.panels = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this,448,128);
	this.cat = cat;
};
$hxClasses["catalyst.scenes.MoveCatScene"] = catalyst_scenes_MoveCatScene;
catalyst_scenes_MoveCatScene.__name__ = ["catalyst","scenes","MoveCatScene"];
catalyst_scenes_MoveCatScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_MoveCatScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	cat: null
	,panels: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var exitLabel = new catalyst_graphics_Label("<door-exit-icon/> Send cat to...");
		var e = new haxepunk_Entity(null,null,exitLabel);
		if(exitLabel._dirty) {
			exitLabel.parseText();
		}
		e.set_width(exitLabel.textWidth);
		if(exitLabel._dirty) {
			exitLabel.parseText();
		}
		e.set_height(exitLabel.textHeight);
		var wrapper = new haxepunk_layout_LayoutGroup(e);
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		wrapper.anchorX = 0.5;
		wrapper.layoutX = m;
		var m2;
		var m3 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 0;
		wrapper.layoutY = m2;
		this.layout.add(wrapper);
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox = new haxepunk_layout_LayoutGroup(null,"horizontal");
		hbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox1 = hbox;
		var n = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var tmp;
			if(!(!catalyst__$Room_Room_$Impl_$.get_canSendCats(room))) {
				var _this = catalyst_GameData.get_current();
				var _this1 = _this.labs.get(_this.currentRegion);
				tmp = !(_this1.unlockedRooms.exists(room) && _this1.unlockedRooms.get(room));
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var canMove;
			if(room != this.cat.room) {
				var _this2 = catalyst_GameData.get_current();
				canMove = _this2.labs.get(_this2.currentRegion).cats.canMove(this.cat.room,room);
			} else {
				canMove = false;
			}
			var panel = new catalyst_entities_RoomPanel(room,false,!canMove);
			var _this3 = this.panels;
			if(__map_reserved[room] != null) {
				_this3.setReserved(room,panel);
			} else {
				_this3.h[room] = panel;
			}
			this.mouseManager.add(panel,null,(function(a1,f) {
				return function() {
					f[0](a1[0]);
				};
			})([room],[$bind(this,this.selectRoomWrapper)]));
			hbox1.add(panel);
			if(++n % 4 == 0) {
				vbox.add(hbox1);
				var hbox2 = new haxepunk_layout_LayoutGroup(null,"horizontal");
				hbox2.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
				hbox1 = hbox2;
			}
		}
		vbox.add(hbox1);
		var m4;
		var m5 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		vbox.anchorX = 0.5;
		vbox.layoutX = m4;
		var m6;
		var m7 = 57.5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[57.5 | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(57.5,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m6;
		this.layout.add(vbox);
	}
	,selectRoomWrapper: function(room) {
		if(room == "cryo_lab") {
			var _this = catalyst_GameData.get_current();
			if(_this.labs.get(_this.currentRegion).cats.canMove(this.cat.room,room)) {
				var f = $bind(this,this.selectRoom);
				var a1 = room;
				var tmp = function() {
					f(a1);
				};
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_FreezeScene(this.cat,true,tmp));
			}
		} else {
			var tmp1;
			var _this1 = catalyst_GameData.get_current();
			if(_this1.labs.get(_this1.currentRegion).cats.canMove(this.cat.room,room)) {
				tmp1 = this.cat.room == "cryo_lab";
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var f1 = $bind(this,this.selectRoom);
				var a11 = room;
				var tmp2 = function() {
					f1(a11);
				};
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_FreezeScene(this.cat,false,tmp2));
			} else {
				this.selectRoom(room);
			}
		}
	}
	,selectRoom: function(room) {
		var _gthis = this;
		if(room == this.cat.room) {
			this.close();
		} else {
			var _this = catalyst_GameData.get_current();
			if(_this.labs.get(_this.currentRegion).cats.canMove(this.cat.room,room)) {
				switch(room) {
				case "backyard":
					this.closeNow();
					haxepunk_HXP.engine.pushScene(new catalyst_scenes_OptionsScene([{ txt : "<door-exit-icon/> Dismiss", color : 13121335, onPress : function() {
						var cat = _gthis.cat;
						var _this1 = catalyst_GameData.get_current();
						_this1.labs.get(_this1.currentRegion).dismiss(cat);
						_gthis.close();
					}},{ txt : "Cancel"}],"<center><red>Careful!</red>\nIf you send a cat to the <tree-icon/><blue>Backyard</blue>, it might run away.</center>"));
					break;
				case "workshop":
					this.closeNow();
					var _this2 = catalyst_GameData.get_current();
					var currentWork = _this2.labs.get(_this2.currentRegion).work;
					var _this3 = catalyst_GameData.get_current();
					var _this4 = _this3.labs.get(_this3.currentRegion);
					var maxWork = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this4.upgrades,"max_work",_this4.bonuses);
					haxepunk_HXP.engine.pushScene(new catalyst_scenes_OptionsScene([{ txt : "<hammer-icon/> Do it!", color : 13121335, onPress : function() {
						var cat1 = _gthis.cat;
						var _this5 = catalyst_GameData.get_current();
						_this5.labs.get(_this5.currentRegion).doWork(cat1);
						_gthis.close();
					}},{ txt : "Cancel"}],"<center><red>Careful!</red>\nIf you send a cat to the <hammer-icon/><blue>Workshop</blue>, you won't get it back.\n\n<hammer-icon/><red>+" + this.cat.level + " (current: " + currentWork + "/" + maxWork + ")</center>"));
					break;
				default:
					if(catalyst__$Room_Room_$Impl_$.get_singleCatOnly(room)) {
						var _this6 = catalyst_GameData.get_current();
						_this6.labs.get(_this6.currentRegion).cats.place(this.cat,room,"living_room");
					} else {
						var _this7 = catalyst_GameData.get_current();
						_this7.labs.get(_this7.currentRegion).cats.move(this.cat,room);
					}
					this.close();
				}
				catalyst_GameData.get_current().save();
			}
		}
	}
	,__class__: catalyst_scenes_MoveCatScene
});
var catalyst_scenes_NewTrophyScene = function(trophy,level) {
	var tmp = "<center><sine><star/><blue>New Trophy!</blue><star/></sine>\n\n<red>" + catalyst__$Trophy_Trophy_$Impl_$.$name(trophy,level) + "</red>\n" + catalyst__$Trophy_Trophy_$Impl_$.description(trophy,level) + "\n\n<blue>Bonus:</blue>\n<green>";
	var tmp1 = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_name(catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(trophy)) + " +";
	var this1 = catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(trophy);
	var tmp2 = catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(this1)][0];
	var tmp3 = catalyst__$Trophy_Trophy_$Impl_$.get_bonus(trophy);
	var this2 = catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(trophy);
	catalyst_scenes_MessageScene.call(this,tmp + (tmp1 + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription(tmp2,tmp3 / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(this2)][0]))) + "</green></center>");
	this.trophy = trophy;
	this.level = level;
	this.bgColor = 14601607;
};
$hxClasses["catalyst.scenes.NewTrophyScene"] = catalyst_scenes_NewTrophyScene;
catalyst_scenes_NewTrophyScene.__name__ = ["catalyst","scenes","NewTrophyScene"];
catalyst_scenes_NewTrophyScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_NewTrophyScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	trophy: null
	,level: null
	,begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		var _this = this.labelWrapper;
		var m;
		var m1 = 30 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[30] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(30,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		_this.anchorY = 0;
		_this.layoutY = m;
		var imgBg = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/trophy-bg.png",false));
		imgBg.smooth = true;
		imgBg.pixelSnapping = false;
		var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/trophy.png",false));
		img.smooth = true;
		img.pixelSnapping = false;
		img.set_color(catalyst__$Trophy_Trophy_$Impl_$.color(this.trophy,this.level));
		var e = new haxepunk_Entity();
		e.addGraphic(imgBg);
		e.addGraphic(img);
		e.set_width(img.get_width());
		e.set_height(img.get_height());
		var trophyWrapper = new haxepunk_layout_LayoutGroup(e);
		var m2;
		var m3 = 10 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[10] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(10,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		trophyWrapper.anchorY = 0;
		trophyWrapper.layoutY = m2;
		var m4;
		var m5 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		trophyWrapper.anchorX = 0.5;
		trophyWrapper.layoutX = m4;
		this.layout.add(trophyWrapper);
		catalyst_Sound.sfxQueue.push("getstuff");
		catalyst_Sound.volumeQueue.push(1);
	}
	,__class__: catalyst_scenes_NewTrophyScene
});
var catalyst_scenes_OptionsScene = function(options,txt,onCancel) {
	if(txt == null) {
		txt = "";
	}
	catalyst_scenes_MessageScene.call(this,txt);
	this.options = options;
	this.onCancel = onCancel;
	this.txt = txt;
};
$hxClasses["catalyst.scenes.OptionsScene"] = catalyst_scenes_OptionsScene;
catalyst_scenes_OptionsScene.__name__ = ["catalyst","scenes","OptionsScene"];
catalyst_scenes_OptionsScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_OptionsScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	options: null
	,onCancel: null
	,txt: null
	,begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		var _this = this.labelWrapper;
		var m;
		var m1 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		_this.anchorY = 0;
		_this.layoutY = m;
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		vbox.anchorX = 0.5;
		vbox.layoutX = m2;
		if(this.txt != "") {
			var m4;
			var m5 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
			if(m5 == null) {
				m4 = null;
			} else {
				m4 = { value : m5, min : null, max : null};
			}
			vbox.anchorY = 1;
			vbox.layoutY = m4;
		} else {
			var m6;
			var m7 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
			if(m7 == null) {
				m6 = null;
			} else {
				m6 = { value : m7, min : null, max : null};
			}
			vbox.anchorY = 0.5;
			vbox.layoutY = m6;
		}
		var n = 0;
		var _g = 0;
		var _g1 = this.options;
		while(_g < _g1.length) {
			var option = _g1[_g];
			++_g;
			if(++n > 5) {
				break;
			}
			var btn = new catalyst_entities_TextButton(option.txt,5,this.mouseManager,(function(a1,f) {
				return function() {
					f[0](a1[0]);
				};
			})([option],[$bind(this,this.onPress)]));
			if(Object.prototype.hasOwnProperty.call(option,"color")) {
				btn.color = option.color;
			}
			vbox.add(btn);
		}
		this.layout.add(vbox);
	}
	,close: function() {
		catalyst_scenes_MessageScene.prototype.close.call(this);
		if(this.onCancel != null) {
			this.onCancel();
		}
	}
	,onPress: function(option) {
		if(option.onPress != null) {
			this.closeNow();
			option.onPress();
		} else {
			catalyst_scenes_MessageScene.prototype.close.call(this);
		}
	}
	,__class__: catalyst_scenes_OptionsScene
});
var catalyst_scenes_PotionInventoryScene = function() {
	this.panels = new haxe_ds_ObjectMap();
	catalyst_scenes_PopupScene.call(this);
};
$hxClasses["catalyst.scenes.PotionInventoryScene"] = catalyst_scenes_PotionInventoryScene;
catalyst_scenes_PotionInventoryScene.__name__ = ["catalyst","scenes","PotionInventoryScene"];
catalyst_scenes_PotionInventoryScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_PotionInventoryScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	selected: null
	,set_selected: function(v) {
		var panel = this.panels.iterator();
		while(panel.hasNext()) {
			var panel1 = panel.next();
			var v1 = panel1.potion == v;
			panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
			panel1.selected = v1;
		}
		var txt = "";
		if(v != null) {
			var maxValue = 0;
			var _g = 0;
			var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g < _g1.length) {
				var stat = _g1[_g];
				++_g;
				maxValue = Math.max(maxValue,catalyst__$Stats_Stats_$Impl_$.get(v.stats,stat));
			}
			var type = maxValue >= 10 ? "Potion" : maxValue >= 5 ? "Tincture" : "Draught";
			var str = catalyst__$Stats_Stats_$Impl_$.get(v.stats,"str");
			var $int = catalyst__$Stats_Stats_$Impl_$.get(v.stats,"int");
			var cha = catalyst__$Stats_Stats_$Impl_$.get(v.stats,"cha");
			txt = "<big><blue>" + StringTools.replace(str <= 0 && $int <= 0 && cha <= 0 ? "Bitter " + type : str > $int && str > cha ? "Strength " + type : $int > str && $int > cha ? "Intelligence " + type : cha > str && cha > $int ? "Charisma " + type : "Balanced " + type," ","\n ") + "</blue></big>\n";
			var _g2 = 0;
			var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g2 < _g11.length) {
				var stat1 = _g11[_g2];
				++_g2;
				var val = catalyst__$Stats_Stats_$Impl_$.get(v.stats,stat1);
				if(val != 0) {
					txt += "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat1) + "/>" + (val < 0 ? "<red>" : "<green>+") + val + (val < 0 ? "</red>" : "</green>");
				}
			}
			if(v.mutagen > 0) {
				txt += "\n<mutagen-icon/><blue>" + v.mutagen + "%</blue>";
			}
		}
		this.selectedLabel.set_text(txt);
		var tmp = this.drinkButton;
		var tmp1;
		if(v != null) {
			var _this = catalyst_GameData.get_current();
			tmp1 = _this.labs.get(_this.currentRegion).cats.cats.get("living_room").length > 0;
		} else {
			tmp1 = false;
		}
		tmp.set_collidable(tmp1);
		var tmp2 = this.drinkButton.get_collidable() ? 3375104 : 8421504;
		this.drinkButton.color = tmp2;
		return catalyst_scenes_PotionInventoryScene.lastSelected = this.selected = v;
	}
	,panels: null
	,selectedLabel: null
	,drinkButton: null
	,begin: function() {
		var _gthis = this;
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m;
		var hbox = null;
		var n = 0;
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			if(n++ % 4 == 0) {
				if(hbox != null) {
					vbox.add(hbox);
				}
				var hbox1 = new haxepunk_layout_LayoutGroup(null,"horizontal");
				hbox1.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
				hbox = hbox1;
			}
			var potion;
			var _this = catalyst_GameData.get_current();
			if(i < _this.labs.get(_this.currentRegion).potions.length) {
				var _this1 = catalyst_GameData.get_current();
				potion = _this1.labs.get(_this1.currentRegion).potions[i];
			} else {
				potion = null;
			}
			if(potion == null) {
				var e = new haxepunk_Entity();
				e.set_width(e.set_height(256));
				hbox.add(e);
			} else {
				var panel = new catalyst_entities_PotionPanel(potion);
				this.panels.set(potion,panel);
				this.mouseManager.add(panel,null,(function(v,f) {
					return function() {
						return f[0](v[0]);
					};
				})([potion],[$bind(this,this.set_selected)]));
				hbox.add(panel);
			}
		}
		if(hbox != null) {
			vbox.add(hbox);
		}
		cols.add(vbox);
		this.selectedLabel = new catalyst_graphics_Label(" ",null,2,16777215,1);
		var labelEntity = new haxepunk_Entity(0,0,this.selectedLabel);
		labelEntity.postUpdate.callbacks.push(function() {
			var _this2 = _gthis.selectedLabel;
			var v1 = labelEntity.get_width();
			if(v1 != _this2.width) {
				_this2._dirty = true;
			}
			_this2.width = v1;
		});
		var descBox = new haxepunk_layout_LayoutGroup(labelEntity,null,100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%"));
		descBox.paddingTop = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(32), min : null, max : null};
		descBox.add(labelEntity);
		cols.add(descBox);
		this.layout.add(cols);
		var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
		var m2;
		var m3 = 98 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[98] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(98,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		buttons.anchorX = 1;
		buttons.layoutX = m2;
		var m4;
		var m5 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		buttons.anchorY = 1;
		buttons.layoutY = m4;
		this.drinkButton = new catalyst_entities_TextButton("<potion-icon/> Drink",null,this.mouseManager,$bind(this,this.drinkPotion));
		buttons.add(this.drinkButton);
		var discardButton = new catalyst_entities_TextButton("Discard",null,this.mouseManager,$bind(this,this.discardPotion));
		discardButton.color = 8388608;
		buttons.add(discardButton);
		this.layout.add(buttons);
		var tmp;
		if(catalyst_scenes_PotionInventoryScene.lastSelected != null) {
			var _this3 = catalyst_GameData.get_current();
			tmp = _this3.labs.get(_this3.currentRegion).potions.indexOf(catalyst_scenes_PotionInventoryScene.lastSelected) == -1;
		} else {
			tmp = false;
		}
		if(tmp) {
			catalyst_scenes_PotionInventoryScene.lastSelected = null;
		}
		var v2 = catalyst_scenes_PotionInventoryScene.lastSelected;
		var panel1 = this.panels.iterator();
		while(panel1.hasNext()) {
			var panel2 = panel1.next();
			var v3 = panel2.potion == v2;
			panel2.face.set_color(v3 ? panel2.selectedColor : panel2.baseColor);
			panel2.selected = v3;
		}
		var txt = "";
		if(v2 != null) {
			var maxValue = 0;
			var _g1 = 0;
			var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g1 < _g11.length) {
				var stat = _g11[_g1];
				++_g1;
				maxValue = Math.max(maxValue,catalyst__$Stats_Stats_$Impl_$.get(v2.stats,stat));
			}
			var type = maxValue >= 10 ? "Potion" : maxValue >= 5 ? "Tincture" : "Draught";
			var str = catalyst__$Stats_Stats_$Impl_$.get(v2.stats,"str");
			var $int = catalyst__$Stats_Stats_$Impl_$.get(v2.stats,"int");
			var cha = catalyst__$Stats_Stats_$Impl_$.get(v2.stats,"cha");
			txt = "<big><blue>" + StringTools.replace(str <= 0 && $int <= 0 && cha <= 0 ? "Bitter " + type : str > $int && str > cha ? "Strength " + type : $int > str && $int > cha ? "Intelligence " + type : cha > str && cha > $int ? "Charisma " + type : "Balanced " + type," ","\n ") + "</blue></big>\n";
			var _g2 = 0;
			var _g12 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
			while(_g2 < _g12.length) {
				var stat1 = _g12[_g2];
				++_g2;
				var val = catalyst__$Stats_Stats_$Impl_$.get(v2.stats,stat1);
				if(val != 0) {
					txt += "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat1) + "/>" + (val < 0 ? "<red>" : "<green>+") + val + (val < 0 ? "</red>" : "</green>");
				}
			}
			if(v2.mutagen > 0) {
				txt += "\n<mutagen-icon/><blue>" + v2.mutagen + "%</blue>";
			}
		}
		this.selectedLabel.set_text(txt);
		var tmp1 = this.drinkButton;
		var tmp2;
		if(v2 != null) {
			var _this4 = catalyst_GameData.get_current();
			tmp2 = _this4.labs.get(_this4.currentRegion).cats.cats.get("living_room").length > 0;
		} else {
			tmp2 = false;
		}
		tmp1.set_collidable(tmp2);
		var tmp3 = this.drinkButton.get_collidable() ? 3375104 : 8421504;
		this.drinkButton.color = tmp3;
		catalyst_scenes_PotionInventoryScene.lastSelected = this.selected = v2;
	}
	,drinkPotion: function() {
		var _gthis = this;
		if(this.selected != null) {
			this.closeNow();
			var f = $bind(this,this.potionEffect);
			var a1 = this.selected;
			var tmp = function(a2) {
				return f(a1,a2);
			};
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_SelectCatScene(null,this.drinkButton.text,tmp,function(cat) {
				haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_DrinkPotionScene(cat,_gthis.selected,function() {
					var entity = new catalyst_entities_StaticCatEntity(cat);
					entity.lockAppearance();
					var mutated = cat.drink(_gthis.selected);
					var _this = catalyst_GameData.get_current();
					HxOverrides.remove(_this.labs.get(_this.currentRegion).potions,_gthis.selected);
					if(mutated) {
						haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_MutateScene(cat,entity,function() {
							haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(cat));
						}));
					} else {
						haxepunk_HXP.engine.pushScene(new catalyst_scenes_SingleCatScene(cat));
					}
					catalyst_GameData.get_current().save();
				}));
			},null,($_=this.selected,$bind($_,$_.canDrink))));
		}
	}
	,discardPotion: function() {
		if(this.selected != null) {
			this.close();
			var _this = catalyst_GameData.get_current();
			HxOverrides.remove(_this.labs.get(_this.currentRegion).potions,this.selected);
		}
	}
	,potionEffect: function(potion,cat) {
		var txt = "<center><big><" + (cat.sex ? "male" : "female") + "-icon/>G" + cat.generation + "</big><" + catalyst__$CatType_CatType_$Impl_$.get_icon((cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob) == null ? null : catalyst__$CatJob_CatJob_$Impl_$.get_type(cat.assignedJob == null ? catalyst__$CatJob_CatJob_$Impl_$.getJobFor(cat) : cat.assignedJob)) + "/></center>" + "<right><blue>" + cat.level + "<small>/";
		var cat1 = cat._maxLevel;
		var x;
		if(cat.wild) {
			x = 0;
		} else {
			var _this = catalyst_GameData.get_current();
			x = _this.labs.get(_this.currentRegion).tech / 100;
		}
		var txt1 = txt + (cat1 * (1 + x) | 0) + "</small></blue></right>" + "<max-stars/> <yellow>" + StringTools.lpad(Std.string(cat.stars)," ",3) + "</yellow>";
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			txt1 += "\n<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/> " + StringTools.lpad(Std.string(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat))," ",3);
			var change = catalyst__$Stats_Stats_$Impl_$.get(potion.stats,stat);
			if(catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat) + change < 1) {
				change = -catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat) + 1;
			} else {
				var tmp = catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat) + change;
				var cat2 = cat._maxLevel;
				var x1;
				if(cat.wild) {
					x1 = 0;
				} else {
					var _this1 = catalyst_GameData.get_current();
					x1 = _this1.labs.get(_this1.currentRegion).tech / 100;
				}
				if(tmp > (Math.min((cat2 * (1 + x1) | 0) * 5,999) | 0)) {
					var cat3 = cat._maxLevel;
					var x2;
					if(cat.wild) {
						x2 = 0;
					} else {
						var _this2 = catalyst_GameData.get_current();
						x2 = _this2.labs.get(_this2.currentRegion).tech / 100;
					}
					change = (Math.min((cat3 * (1 + x2) | 0) * 5,999) | 0) - catalyst__$Stats_Stats_$Impl_$.get(cat.stats,stat);
				}
			}
			if(change < 0) {
				txt1 += " <red>" + change + "</red>";
			} else if(change > 0) {
				txt1 += " <green>+" + change + "</green>";
			}
		}
		txt1 += "\n<dna-icon/> " + StringTools.lpad(Std.string(cat.mutations)," ",3);
		if(potion.mutagen > 0 && cat.ownMutations == 0 && cat.mutations < 10) {
			txt1 += " <green>+1?</green>";
		}
		return txt1;
	}
	,__class__: catalyst_scenes_PotionInventoryScene
	,__properties__: $extend(catalyst_scenes_PopupScene.prototype.__properties__,{set_selected:"set_selected"})
});
var catalyst_scenes_PrestigeScene = function() {
	var _this = catalyst_GameData.get_current();
	catalyst_scenes_MessageScene.call(this,"<center><green>Current Prestige level: " + _this.labs.get(_this.currentRegion).prestige + "</green>\n<red>Sacrifice</red> everything, including all:\n<cat-icon/><blue>cats</blue>,\n<upgrade-icon/><blue>upgrades</blue>,\nand <lock/><blue>unlocked rooms</blue>...\nTo <temple-icon/><green>begin again</green> with even more potential!");
};
$hxClasses["catalyst.scenes.PrestigeScene"] = catalyst_scenes_PrestigeScene;
catalyst_scenes_PrestigeScene.__name__ = ["catalyst","scenes","PrestigeScene"];
catalyst_scenes_PrestigeScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_PrestigeScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		var _this = this.labelWrapper;
		var m;
		var m1 = 10 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[10] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(10,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		_this.anchorY = 0;
		_this.layoutY = m;
		var btn = new catalyst_entities_TextButton("<temple-icon/> Sacrifice",4,this.mouseManager,$bind(this,this.onPress));
		btn.color = 8388608;
		var wrapper = new haxepunk_layout_LayoutGroup(btn);
		var m2;
		var m3 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 1;
		wrapper.layoutY = m2;
		var m4;
		var m5 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		wrapper.anchorX = 0.5;
		wrapper.layoutX = m4;
		this.layout.add(wrapper);
	}
	,onPress: function() {
		this.closeNow();
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_VortexScene(function() {
			catalyst_GameData.get_current().doPrestige();
			var tmp = haxepunk_HXP.engine;
			var _this = catalyst_GameData.get_current();
			tmp.set_scene(new catalyst_scenes_GameScene(_this.labs.get(_this.currentRegion).currentRoom));
		}));
	}
	,__class__: catalyst_scenes_PrestigeScene
});
var catalyst_scenes_RoomUnlockScene = function(room) {
	this.panels = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this);
	this.room = room;
};
$hxClasses["catalyst.scenes.RoomUnlockScene"] = catalyst_scenes_RoomUnlockScene;
catalyst_scenes_RoomUnlockScene.__name__ = ["catalyst","scenes","RoomUnlockScene"];
catalyst_scenes_RoomUnlockScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_RoomUnlockScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	room: null
	,selected: null
	,set_selected: function(v) {
		var _this = this.panels;
		var panel = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(panel.hasNext()) {
			var panel1 = panel.next();
			var v1 = panel1.room == v;
			panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
			panel1.selected = v1;
		}
		if(this.selected != v) {
			this.selected = v;
			var _this1 = catalyst_GameData.get_current();
			if(_this1.labs.get(_this1.currentRegion).roomVisible(v)) {
				this.selectedLabel.set_color(catalyst__$Room_Room_$Impl_$.get_color(v));
				var t = "<center><white><big><" + catalyst__$Room_Room_$Impl_$.get_icon(v) + "/></white>" + catalyst__$Room_Room_$Impl_$.get_name(v) + "</big></center><white><small>" + catalyst__$Room_Room_$Impl_$.get_desc(v);
				var _this2 = catalyst_GameData.get_current();
				var _this3 = _this2.labs.get(_this2.currentRegion);
				if(!(_this3.unlockedRooms.exists(v) && _this3.unlockedRooms.get(v))) {
					t += "\n\n <lock/> <catnip-icon/><green>" + catalyst__$Room_Room_$Impl_$.get_unlockCost(v) + "</green>";
					if(catalyst__$Room_Room_$Impl_$.get_unlockWork(v) > 0) {
						var c;
						var _this4 = catalyst_GameData.get_current();
						if(_this4.labs.get(_this4.currentRegion).work >= catalyst__$Room_Room_$Impl_$.get_unlockWork(v)) {
							c = "green";
						} else {
							c = "red";
						}
						t += " <hammer-icon/> <" + c + ">" + catalyst__$Room_Room_$Impl_$.get_unlockWork(v) + "</" + c + ">";
					}
				}
				t += "</small></white>";
				this.selectedLabel.set_text(t);
			} else {
				this.selectedLabel.set_color(12632256);
				this.selectedLabel.set_text("<center><big><lock/> ? ? ?</big></center><br/><white><small>? ? ?</small>");
			}
			this.updateButton();
		}
		return v;
	}
	,panels: null
	,selectedLabel: null
	,button: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(48), min : null, max : null};
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m;
		var hbox = new haxepunk_layout_LayoutGroup(null,"horizontal");
		hbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox1 = hbox;
		var n = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var panel = new catalyst_entities_RoomPanel(room);
			var _this = this.panels;
			if(__map_reserved[room] != null) {
				_this.setReserved(room,panel);
			} else {
				_this.h[room] = panel;
			}
			this.mouseManager.add(panel,null,(function(v,f) {
				return function() {
					return f[0](v[0]);
				};
			})([room],[$bind(this,this.set_selected)]));
			hbox1.add(panel);
			if(++n % 4 == 0) {
				vbox.add(hbox1);
				var hbox2 = new haxepunk_layout_LayoutGroup(null,"horizontal");
				hbox2.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
				hbox1 = hbox2;
			}
		}
		vbox.add(hbox1);
		cols.add(vbox);
		this.selectedLabel = new catalyst_graphics_Label("",null,2);
		var _this1 = this.selectedLabel;
		if(true != _this1.wrap) {
			_this1._dirty = true;
		}
		_this1.wrap = true;
		var wrapper = new haxepunk_layout_LayoutGroup(new catalyst_entities_LabelStretcher(this.selectedLabel));
		var m2 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		wrapper.layoutWidth = wrapper.layoutHeight = m2 == null ? null : { value : m2, min : null, max : null};
		cols.add(wrapper);
		var meters = new haxepunk_layout_LayoutGroup(null,"horizontal");
		var room1 = "workshop";
		var _this2 = catalyst_GameData.get_current();
		var _this3 = _this2.labs.get(_this2.currentRegion);
		if(_this3.unlockedRooms.exists(room1) && _this3.unlockedRooms.get(room1)) {
			meters.add(new catalyst_entities_WorkCounter(0.625));
		}
		meters.add(new catalyst_entities_CatnipCounter(0.875));
		var m3;
		var m4 = 98 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[98] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(98,"%");
		if(m4 == null) {
			m3 = null;
		} else {
			m3 = { value : m4, min : null, max : null};
		}
		meters.anchorX = 1;
		meters.layoutX = m3;
		var m5;
		var m6 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		if(m6 == null) {
			m5 = null;
		} else {
			m5 = { value : m6, min : null, max : null};
		}
		meters.anchorY = 1;
		meters.layoutY = m5;
		this.layout.add(meters);
		this.button = new catalyst_entities_TextButton("",4.5,this.mouseManager,$bind(this,this.pressButton));
		var wrapper1 = new haxepunk_layout_LayoutGroup(this.button);
		var m7;
		var m8 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m8 == null) {
			m7 = null;
		} else {
			m7 = { value : m8, min : null, max : null};
		}
		wrapper1.anchorX = 1;
		wrapper1.layoutX = m7;
		var m9;
		var m10 = 78 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[78] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(78,"%");
		if(m10 == null) {
			m9 = null;
		} else {
			m9 = { value : m10, min : null, max : null};
		}
		wrapper1.anchorY = 1;
		wrapper1.layoutY = m9;
		this.layout.add(wrapper1);
		this.layout.add(cols);
		var v1 = this.room;
		var panel1 = this.panels.iterator();
		while(panel1.hasNext()) {
			var panel2 = panel1.next();
			var v2 = panel2.room == v1;
			panel2.face.set_color(v2 ? panel2.selectedColor : panel2.baseColor);
			panel2.selected = v2;
		}
		if(this.selected != v1) {
			this.selected = v1;
			var _this4 = catalyst_GameData.get_current();
			if(_this4.labs.get(_this4.currentRegion).roomVisible(v1)) {
				this.selectedLabel.set_color(catalyst__$Room_Room_$Impl_$.get_color(v1));
				var t = "<center><white><big><" + catalyst__$Room_Room_$Impl_$.get_icon(v1) + "/></white>" + catalyst__$Room_Room_$Impl_$.get_name(v1) + "</big></center><white><small>" + catalyst__$Room_Room_$Impl_$.get_desc(v1);
				var _this5 = catalyst_GameData.get_current();
				var _this6 = _this5.labs.get(_this5.currentRegion);
				if(!(_this6.unlockedRooms.exists(v1) && _this6.unlockedRooms.get(v1))) {
					t += "\n\n <lock/> <catnip-icon/><green>" + catalyst__$Room_Room_$Impl_$.get_unlockCost(v1) + "</green>";
					if(catalyst__$Room_Room_$Impl_$.get_unlockWork(v1) > 0) {
						var c;
						var _this7 = catalyst_GameData.get_current();
						if(_this7.labs.get(_this7.currentRegion).work >= catalyst__$Room_Room_$Impl_$.get_unlockWork(v1)) {
							c = "green";
						} else {
							c = "red";
						}
						t += " <hammer-icon/> <" + c + ">" + catalyst__$Room_Room_$Impl_$.get_unlockWork(v1) + "</" + c + ">";
					}
				}
				t += "</small></white>";
				this.selectedLabel.set_text(t);
			} else {
				this.selectedLabel.set_color(12632256);
				this.selectedLabel.set_text("<center><big><lock/> ? ? ?</big></center><br/><white><small>? ? ?</small>");
			}
			this.updateButton();
		}
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		var tmp;
		var room = this.selected;
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		if(_this1.unlockedRooms.exists(room) && _this1.unlockedRooms.get(room)) {
			tmp = 16777215;
		} else {
			var tmp1;
			var _this2 = catalyst_GameData.get_current();
			if(_this2.labs.get(_this2.currentRegion).catnip >= catalyst__$Room_Room_$Impl_$.get_unlockCost(this.selected)) {
				var _this3 = catalyst_GameData.get_current();
				tmp1 = _this3.labs.get(_this3.currentRegion).work >= catalyst__$Room_Room_$Impl_$.get_unlockWork(this.selected);
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				tmp = 3375104;
			} else {
				tmp = 8421504;
			}
		}
		this.button.color = tmp;
		if(this.fadeIn >= 1) {
			catalyst_GameData.get_current().checkTutorial("rooms");
		}
	}
	,updateButton: function() {
		var room = this.selected;
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		if(_this1.unlockedRooms.exists(room) && _this1.unlockedRooms.get(room)) {
			var _this2 = this.button;
			_this2.label.set_text("<door-enter-icon/> Go");
			var _this3 = _this2.label;
			var value = _this2.get_width();
			var _this4 = _this2.label;
			if(_this4._dirty) {
				_this4.parseText();
			}
			_this3.x = (value - _this4.textWidth) / 2;
			var _this5 = _this2.label;
			var value1 = _this2.get_height();
			var _this6 = _this2.label;
			if(_this6._dirty) {
				_this6.parseText();
			}
			_this5.y = (value1 - _this6.textHeight) / 2 + 2;
			_this2.text = "<door-enter-icon/> Go";
			var _this7 = this.button;
			_this7.set_active(_this7.set_visible(_this7.set_collidable(true)));
		} else {
			var room1 = this.selected;
			var _this8 = catalyst_GameData.get_current();
			if(!_this8.labs.get(_this8.currentRegion).roomVisible(room1)) {
				var _this9 = this.button;
				_this9.set_active(_this9.set_visible(_this9.set_collidable(false)));
			} else {
				var _this10 = this.button;
				_this10.label.set_text("<lock/> Unlock");
				var _this11 = _this10.label;
				var value2 = _this10.get_width();
				var _this12 = _this10.label;
				if(_this12._dirty) {
					_this12.parseText();
				}
				_this11.x = (value2 - _this12.textWidth) / 2;
				var _this13 = _this10.label;
				var value3 = _this10.get_height();
				var _this14 = _this10.label;
				if(_this14._dirty) {
					_this14.parseText();
				}
				_this13.y = (value3 - _this14.textHeight) / 2 + 2;
				_this10.text = "<lock/> Unlock";
				var _this15 = this.button;
				_this15.set_active(_this15.set_visible(_this15.set_collidable(true)));
			}
		}
	}
	,pressButton: function() {
		var room = this.selected;
		var _this = catalyst_GameData.get_current();
		var visible = _this.labs.get(_this.currentRegion).roomVisible(room);
		var room1 = this.selected;
		var _this1 = catalyst_GameData.get_current();
		var _this2 = _this1.labs.get(_this1.currentRegion);
		var unlocked = _this2.unlockedRooms.exists(room1) && _this2.unlockedRooms.get(room1);
		if(visible && !unlocked) {
			var tmp;
			var _this3 = catalyst_GameData.get_current();
			if(_this3.labs.get(_this3.currentRegion).catnip >= catalyst__$Room_Room_$Impl_$.get_unlockCost(this.selected)) {
				var _this4 = catalyst_GameData.get_current();
				tmp = _this4.labs.get(_this4.currentRegion).work >= catalyst__$Room_Room_$Impl_$.get_unlockWork(this.selected);
			} else {
				tmp = false;
			}
			if(tmp) {
				var room2 = this.selected;
				var _this5 = catalyst_GameData.get_current();
				_this5.labs.get(_this5.currentRegion).unlockRoom(room2);
				catalyst_Sound.sfxQueue.push("getstuff");
				catalyst_Sound.volumeQueue.push(1);
			} else {
				return;
			}
		} else {
			var tmp1 = this.selected;
			var _this6 = catalyst_GameData.get_current();
			if(tmp1 != _this6.labs.get(_this6.currentRegion).currentRoom) {
				catalyst_Sound.sfxQueue.push("travel");
				catalyst_Sound.volumeQueue.push(1);
			}
		}
		var v = this.selected;
		var _this7 = catalyst_GameData.get_current();
		_this7.labs.get(_this7.currentRegion).currentRoom = v;
		catalyst_GameData.get_current().save();
		this.close();
	}
	,__class__: catalyst_scenes_RoomUnlockScene
	,__properties__: $extend(catalyst_scenes_PopupScene.prototype.__properties__,{set_selected:"set_selected"})
});
var catalyst_scenes_SearchResultScene = function(cat,ingredients) {
	this.cat = cat;
	this.ingredients = ingredients;
	var txt = "<center>Your cat is back from its <search-icon/><blue>search</blue>!\n\n";
	if(ingredients.length == 0) {
		txt = "<center>Your cat is back from its <search-icon/><blue>search</blue>!\n\n" + "<red>...but it didn't find anything...</red></center>";
	} else {
		txt = "<center>Your cat is back from its <search-icon/><blue>search</blue>!\n\n" + ("<green>Found " + ingredients.length + " new ingredient" + (ingredients.length == 1 ? "" : "s") + "!</center>");
	}
	catalyst_scenes_MessageScene.call(this,txt);
};
$hxClasses["catalyst.scenes.SearchResultScene"] = catalyst_scenes_SearchResultScene;
catalyst_scenes_SearchResultScene.__name__ = ["catalyst","scenes","SearchResultScene"];
catalyst_scenes_SearchResultScene.__super__ = catalyst_scenes_MessageScene;
catalyst_scenes_SearchResultScene.prototype = $extend(catalyst_scenes_MessageScene.prototype,{
	cat: null
	,ingredients: null
	,begin: function() {
		catalyst_scenes_MessageScene.prototype.begin.call(this);
		var catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		catEntity.sp.setAnimation("run");
		var wrapper = new haxepunk_layout_LayoutGroup(catEntity);
		var m = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		wrapper.layoutX = m == null ? null : { value : m, min : null, max : null};
		var m1 = 25 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[25] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(25,"%");
		wrapper.layoutY = m1 == null ? null : { value : m1, min : null, max : null};
		this.layout.add(wrapper);
		var _this = this.labelWrapper;
		var m2;
		var m3 = 40 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[40] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(40,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		_this.anchorY = 0;
		_this.layoutY = m2;
		var ingredientsWrapper = new haxepunk_layout_LayoutGroup(null,"horizontal");
		var _g = 0;
		var _g1 = this.ingredients;
		while(_g < _g1.length) {
			var ingredient = _g1[_g];
			++_g;
			var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/potion/" + ingredient + ".png",false));
			img.smooth = true;
			img.pixelSnapping = false;
			var e = new haxepunk_Entity(null,null,img);
			e.set_width(img.get_width());
			e.set_height(img.get_height());
			ingredientsWrapper.add(e);
		}
		var m4;
		var m5 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		ingredientsWrapper.anchorY = 1;
		ingredientsWrapper.layoutY = m4;
		var m6;
		var m7 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		ingredientsWrapper.anchorX = 0.5;
		ingredientsWrapper.layoutX = m6;
		this.layout.add(ingredientsWrapper);
	}
	,__class__: catalyst_scenes_SearchResultScene
});
var catalyst_scenes_SelectCatInRoomScene = function(actionLabel,getLabel,onSelect,onCancel,validate) {
	this.panels = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this,448,128,true,true);
	this.actionLabel = actionLabel;
	this.getLabel = getLabel;
	this.onSelect = onSelect;
	this.onCancel = onCancel;
	this.validate = validate;
};
$hxClasses["catalyst.scenes.SelectCatInRoomScene"] = catalyst_scenes_SelectCatInRoomScene;
catalyst_scenes_SelectCatInRoomScene.__name__ = ["catalyst","scenes","SelectCatInRoomScene"];
catalyst_scenes_SelectCatInRoomScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_SelectCatInRoomScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	actionLabel: null
	,getLabel: null
	,onSelect: null
	,onCancel: null
	,validate: null
	,panels: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var exitLabel = new catalyst_graphics_Label("<cat-icon/> Select cat from...");
		var e = new haxepunk_Entity(null,null,exitLabel);
		if(exitLabel._dirty) {
			exitLabel.parseText();
		}
		e.set_width(exitLabel.textWidth);
		if(exitLabel._dirty) {
			exitLabel.parseText();
		}
		e.set_height(exitLabel.textHeight);
		var wrapper = new haxepunk_layout_LayoutGroup(e);
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		wrapper.anchorX = 0.5;
		wrapper.layoutX = m;
		var m2;
		var m3 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 0;
		wrapper.layoutY = m2;
		this.layout.add(wrapper);
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox = new haxepunk_layout_LayoutGroup(null,"horizontal");
		hbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox1 = hbox;
		var n = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var tmp;
			var tmp1;
			if(!(!catalyst__$Room_Room_$Impl_$.get_canRetrieveCats(room))) {
				var _this = catalyst_GameData.get_current();
				var _this1 = _this.labs.get(_this.currentRegion);
				tmp1 = !(_this1.unlockedRooms.exists(room) && _this1.unlockedRooms.get(room));
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				tmp = room == "backyard";
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var _this2 = catalyst_GameData.get_current();
			var panel = new catalyst_entities_RoomPanel(room,false,_this2.labs.get(_this2.currentRegion).cats.cats.get(room).length <= 0);
			var _this3 = this.panels;
			if(__map_reserved[room] != null) {
				_this3.setReserved(room,panel);
			} else {
				_this3.h[room] = panel;
			}
			this.mouseManager.add(panel,null,(function(a1,f) {
				return function() {
					f[0](a1[0]);
				};
			})([room],[$bind(this,this.selectRoom)]));
			hbox1.add(panel);
			if(++n % 4 == 0) {
				vbox.add(hbox1);
				var hbox2 = new haxepunk_layout_LayoutGroup(null,"horizontal");
				hbox2.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
				hbox1 = hbox2;
			}
		}
		vbox.add(hbox1);
		var m4;
		var m5 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		vbox.anchorX = 0.5;
		vbox.layoutX = m4;
		var m6;
		var m7 = 57.5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[57.5 | 0] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(57.5,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m6;
		this.layout.add(vbox);
	}
	,selectRoom: function(room) {
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).cats.cats.get(room).length > 0) {
			this.closeNow();
			var tmp = haxepunk_HXP.engine;
			var _this1 = catalyst_GameData.get_current();
			tmp.pushScene(new catalyst_scenes_SelectCatScene(_this1.labs.get(_this1.currentRegion).cats.cats.get(room),this.actionLabel,this.getLabel,this.onSelect,this.onCancel,this.validate));
		}
	}
	,__class__: catalyst_scenes_SelectCatInRoomScene
});
var catalyst_scenes_SelectCatScene = function(cats,actionLabel,getLabel,onSelect,onCancel,validate) {
	this.panels = new haxe_ds_ObjectMap();
	catalyst_scenes_PopupScene.call(this,304);
	if(cats == null) {
		var _this = catalyst_GameData.get_current();
		cats = _this.labs.get(_this.currentRegion).cats.cats.get("living_room");
	}
	this.cats = cats;
	this.validate = validate;
	this.onSelect = onSelect;
	this.onCancel = onCancel;
	this.getLabel = getLabel;
	this.actionLabel = actionLabel;
};
$hxClasses["catalyst.scenes.SelectCatScene"] = catalyst_scenes_SelectCatScene;
catalyst_scenes_SelectCatScene.__name__ = ["catalyst","scenes","SelectCatScene"];
catalyst_scenes_SelectCatScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_SelectCatScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	selected: null
	,set_selected: function(v) {
		var panel = this.panels.iterator();
		while(panel.hasNext()) {
			var panel1 = panel.next();
			var v1 = panel1.cat == v;
			panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
			panel1.selected = v1;
		}
		if(this.selected != v && catalyst_scenes_SelectCatScene.lastSelected != v) {
			catalyst_Sound.sfxQueue.push("blip");
			catalyst_Sound.volumeQueue.push(1);
		}
		catalyst_scenes_SelectCatScene.lastSelected = this.selected = v;
		this.updateActionButton();
		return v;
	}
	,cats: null
	,validate: null
	,onSelect: null
	,onCancel: null
	,getLabel: null
	,panels: null
	,selectedLabel: null
	,actionButton: null
	,actionLabel: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		var choices = new haxepunk_layout_LayoutGroup(null,"vertical");
		var scrollList = new catalyst_entities_ScrollList(choices,this.mouseManager);
		var mouseManager = scrollList.mouseManager;
		var _g = 0;
		var _g1 = this.cats;
		while(_g < _g1.length) {
			var cat = _g1[_g];
			++_g;
			var panel = new catalyst_entities_CatPanel(cat);
			this.panels.set(cat,panel);
			mouseManager.add(panel,null,(function(v,f) {
				return function() {
					return f[0](v[0]);
				};
			})([cat],[$bind(this,this.set_selected)]));
			choices.add(panel);
		}
		var l = cols.addLayout(scrollList);
		l.layoutWidth = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(576), min : null, max : null};
		var m = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		l.layoutHeight = m == null ? null : { value : m, min : null, max : null};
		var descBox = new haxepunk_layout_LayoutGroup(null,null,100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%"));
		descBox.paddingTop = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(-6), min : null, max : null};
		this.selectedLabel = new catalyst_graphics_Label(" ",true,2);
		descBox.add(new haxepunk_Entity(0,0,this.selectedLabel));
		cols.add(descBox);
		this.layout.add(cols);
		var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
		var m1;
		var m2 = 98 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[98] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(98,"%");
		if(m2 == null) {
			m1 = null;
		} else {
			m1 = { value : m2, min : null, max : null};
		}
		buttons.anchorX = 1;
		buttons.layoutX = m1;
		var m3;
		var m4 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m4 == null) {
			m3 = null;
		} else {
			m3 = { value : m4, min : null, max : null};
		}
		buttons.anchorY = 1;
		buttons.layoutY = m3;
		this.actionButton = new catalyst_entities_TextButton(this.actionLabel,null,this.mouseManager,$bind(this,this.clickCat));
		buttons.add(this.actionButton);
		this.layout.add(buttons);
		if(catalyst_scenes_SelectCatScene.lastSelected != null && this.cats.indexOf(catalyst_scenes_SelectCatScene.lastSelected) == -1) {
			catalyst_scenes_SelectCatScene.lastSelected = null;
		}
		var v1 = catalyst_scenes_SelectCatScene.lastSelected;
		var panel1 = this.panels.iterator();
		while(panel1.hasNext()) {
			var panel2 = panel1.next();
			var v2 = panel2.cat == v1;
			panel2.face.set_color(v2 ? panel2.selectedColor : panel2.baseColor);
			panel2.selected = v2;
		}
		if(this.selected != v1 && catalyst_scenes_SelectCatScene.lastSelected != v1) {
			catalyst_Sound.sfxQueue.push("blip");
			catalyst_Sound.volumeQueue.push(1);
		}
		catalyst_scenes_SelectCatScene.lastSelected = this.selected = v1;
		this.updateActionButton();
		if(this.cats.length == 1) {
			var v3 = this.cats[0];
			var panel3 = this.panels.iterator();
			while(panel3.hasNext()) {
				var panel4 = panel3.next();
				var v4 = panel4.cat == v3;
				panel4.face.set_color(v4 ? panel4.selectedColor : panel4.baseColor);
				panel4.selected = v4;
			}
			if(this.selected != v3 && catalyst_scenes_SelectCatScene.lastSelected != v3) {
				catalyst_Sound.sfxQueue.push("blip");
				catalyst_Sound.volumeQueue.push(1);
			}
			catalyst_scenes_SelectCatScene.lastSelected = this.selected = v3;
			this.updateActionButton();
		}
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		if(this.selected != null) {
			this.selectedLabel.set_text(this.getLabel(this.selected));
			this.updateActionButton();
		}
	}
	,close: function() {
		catalyst_scenes_PopupScene.prototype.close.call(this);
		if(this.onCancel != null) {
			this.onCancel();
		}
	}
	,clickCat: function() {
		if(this.selected != null && this.cats.indexOf(this.selected) > -1) {
			this.closeNow();
			this.onSelect(this.selected);
		}
	}
	,updateActionButton: function() {
		var txt = this.selected == null ? "<cat-icon/> <blue>Select</blue>" : this.getLabel(this.selected);
		this.selectedLabel.set_text(txt);
		this.actionButton.set_collidable(this.selected != null && (this.validate == null || this.validate(this.selected)));
		var tmp = this.actionButton.get_collidable() ? 3375104 : 8421504;
		this.actionButton.color = tmp;
	}
	,__class__: catalyst_scenes_SelectCatScene
	,__properties__: $extend(catalyst_scenes_PopupScene.prototype.__properties__,{set_selected:"set_selected"})
});
var catalyst_scenes_SelectRoomScene = function() {
	this.panels = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this,448);
};
$hxClasses["catalyst.scenes.SelectRoomScene"] = catalyst_scenes_SelectRoomScene;
catalyst_scenes_SelectRoomScene.__name__ = ["catalyst","scenes","SelectRoomScene"];
catalyst_scenes_SelectRoomScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_SelectRoomScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	panels: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m;
		var hbox = new haxepunk_layout_LayoutGroup(null,"horizontal");
		hbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		var hbox1 = hbox;
		var n = 0;
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var panel = new catalyst_entities_RoomPanel(room);
			var _this = this.panels;
			if(__map_reserved[room] != null) {
				_this.setReserved(room,panel);
			} else {
				_this.h[room] = panel;
			}
			switch(room) {
			case "gift_room":
				var _this1 = catalyst_GameData.get_current();
				if(_this1.labs.get(_this1.currentRegion).presentTime >= 1) {
					panel.addHighlightArrow();
				}
				break;
			case "potion_lab":
				var _this2 = catalyst_GameData.get_current();
				var _this3 = _this2.labs.get(_this2.currentRegion);
				var maxLength = catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this3.upgrades,"max_found_ingredients",_this3.bonuses);
				var tmp;
				var _this4 = catalyst_GameData.get_current();
				if(_this4.labs.get(_this4.currentRegion).ingredientSearch != null) {
					var _this5 = catalyst_GameData.get_current();
					tmp = _this5.labs.get(_this5.currentRegion).ingredientSearch.ingredients.length >= maxLength;
				} else {
					tmp = false;
				}
				if(tmp) {
					panel.addHighlightArrow();
				}
				break;
			default:
			}
			this.mouseManager.add(panel,null,(function(a1,f) {
				return function() {
					f[0](a1[0]);
				};
			})([room],[$bind(this,this.selectRoom)]));
			hbox1.add(panel);
			if(++n % 4 == 0) {
				vbox.add(hbox1);
				var hbox2 = new haxepunk_layout_LayoutGroup(null,"horizontal");
				hbox2.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
				hbox1 = hbox2;
			}
		}
		vbox.add(hbox1);
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.anchorX = 0.5;
		vbox.layoutX = vbox.layoutY = m2;
		this.layout.add(vbox);
	}
	,selectRoom: function(room) {
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		if(_this1.unlockedRooms.exists(room) && _this1.unlockedRooms.get(room)) {
			var _this2 = catalyst_GameData.get_current();
			if(_this2.labs.get(_this2.currentRegion).currentRoom != room) {
				var _this3 = catalyst_GameData.get_current();
				_this3.labs.get(_this3.currentRegion).currentRoom = room;
				catalyst_GameData.get_current().save();
				catalyst_Sound.sfxQueue.push("travel");
				catalyst_Sound.volumeQueue.push(1);
			}
			this.close();
		} else {
			this.closeNow();
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_RoomUnlockScene(room));
		}
	}
	,__class__: catalyst_scenes_SelectRoomScene
});
var catalyst_scenes_SettingsScene = function() {
	catalyst_scenes_PopupScene.call(this,256);
};
$hxClasses["catalyst.scenes.SettingsScene"] = catalyst_scenes_SettingsScene;
catalyst_scenes_SettingsScene.__name__ = ["catalyst","scenes","SettingsScene"];
catalyst_scenes_SettingsScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_SettingsScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		vbox.anchorX = 0.5;
		vbox.layoutX = m;
		var m2;
		var m3 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		vbox.anchorY = 0.5;
		vbox.layoutY = m2;
		vbox.add(new catalyst_entities_MuteButton(true,this.mouseManager));
		vbox.add(new catalyst_entities_MuteButton(false,this.mouseManager));
		vbox.add(new catalyst_entities_TutorialToggleButton(this.mouseManager));
		var _this = catalyst_GameData.get_current();
		if(_this.labs.get(_this.currentRegion).prestige > 0) {
			vbox.add(new catalyst_entities_FastModeToggleButton(this.mouseManager));
		}
		this.layout.add(vbox);
	}
	,close: function() {
		catalyst_scenes_PopupScene.prototype.close.call(this);
	}
	,__class__: catalyst_scenes_SettingsScene
});
var catalyst_scenes_SingleCatScene = function(cat,onLoad,onRemove) {
	catalyst_scenes_PopupScene.call(this,576,64,true,true);
	this.cat = cat;
	this.onLoad = onLoad;
	this.onRemove = onRemove;
};
$hxClasses["catalyst.scenes.SingleCatScene"] = catalyst_scenes_SingleCatScene;
catalyst_scenes_SingleCatScene.__name__ = ["catalyst","scenes","SingleCatScene"];
catalyst_scenes_SingleCatScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_SingleCatScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	cat: null
	,catEntity: null
	,statLabel: null
	,xpLabel: null
	,starLabel: null
	,maxStarsButton: null
	,onLoad: null
	,onRemove: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var _this = this.bg;
		_this.face.set_color(_this.color = 15326639);
		var panel = new catalyst_entities_CatPanel(this.cat,false,true);
		panel.face.set_color(panel.color = 14597215);
		var l = this.layout.addLayout(panel);
		var m;
		var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		l.anchorX = 0.5;
		l.layoutX = m;
		var m2 = 12 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[12] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(12,"%");
		l.layoutY = m2 == null ? null : { value : m2, min : null, max : null};
		this.catEntity = panel.catEntity;
		if(!this.cat.wild) {
			this.catEntity.set_type("ui");
			this.mouseManager.add(this.catEntity,$bind(this,this.petCat),$bind(this,this.unpetCat),null,$bind(this,this.unpetCat));
		}
		var _this1 = this.cat;
		if(_this1._name == null) {
			_this1._name = catalyst_CatName.random(_this1.sex);
		}
		var nameLabel = new catalyst_graphics_Label(_this1._name,null,2);
		var l1 = this.layout.addLayout(new haxepunk_Entity(null,null,nameLabel));
		var m3 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		l1.layoutX = m3 == null ? null : { value : m3, min : null, max : null};
		var m4 = 4 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[4] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(4,"%");
		l1.layoutY = m4 == null ? null : { value : m4, min : null, max : null};
		this.starLabel = new catalyst_entities_LabelEntity("<max-stars/>" + this.cat.stars,true,2);
		var l2 = this.layout.addLayout(this.starLabel);
		var m5 = 82 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[82] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(82,"%");
		l2.layoutX = m5 == null ? null : { value : m5, min : null, max : null};
		var m6 = 3 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[3] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(3,"%");
		l2.layoutY = m6 == null ? null : { value : m6, min : null, max : null};
		var xpCounter = new catalyst_entities_XPCounter(this.cat);
		var l3 = this.layout.addLayout(xpCounter);
		var m7;
		var m8 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m8 == null) {
			m7 = null;
		} else {
			m7 = { value : m8, min : null, max : null};
		}
		l3.anchorX = 0.5;
		l3.layoutX = m7;
		var m9;
		var m10 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m10 == null) {
			m9 = null;
		} else {
			m9 = { value : m10, min : null, max : null};
		}
		l3.anchorY = 1;
		l3.layoutY = m9;
		this.statLabel = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g < _g1.length) {
			var stat = _g1[_g];
			++_g;
			var this1 = this.statLabel;
			var v = new catalyst_entities_LabelEntity("<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/>" + catalyst__$Stats_Stats_$Impl_$.get(this.cat.stats,stat),true,2);
			var _this2 = this1;
			if(__map_reserved[stat] != null) {
				_this2.setReserved(stat,v);
			} else {
				_this2.h[stat] = v;
			}
			var _this3 = this.statLabel;
			var l4 = this.layout.addLayout(__map_reserved[stat] != null ? _this3.getReserved(stat) : _this3.h[stat]);
			var tmp;
			switch(stat) {
			case "cha":
				var m11 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
				if(m11 == null) {
					tmp = null;
				} else {
					tmp = { value : m11, min : null, max : null};
				}
				break;
			case "int":
				var m12 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
				if(m12 == null) {
					tmp = null;
				} else {
					tmp = { value : m12, min : null, max : null};
				}
				break;
			case "str":
				var m13 = 10 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[10] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(10,"%");
				if(m13 == null) {
					tmp = null;
				} else {
					tmp = { value : m13, min : null, max : null};
				}
				break;
			}
			l4.layoutX = tmp;
			var m14;
			var m15 = 78 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[78] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(78,"%");
			if(m15 == null) {
				m14 = null;
			} else {
				m14 = { value : m15, min : null, max : null};
			}
			l4.anchorY = 1;
			l4.layoutY = m14;
		}
		var c = this.cat.ownMutations == 0 ? "white" : "purple";
		var l5 = "<generation-icon/>" + this.cat.generation;
		if(this.cat.mutations > 0) {
			l5 += "\n<dna-icon/><" + c + ">" + this.cat.mutations + "</" + c + ">";
		}
		var genLabel = new catalyst_graphics_Label(l5,true);
		var l6 = this.layout.addLayout(new haxepunk_Entity(null,null,genLabel));
		var m16 = 10 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[10] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(10,"%");
		l6.layoutX = m16 == null ? null : { value : m16, min : null, max : null};
		var m17 = 47 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[47] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(47,"%");
		l6.layoutY = m17 == null ? null : { value : m17, min : null, max : null};
		var _this4 = this.cat;
		var amt = _this4.hp / (_this4.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"cha"));
		var c1 = amt > 0.7 ? "green" : amt > 0.3 ? "yellow" : "red";
		this.xpLabel = new catalyst_entities_LabelEntity("<red>HP</red> <" + c1 + ">" + (Math.round(_this4.hp) | 0) + ("</" + c1 + ">/") + (_this4.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this4.stats,"cha")),true);
		var l7 = this.layout.addLayout(this.xpLabel);
		var m18 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
		l7.layoutX = m18 == null ? null : { value : m18, min : null, max : null};
		var m19 = 49 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[49] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(49,"%");
		l7.layoutY = m19 == null ? null : { value : m19, min : null, max : null};
		var buttons = new haxepunk_layout_LayoutGroup(null,"vertical");
		buttons.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
		if(this.cat.wild) {
			var _this5 = catalyst_GameData.get_current();
			var _this6 = _this5.labs.get(_this5.currentRegion).cats;
			var count = 0;
			var _g2 = 0;
			var _g11 = catalyst__$Room_Room_$Impl_$.activeCountRooms;
			while(_g2 < _g11.length) {
				var room = _g11[_g2];
				++_g2;
				count += _this6.cats.get(room).length;
			}
			var _this7 = catalyst_GameData.get_current();
			var _this8 = _this7.labs.get(_this7.currentRegion);
			if(count < catalyst__$Upgrades_Upgrades_$Impl_$.getIntValue(_this8.upgrades,"cat_capacity",_this8.bonuses)) {
				buttons.add(new catalyst_entities_TextButton("<door-enter-icon/> Adopt",3.5,this.mouseManager,$bind(this,this.adoptCat)));
			} else {
				var label = new catalyst_graphics_Label("<red><center>You have too\nmany cats...</center></red>");
				var wrapper = new haxepunk_Entity(null,null,label);
				if(label._dirty) {
					label.parseText();
				}
				wrapper.set_width(label.textWidth + 32);
				if(label._dirty) {
					label.parseText();
				}
				wrapper.set_height(label.textHeight + 32);
				buttons.add(wrapper);
			}
		} else if(catalyst__$Room_Room_$Impl_$.get_canRetrieveCats(this.cat.room)) {
			var _this9 = catalyst_GameData.get_current();
			_this9.labs.get(_this9.currentRegion);
			var _this10 = catalyst_GameData.get_current();
			_this10.labs.get(_this10.currentRegion);
			var _this11 = catalyst_GameData.get_current();
			var _this12 = _this11.labs.get(_this11.currentRegion);
			var tmp1;
			if(this.cat.stars >= (Math.min(99,5 + _this12.battleLevel * 5 + _this12.prestige) | 0)) {
				tmp1 = "<max-stars/> MAX!";
			} else {
				var lv = this.cat.stars;
				var _this13 = catalyst_GameData.get_current();
				tmp1 = "<max-stars/>+1 <catnip-icon/>" + (50 * Math.pow(1.065,Math.max(lv - _this13.labs.get(_this13.currentRegion).prestige,1) - 1) | 0);
			}
			this.maxStarsButton = new catalyst_entities_TextButton(tmp1,3.5,this.mouseManager,$bind(this,this.trainCat));
			buttons.add(this.maxStarsButton);
			buttons.add(new catalyst_entities_TextButton("<door-exit-icon/>Send to...",3.5,this.mouseManager,$bind(this,this.moveCat)));
		}
		var m20 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		buttons.layoutX = m20 == null ? null : { value : m20, min : null, max : null};
		var m21;
		var m22 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		if(m22 == null) {
			m21 = null;
		} else {
			m21 = { value : m22, min : null, max : null};
		}
		buttons.anchorY = 1;
		buttons.layoutY = m21;
		this.layout.add(buttons);
		this.layout.paddingLeft = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(400), min : null, max : null};
		this.layout.paddingRight = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(752), min : null, max : null};
	}
	,update: function() {
		if(catalyst_scenes_SingleCatScene.purrTime > 0) {
			catalyst_scenes_SingleCatScene.purrTime -= haxepunk_HXP.elapsed / 5;
			if(catalyst_scenes_SingleCatScene.purrTime < 0) {
				if(this.cat.petting) {
					catalyst_Sound.sfxQueue.push("purr");
					catalyst_Sound.volumeQueue.push(1);
					catalyst_scenes_SingleCatScene.purrTime = 1;
				} else {
					catalyst_scenes_SingleCatScene.purrTime = 0;
				}
			}
		}
		var _this = this.cat;
		if(this.cat.hp < _this.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this.stats,"cha")) {
			var _this1 = catalyst_GameData.get_current();
			var _this2 = _this1.labs.get(_this1.currentRegion);
			var growthRate = catalyst_GameData.formatNumber(catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this2.upgrades,"recovery",_this2.bonuses),1);
			var _this3 = this.cat;
			var toMaxHp = _this3.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this3.stats,"cha") - this.cat.hp;
			var _this4 = catalyst_GameData.get_current();
			var _this5 = _this4.labs.get(_this4.currentRegion);
			var toMaxHp1 = catalyst_GameData.formatTime(toMaxHp / catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this5.upgrades,"recovery",_this5.bonuses));
			var _this6 = this.xpLabel;
			_this6.label.set_text("<right><red>+" + growthRate + " HP/s</red>\n<heal-icon/><red>" + toMaxHp1 + "</red></right>");
			_this6.setDimensions();
		} else {
			var tmp = this.cat.level;
			var _this7 = this.cat;
			var _this8 = _this7._maxLevel;
			var x;
			if(_this7.wild) {
				x = 0;
			} else {
				var _this9 = catalyst_GameData.get_current();
				x = _this9.labs.get(_this9.currentRegion).tech / 100;
			}
			if(tmp < (_this8 * (1 + x) | 0)) {
				var growthRate1 = this.cat;
				var _this10 = catalyst_GameData.get_current();
				var growthRate2 = catalyst_GameData.formatNumber(growthRate1.growthRate(_this10.labs.get(_this10.currentRegion).gourmetTime > 0),1);
				var _this11 = this.cat;
				var _this12 = _this11._maxLevel;
				var x1;
				if(_this11.wild) {
					x1 = 0;
				} else {
					var _this13 = catalyst_GameData.get_current();
					x1 = _this13.labs.get(_this13.currentRegion).tech / 100;
				}
				var lv = (_this12 * (1 + x1) | 0) - 1;
				if(catalyst_XP.xpTotals == null) {
					catalyst_XP.xpTotals = new Array(500);
					var _g = 0;
					while(_g < 500) {
						var i = _g++;
						if(i == 0) {
							catalyst_XP.xpTotals[i] = 60;
						} else {
							var newTotal = 60 * Math.pow(1.08,Math.min(i,50));
							if(i > 50) {
								newTotal *= Math.pow(1.09,i - 50);
							}
							catalyst_XP.xpTotals[i] = Math.round((catalyst_XP.xpTotals[i - 1] + newTotal) / 1) | 0;
						}
					}
				}
				var x2 = (lv < 1 ? 0 : catalyst_XP.xpTotals[lv - 1]) - this.cat.xp;
				var x3 = this.cat;
				var _this14 = catalyst_GameData.get_current();
				var toMaxLevel = catalyst_GameData.formatTime(x2 / x3.growthRate(_this14.labs.get(_this14.currentRegion).gourmetTime > 0) | 0);
				var _this15 = this.xpLabel;
				_this15.label.set_text("<right><blue>+" + growthRate2 + " XP/s\n" + toMaxLevel + "</right>");
				_this15.setDimensions();
			} else {
				var _this16 = this.xpLabel;
				_this16.label.set_text("");
				_this16.setDimensions();
			}
		}
		var _this17 = this.xpLabel.label;
		var _this18 = this.xpLabel.label;
		if(_this18._dirty) {
			_this18.parseText();
		}
		_this17.x = -_this18.textWidth;
		var _this19 = this.starLabel;
		_this19.label.set_text("<max-stars/>" + this.cat.stars);
		_this19.setDimensions();
		var _this20 = this.starLabel.label;
		var _this21 = this.starLabel.label;
		if(_this21._dirty) {
			_this21.parseText();
		}
		_this20.x = -_this21.textWidth;
		var _g1 = 0;
		var _g11 = catalyst__$CatStat_CatStat_$Impl_$.ordered;
		while(_g1 < _g11.length) {
			var stat = _g11[_g1];
			++_g1;
			var _this22 = this.statLabel;
			var _this23 = __map_reserved[stat] != null ? _this22.getReserved(stat) : _this22.h[stat];
			var s = "<" + catalyst__$CatStat_CatStat_$Impl_$.get_icon(stat) + "/>" + catalyst__$Stats_Stats_$Impl_$.get(this.cat.stats,stat);
			_this23.label.set_text(s);
			_this23.setDimensions();
		}
		var _this24 = this.statLabel;
		var key = "int";
		var _this25 = (__map_reserved[key] != null ? _this24.getReserved(key) : _this24.h[key]).label;
		var _this26 = this.statLabel;
		var key1 = "int";
		var _this27 = (__map_reserved[key1] != null ? _this26.getReserved(key1) : _this26.h[key1]).label;
		if(_this27._dirty) {
			_this27.parseText();
		}
		_this25.x = -_this27.textWidth / 2;
		var _this28 = this.statLabel;
		var key2 = "cha";
		var _this29 = (__map_reserved[key2] != null ? _this28.getReserved(key2) : _this28.h[key2]).label;
		var _this30 = this.statLabel;
		var key3 = "cha";
		var _this31 = (__map_reserved[key3] != null ? _this30.getReserved(key3) : _this30.h[key3]).label;
		if(_this31._dirty) {
			_this31.parseText();
		}
		_this29.x = -_this31.textWidth;
		if(this.maxStarsButton != null) {
			var _this32 = catalyst_GameData.get_current();
			var _this33 = _this32.labs.get(_this32.currentRegion);
			var maxStars = Math.min(99,5 + _this33.battleLevel * 5 + _this33.prestige) | 0;
			var lv1 = this.cat.stars;
			var _this34 = catalyst_GameData.get_current();
			var trainCost = 50 * Math.pow(1.065,Math.max(lv1 - _this34.labs.get(_this34.currentRegion).prestige,1) - 1) | 0;
			var canUpgrade;
			if(maxStars > 0 && this.cat.stars < maxStars) {
				var _this35 = catalyst_GameData.get_current();
				canUpgrade = _this35.labs.get(_this35.currentRegion).catnip >= trainCost;
			} else {
				canUpgrade = false;
			}
			this.maxStarsButton.set_visible(maxStars > 0);
			this.maxStarsButton.set_collidable(canUpgrade);
			this.maxStarsButton.color = canUpgrade ? 3375104 : 8421504;
			if(this.fadeIn >= 1 && this.cat.stars == 0 && canUpgrade) {
				catalyst_GameData.get_current().checkTutorial("star_level");
			}
		}
		if(this.fadeIn >= 1) {
			if(this.cat.level > 1) {
				catalyst_GameData.get_current().checkTutorial("gain_level");
			}
			var tmp1 = this.cat.level;
			var _this36 = this.cat;
			var _this37 = _this36._maxLevel;
			var x4;
			if(_this36.wild) {
				x4 = 0;
			} else {
				var _this38 = catalyst_GameData.get_current();
				x4 = _this38.labs.get(_this38.currentRegion).tech / 100;
			}
			if(tmp1 == (_this37 * (1 + x4) | 0)) {
				catalyst_GameData.get_current().checkTutorial("max_level");
			}
			var _this39 = this.cat;
			if(this.cat.hp < _this39.level + 20 + (catalyst__$Stats_Stats_$Impl_$.get(_this39.stats,"str") * 1.5 | 0) + catalyst__$Stats_Stats_$Impl_$.get(_this39.stats,"int") + catalyst__$Stats_Stats_$Impl_$.get(_this39.stats,"cha") - 1) {
				catalyst_GameData.get_current().checkTutorial("hurt");
			}
			if(this.cat.generation > 1) {
				catalyst_GameData.get_current().checkTutorial("kitten");
			}
			if(this.cat.mutations > 0) {
				catalyst_GameData.get_current().checkTutorial("mutation");
			}
		}
		catalyst_scenes_PopupScene.prototype.update.call(this);
		if(this.fadeIn >= 1) {
			catalyst_GameData.get_current().checkTutorial("cat_stats");
		}
		if(this.onLoad != null) {
			this.onLoad();
			this.onLoad = null;
		}
	}
	,adoptCat: function() {
		this.cat.adopt();
		var _this = catalyst_GameData.get_current();
		_this.labs.get(_this.currentRegion).cats.move(this.cat,"living_room");
		if(this.onRemove != null) {
			this.onRemove();
		}
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_animations_AdoptCatScene(this.cat,null,$bind(this,this.close)));
		catalyst_Sound.sfxQueue.push("getstuff");
		catalyst_Sound.volumeQueue.push(1);
		var cat = this.cat;
		var _this1 = catalyst_GameData.get_current();
		_this1.labs.get(_this1.currentRegion).checkBreed(cat);
		catalyst_GameData.get_current().save();
	}
	,moveCat: function() {
		this.closeNow();
		haxepunk_HXP.engine.pushScene(new catalyst_scenes_MoveCatScene(this.cat));
	}
	,trainCat: function() {
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion);
		var maxStars = Math.min(99,5 + _this1.battleLevel * 5 + _this1.prestige) | 0;
		var lv = this.cat.stars;
		var _this2 = catalyst_GameData.get_current();
		var trainCost = 50 * Math.pow(1.065,Math.max(lv - _this2.labs.get(_this2.currentRegion).prestige,1) - 1) | 0;
		var tmp;
		if(this.cat.stars < maxStars) {
			var _this3 = catalyst_GameData.get_current();
			tmp = _this3.labs.get(_this3.currentRegion).catnip >= trainCost;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this4 = catalyst_GameData.get_current();
			var v = _this4.labs.get(_this4.currentRegion).catnip - trainCost;
			var _this5 = catalyst_GameData.get_current();
			_this5.labs.get(_this5.currentRegion).catnip = v;
			++this.cat.stars;
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			var _this6 = this.maxStarsButton;
			var _this7 = catalyst_GameData.get_current();
			var _this8 = _this7.labs.get(_this7.currentRegion);
			var v1;
			if(this.cat.stars >= (Math.min(99,5 + _this8.battleLevel * 5 + _this8.prestige) | 0)) {
				v1 = "<max-stars/> MAX!";
			} else {
				var lv1 = this.cat.stars;
				var _this9 = catalyst_GameData.get_current();
				v1 = "<max-stars/>+1 <catnip-icon/>" + (50 * Math.pow(1.065,Math.max(lv1 - _this9.labs.get(_this9.currentRegion).prestige,1) - 1) | 0);
			}
			_this6.label.set_text(v1);
			var _this10 = _this6.label;
			var value = _this6.get_width();
			var _this11 = _this6.label;
			if(_this11._dirty) {
				_this11.parseText();
			}
			_this10.x = (value - _this11.textWidth) / 2;
			var _this12 = _this6.label;
			var value1 = _this6.get_height();
			var _this13 = _this6.label;
			if(_this13._dirty) {
				_this13.parseText();
			}
			_this12.y = (value1 - _this13.textHeight) / 2 + 2;
			_this6.text = v1;
			this.catEntity.sparkle();
			catalyst_GameData.get_current().save();
		}
	}
	,petCat: function() {
		if(catalyst_scenes_SingleCatScene.purrTime <= 0) {
			catalyst_Sound.sfxQueue.push("purr");
			catalyst_Sound.volumeQueue.push(1);
			catalyst_scenes_SingleCatScene.purrTime = 1;
		}
		this.cat.petting = true;
		this.catEntity.sp.setAnimation("petting",true);
		var _this = this.catEntity.sp;
		if(_this.eyesOpen != false) {
			_this.state.setAnimationByName(1,"eyes closed",true);
			_this.state.setAnimationByName(2,"rest wings",true);
		}
		_this.eyesOpen = false;
	}
	,unpetCat: function() {
		this.cat.petting = false;
		this.catEntity.sp.setAnimation("sit",true);
		var _this = this.catEntity.sp;
		if(_this.eyesOpen != true) {
			_this.state.setAnimationByName(1,"eyes blink",true);
			_this.state.setAnimationByName(2,"flap wings",true);
		}
		_this.eyesOpen = true;
	}
	,end: function() {
		this.unpetCat();
		catalyst_scenes_PopupScene.prototype.end.call(this);
	}
	,__class__: catalyst_scenes_SingleCatScene
});
var catalyst_scenes_TrophyScene = function() {
	this.panels = [];
	catalyst_scenes_PopupScene.call(this);
};
$hxClasses["catalyst.scenes.TrophyScene"] = catalyst_scenes_TrophyScene;
catalyst_scenes_TrophyScene.__name__ = ["catalyst","scenes","TrophyScene"];
catalyst_scenes_TrophyScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_TrophyScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	panels: null
	,selectedLabel: null
	,descBox: null
	,setSelected: function(v,lv) {
		var _g = 0;
		var _g1 = this.panels;
		while(_g < _g1.length) {
			var panel = _g1[_g];
			++_g;
			var v1 = panel.trophy == v && panel.level == lv;
			panel.face.set_color(v1 ? panel.selectedColor : panel.baseColor);
			panel.selected = v1;
		}
		var earned;
		var _this = catalyst_GameData.get_current();
		var _this1 = _this.labs.get(_this.currentRegion).trophies;
		if(__map_reserved[v] != null ? _this1.existsReserved(v) : _this1.h.hasOwnProperty(v)) {
			var _this2 = catalyst_GameData.get_current();
			earned = catalyst__$Trophies_Trophies_$Impl_$.get(_this2.labs.get(_this2.currentRegion).trophies,v) >= lv;
		} else {
			earned = false;
		}
		var visible;
		if(!(earned || catalyst__$Trophy_Trophy_$Impl_$.get_room(v) == null)) {
			var room = catalyst__$Trophy_Trophy_$Impl_$.get_room(v);
			var _this3 = catalyst_GameData.get_current();
			visible = _this3.labs.get(_this3.currentRegion).roomVisible(room);
		} else {
			visible = true;
		}
		if(visible) {
			var name = earned ? "<red>" + catalyst__$Trophy_Trophy_$Impl_$.$name(v,lv) + "</red>" : "? ? ?";
			var tmp = this.selectedLabel;
			var tmp1 = "<center>" + name + "\n\n" + catalyst__$Trophy_Trophy_$Impl_$.description(v,lv) + "\n\n<blue>Bonus:</blue>\n<green>";
			var tmp2 = catalyst__$UpgradeType_UpgradeType_$Impl_$.get_name(catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(v)) + " +";
			var this1 = catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(v);
			var tmp3 = catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(this1)][0];
			var tmp4 = catalyst__$Trophy_Trophy_$Impl_$.get_bonus(v);
			var this2 = catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(v);
			tmp.set_text(tmp1 + (tmp2 + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription(tmp3,tmp4 / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases[catalyst__$UpgradeType_UpgradeType_$Impl_$.get___dataIndex(this2)][0]))) + "</green></center>");
		} else {
			this.selectedLabel.set_text("<center><lock/> ? ? ?</center>");
		}
	}
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		this.layout.add(cols);
		var vbox = new haxepunk_layout_LayoutGroup(null,"vertical");
		vbox.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(4), min : null, max : null};
		var scrollList = new catalyst_entities_ScrollList(vbox,this.mouseManager);
		var mouseManager = scrollList.mouseManager;
		var n = 0;
		var hbox = null;
		var _g = 0;
		var _g1 = catalyst__$Trophy_Trophy_$Impl_$.ordered;
		while(_g < _g1.length) {
			var trophy = _g1[_g];
			++_g;
			var _g3 = 1;
			var _g2 = catalyst__$Trophy_Trophy_$Impl_$.__names[catalyst__$Trophy_Trophy_$Impl_$.get___dataIndex(trophy)].length + 1;
			while(_g3 < _g2) {
				var level = _g3++;
				if(hbox == null) {
					var hbox1 = new haxepunk_layout_LayoutGroup(null,"horizontal");
					hbox1.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(4), min : null, max : null};
					hbox = hbox1;
				}
				var panel = new catalyst_entities_TrophyPanel(trophy,level);
				mouseManager.add(panel,null,(function(lv,v,f) {
					return function() {
						f[0](v[0],lv[0]);
					};
				})([level],[trophy],[$bind(this,this.setSelected)]));
				this.panels.push(panel);
				hbox.add(panel);
				if(++n % 4 == 0) {
					vbox.add(hbox);
					hbox = null;
				}
			}
		}
		if(hbox != null) {
			vbox.add(hbox);
		}
		var l = cols.addLayout(scrollList);
		l.layoutWidth = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(774.), min : null, max : null};
		var m = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		l.layoutHeight = m == null ? null : { value : m, min : null, max : null};
		this.descBox = new haxepunk_layout_LayoutGroup();
		var m1 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		this.descBox.layoutWidth = this.descBox.layoutHeight = m1 == null ? null : { value : m1, min : null, max : null};
		this.selectedLabel = new catalyst_graphics_Label("",null,1,16777215,1);
		var _this = this.selectedLabel;
		if(true != _this.wrap) {
			_this._dirty = true;
		}
		_this.wrap = true;
		var labelEntity = new haxepunk_Entity(0,0,this.selectedLabel);
		this.descBox.add(labelEntity);
		cols.add(this.descBox);
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		var _this = this.selectedLabel;
		var v = this.descBox.get_width();
		if(v != _this.width) {
			_this._dirty = true;
		}
		_this.width = v;
	}
	,__class__: catalyst_scenes_TrophyScene
});
var catalyst_scenes_TutorialScene = function(messages,helperImage) {
	catalyst_scenes_PopupScene.call(this,128,64);
	this.messages = messages;
	this.helperImage = helperImage;
};
$hxClasses["catalyst.scenes.TutorialScene"] = catalyst_scenes_TutorialScene;
catalyst_scenes_TutorialScene.__name__ = ["catalyst","scenes","TutorialScene"];
catalyst_scenes_TutorialScene.getSpecialVars = function() {
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["click"] != null) {
		_g.setReserved("click","click");
	} else {
		_g.h["click"] = "click";
	}
	var key = _g.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var title = HxOverrides.substr(key1,0,1).toUpperCase() + HxOverrides.substr(key1,1,null);
		var val = HxOverrides.substr(__map_reserved[key1] != null ? _g.getReserved(key1) : _g.h[key1],0,1).toUpperCase() + HxOverrides.substr(__map_reserved[key1] != null ? _g.getReserved(key1) : _g.h[key1],1,null);
		if(__map_reserved[title] != null) {
			_g.setReserved(title,val);
		} else {
			_g.h[title] = val;
		}
		var upper = key1.toUpperCase();
		var val1 = (__map_reserved[key1] != null ? _g.getReserved(key1) : _g.h[key1]).toUpperCase();
		if(__map_reserved[upper] != null) {
			_g.setReserved(upper,val1);
		} else {
			_g.h[upper] = val1;
		}
	}
	return _g;
};
catalyst_scenes_TutorialScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_TutorialScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	messages: null
	,messageLabel: null
	,helperImage: null
	,begin: function() {
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		this.assetCache.getTexture("assets/graphics/professor.png");
		var _g = haxepunk_HXP.engine.iterator();
		while(_g.scenes.length > 0) {
			var scene = _g.scenes.pop();
			if(scene != this && js_Boot.__instanceof(scene,catalyst_scenes_PopupScene)) {
				this.playSound = false;
				break;
			}
		}
		var _this = this.bg;
		_this.face.set_color(_this.color = 8421504);
		this.messageLabel = new catalyst_graphics_Label(this.format(this.messages.pop()),false,0,16777215,(haxepunk_HXP.width - 256) * 0.6 | 0);
		var entity = new haxepunk_Entity(null,null,this.messageLabel);
		entity.set_width(this.messageLabel.width | 0);
		var wrapper = new haxepunk_layout_LayoutGroup(entity);
		var m;
		var m1 = 90 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[90] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(90,"%");
		if(m1 == null) {
			m = null;
		} else {
			m = { value : m1, min : null, max : null};
		}
		wrapper.anchorX = 1;
		wrapper.layoutX = m;
		var m2;
		var m3 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		wrapper.anchorY = 0;
		wrapper.layoutY = m2;
		this.layout.add(wrapper);
		var wrapper1 = new haxepunk_layout_LayoutGroup(new catalyst_entities_Professor());
		var m4;
		var m5 = 15 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[15] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(15,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		wrapper1.anchorX = 0.5;
		wrapper1.layoutX = m4;
		var m6;
		var m7 = 70 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[70] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(70,"%");
		if(m7 == null) {
			m6 = null;
		} else {
			m6 = { value : m7, min : null, max : null};
		}
		wrapper1.anchorY = 1;
		wrapper1.layoutY = m6;
		this.layout.add(wrapper1);
		var wrapper2 = new haxepunk_layout_LayoutGroup(new catalyst_entities_TextButton("OK",null,this.mouseManager,$bind(this,this.nextMessage)));
		var m8;
		var m9 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m9 == null) {
			m8 = null;
		} else {
			m8 = { value : m9, min : null, max : null};
		}
		wrapper2.anchorX = 0.5;
		wrapper2.layoutX = m8;
		var m10;
		var m11 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m11 == null) {
			m10 = null;
		} else {
			m10 = { value : m11, min : null, max : null};
		}
		wrapper2.anchorY = 1;
		wrapper2.layoutY = m10;
		this.layout.add(wrapper2);
		this.showPopups = false;
	}
	,nextMessage: function() {
		catalyst_Sound.sfxQueue.push("upgrade");
		catalyst_Sound.volumeQueue.push(1);
		var msg = this.format(this.messages.pop());
		if(msg == null) {
			this.close();
		} else {
			this.messageLabel.set_text(msg);
		}
	}
	,format: function(msg) {
		if(msg != null) {
			msg = StringTools.trim(msg);
			var key = catalyst_scenes_TutorialScene.specialVars.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = catalyst_scenes_TutorialScene.specialVars;
				msg = StringTools.replace(msg,"$(" + key1 + ")",__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
			}
		}
		return msg;
	}
	,requestClose: function() {
		catalyst_GameData.get_current().checkTutorial("tutorials");
		catalyst_scenes_PopupScene.prototype.requestClose.call(this);
	}
	,closeNow: function() {
		catalyst_scenes_PopupScene.prototype.closeNow.call(this);
		if(this.helperImage != null) {
			haxepunk_HXP.engine.pushScene(new catalyst_scenes_HelperImageScene(this.helperImage));
		}
	}
	,__class__: catalyst_scenes_TutorialScene
});
var catalyst_scenes_UpgradeScene = function(room) {
	this.panels = new haxe_ds_StringMap();
	this.categoryButtons = [];
	this.categoryTabs = new haxe_ds_StringMap();
	catalyst_scenes_PopupScene.call(this);
	this.room = room;
};
$hxClasses["catalyst.scenes.UpgradeScene"] = catalyst_scenes_UpgradeScene;
catalyst_scenes_UpgradeScene.__name__ = ["catalyst","scenes","UpgradeScene"];
catalyst_scenes_UpgradeScene.__super__ = catalyst_scenes_PopupScene;
catalyst_scenes_UpgradeScene.prototype = $extend(catalyst_scenes_PopupScene.prototype,{
	selectedCategory: null
	,set_selectedCategory: function(v) {
		if(this.selectedCategory != v) {
			if(this.selectedCategory != null) {
				var key = this.selectedCategory;
				var _this = this.categoryTabs;
				this.tabs.remove(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]);
			}
			if(v != null) {
				var _this1 = this.categoryTabs;
				this.tabs.add(__map_reserved[v] != null ? _this1.getReserved(v) : _this1.h[v]);
			}
			if(this.layout._scene == this) {
				this.layout.layoutChildren();
			}
			var _g = 0;
			var _g1 = this.categoryButtons;
			while(_g < _g1.length) {
				var btn = _g1[_g];
				++_g;
				btn.color = v != null && btn.icon == catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get_icon(v) ? 3375104 : 16777215;
			}
			var _this2 = catalyst_scenes_UpgradeScene.lastSelectedInCategory;
			this.set_selected(__map_reserved[v] != null ? _this2.getReserved(v) : _this2.h[v]);
		}
		return this.selectedCategory = v;
	}
	,selected: null
	,set_selected: function(v) {
		var _this = this.panels;
		var panel = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(panel.hasNext()) {
			var panel1 = panel.next();
			var v1 = panel1.phase == v;
			panel1.face.set_color(v1 ? panel1.selectedColor : panel1.baseColor);
			panel1.selected = v1;
		}
		var txt = "";
		if(v != null) {
			var _this1 = catalyst_GameData.get_current();
			var this1 = _this1.labs.get(_this1.currentRegion).upgrades;
			var lv;
			var _this2 = this1;
			if(__map_reserved[v] != null ? _this2.existsReserved(v) : _this2.h.hasOwnProperty(v)) {
				var _this3 = this1;
				lv = __map_reserved[v] != null ? _this3.getReserved(v) : _this3.h[v];
			} else {
				lv = 0;
			}
			var maxLv = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(v);
			var _this4 = catalyst_GameData.get_current();
			var _this5 = _this4.labs.get(_this4.currentRegion);
			var upgradeCost = catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this5.upgrades,v,_this5.prestige,_this5.bonuses);
			var _this6 = catalyst_GameData.get_current();
			_this6.labs.get(_this6.currentRegion);
			var _this7 = catalyst_GameData.get_current();
			_this7.labs.get(_this7.currentRegion);
			var workCost = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(v);
			var _this8 = catalyst_GameData.get_current();
			var prestige = _this8.labs.get(_this8.currentRegion).prestige;
			var fameCost = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(v) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(v) * (Math.max(0,lv - prestige) | 0);
			var levelDesc = "";
			levelDesc = "" + (" <blue>Level </blue><green>" + lv + "/" + maxLv + "</green>");
			txt = "<blue><big>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_name(v).toUpperCase() + "</big></blue><small>\n" + levelDesc + "\n" + catalyst__$UpgradeType_UpgradeType_$Impl_$.get_desc(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(v)) + "\n";
			if(lv == 0) {
				txt += "Per level:</small>\n <green>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription(v,catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel(v) / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(v)) + "</green><small>\nRequired:</small>";
				txt += "\n <catnip-icon/><green>" + catalyst_GameData.formatNumber(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_baseCost(v)) + "</green>";
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(v) > 0) {
					var c;
					var _this9 = catalyst_GameData.get_current();
					if(_this9.labs.get(_this9.currentRegion).work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(v)) {
						c = "green";
					} else {
						c = "red";
					}
					txt += " <hammer-icon/><" + c + ">" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(v) + "</" + c + ">";
				}
				if(fameCost > 0) {
					var c1;
					var _this10 = catalyst_GameData.get_current();
					if(_this10.labs.get(_this10.currentRegion).fame >= fameCost) {
						c1 = "green";
					} else {
						c1 = "red";
					}
					txt += " <ribbon-icon/><" + c1 + ">" + fameCost + "</" + c1 + ">";
				}
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(v) != null) {
					var c2;
					var _this11 = catalyst_GameData.get_current();
					var this2 = _this11.labs.get(_this11.currentRegion).upgrades;
					var phase = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(v);
					var c3;
					var _this12 = this2;
					if(__map_reserved[phase] != null ? _this12.existsReserved(phase) : _this12.h.hasOwnProperty(phase)) {
						var _this13 = this2;
						c3 = __map_reserved[phase] != null ? _this13.getReserved(phase) : _this13.h[phase];
					} else {
						c3 = 0;
					}
					if(c3 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(v)) {
						c2 = "green";
					} else {
						c2 = "red";
					}
					txt += "\n <upgrade-icon/><" + c2 + ">" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_name(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(v)) + " Lv" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(v) + "</" + c2 + ">";
				}
			} else {
				var type = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(v);
				var _this14 = catalyst_GameData.get_current();
				var _this15 = _this14.labs.get(_this14.currentRegion);
				txt += "Current:</small>\n <green>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription(v,catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this15.upgrades,type,_this15.bonuses)) + "</green>";
				var _this16 = catalyst_GameData.get_current();
				if(catalyst__$Upgrades_Upgrades_$Impl_$.get(_this16.labs.get(_this16.currentRegion).upgrades,v) < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(v)) {
					var c11;
					var _this17 = catalyst_GameData.get_current();
					if(_this17.labs.get(_this17.currentRegion).work >= workCost) {
						c11 = "green";
					} else {
						c11 = "red";
					}
					var c21;
					var _this18 = catalyst_GameData.get_current();
					if(_this18.labs.get(_this18.currentRegion).fame >= fameCost) {
						c21 = "green";
					} else {
						c21 = "red";
					}
					var _this19 = catalyst_GameData.get_current();
					var temple = catalyst__$Upgrades_Upgrades_$Impl_$.get(_this19.labs.get(_this19.currentRegion).upgrades,v);
					var _this20 = catalyst_GameData.get_current();
					var prestigeLevel = _this20.labs.get(_this20.currentRegion).prestige;
					var temple1 = temple <= (catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_prestige(v) * Math.min(prestigeLevel,catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxPrestige(v)) | 0);
					var type1 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_parent(v);
					var _this21 = catalyst_GameData.get_current();
					var _this22 = _this21.labs.get(_this21.currentRegion);
					txt += "<small>\nNext level:</small>\n <green>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.valueDescription(v,catalyst__$Upgrades_Upgrades_$Impl_$.getValue(_this22.upgrades,type1,_this22.bonuses) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_perLevel(v) / catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_divBy(v)) + "</green>\n<small>Upgrade cost:</small>\n <catnip-icon/><green>" + catalyst_GameData.formatNumber(upgradeCost) + "</green>" + (temple1 ? "<temple-icon/>" : "") + (workCost > 0 ? " <hammer-icon/><" + c11 + ">" + workCost + "</" + c11 + ">" : "") + (fameCost > 0 ? " <ribbon-icon/><" + c21 + ">" + fameCost + "</" + c21 + ">" : "");
				}
				txt += "\n<small><offwhite>" + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_desc(v) + "</offwhite></small>";
			}
		}
		this.selectedLabel.set_text(txt);
		var tmp;
		if(this.selected != v) {
			var key = this.room;
			var _this23 = catalyst_scenes_UpgradeScene.lastSelected;
			tmp = (__map_reserved[key] != null ? _this23.getReserved(key) : _this23.h[key]) != v;
		} else {
			tmp = false;
		}
		if(tmp) {
			catalyst_Sound.sfxQueue.push("blip");
			catalyst_Sound.volumeQueue.push(1);
		}
		var this3 = catalyst_scenes_UpgradeScene.lastSelectedInCategory;
		var k = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_category(v);
		var k1 = this.room;
		var v2 = this.selected = v;
		var _this24 = catalyst_scenes_UpgradeScene.lastSelected;
		if(__map_reserved[k1] != null) {
			_this24.setReserved(k1,v2);
		} else {
			_this24.h[k1] = v2;
		}
		var _this25 = this3;
		if(__map_reserved[k] != null) {
			_this25.setReserved(k,v2);
		} else {
			_this25.h[k] = v2;
		}
		return v2;
	}
	,tabs: null
	,categoryTabs: null
	,categoryButtons: null
	,panels: null
	,selectedLabel: null
	,upgradeButton: null
	,unlockButton: null
	,room: null
	,begin: function() {
		var _gthis = this;
		catalyst_scenes_PopupScene.prototype.begin.call(this);
		var cols = new haxepunk_layout_LayoutGroup(null,"horizontal");
		cols.padding = cols.paddingLeft = cols.paddingRight = cols.paddingTop = cols.paddingBottom = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		cols.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(64), min : null, max : null};
		var col = new haxepunk_layout_LayoutGroup(null,"vertical");
		var btns = new haxepunk_layout_LayoutGroup(null,"horizontal");
		var _g = 0;
		var _g1 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.upgradesForRoom(this.room);
		while(_g < _g1.length) {
			var category = _g1[_g];
			++_g;
			var btn = new catalyst_entities_IconButton(catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get_icon(category),this.mouseManager,(function(v,f) {
				return function() {
					return f[0](v[0]);
				};
			})([category],[$bind(this,this.set_selectedCategory)]));
			btns.add(btn);
			this.categoryButtons.push(btn);
		}
		col.add(btns);
		this.tabs = new haxepunk_layout_LayoutGroup();
		var _g2 = 0;
		var _g11 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.upgradesForRoom(this.room);
		while(_g2 < _g11.length) {
			var category1 = _g11[_g2];
			++_g2;
			var box1 = new haxepunk_layout_LayoutGroup(null,"vertical");
			box1.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
			var m;
			var m1 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
			if(m1 == null) {
				m = null;
			} else {
				m = { value : m1, min : null, max : null};
			}
			box1.anchorY = 0.5;
			box1.layoutY = m;
			var box2 = new haxepunk_layout_LayoutGroup(null,"horizontal");
			box2.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
			var box21 = box2;
			var n = 0;
			var _g21 = 0;
			var _g3 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__phases[catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get___dataIndex(category1)];
			while(_g21 < _g3.length) {
				var phase = _g3[_g21];
				++_g21;
				var panel = new catalyst_entities_UpgradePanel(phase);
				var _this = this.panels;
				if(__map_reserved[phase] != null) {
					_this.setReserved(phase,panel);
				} else {
					_this.h[phase] = panel;
				}
				this.mouseManager.add(panel,null,(function(v1,f1) {
					return function() {
						return f1[0](v1[0]);
					};
				})([phase],[$bind(this,this.set_selected)]));
				box21.add(panel);
				if(++n % 2 == 0) {
					box1.add(box21);
					var box22 = new haxepunk_layout_LayoutGroup(null,"horizontal");
					box22.spacing = { value : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(16), min : null, max : null};
					box21 = box22;
				}
			}
			box1.add(box21);
			var _this1 = this.categoryTabs;
			if(__map_reserved[category1] != null) {
				_this1.setReserved(category1,box1);
			} else {
				_this1.h[category1] = box1;
			}
		}
		col.add(this.tabs);
		cols.add(col);
		var descBox = new haxepunk_layout_LayoutGroup();
		this.selectedLabel = new catalyst_graphics_Label("",null,1,16777215,1);
		var labelEntity = new haxepunk_Entity(0,0,this.selectedLabel);
		descBox.add(labelEntity);
		var m2;
		var m3 = 5 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[5] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(5,"%");
		if(m3 == null) {
			m2 = null;
		} else {
			m2 = { value : m3, min : null, max : null};
		}
		descBox.anchorY = 0;
		descBox.layoutY = m2;
		var m4;
		var m5 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m5 == null) {
			m4 = null;
		} else {
			m4 = { value : m5, min : null, max : null};
		}
		descBox.anchorX = 1;
		descBox.layoutX = m4;
		var m6 = 55 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[55] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(55,"%");
		descBox.layoutWidth = m6 == null ? null : { value : m6, min : null, max : null};
		labelEntity.preUpdate.callbacks.push(function() {
			var _this2 = _gthis.selectedLabel;
			var v2 = descBox.get_width();
			if(v2 != _this2.width) {
				_this2._dirty = true;
			}
			_this2.width = v2;
		});
		this.layout.add(descBox);
		var meters = new haxepunk_layout_LayoutGroup(null,"horizontal");
		var room = "fairgrounds";
		var _this3 = catalyst_GameData.get_current();
		var _this4 = _this3.labs.get(_this3.currentRegion);
		if(_this4.unlockedRooms.exists(room) && _this4.unlockedRooms.get(room)) {
			meters.add(new catalyst_entities_FameCounter(0.625));
		}
		var room1 = "workshop";
		var _this5 = catalyst_GameData.get_current();
		var _this6 = _this5.labs.get(_this5.currentRegion);
		if(_this6.unlockedRooms.exists(room1) && _this6.unlockedRooms.get(room1)) {
			meters.add(new catalyst_entities_WorkCounter(0.625));
		}
		meters.add(new catalyst_entities_CatnipCounter(0.875));
		var m7;
		var m8 = 98 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[98] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(98,"%");
		if(m8 == null) {
			m7 = null;
		} else {
			m7 = { value : m8, min : null, max : null};
		}
		meters.anchorX = 1;
		meters.layoutX = m7;
		var m9;
		var m10 = 100 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[100] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(100,"%");
		if(m10 == null) {
			m9 = null;
		} else {
			m9 = { value : m10, min : null, max : null};
		}
		meters.anchorY = 1;
		meters.layoutY = m9;
		this.layout.add(meters);
		this.upgradeButton = new catalyst_entities_IconButton("upgrade-icon",this.mouseManager,$bind(this,this.onUpgradeButtonPressed));
		var wrapper = new haxepunk_layout_LayoutGroup(this.upgradeButton);
		var m11;
		var m12 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m12 == null) {
			m11 = null;
		} else {
			m11 = { value : m12, min : null, max : null};
		}
		wrapper.anchorX = 1;
		wrapper.layoutX = m11;
		var m13;
		var m14 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m14 == null) {
			m13 = null;
		} else {
			m13 = { value : m14, min : null, max : null};
		}
		wrapper.anchorY = 0.5;
		wrapper.layoutY = m13;
		this.layout.add(wrapper);
		this.unlockButton = new catalyst_entities_IconButton("lock",this.mouseManager,$bind(this,this.onUnlockButtonPressed));
		var wrapper1 = new haxepunk_layout_LayoutGroup(this.unlockButton);
		var m15;
		var m16 = 95 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[95] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(95,"%");
		if(m16 == null) {
			m15 = null;
		} else {
			m15 = { value : m16, min : null, max : null};
		}
		wrapper1.anchorX = 1;
		wrapper1.layoutX = m15;
		var m17;
		var m18 = 50 % 1 == 0 ? haxepunk_layout__$Measurement_Measurement_$Impl_$._percent[50] : haxepunk_layout__$Measurement_Measurement_$Impl_$._new(50,"%");
		if(m18 == null) {
			m17 = null;
		} else {
			m17 = { value : m18, min : null, max : null};
		}
		wrapper1.anchorY = 0.5;
		wrapper1.layoutY = m17;
		this.layout.add(wrapper1);
		this.layout.add(cols);
		var key = this.room;
		var _this7 = catalyst_scenes_UpgradeScene.lastSelected;
		if(!(__map_reserved[key] != null ? _this7.existsReserved(key) : _this7.h.hasOwnProperty(key))) {
			var upgrades = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.upgradesForRoom(this.room);
			var this1 = catalyst_scenes_UpgradeScene.lastSelected;
			var k = this.room;
			var v3 = upgrades.length > 0 ? catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__phases[catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get___dataIndex(upgrades[0])][0] : null;
			var _this8 = this1;
			if(__map_reserved[k] != null) {
				_this8.setReserved(k,v3);
			} else {
				_this8.h[k] = v3;
			}
		}
		var key1 = this.room;
		var _this9 = catalyst_scenes_UpgradeScene.lastSelected;
		this.set_selectedCategory(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_category(__map_reserved[key1] != null ? _this9.getReserved(key1) : _this9.h[key1]));
		var key2 = this.room;
		var _this10 = catalyst_scenes_UpgradeScene.lastSelected;
		this.set_selected(__map_reserved[key2] != null ? _this10.getReserved(key2) : _this10.h[key2]);
	}
	,update: function() {
		catalyst_scenes_PopupScene.prototype.update.call(this);
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).upgrades;
		var phase = this.selected;
		var lv;
		var _this1 = this1;
		if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
			var _this2 = this1;
			lv = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
		} else {
			lv = 0;
		}
		var tmp = this.upgradeButton;
		var tmp1;
		if(lv > 0) {
			if(this.selected != null) {
				var _this3 = catalyst_GameData.get_current();
				var this2 = _this3.labs.get(_this3.currentRegion).upgrades;
				var phase1 = this.selected;
				var tmp2;
				var _this4 = this2;
				if(__map_reserved[phase1] != null ? _this4.existsReserved(phase1) : _this4.h.hasOwnProperty(phase1)) {
					var _this5 = this2;
					tmp2 = __map_reserved[phase1] != null ? _this5.getReserved(phase1) : _this5.h[phase1];
				} else {
					tmp2 = 0;
				}
				tmp1 = tmp2 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(this.selected);
			} else {
				tmp1 = false;
			}
		} else {
			tmp1 = false;
		}
		tmp.set_visible(tmp1);
		var tmp3 = this.upgradeButton;
		var tmp4;
		var tmp5;
		var tmp6;
		if(this.selected != null) {
			var _this6 = catalyst_GameData.get_current();
			var this3 = _this6.labs.get(_this6.currentRegion).upgrades;
			var phase2 = this.selected;
			var tmp7;
			var _this7 = this3;
			if(__map_reserved[phase2] != null ? _this7.existsReserved(phase2) : _this7.h.hasOwnProperty(phase2)) {
				var _this8 = this3;
				tmp7 = __map_reserved[phase2] != null ? _this8.getReserved(phase2) : _this8.h[phase2];
			} else {
				tmp7 = 0;
			}
			tmp6 = tmp7 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(this.selected);
		} else {
			tmp6 = false;
		}
		if(tmp6) {
			var phase3 = this.selected;
			var _this9 = catalyst_GameData.get_current();
			var _this10 = _this9.labs.get(_this9.currentRegion);
			var this4 = _this10.upgrades;
			var level;
			var _this11 = this4;
			if(__map_reserved[phase3] != null ? _this11.existsReserved(phase3) : _this11.h.hasOwnProperty(phase3)) {
				var _this12 = this4;
				level = __map_reserved[phase3] != null ? _this12.getReserved(phase3) : _this12.h[phase3];
			} else {
				level = 0;
			}
			if(level < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase3) && _this10.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this10.upgrades,phase3,_this10.prestige,_this10.bonuses) && _this10.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase3)) {
				tmp5 = _this10.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase3) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase3) * (Math.max(0,level - _this10.prestige) | 0);
			} else {
				tmp5 = false;
			}
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			var _this13 = catalyst_GameData.get_current();
			var this5 = _this13.labs.get(_this13.currentRegion).upgrades;
			var phase4 = this.selected;
			var tmp8;
			var _this14 = this5;
			if(__map_reserved[phase4] != null ? _this14.existsReserved(phase4) : _this14.h.hasOwnProperty(phase4)) {
				var _this15 = this5;
				tmp8 = __map_reserved[phase4] != null ? _this15.getReserved(phase4) : _this15.h[phase4];
			} else {
				tmp8 = 0;
			}
			if(tmp8 <= 0) {
				var _this16 = catalyst_GameData.get_current();
				var this6 = _this16.labs.get(_this16.currentRegion).upgrades;
				var phase5 = this.selected;
				var tmp9;
				var _this17 = this6;
				if(__map_reserved[phase5] != null ? _this17.existsReserved(phase5) : _this17.h.hasOwnProperty(phase5)) {
					var _this18 = this6;
					tmp9 = __map_reserved[phase5] != null ? _this18.getReserved(phase5) : _this18.h[phase5];
				} else {
					tmp9 = 0;
				}
				if(tmp9 == 0) {
					var phase6 = this.selected;
					var _this19 = catalyst_GameData.get_current();
					var _this20 = _this19.labs.get(_this19.currentRegion);
					var tmp10;
					var this7 = _this20.upgrades;
					var level1;
					var _this21 = this7;
					if(__map_reserved[phase6] != null ? _this21.existsReserved(phase6) : _this21.h.hasOwnProperty(phase6)) {
						var _this22 = this7;
						level1 = __map_reserved[phase6] != null ? _this22.getReserved(phase6) : _this22.h[phase6];
					} else {
						level1 = 0;
					}
					if(level1 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase6) && _this20.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this20.upgrades,phase6,_this20.prestige,_this20.bonuses) && _this20.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase6) && _this20.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase6) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase6) * (Math.max(0,level1 - _this20.prestige) | 0)) {
						if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase6) != null) {
							var this8 = _this20.upgrades;
							var phase7 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase6);
							var tmp11;
							var _this23 = this8;
							if(__map_reserved[phase7] != null ? _this23.existsReserved(phase7) : _this23.h.hasOwnProperty(phase7)) {
								var _this24 = this8;
								tmp11 = __map_reserved[phase7] != null ? _this24.getReserved(phase7) : _this24.h[phase7];
							} else {
								tmp11 = 0;
							}
							tmp10 = tmp11 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase6);
						} else {
							tmp10 = true;
						}
					} else {
						tmp10 = false;
					}
					if(tmp10) {
						tmp4 = _this20.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase6) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase6) * (Math.max(0,0) | 0);
					} else {
						tmp4 = false;
					}
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = true;
			}
		} else {
			tmp4 = false;
		}
		tmp3.set_collidable(tmp4);
		var tmp12;
		var tmp13;
		var tmp14;
		var tmp15;
		if(this.selected != null) {
			var _this25 = catalyst_GameData.get_current();
			var this9 = _this25.labs.get(_this25.currentRegion).upgrades;
			var phase8 = this.selected;
			var tmp16;
			var _this26 = this9;
			if(__map_reserved[phase8] != null ? _this26.existsReserved(phase8) : _this26.h.hasOwnProperty(phase8)) {
				var _this27 = this9;
				tmp16 = __map_reserved[phase8] != null ? _this27.getReserved(phase8) : _this27.h[phase8];
			} else {
				tmp16 = 0;
			}
			tmp15 = tmp16 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(this.selected);
		} else {
			tmp15 = false;
		}
		if(tmp15) {
			var phase9 = this.selected;
			var _this28 = catalyst_GameData.get_current();
			var _this29 = _this28.labs.get(_this28.currentRegion);
			var this10 = _this29.upgrades;
			var level2;
			var _this30 = this10;
			if(__map_reserved[phase9] != null ? _this30.existsReserved(phase9) : _this30.h.hasOwnProperty(phase9)) {
				var _this31 = this10;
				level2 = __map_reserved[phase9] != null ? _this31.getReserved(phase9) : _this31.h[phase9];
			} else {
				level2 = 0;
			}
			if(level2 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase9) && _this29.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this29.upgrades,phase9,_this29.prestige,_this29.bonuses) && _this29.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase9)) {
				tmp14 = _this29.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase9) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase9) * (Math.max(0,level2 - _this29.prestige) | 0);
			} else {
				tmp14 = false;
			}
		} else {
			tmp14 = false;
		}
		if(tmp14) {
			var _this32 = catalyst_GameData.get_current();
			var this11 = _this32.labs.get(_this32.currentRegion).upgrades;
			var phase10 = this.selected;
			var tmp17;
			var _this33 = this11;
			if(__map_reserved[phase10] != null ? _this33.existsReserved(phase10) : _this33.h.hasOwnProperty(phase10)) {
				var _this34 = this11;
				tmp17 = __map_reserved[phase10] != null ? _this34.getReserved(phase10) : _this34.h[phase10];
			} else {
				tmp17 = 0;
			}
			if(tmp17 <= 0) {
				var _this35 = catalyst_GameData.get_current();
				var this12 = _this35.labs.get(_this35.currentRegion).upgrades;
				var phase11 = this.selected;
				var tmp18;
				var _this36 = this12;
				if(__map_reserved[phase11] != null ? _this36.existsReserved(phase11) : _this36.h.hasOwnProperty(phase11)) {
					var _this37 = this12;
					tmp18 = __map_reserved[phase11] != null ? _this37.getReserved(phase11) : _this37.h[phase11];
				} else {
					tmp18 = 0;
				}
				if(tmp18 == 0) {
					var phase12 = this.selected;
					var _this38 = catalyst_GameData.get_current();
					var _this39 = _this38.labs.get(_this38.currentRegion);
					var tmp19;
					var this13 = _this39.upgrades;
					var level3;
					var _this40 = this13;
					if(__map_reserved[phase12] != null ? _this40.existsReserved(phase12) : _this40.h.hasOwnProperty(phase12)) {
						var _this41 = this13;
						level3 = __map_reserved[phase12] != null ? _this41.getReserved(phase12) : _this41.h[phase12];
					} else {
						level3 = 0;
					}
					if(level3 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase12) && _this39.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this39.upgrades,phase12,_this39.prestige,_this39.bonuses) && _this39.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase12) && _this39.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase12) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase12) * (Math.max(0,level3 - _this39.prestige) | 0)) {
						if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase12) != null) {
							var this14 = _this39.upgrades;
							var phase13 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase12);
							var tmp20;
							var _this42 = this14;
							if(__map_reserved[phase13] != null ? _this42.existsReserved(phase13) : _this42.h.hasOwnProperty(phase13)) {
								var _this43 = this14;
								tmp20 = __map_reserved[phase13] != null ? _this43.getReserved(phase13) : _this43.h[phase13];
							} else {
								tmp20 = 0;
							}
							tmp19 = tmp20 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase12);
						} else {
							tmp19 = true;
						}
					} else {
						tmp19 = false;
					}
					if(tmp19) {
						tmp13 = _this39.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase12) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase12) * (Math.max(0,0) | 0);
					} else {
						tmp13 = false;
					}
				} else {
					tmp13 = false;
				}
			} else {
				tmp13 = true;
			}
		} else {
			tmp13 = false;
		}
		if(tmp13) {
			tmp12 = 3375104;
		} else {
			tmp12 = 8421504;
		}
		this.upgradeButton.color = tmp12;
		this.unlockButton.set_visible(lv == 0);
		var tmp21 = this.unlockButton;
		var tmp22;
		var _this44 = catalyst_GameData.get_current();
		var this15 = _this44.labs.get(_this44.currentRegion).upgrades;
		var phase14 = this.selected;
		var tmp23;
		var _this45 = this15;
		if(__map_reserved[phase14] != null ? _this45.existsReserved(phase14) : _this45.h.hasOwnProperty(phase14)) {
			var _this46 = this15;
			tmp23 = __map_reserved[phase14] != null ? _this46.getReserved(phase14) : _this46.h[phase14];
		} else {
			tmp23 = 0;
		}
		if(tmp23 == 0) {
			var phase15 = this.selected;
			var _this47 = catalyst_GameData.get_current();
			var _this48 = _this47.labs.get(_this47.currentRegion);
			var tmp24;
			var this16 = _this48.upgrades;
			var level4;
			var _this49 = this16;
			if(__map_reserved[phase15] != null ? _this49.existsReserved(phase15) : _this49.h.hasOwnProperty(phase15)) {
				var _this50 = this16;
				level4 = __map_reserved[phase15] != null ? _this50.getReserved(phase15) : _this50.h[phase15];
			} else {
				level4 = 0;
			}
			if(level4 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase15) && _this48.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this48.upgrades,phase15,_this48.prestige,_this48.bonuses) && _this48.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase15) && _this48.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase15) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase15) * (Math.max(0,level4 - _this48.prestige) | 0)) {
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase15) != null) {
					var this17 = _this48.upgrades;
					var phase16 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase15);
					var tmp25;
					var _this51 = this17;
					if(__map_reserved[phase16] != null ? _this51.existsReserved(phase16) : _this51.h.hasOwnProperty(phase16)) {
						var _this52 = this17;
						tmp25 = __map_reserved[phase16] != null ? _this52.getReserved(phase16) : _this52.h[phase16];
					} else {
						tmp25 = 0;
					}
					tmp24 = tmp25 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase15);
				} else {
					tmp24 = true;
				}
			} else {
				tmp24 = false;
			}
			if(tmp24) {
				tmp22 = _this48.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase15) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase15) * (Math.max(0,0) | 0);
			} else {
				tmp22 = false;
			}
		} else {
			tmp22 = false;
		}
		tmp21.set_collidable(tmp22);
		var tmp26;
		var tmp27;
		var _this53 = catalyst_GameData.get_current();
		var this18 = _this53.labs.get(_this53.currentRegion).upgrades;
		var phase17 = this.selected;
		var tmp28;
		var _this54 = this18;
		if(__map_reserved[phase17] != null ? _this54.existsReserved(phase17) : _this54.h.hasOwnProperty(phase17)) {
			var _this55 = this18;
			tmp28 = __map_reserved[phase17] != null ? _this55.getReserved(phase17) : _this55.h[phase17];
		} else {
			tmp28 = 0;
		}
		if(tmp28 == 0) {
			var phase18 = this.selected;
			var _this56 = catalyst_GameData.get_current();
			var _this57 = _this56.labs.get(_this56.currentRegion);
			var tmp29;
			var this19 = _this57.upgrades;
			var level5;
			var _this58 = this19;
			if(__map_reserved[phase18] != null ? _this58.existsReserved(phase18) : _this58.h.hasOwnProperty(phase18)) {
				var _this59 = this19;
				level5 = __map_reserved[phase18] != null ? _this59.getReserved(phase18) : _this59.h[phase18];
			} else {
				level5 = 0;
			}
			if(level5 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase18) && _this57.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this57.upgrades,phase18,_this57.prestige,_this57.bonuses) && _this57.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase18) && _this57.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase18) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase18) * (Math.max(0,level5 - _this57.prestige) | 0)) {
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase18) != null) {
					var this20 = _this57.upgrades;
					var phase19 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase18);
					var tmp30;
					var _this60 = this20;
					if(__map_reserved[phase19] != null ? _this60.existsReserved(phase19) : _this60.h.hasOwnProperty(phase19)) {
						var _this61 = this20;
						tmp30 = __map_reserved[phase19] != null ? _this61.getReserved(phase19) : _this61.h[phase19];
					} else {
						tmp30 = 0;
					}
					tmp29 = tmp30 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase18);
				} else {
					tmp29 = true;
				}
			} else {
				tmp29 = false;
			}
			if(tmp29) {
				tmp27 = _this57.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase18) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase18) * (Math.max(0,0) | 0);
			} else {
				tmp27 = false;
			}
		} else {
			tmp27 = false;
		}
		if(tmp27) {
			tmp26 = 3375104;
		} else {
			tmp26 = 8421504;
		}
		this.unlockButton.color = tmp26;
		if(this.fadeIn >= 1) {
			catalyst_GameData.get_current().checkTutorial("upgrades");
		}
	}
	,onUpgradeButtonPressed: function() {
		var tmp;
		var tmp1;
		var tmp2;
		if(this.selected != null) {
			var _this = catalyst_GameData.get_current();
			var this1 = _this.labs.get(_this.currentRegion).upgrades;
			var phase = this.selected;
			var tmp3;
			var _this1 = this1;
			if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
				var _this2 = this1;
				tmp3 = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
			} else {
				tmp3 = 0;
			}
			tmp2 = tmp3 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(this.selected);
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var phase1 = this.selected;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion);
			var this2 = _this4.upgrades;
			var level;
			var _this5 = this2;
			if(__map_reserved[phase1] != null ? _this5.existsReserved(phase1) : _this5.h.hasOwnProperty(phase1)) {
				var _this6 = this2;
				level = __map_reserved[phase1] != null ? _this6.getReserved(phase1) : _this6.h[phase1];
			} else {
				level = 0;
			}
			if(level < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase1) && _this4.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this4.upgrades,phase1,_this4.prestige,_this4.bonuses) && _this4.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase1)) {
				tmp1 = _this4.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase1) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase1) * (Math.max(0,level - _this4.prestige) | 0);
			} else {
				tmp1 = false;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this7 = catalyst_GameData.get_current();
			var this3 = _this7.labs.get(_this7.currentRegion).upgrades;
			var phase2 = this.selected;
			var tmp4;
			var _this8 = this3;
			if(__map_reserved[phase2] != null ? _this8.existsReserved(phase2) : _this8.h.hasOwnProperty(phase2)) {
				var _this9 = this3;
				tmp4 = __map_reserved[phase2] != null ? _this9.getReserved(phase2) : _this9.h[phase2];
			} else {
				tmp4 = 0;
			}
			if(tmp4 <= 0) {
				var _this10 = catalyst_GameData.get_current();
				var this4 = _this10.labs.get(_this10.currentRegion).upgrades;
				var phase3 = this.selected;
				var tmp5;
				var _this11 = this4;
				if(__map_reserved[phase3] != null ? _this11.existsReserved(phase3) : _this11.h.hasOwnProperty(phase3)) {
					var _this12 = this4;
					tmp5 = __map_reserved[phase3] != null ? _this12.getReserved(phase3) : _this12.h[phase3];
				} else {
					tmp5 = 0;
				}
				if(tmp5 == 0) {
					var phase4 = this.selected;
					var _this13 = catalyst_GameData.get_current();
					var _this14 = _this13.labs.get(_this13.currentRegion);
					var tmp6;
					var this5 = _this14.upgrades;
					var level1;
					var _this15 = this5;
					if(__map_reserved[phase4] != null ? _this15.existsReserved(phase4) : _this15.h.hasOwnProperty(phase4)) {
						var _this16 = this5;
						level1 = __map_reserved[phase4] != null ? _this16.getReserved(phase4) : _this16.h[phase4];
					} else {
						level1 = 0;
					}
					if(level1 < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase4) && _this14.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this14.upgrades,phase4,_this14.prestige,_this14.bonuses) && _this14.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase4) && _this14.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase4) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase4) * (Math.max(0,level1 - _this14.prestige) | 0)) {
						if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase4) != null) {
							var this6 = _this14.upgrades;
							var phase5 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase4);
							var tmp7;
							var _this17 = this6;
							if(__map_reserved[phase5] != null ? _this17.existsReserved(phase5) : _this17.h.hasOwnProperty(phase5)) {
								var _this18 = this6;
								tmp7 = __map_reserved[phase5] != null ? _this18.getReserved(phase5) : _this18.h[phase5];
							} else {
								tmp7 = 0;
							}
							tmp6 = tmp7 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase4);
						} else {
							tmp6 = true;
						}
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						tmp = _this14.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase4) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase4) * (Math.max(0,0) | 0);
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var phase6 = this.selected;
			var _this19 = catalyst_GameData.get_current();
			_this19.labs.get(_this19.currentRegion).upgrade(phase6);
			this.set_selected(this.selected);
			var _this20 = catalyst_GameData.get_current();
			if(catalyst__$Upgrades_Upgrades_$Impl_$.get(_this20.labs.get(_this20.currentRegion).upgrades,this.selected) == catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(this.selected)) {
				catalyst_Sound.sfxQueue.push("getstuff");
				catalyst_Sound.volumeQueue.push(1);
				catalyst_Sound.sfxQueue.push("getstuff");
				catalyst_Sound.volumeQueue.push(1);
				catalyst_Sound.sfxQueue.push("getstuff");
				catalyst_Sound.volumeQueue.push(1);
			} else {
				catalyst_Sound.sfxQueue.push("upgrade");
				catalyst_Sound.volumeQueue.push(1);
			}
			catalyst_GameData.get_current().save();
		} else {
			catalyst_Sound.sfxQueue.push("noblip");
			catalyst_Sound.volumeQueue.push(1);
		}
	}
	,onUnlockButtonPressed: function() {
		var tmp;
		var _this = catalyst_GameData.get_current();
		var this1 = _this.labs.get(_this.currentRegion).upgrades;
		var phase = this.selected;
		var tmp1;
		var _this1 = this1;
		if(__map_reserved[phase] != null ? _this1.existsReserved(phase) : _this1.h.hasOwnProperty(phase)) {
			var _this2 = this1;
			tmp1 = __map_reserved[phase] != null ? _this2.getReserved(phase) : _this2.h[phase];
		} else {
			tmp1 = 0;
		}
		if(tmp1 == 0) {
			var phase1 = this.selected;
			var _this3 = catalyst_GameData.get_current();
			var _this4 = _this3.labs.get(_this3.currentRegion);
			var tmp2;
			var this2 = _this4.upgrades;
			var level;
			var _this5 = this2;
			if(__map_reserved[phase1] != null ? _this5.existsReserved(phase1) : _this5.h.hasOwnProperty(phase1)) {
				var _this6 = this2;
				level = __map_reserved[phase1] != null ? _this6.getReserved(phase1) : _this6.h[phase1];
			} else {
				level = 0;
			}
			if(level < catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxLevel(phase1) && _this4.catnip >= catalyst__$Upgrades_Upgrades_$Impl_$.getCost(_this4.upgrades,phase1,_this4.prestige,_this4.bonuses) && _this4.work >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_work(phase1) && _this4.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase1) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase1) * (Math.max(0,level - _this4.prestige) | 0)) {
				if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase1) != null) {
					var this3 = _this4.upgrades;
					var phase2 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlock(phase1);
					var tmp3;
					var _this7 = this3;
					if(__map_reserved[phase2] != null ? _this7.existsReserved(phase2) : _this7.h.hasOwnProperty(phase2)) {
						var _this8 = this3;
						tmp3 = __map_reserved[phase2] != null ? _this8.getReserved(phase2) : _this8.h[phase2];
					} else {
						tmp3 = 0;
					}
					tmp2 = tmp3 >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_unlockLevel(phase1);
				} else {
					tmp2 = true;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp = _this4.fame >= catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_fame(phase1) + catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_famePerLevel(phase1) * (Math.max(0,0) | 0);
			} else {
				tmp = false;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var phase3 = this.selected;
			var _this9 = catalyst_GameData.get_current();
			_this9.labs.get(_this9.currentRegion).upgrade(phase3);
			catalyst_Sound.sfxQueue.push("getstuff");
			catalyst_Sound.volumeQueue.push(1);
			this.set_selected(this.selected);
		}
	}
	,__class__: catalyst_scenes_UpgradeScene
	,__properties__: $extend(catalyst_scenes_PopupScene.prototype.__properties__,{set_selected:"set_selected",set_selectedCategory:"set_selectedCategory"})
});
var catalyst_scenes_animations_AdoptCatScene = function(cat,color,onFinish) {
	if(color == null) {
		color = 6262227;
	}
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,color,null,onFinish);
	this.cat = cat;
};
$hxClasses["catalyst.scenes.animations.AdoptCatScene"] = catalyst_scenes_animations_AdoptCatScene;
catalyst_scenes_animations_AdoptCatScene.__name__ = ["catalyst","scenes","animations","AdoptCatScene"];
catalyst_scenes_animations_AdoptCatScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_AdoptCatScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat: null
	,catEntity: null
	,timer: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		this.catEntity.sp.set_facingRight(false);
		this.catEntity.set_x(haxepunk_HXP.width);
		this.catEntity.set_y(haxepunk_HXP.height * 0.5 + this.catEntity.get_height() / 2);
		this.catEntity.sp.setAnimation("run");
		this.catEntity.sp.scale *= 0.75;
		this.add(this.catEntity).set_layer(-2);
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		var t = this.timer += haxepunk_HXP.elapsed / 2.25;
		var t1 = this.timer;
		if(this.timer >= 1) {
			this.close();
		} else {
			this.catEntity.set_x(haxepunk_HXP.width * (1 - t * t));
			var _this = this.catEntity.cat;
			var scale = _this.size;
			if(_this.level < 500) {
				var a = scale * 0.75;
				scale = a + (scale - a) * (_this.level / 500);
			}
			this.catEntity.sp.scale = scale * (0.75 + -t1 * (t1 - 2) * 0.5);
		}
	}
	,__class__: catalyst_scenes_animations_AdoptCatScene
});
var catalyst_scenes_animations_BlessScene = function(cat,onFinish) {
	this.p = 0;
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,13876319,null,onFinish);
	this.cat = cat;
};
$hxClasses["catalyst.scenes.animations.BlessScene"] = catalyst_scenes_animations_BlessScene;
catalyst_scenes_animations_BlessScene.__name__ = ["catalyst","scenes","animations","BlessScene"];
catalyst_scenes_animations_BlessScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_BlessScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat: null
	,catEntity: null
	,beam: null
	,timer: null
	,p: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		this.catEntity.sp.set_facingRight(false);
		this.catEntity.set_x(haxepunk_HXP.width / 2);
		this.catEntity.set_y(haxepunk_HXP.height * 0.5 + this.catEntity.get_height() / 2);
		this.catEntity.sp.setAnimation("sit");
		this.add(this.catEntity).set_layer(-2);
		this.beam = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ball-particle.png",false));
		this.beam.addType("p",null);
		this.beam.setMotion("p",265,256,0.5,10,128,0.25);
		this.beam.setGravity("p",1);
		this.beam.setColor("p",13151031,16777215);
		this.beam.setAlpha("p",1,0);
		this.beam.x = haxepunk_HXP.width / 2;
		this.beam.y = haxepunk_HXP.height / 2;
		this.addGraphic(this.beam).set_layer(-3);
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 2.5;
		var this1 = 16777215;
		var t = this.timer;
		var tmp;
		if(t <= 0) {
			tmp = this1;
		} else if(t >= 1) {
			tmp = 13151031;
		} else {
			var a = this1 >>> 24 & 255;
			var r = this1 >>> 16 & 255;
			var g = this1 >>> 8 & 255;
			var b = this1 & 255;
			a = 0 * t | 0;
			r = 255 + (-55 * t | 0);
			g = 255 + (-84 * t | 0);
			b = 255 + (-200 * t | 0);
			tmp = a << 24 | r << 16 | g << 8 | b;
		}
		this.catEntity.sp.set_color(tmp);
		if(this.timer >= 1) {
			this.close();
		} else {
			this.p += 32 * haxepunk_HXP.elapsed;
			while(this.p > 1) {
				--this.p;
				this.beam.emitInRectangle("p",-this.catEntity.get_width() / 2,-this.catEntity.get_height(),this.catEntity.get_width(),this.catEntity.get_height() / 2);
			}
		}
	}
	,__class__: catalyst_scenes_animations_BlessScene
});
var catalyst_scenes_animations_DistillScene = function(potion,onFinish) {
	this.ingredients = [];
	this.puffTimer = 1;
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,9265107,null,onFinish);
	this.potion = potion;
};
$hxClasses["catalyst.scenes.animations.DistillScene"] = catalyst_scenes_animations_DistillScene;
catalyst_scenes_animations_DistillScene.__name__ = ["catalyst","scenes","animations","DistillScene"];
catalyst_scenes_animations_DistillScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_DistillScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	potion: null
	,cauldron: null
	,timer: null
	,puffTimer: null
	,potionImage: null
	,ingredients: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.cauldron = new catalyst_entities_Cauldron();
		this.cauldron.set_x(haxepunk_HXP.width / 2);
		this.cauldron.set_y(haxepunk_HXP.height / 2 + 128);
		this.cauldron.set_layer(-1);
		this.add(this.cauldron);
		var _g = 0;
		var _g1 = this.potion.ingredients;
		while(_g < _g1.length) {
			var ingredient = _g1[_g];
			++_g;
			var img = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/potion/" + ingredient + ".png",false));
			img.x = haxepunk_HXP.width / 2 - img.get_width() / 2;
			img.y = haxepunk_HXP.height / 2;
			img.smooth = true;
			this.addGraphic(img).set_layer(-2);
			this.ingredients.push(img);
		}
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 5;
		this.puffTimer += haxepunk_HXP.elapsed * 0.5;
		if(this.timer >= 1) {
			this.close();
		} else if(this.puffTimer >= 1) {
			--this.puffTimer;
			this.cauldron.poof();
		}
		if(this.timer <= 0.3) {
			var t = this.timer / 0.3;
			var _g1 = 0;
			var _g = this.ingredients.length;
			while(_g1 < _g) {
				var n = _g1++;
				var ti = Math.min(1,t / ((n + 1) / (this.ingredients.length + 1)));
				var ingredient = this.ingredients[this.ingredients.length - 1 - n];
				ingredient.y = haxepunk_HXP.height / 2 - ingredient.get_height() * (2 - ti);
				ingredient.set_alpha(Math.pow(1 - ti,4));
			}
		} else {
			var _g2 = 0;
			var _g11 = this.ingredients;
			while(_g2 < _g11.length) {
				var ingredient1 = _g11[_g2];
				++_g2;
				ingredient1._visible = false;
			}
		}
		if(this.timer >= 0.4) {
			if(this.potionImage == null) {
				var _this = this.potion;
				var c = 8421504;
				var _g12 = 0;
				var _g3 = _this.ingredients.length;
				while(_g12 < _g3) {
					var i = _g12++;
					var toColor = catalyst__$IngredientType_IngredientType_$Impl_$.get_color(_this.ingredients[i]);
					var t1 = 1 / (i + 1);
					if(t1 <= 0) {
						c = c;
					} else if(t1 >= 1) {
						c = toColor;
					} else {
						var a = c >>> 24 & 255;
						var r = c >>> 16 & 255;
						var g = c >>> 8 & 255;
						var b = c & 255;
						a += ((toColor >>> 24 & 255) - a) * t1 | 0;
						r += ((toColor >>> 16 & 255) - r) * t1 | 0;
						g += ((toColor >>> 8 & 255) - g) * t1 | 0;
						b += ((toColor & 255) - b) * t1 | 0;
						c = a << 24 | r << 16 | g << 8 | b;
					}
				}
				this.potionImage = new catalyst_graphics_PotionImage(c);
				this.potionImage.x = haxepunk_HXP.width / 2;
				this.potionImage.y = haxepunk_HXP.height / 2;
				this.addGraphic(this.potionImage).set_layer(-2);
			}
			var t2 = (this.timer - 0.4) / 0.6;
			this.potionImage.y = haxepunk_HXP.height / 2 - (0.5 + t2) * this.potionImage.height;
			this.potionImage.set_alpha(Math.min(1,Math.pow(t2 * 2,2)));
		}
	}
	,__class__: catalyst_scenes_animations_DistillScene
});
var catalyst_scenes_animations_DrinkPotionScene = function(cat,potion,onFinish) {
	this.timer = 0;
	this.state = 0;
	catalyst_scenes_AnimationScene.call(this,16764074,null,onFinish);
	this.cat = cat;
	this.potion = potion;
};
$hxClasses["catalyst.scenes.animations.DrinkPotionScene"] = catalyst_scenes_animations_DrinkPotionScene;
catalyst_scenes_animations_DrinkPotionScene.__name__ = ["catalyst","scenes","animations","DrinkPotionScene"];
catalyst_scenes_animations_DrinkPotionScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_DrinkPotionScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat: null
	,potion: null
	,catEntity: null
	,potionImage: null
	,state: null
	,timer: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		this.catEntity.sp.set_facingRight(false);
		this.catEntity.set_x(haxepunk_HXP.width);
		this.catEntity.set_y(haxepunk_HXP.height * 0.5 + this.catEntity.get_height() / 2);
		this.catEntity.sp.setAnimation("run");
		this.add(this.catEntity).set_layer(-2);
		var _this = this.potion;
		var c = 8421504;
		var _g1 = 0;
		var _g = _this.ingredients.length;
		while(_g1 < _g) {
			var i = _g1++;
			var toColor = catalyst__$IngredientType_IngredientType_$Impl_$.get_color(_this.ingredients[i]);
			var t = 1 / (i + 1);
			if(t <= 0) {
				c = c;
			} else if(t >= 1) {
				c = toColor;
			} else {
				var a = c >>> 24 & 255;
				var r = c >>> 16 & 255;
				var g = c >>> 8 & 255;
				var b = c & 255;
				a += ((toColor >>> 24 & 255) - a) * t | 0;
				r += ((toColor >>> 16 & 255) - r) * t | 0;
				g += ((toColor >>> 8 & 255) - g) * t | 0;
				b += ((toColor & 255) - b) * t | 0;
				c = a << 24 | r << 16 | g << 8 | b;
			}
		}
		this.potionImage = new catalyst_graphics_PotionImage(c);
		this.potionImage.x = haxepunk_HXP.width / 2 + this.potionImage.width / 2;
		this.potionImage.y = haxepunk_HXP.height / 2 + this.potionImage.height;
		this.addGraphic(this.potionImage).set_layer(-1);
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		var t;
		if(this.state == 0) {
			var t1 = this.timer;
			t = t1 * t1;
		} else {
			t = 1;
		}
		switch(this.state) {
		case 0:
			this.catEntity.set_x(haxepunk_HXP.width * (1 - 0.425 * t));
			break;
		case 1:
			this.catEntity.sp.setAnimation("drink");
			this.potionImage.set_alpha(1 - Math.pow(this.timer,4));
			break;
		default:
		}
		var tmp = this;
		var tmp1 = tmp.timer;
		var tmp2;
		switch(this.state) {
		case 0:
			tmp2 = 1.75;
			break;
		case 1:
			tmp2 = 2.5;
			break;
		default:
			tmp2 = -1;
		}
		tmp.timer = tmp1 + haxepunk_HXP.elapsed / tmp2;
		if(this.timer >= 1) {
			this.state += 1;
			this.timer = 0;
			if(this.state == 2) {
				this.close();
			}
		}
	}
	,__class__: catalyst_scenes_animations_DrinkPotionScene
});
var catalyst_scenes_animations_FreezeScene = function(cat,freeze,onFinish) {
	this.p = 0;
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,freeze ? 5627391 : 16733525,null,onFinish);
	this.cat = cat;
	this.freeze = freeze;
};
$hxClasses["catalyst.scenes.animations.FreezeScene"] = catalyst_scenes_animations_FreezeScene;
catalyst_scenes_animations_FreezeScene.__name__ = ["catalyst","scenes","animations","FreezeScene"];
catalyst_scenes_animations_FreezeScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_FreezeScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat: null
	,catEntity: null
	,beam: null
	,freeze: null
	,timer: null
	,p: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		this.catEntity.sp.set_facingRight(false);
		this.catEntity.set_x(haxepunk_HXP.width / 2);
		this.catEntity.set_y(haxepunk_HXP.height * 0.5 + this.catEntity.get_height() / 2);
		this.catEntity.sp.setAnimation(this.freeze ? "sit" : "lay");
		this.add(this.catEntity).set_layer(-2);
		this.beam = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/ball-particle.png",false));
		this.beam.addType("p",null);
		this.beam.setMotion("p",265,256,0.5,10,128,0.25);
		this.beam.setGravity("p",1);
		this.beam.setColor("p",this.freeze ? 26367 : 16711680,16777215);
		this.beam.setAlpha("p",1,0);
		this.beam.x = haxepunk_HXP.width / 2;
		this.beam.y = haxepunk_HXP.height / 2;
		this.addGraphic(this.beam).set_layer(-3);
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 2.5;
		var this1 = 16777215;
		var t = this.freeze ? this.timer : 1 - this.timer;
		var tmp;
		if(t <= 0) {
			tmp = this1;
		} else if(t >= 1) {
			tmp = 4210943;
		} else {
			var a = this1 >>> 24 & 255;
			var r = this1 >>> 16 & 255;
			var g = this1 >>> 8 & 255;
			var b = this1 & 255;
			a = 0 * t | 0;
			r = 255 + (-191 * t | 0);
			g = 255 + (-191 * t | 0);
			b = 255 + (0 * t | 0);
			tmp = a << 24 | r << 16 | g << 8 | b;
		}
		this.catEntity.sp.set_color(tmp);
		if(this.timer >= 1) {
			this.close();
		} else {
			if(this.timer >= 0.5) {
				this.catEntity.sp.setAnimation(this.freeze ? "lay" : "sit");
			}
			this.p += 32 * haxepunk_HXP.elapsed;
			while(this.p > 1) {
				--this.p;
				this.beam.emitInRectangle("p",-this.catEntity.get_width() / 2,-this.catEntity.get_height(),this.catEntity.get_width(),this.catEntity.get_height() / 2);
			}
		}
	}
	,__class__: catalyst_scenes_animations_FreezeScene
});
var catalyst_scenes_animations_KittenDanceScene = function(cat1,cat2,onFinish) {
	this.hearts = 0;
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,16744677,null,onFinish);
	this.cat1 = cat1;
	this.cat2 = cat2;
};
$hxClasses["catalyst.scenes.animations.KittenDanceScene"] = catalyst_scenes_animations_KittenDanceScene;
catalyst_scenes_animations_KittenDanceScene.__name__ = ["catalyst","scenes","animations","KittenDanceScene"];
catalyst_scenes_animations_KittenDanceScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_KittenDanceScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat1: null
	,cat2: null
	,catEntity1: null
	,catEntity2: null
	,heartEmitter: null
	,timer: null
	,hearts: null
	,begin: function() {
		var _gthis = this;
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		if(this.cat1.sex == true) {
			var swap = this.cat2;
			this.cat2 = this.cat1;
			this.cat1 = swap;
		}
		var catEntity = new catalyst_entities_StaticCatEntity(this.cat1);
		catEntity.sp.set_facingRight(true);
		catEntity.set_x(0);
		catEntity.set_y(haxepunk_HXP.height * 0.5 + catEntity.get_height() / 2);
		catEntity.sp.setAnimation("run");
		_gthis.add(catEntity).set_layer(-2);
		this.catEntity1 = catEntity;
		var catEntity1 = new catalyst_entities_StaticCatEntity(this.cat2);
		catEntity1.sp.set_facingRight(false);
		catEntity1.set_x(haxepunk_HXP.width);
		catEntity1.set_y(haxepunk_HXP.height * 0.5 + catEntity1.get_height() / 2);
		catEntity1.sp.setAnimation("run");
		_gthis.add(catEntity1).set_layer(-2);
		this.catEntity2 = catEntity1;
		this.heartEmitter = new haxepunk_graphics_emitter_StaticEmitter(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/heart-icon.png",false));
		this.heartEmitter.smooth = true;
		this.heartEmitter.pixelSnapping = false;
		this.heartEmitter.addType("heart",null);
		this.heartEmitter.setMotion("heart",0,16,0.5,360,64,1.5);
		this.heartEmitter.setGravity("heart",1);
		this.heartEmitter.setRotation("heart",-10,20);
		this.heartEmitter.setAlpha("heart",1,0,haxepunk_utils_Ease.quadOut);
		this.heartEmitter.setScale("heart",1,2,haxepunk_utils_Ease.quadOut);
		this.heartEmitter.x = haxepunk_HXP.width / 2;
		this.heartEmitter.y = haxepunk_HXP.height / 2 + this.catEntity2.get_height() / 2;
		this.addGraphic(this.heartEmitter).set_layer(-3);
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 3.5;
		var t = Math.min(this.timer * 2.85714285714285721,1);
		var t1 = t * t;
		if(this.timer >= 1) {
			this.close();
		} else if(this.timer >= 0.35) {
			this.catEntity1.sp.setAnimation("lay");
			this.catEntity2.sp.setAnimation("lay");
			this.hearts += haxepunk_HXP.elapsed * 6;
			while(this.hearts > 0) {
				--this.hearts;
				this.heartEmitter.emitInRectangle("heart",-128,-64,256,128);
			}
		} else {
			var catEntity = this.catEntity1;
			catEntity.set_x(haxepunk_HXP.width * 0.45 * t1);
			if(!(!catEntity.sp.skeleton.flipX)) {
				catEntity.set_x(haxepunk_HXP.width - catEntity.get_x());
			}
			var catEntity1 = this.catEntity2;
			catEntity1.set_x(haxepunk_HXP.width * 0.45 * t1);
			if(!(!catEntity1.sp.skeleton.flipX)) {
				catEntity1.set_x(haxepunk_HXP.width - catEntity1.get_x());
			}
		}
	}
	,__class__: catalyst_scenes_animations_KittenDanceScene
});
var catalyst_scenes_animations_MutateScene = function(cat,oldCatEntity,onFinish) {
	this.p = 0;
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,12632256,null,onFinish);
	this.cat = cat;
	this.oldCatEntity = oldCatEntity;
};
$hxClasses["catalyst.scenes.animations.MutateScene"] = catalyst_scenes_animations_MutateScene;
catalyst_scenes_animations_MutateScene.__name__ = ["catalyst","scenes","animations","MutateScene"];
catalyst_scenes_animations_MutateScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_MutateScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	cat: null
	,oldCatEntity: null
	,catEntity: null
	,timer: null
	,p: null
	,begin: function() {
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.add(this.oldCatEntity).set_layer(-2);
		this.oldCatEntity.sp.set_facingRight(true);
		this.oldCatEntity.sp.set_alpha(1);
		this.oldCatEntity.sp.set_color(16777215);
		this.oldCatEntity.sp.setAnimation("sit");
		this.catEntity = new catalyst_entities_StaticCatEntity(this.cat);
		this.catEntity.sp.set_facingRight(true);
		this.catEntity.set_x(haxepunk_HXP.width / 2);
		this.catEntity.set_y(haxepunk_HXP.height * 0.5 + this.catEntity.get_height() / 2);
		this.catEntity.sp.setAnimation("sit");
		this.catEntity.sp.set_alpha(0);
		this.catEntity.sp.set_color(0);
		this.add(this.catEntity).set_layer(-2);
		this.oldCatEntity.set_x(this.catEntity.get_x());
		this.oldCatEntity.set_y(this.catEntity.get_y());
	}
	,update: function() {
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 10;
		if(this.timer >= 1) {
			this.close();
		} else {
			var phase = this.timer / 0.2 | 0;
			var phaseProgress = this.timer % 0.2 / 0.2;
			switch(phase) {
			case 0:
				this.catEntity.sp.set_color(0);
				this.catEntity.sp.set_alpha(0);
				var this1 = 16777215;
				var tmp;
				if(phaseProgress <= 0) {
					tmp = this1;
				} else if(phaseProgress >= 1) {
					tmp = 0;
				} else {
					var a = this1 >>> 24 & 255;
					var r = this1 >>> 16 & 255;
					var g = this1 >>> 8 & 255;
					var b = this1 & 255;
					a = 0 * phaseProgress | 0;
					r = 255 + (-255 * phaseProgress | 0);
					g = 255 + (-255 * phaseProgress | 0);
					b = 255 + (-255 * phaseProgress | 0);
					tmp = a << 24 | r << 16 | g << 8 | b;
				}
				this.oldCatEntity.sp.set_color(tmp);
				this.oldCatEntity.sp.set_alpha(1);
				break;
			case 1:
				this.catEntity.sp.set_color(0);
				this.catEntity.sp.set_alpha(phaseProgress);
				this.oldCatEntity.sp.set_color(0);
				this.oldCatEntity.sp.set_alpha(1);
				break;
			case 2:
				this.catEntity.sp.set_color(0);
				this.catEntity.sp.set_alpha(1);
				this.oldCatEntity.sp.set_color(0);
				this.oldCatEntity.sp.set_alpha(1 - phaseProgress);
				break;
			case 3:
				var this2 = 0;
				var tmp1;
				if(phaseProgress <= 0) {
					tmp1 = this2;
				} else if(phaseProgress >= 1) {
					tmp1 = 16777215;
				} else {
					var a1 = this2 >>> 24 & 255;
					var r1 = this2 >>> 16 & 255;
					var g1 = this2 >>> 8 & 255;
					var b1 = this2 & 255;
					a1 = 0 * phaseProgress | 0;
					r1 = 255 * phaseProgress | 0;
					g1 = 255 * phaseProgress | 0;
					b1 = 255 * phaseProgress | 0;
					tmp1 = a1 << 24 | r1 << 16 | g1 << 8 | b1;
				}
				this.catEntity.sp.set_color(tmp1);
				this.catEntity.sp.set_alpha(1);
				this.oldCatEntity.sp.set_color(0);
				this.oldCatEntity.sp.set_alpha(0);
				break;
			default:
				this.catEntity.sp.set_color(16777215);
				this.catEntity.sp.set_alpha(1);
				this.oldCatEntity.sp.set_color(0);
				this.oldCatEntity.sp.set_alpha(0);
			}
			if(phase < 3) {
				this.p += 4 * haxepunk_HXP.elapsed * Math.random() * 2;
				while(this.p > 1) {
					--this.p;
					this.catEntity.sparkle(1);
					this.oldCatEntity.sparkle(1);
				}
			}
		}
	}
	,__class__: catalyst_scenes_animations_MutateScene
});
var catalyst_scenes_animations_VortexScene = function(onFinish) {
	this.timer = 0;
	catalyst_scenes_AnimationScene.call(this,16768341,null,onFinish);
};
$hxClasses["catalyst.scenes.animations.VortexScene"] = catalyst_scenes_animations_VortexScene;
catalyst_scenes_animations_VortexScene.__name__ = ["catalyst","scenes","animations","VortexScene"];
catalyst_scenes_animations_VortexScene.__super__ = catalyst_scenes_AnimationScene;
catalyst_scenes_animations_VortexScene.prototype = $extend(catalyst_scenes_AnimationScene.prototype,{
	vortex: null
	,vortex2: null
	,fadeOut: null
	,catEntities: null
	,startPositions: null
	,timer: null
	,begin: function() {
		var _gthis = this;
		catalyst_scenes_AnimationScene.prototype.begin.call(this);
		this.catEntities = [];
		this.startPositions = [];
		var _g = 0;
		var _g1 = catalyst__$Room_Room_$Impl_$.containerRooms;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var _this = catalyst_GameData.get_current();
			var cats = _this.labs.get(_this.currentRegion).cats.cats.get(room);
			var _g2 = 0;
			while(_g2 < cats.length) {
				var cat = cats[_g2];
				++_g2;
				var a = Math.random() * Math.PI * 2;
				var d = 256 + Math.random() * 1024;
				var x = haxepunk_HXP.width / 2 + Math.cos(a) * d;
				var y = haxepunk_HXP.height / 2 + Math.sin(a) * d;
				_gthis.startPositions.push({ x : x, y : y});
				var ce = new catalyst_entities_StaticCatEntity(cat);
				var v = Math.random() > 0.5;
				ce.sp.set_facingRight(v);
				_gthis.catEntities.push(ce);
				ce.set_x(x);
				ce.set_y(y);
				_gthis.add(ce).set_layer(-4);
			}
		}
		this.vortex = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/vortex.png",false));
		this.vortex.smooth = true;
		var tmp = this.vortex.get_width();
		this.vortex.originX = tmp / 2;
		var tmp1 = this.vortex.get_height();
		this.vortex.originY = tmp1 / 2;
		this.vortex.x = haxepunk_HXP.width / 2;
		this.vortex.y = haxepunk_HXP.height / 2;
		this.addGraphic(this.vortex).set_layer(-2);
		this.vortex2 = new haxepunk_graphics_Image(haxepunk_assets_AssetCache.global.getAtlasRegion("assets/graphics/vortex2.png",false));
		this.vortex2.smooth = true;
		var tmp2 = this.vortex.get_width();
		this.vortex2.originX = tmp2 / 2;
		var tmp3 = this.vortex.get_height();
		this.vortex2.originY = tmp3 / 2;
		this.vortex2.x = haxepunk_HXP.width / 2;
		this.vortex2.y = haxepunk_HXP.height / 2;
		this.addGraphic(this.vortex2).set_layer(-3);
		this.fadeOut = new haxepunk_graphics_ColoredRect(haxepunk_HXP.width,haxepunk_HXP.height,16777215,0);
		this.addGraphic(this.fadeOut).set_layer(-5);
		catalyst_Sound.sfxQueue.push("prestige");
		catalyst_Sound.volumeQueue.push(1);
	}
	,update: function() {
		(haxepunk_HXP.engine._scene == null ? null : haxepunk_HXP.engine._scene.camera).shake(1);
		catalyst_scenes_AnimationScene.prototype.update.call(this);
		this.timer += haxepunk_HXP.elapsed / 12;
		this.vortex.angle = 360 - this.timer * 1440 % 360;
		this.vortex2.angle = this.timer * 6120 % 360;
		if(this.timer >= 1) {
			this.close();
		} else if(this.timer >= 0.5) {
			var _g = 0;
			var _g1 = this.catEntities;
			while(_g < _g1.length) {
				var ce = _g1[_g];
				++_g;
				ce.set_visible(false);
			}
			var t = 1 - (this.timer - 0.5) * 2;
			this.vortex.set_alpha(this.vortex2.set_alpha(-t * (t - 2)));
			this.fadeOut.set_alpha(1 - this.vortex.alpha);
		} else {
			var t1 = this.timer * 2;
			var t2 = t1 * t1;
			var x0 = haxepunk_HXP.width / 2;
			var y0 = haxepunk_HXP.height / 2;
			var _g11 = 0;
			var _g2 = this.catEntities.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var ce1 = this.catEntities[i];
				var a = this.startPositions[i].x;
				ce1.set_x(a + (x0 - a) * t2);
				var a1 = this.startPositions[i].y;
				ce1.set_y(a1 + (y0 - a1) * t2);
				var d = Math.abs(ce1.get_x() - x0) + Math.abs(ce1.get_y() - y0);
				if(d < ce1.get_width() / 8) {
					ce1.set_visible(false);
				} else {
					ce1.sp.set_alpha(haxepunk_math_MathUtil.clamp(d / 256,0,1));
					var this1 = 0;
					var t3 = ce1.sp.alpha;
					var tmp;
					if(t3 <= 0) {
						tmp = this1;
					} else if(t3 >= 1) {
						tmp = 16777215;
					} else {
						var a2 = this1 >>> 24 & 255;
						var r = this1 >>> 16 & 255;
						var g = this1 >>> 8 & 255;
						var b = this1 & 255;
						a2 = 0 * t3 | 0;
						r = 255 * t3 | 0;
						g = 255 * t3 | 0;
						b = 255 * t3 | 0;
						tmp = a2 << 24 | r << 16 | g << 8 | b;
					}
					ce1.sp.set_color(tmp);
				}
			}
		}
	}
	,__class__: catalyst_scenes_animations_VortexScene
});
var catalyst_shaders_NoiseShader = function() {
	this.offset2 = 0;
	this.offset1 = 0;
	this.index2 = 0;
	this.index1 = 0;
	this.turnoverTime = 1;
	this.timer = 0;
	haxepunk_graphics_shader_TextureShader.call(this,null,haxepunk_assets_AssetCache.global.getText("assets/shaders/noise.frag"));
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) _g.push(haxepunk_assets_AssetCache.global.getTexture("assets/graphics/noise" + (_g1++ + 1) + ".png"));
	this.noise = _g;
	this.currentNoise1 = this.noise[0];
	this.currentNoise2 = this.noise[1];
};
$hxClasses["catalyst.shaders.NoiseShader"] = catalyst_shaders_NoiseShader;
catalyst_shaders_NoiseShader.__name__ = ["catalyst","shaders","NoiseShader"];
catalyst_shaders_NoiseShader.__super__ = haxepunk_graphics_shader_TextureShader;
catalyst_shaders_NoiseShader.prototype = $extend(haxepunk_graphics_shader_TextureShader.prototype,{
	timer: null
	,turnoverTime: null
	,noise: null
	,index1: null
	,index2: null
	,offset1: null
	,offset2: null
	,currentNoise1: null
	,currentNoise2: null
	,bind: function() {
		haxepunk_graphics_shader_TextureShader.prototype.bind.call(this);
		haxepunk_graphics_hardware_opengl_GLUtils.bindTexture(this.currentNoise1,true,33985);
		var name = catalyst_shaders_NoiseShader.UIMAGE1;
		if(!this.uniformIndices.exists(name)) {
			this.uniformIndices.set(name,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name));
		}
		var location = this.uniformIndices.get(name);
		lime_graphics_opengl_GL.context.__context.uniform1i(location,1);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33648);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33648);
		haxepunk_graphics_hardware_opengl_GLUtils.bindTexture(this.currentNoise2,true,33986);
		var name1 = catalyst_shaders_NoiseShader.UIMAGE2;
		if(!this.uniformIndices.exists(name1)) {
			this.uniformIndices.set(name1,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name1));
		}
		var location1 = this.uniformIndices.get(name1);
		lime_graphics_opengl_GL.context.__context.uniform1i(location1,2);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33648);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33648);
		var name2 = catalyst_shaders_NoiseShader.UINDEX1;
		if(!this.uniformIndices.exists(name2)) {
			this.uniformIndices.set(name2,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name2));
		}
		var location2 = this.uniformIndices.get(name2);
		lime_graphics_opengl_GL.context.__context.uniform1i(location2,this.index1);
		var name3 = catalyst_shaders_NoiseShader.UINDEX2;
		if(!this.uniformIndices.exists(name3)) {
			this.uniformIndices.set(name3,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name3));
		}
		var location3 = this.uniformIndices.get(name3);
		lime_graphics_opengl_GL.context.__context.uniform1i(location3,this.index2);
		var name4 = catalyst_shaders_NoiseShader.UOFFSET1;
		if(!this.uniformIndices.exists(name4)) {
			this.uniformIndices.set(name4,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name4));
		}
		var location4 = this.uniformIndices.get(name4);
		lime_graphics_opengl_GL.context.__context.uniform1f(location4,this.offset1);
		var name5 = catalyst_shaders_NoiseShader.UOFFSET2;
		if(!this.uniformIndices.exists(name5)) {
			this.uniformIndices.set(name5,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name5));
		}
		var location5 = this.uniformIndices.get(name5);
		lime_graphics_opengl_GL.context.__context.uniform1f(location5,this.offset2);
		var name6 = catalyst_shaders_NoiseShader.UTIMER;
		if(!this.uniformIndices.exists(name6)) {
			this.uniformIndices.set(name6,lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,name6));
		}
		var location6 = this.uniformIndices.get(name6);
		lime_graphics_opengl_GL.context.__context.uniform1f(location6,this.timer);
	}
	,update: function() {
		this.timer += haxepunk_HXP.elapsed / this.turnoverTime;
		if(this.timer >= 1) {
			this.timer %= 1;
			this.updateNoise();
			this.turnoverTime = 1 + Math.random();
		}
	}
	,updateNoise: function() {
		this.currentNoise1 = this.currentNoise2;
		this.offset1 = this.offset2;
		this.index1 = this.index2;
		var i = Std.random(3);
		if(this.currentNoise1 == this.noise[i]) {
			++i;
		}
		this.currentNoise2 = this.noise[i];
		this.index2 = Std.random(3);
		this.offset2 = Math.random();
	}
	,__class__: catalyst_shaders_NoiseShader
});
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var _g1 = 0;
				var _g2 = v["length"];
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				this.buf.b += "v";
				this.buf.b += Std.string(v.getTime());
				break;
			case List:
				this.buf.b += "l";
				var _g_head = v.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v4 = v;
				var k2 = v4.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v4.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v5 = v;
				var k4 = v5.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v5.getReserved(k5) : v5.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v6 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v6.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v6.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					b64 = new Array(length);
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i2 = _g11++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v6.b[i1++];
					var b2 = v6.b[i1++];
					var b3 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v6.b[i1++];
					var b21 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v6.b[i1++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(_g[2]));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l = v["length"];
			this.buf.b += Std.string(l - 2);
			var _g12 = 2;
			var _g4 = l;
			while(_g12 < _g4) this.serialize(v[_g12++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf.charCodeAt(i1++)];
				var c2 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf.charCodeAt(i1++)];
				var c21 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,addInt32: function(v) {
		this.b.push(v & 255);
		this.b.push(v >> 8 & 255);
		this.b.push(v >> 16 & 255);
		this.b.push(v >>> 24);
	}
	,addInt64: function(v) {
		this.addInt32(v.low);
		this.addInt32(v.high);
	}
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.b.push(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw new js__$Boot_HaxeError(e);
				}
			} else throw(e);
		}
		return s;
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return (1 - (high >>> 31 << 1)) * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		i64.low = sig | 0;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | (sig / 4294967296.0 | 0);
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[_g1++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	path = path.split("\\").join("/");
	if(path == "/") {
		return "/";
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split("/");
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join("/");
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	tmp.replace(regex_r,"$1" + "/");
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var _g21 = tmp.charCodeAt(_g11++);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(_g21);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(_g21);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = ["haxe","io","StringInput"];
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				var _this = this.__x;
				if(_this.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
				}
				xname = _this.nodeName;
			}
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__x: null
	,__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) l.add(new haxe_xml_Fast(x.next()));
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,__class__: haxe_xml_Fast
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxepunk_Camera = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._shakeY = 0;
	this._shakeX = 0;
	this._shakeMagnitude = 0;
	this._shakeTime = 0;
	this.anchorY = 0;
	this.anchorX = 0;
	this.pixelSnapping = false;
	this.scaleY = 1;
	this.scaleX = 1;
	this.scale = 1;
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["haxepunk.Camera"] = haxepunk_Camera;
haxepunk_Camera.__name__ = ["haxepunk","Camera"];
haxepunk_Camera.prototype = {
	x: null
	,y: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,pixelSnapping: null
	,anchorTarget: null
	,anchorX: null
	,anchorY: null
	,shake: function(duration,magnitude) {
		if(magnitude == null) {
			magnitude = 4;
		}
		if(duration == null) {
			duration = 0.5;
		}
		if(this._shakeTime < duration) {
			this._shakeTime = duration;
		}
		this._shakeMagnitude = magnitude;
	}
	,update: function() {
		if(this.anchorTarget != null) {
			var tx = this.anchorTarget.x;
			var ty = this.anchorTarget.y;
			if(js_Boot.__instanceof(this.anchorTarget,haxepunk_Entity)) {
				var e = this.anchorTarget;
				tx = e.get_x() - e.originX + e.get_width() / 2;
				ty = e.get_y() - e.originY + e.get_height() / 2;
			}
			this.x = tx - haxepunk_HXP.width / (this.scale * this.scaleX) * this.anchorX;
			this.y = ty - haxepunk_HXP.height / (this.scale * this.scaleY) * this.anchorY;
		}
		if(this._shakeTime > 0) {
			var sx = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var sy = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			this.x += sx - this._shakeX;
			this.y += sy - this._shakeY;
			this._shakeX = sx;
			this._shakeY = sy;
			this._shakeTime -= haxepunk_HXP.elapsed;
			if(this._shakeTime < 0) {
				this._shakeTime = 0;
			}
		} else if(this._shakeX != 0 || this._shakeY != 0) {
			this.x -= this._shakeX;
			this.y -= this._shakeY;
			this._shakeX = this._shakeY = 0;
		}
	}
	,_shakeTime: null
	,_shakeMagnitude: null
	,_shakeX: null
	,_shakeY: null
	,__class__: haxepunk_Camera
};
var haxepunk_Cursor = function() { };
$hxClasses["haxepunk.Cursor"] = haxepunk_Cursor;
haxepunk_Cursor.__name__ = ["haxepunk","Cursor"];
haxepunk_Cursor.__super__ = haxepunk_Entity;
haxepunk_Cursor.prototype = $extend(haxepunk_Entity.prototype,{
	update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var _this = this._scene;
		var _this1 = _this.camera;
		this.set_x((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this.x) / (_this1.scale * _this1.scaleX * haxepunk_HXP.screen.scaleX) + _this.camera.x | 0);
		var _this2 = this._scene;
		var _this3 = _this2.camera;
		this.set_y((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this2.y) / (_this3.scale * _this3.scaleY * haxepunk_HXP.screen.scaleY) + _this2.camera.y | 0);
	}
	,render: function(camera) {
		var img = this.graphic;
		if(img != null) {
			img.scaleX = 1 / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			img.scaleY = 1 / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,__class__: haxepunk_Cursor
});
var haxepunk__$Engine_VisibleSceneIterator = function() {
	this.scenes = [];
};
$hxClasses["haxepunk._Engine.VisibleSceneIterator"] = haxepunk__$Engine_VisibleSceneIterator;
haxepunk__$Engine_VisibleSceneIterator.__name__ = ["haxepunk","_Engine","VisibleSceneIterator"];
haxepunk__$Engine_VisibleSceneIterator.prototype = {
	hasNext: function() {
		return this.scenes.length > 0;
	}
	,next: function() {
		return this.scenes.pop();
	}
	,reset: function(engine) {
		this.scenes.length = 0;
		if(engine.console != null) {
			this.scenes.push(engine.console);
		}
		var scene;
		var i = engine._scenes.length - 1;
		while(i >= 0) {
			scene = engine._scenes[i];
			if(scene.visible) {
				this.scenes.push(scene);
			}
			if(scene.bgAlpha == 1) {
				break;
			}
			--i;
		}
		return this;
	}
	,scenes: null
	,__class__: haxepunk__$Engine_VisibleSceneIterator
};
var haxepunk__$Graphic_ImageType_$Impl_$ = {};
$hxClasses["haxepunk._Graphic.ImageType_Impl_"] = haxepunk__$Graphic_ImageType_$Impl_$;
haxepunk__$Graphic_ImageType_$Impl_$.__name__ = ["haxepunk","_Graphic","ImageType_Impl_"];
haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion = function(region) {
	return region;
};
var haxepunk_HXP = function() { };
$hxClasses["haxepunk.HXP"] = haxepunk_HXP;
haxepunk_HXP.__name__ = ["haxepunk","HXP"];
haxepunk_HXP.resize = function(width,height) {
	haxepunk_HXP.windowWidth = width;
	haxepunk_HXP.windowHeight = height;
	haxepunk_HXP.screen.resize(width,height);
	haxepunk_HXP.halfWidth = haxepunk_HXP.width / 2;
	haxepunk_HXP.halfHeight = haxepunk_HXP.height / 2;
	haxepunk_HXP.bounds.width = width;
	haxepunk_HXP.bounds.height = height;
	var _g = haxepunk_HXP.engine.iterator();
	while(_g.scenes.length > 0) _g.scenes.pop()._resize();
	haxepunk_HXP.needsResize = false;
};
haxepunk_HXP.insertSortedKey = function(list,key,compare) {
	var result = 0;
	var mid = 0;
	var min = 0;
	var max = list.length - 1;
	while(max >= min) {
		mid = min + ((max - min) / 2 | 0);
		result = compare(list[mid],key);
		if(result > 0) {
			max = mid - 1;
		} else if(result < 0) {
			min = mid + 1;
		} else {
			return;
		}
	}
	list.splice(result > 0 ? mid : mid + 1,0,key);
};
var haxepunk__$Position_Position_$Impl_$ = {};
$hxClasses["haxepunk._Position.Position_Impl_"] = haxepunk__$Position_Position_$Impl_$;
haxepunk__$Position_Position_$Impl_$.__name__ = ["haxepunk","_Position","Position_Impl_"];
haxepunk__$Position_Position_$Impl_$._new = function(obj) {
	var this1;
	if(obj == null) {
		obj = { x : 0, y : 0};
	}
	this1 = obj;
	return this1;
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) if(list1[_g1++].match(listener,useCapture)) {
				return;
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		while(_g1 < numElements) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCanvas: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,clean: function(object) {
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.__pool.remove(val);
			this.__inactiveObjectList.remove(val);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					++_g1;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size"}
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
	}
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		var usingTemp = false;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			usingTemp = true;
			matrix = openfl_geom_Matrix.__pool.get();
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		if(usingTemp) {
			openfl_geom_Matrix.__pool.release(matrix);
		}
		return bounds;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) stack.data.get(i - _g1++ - 1).__dispatch(event);
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || this.__worldTransformInvalid) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
				current.__worldTransformInvalid = false;
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
					var context = renderSession.context;
					if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
						renderSession.maskManager.pushObject(bitmap,false);
						lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = bitmap.__worldAlpha;
						var transform = bitmap.__renderTransform;
						var scrollRect = bitmap.__scrollRect;
						if(renderSession.roundPixels) {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
						} else {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = false;
							context.msImageSmoothingEnabled = false;
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = true;
							context.msImageSmoothingEnabled = true;
							context.imageSmoothingEnabled = true;
						}
						renderSession.maskManager.popObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
						renderSession.maskManager.pushObject(this);
						var context1 = renderSession.context;
						var transform1 = this.__renderTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						var color = this.opaqueBackground;
						context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context1.fillRect(0,0,this.get_width(),this.get_height());
						renderSession.maskManager.popObject(this);
					}
					if(this.__graphics != null) {
						if(!(!this.__renderable || this.__worldAlpha <= 0)) {
							var graphics = this.__graphics;
							if(graphics != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
								if(graphics.__canvas != null) {
									var context2 = renderSession.context;
									var scrollRect1 = this.__scrollRect;
									if(graphics.__width > 0 && graphics.__height > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
										renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
										renderSession.maskManager.pushObject(this);
										context2.globalAlpha = this.__worldAlpha;
										var transform2 = graphics.__worldTransform;
										if(renderSession.roundPixels) {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx | 0,transform2.ty | 0);
										} else {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx,transform2.ty);
										}
										if(renderSession.renderType == lime_graphics_RendererType.DOM) {
											var reverseScale = 1 / openfl__$internal_renderer_canvas_CanvasRenderer.scale;
											context2.scale(reverseScale,reverseScale);
										}
										context2.drawImage(graphics.__canvas,0,0);
										renderSession.maskManager.popObject(this);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else {
			this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
				if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderSession.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderSession);
					}
				}
				if(this.__canvas != null) {
					renderSession.maskManager.pushObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
					openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,true,true);
					this.__renderTransform = cacheTransform;
					renderSession.maskManager.popObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderSession);
			}
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.__context.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.__context.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								renderSession.shaderManager.setShader(shader);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								var useColorTransform = !this.__worldColorTransform.__isDefault();
								if(shader.get_data().uColorTransform.value == null) {
									shader.get_data().uColorTransform.value = [];
								}
								shader.get_data().uColorTransform.value[0] = useColorTransform;
								renderSession.shaderManager.updateShader(shader);
								var target = gl1.ARRAY_BUFFER;
								var buffer = graphics.__bitmap.getBuffer(gl1,this.__worldAlpha,this.__worldColorTransform);
								gl1.__context.bindBuffer(target,buffer);
								var index = shader.get_data().aPosition.index;
								gl1.__context.vertexAttribPointer(index,3,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
								var index1 = shader.get_data().aTexCoord.index;
								gl1.__context.vertexAttribPointer(index1,2,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
								var index2 = shader.get_data().aAlpha.index;
								gl1.__context.vertexAttribPointer(index2,1,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20)));
								var index3 = shader.get_data().aColorMultipliers0.index;
								gl1.__context.vertexAttribPointer(index3,4,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24)));
								var index4 = shader.get_data().aColorMultipliers1.index;
								gl1.__context.vertexAttribPointer(index4,4,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40)));
								var index5 = shader.get_data().aColorMultipliers2.index;
								gl1.__context.vertexAttribPointer(index5,4,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56)));
								var index6 = shader.get_data().aColorMultipliers3.index;
								gl1.__context.vertexAttribPointer(index6,4,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72)));
								var index7 = shader.get_data().aColorOffsets.index;
								gl1.__context.vertexAttribPointer(index7,4,gl1.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88)));
								gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.filterManager.popObject(this);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			if(this.__graphics != null) {
				var graphics = this.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
					if(graphics.__bitmap != null) {
						var renderer = renderSession.renderer;
						var gl = renderSession.gl;
						var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
						renderSession.shaderManager.setShader(shader);
						shader.get_data().uImage0.input = graphics.__bitmap;
						shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
						shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
						renderSession.shaderManager.updateShader(shader);
						var target = gl.ARRAY_BUFFER;
						var buffer = graphics.__bitmap.getBuffer(gl,this.__worldAlpha,this.__worldColorTransform);
						gl.__context.bindBuffer(target,buffer);
						var index = shader.get_data().aPosition.index;
						gl.__context.vertexAttribPointer(index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
						var index1 = shader.get_data().aTexCoord.index;
						gl.__context.vertexAttribPointer(index1,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
						gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
					}
				}
			}
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.get_visible();
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.get_visible();
					this.__worldVisible = this.get_visible();
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true,maskGraphics);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.__cacheBitmapRender) {
			return false;
		}
		if(this.get_cacheAsBitmap()) {
			var matrix = null;
			var rect = null;
			this.__update(false,true);
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || needRender) {
				matrix = openfl_geom_Matrix.__pool.get();
				rect = openfl_geom_Rectangle.__pool.get();
				matrix.identity();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = Math.ceil(rect.width);
				bitmapHeight = Math.ceil(rect.height);
				if(!needRender && this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) {
					needRender = true;
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
					} else {
						this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return true;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				matrix.concat(this.__renderTransform);
				matrix.tx -= Math.round(rect.x);
				matrix.ty -= Math.round(rect.y);
			}
			this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				this.__cacheBitmapData.__draw(this,matrix,null,null,null,renderSession.allowSmoothing);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) {
							needSecondBitmapData = true;
						}
						if(filter1.__preserveObject) {
							needCopyOfOriginal = true;
						}
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) {
						bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					} else {
						bitmapData2 = bitmapData;
					}
					if(needCopyOfOriginal) {
						bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					}
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g3 = 0;
					var _g12 = this.__filters;
					while(_g3 < _g12.length) {
						var filter2 = _g12[_g3];
						++_g3;
						if(filter2.__preserveObject) {
							bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						}
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) {
							lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						}
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) {
					this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
				}
			}
			if(updateTransform) {
				this.__update(false,true);
				openfl_geom_Matrix.__pool.release(matrix);
				openfl_geom_Rectangle.__pool.release(rect);
				return true;
			} else {
				return false;
			}
		} else if(this.__cacheBitmap != null) {
			if(renderSession.renderType == lime_graphics_RendererType.DOM) {
				this.__cacheBitmap.__renderDOMClear(renderSession);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
			return true;
		}
		return false;
	}
	,__updateChildren: function(transformOnly) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) {
			this.__transformDirty = false;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		var parentTransform;
		if(!overrided && this.parent != null) {
			parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			parentTransform = renderParent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			this.__setTransformDirty();
			if(openfl_display_DisplayObject.__supportDOM) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,__tabEnabled: null
	,__tabIndex: null
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			child.__dispatchWithCapture(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.data.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getFilterBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderDOM(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderDOMClear: function(renderSession) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOMClear(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.data.get_length()) {
			var orphan = _g11.data.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOMClear(renderSession);
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			renderSession.filterManager.pushObject(this);
			if(renderSession.clearRenderDirty) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderSession);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderSession);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		if(this.__children.length > 0) {
			renderSession.filterManager.popObject(this);
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGLMask(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderGLMask(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			return interactiveOnly;
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var color = 0;
	if(0.299 * (backgroundColor >> 16 & 255) + 0.587 * (backgroundColor >> 8 & 255) + 0.114 * (backgroundColor & 255) < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.get_current().stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var percent = (openfl_Lib.getTimer() - this.startAnimation) / (this.endAnimation - this.startAnimation);
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var haxepunk_Preloader = function() {
	var _gthis = this;
	openfl_display_DefaultPreloader.call(this);
	openfl_utils_Assets.loadBitmapData("graphics/preloader/haxepunk.png").onComplete(function(bmd) {
		_gthis.scaleIncrement = 0.002;
		_gthis.outline.set_x((_gthis.getWidth() - 260) / 2);
		_gthis.outline.set_y((_gthis.getHeight() - 340) / 2);
		_gthis.outline.get_graphics().clear();
		var img = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,0,274,58)));
		_gthis.addChild(img);
		img.set_x(_gthis.outline.get_x());
		img.set_y(_gthis.outline.get_y());
		var img1 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,65,274,80)));
		_gthis.addChild(img1);
		img1.set_x(_gthis.outline.get_x());
		img1.set_y(_gthis.outline.get_y() + 260);
		_gthis.factory = new openfl_display_Sprite();
		_gthis.factory.set_x(_gthis.outline.get_x() + 187);
		_gthis.factory.set_y(_gthis.outline.get_y() + 260);
		var img2 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(0,165,114,190)));
		img2.set_x(-57);
		img2.set_y(-190);
		_gthis.factory.addChild(img2);
		_gthis.addChild(_gthis.factory);
		_gthis.largeCog = new openfl_display_Sprite();
		_gthis.largeCog.set_x(_gthis.outline.get_x() + 80);
		_gthis.largeCog.set_y(_gthis.outline.get_y() + 190);
		var img3 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(115,164,134,136)));
		img3.set_x(-67);
		img3.set_y(-68);
		_gthis.largeCog.addChild(img3);
		_gthis.addChild(_gthis.largeCog);
		_gthis.smallCog = new openfl_display_Sprite();
		_gthis.smallCog.set_x(_gthis.outline.get_x() + 190);
		_gthis.smallCog.set_y(_gthis.outline.get_y() + 185);
		var img4 = new openfl_display_Bitmap(_gthis.crop(bmd,new openfl_geom_Rectangle(123,305,56,56)));
		img4.set_x(-28);
		img4.set_y(-28);
		_gthis.smallCog.addChild(img4);
		_gthis.addChild(_gthis.smallCog);
		var complete = new openfl_display_Sprite();
		complete.set_x(_gthis.outline.get_x() + 130.);
		complete.set_y(_gthis.outline.get_y() + 60);
		complete.get_graphics().lineStyle(1,-1);
		complete.get_graphics().moveTo(-125.,0);
		complete.get_graphics().lineTo(125.,0);
		_gthis.addChildAt(complete,0);
		_gthis.progress.set_y(_gthis.outline.get_y() + 60);
		_gthis.progress.set_x(_gthis.outline.get_x() + 130.);
		_gthis.progress.get_graphics().clear();
		_gthis.progress.get_graphics().lineStyle(1,-3448027);
		_gthis.progress.get_graphics().moveTo(-125.,0);
		_gthis.progress.get_graphics().lineTo(125.,0);
		_gthis.addEventListener("enterFrame",$bind(_gthis,_gthis.onEnterFrame));
		_gthis.onEnterFrame(null);
	});
};
$hxClasses["haxepunk.Preloader"] = haxepunk_Preloader;
haxepunk_Preloader.__name__ = ["haxepunk","Preloader"];
haxepunk_Preloader.__super__ = openfl_display_DefaultPreloader;
haxepunk_Preloader.prototype = $extend(openfl_display_DefaultPreloader.prototype,{
	largeCog: null
	,smallCog: null
	,factory: null
	,onEnterFrame: function(e) {
		var _g = this.largeCog;
		_g.set_rotation(_g.get_rotation() + 1);
		var _g1 = this.smallCog;
		_g1.set_rotation(_g1.get_rotation() - 1);
		var _g2 = this.factory;
		_g2.set_scaleX(_g2.get_scaleX() + this.scaleIncrement);
		var _g3 = this.factory;
		_g3.set_scaleY(_g3.get_scaleY() + this.scaleIncrement);
		if(this.factory.get_scaleX() > 1.02 || this.factory.get_scaleX() < 1) {
			this.scaleIncrement = -this.scaleIncrement;
		}
		this.outline.get_graphics().clear();
	}
	,crop: function(bmd,rect) {
		var cropped = new openfl_display_BitmapData(rect.width | 0,rect.height | 0);
		cropped.copyPixels(bmd,rect,new openfl_geom_Point());
		return cropped;
	}
	,scaleIncrement: null
	,__class__: haxepunk_Preloader
});
var haxepunk_Screen = function() {
	this.scaleY = 1;
	this.scaleX = 1;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.color = 0;
	this.scaleMode = new haxepunk_screen_ScaleMode();
};
$hxClasses["haxepunk.Screen"] = haxepunk_Screen;
haxepunk_Screen.__name__ = ["haxepunk","Screen"];
haxepunk_Screen.prototype = {
	scaleMode: null
	,resize: function(width,height) {
		this.scaleMode.resize(width,height);
		width = haxepunk_HXP.width = haxepunk_HXP.screen.width / haxepunk_HXP.screen.scaleX | 0;
		height = haxepunk_HXP.height = haxepunk_HXP.screen.height / haxepunk_HXP.screen.scaleY | 0;
	}
	,color: null
	,x: null
	,y: null
	,width: null
	,height: null
	,scaleX: null
	,set_scaleX: function(value) {
		this.scaleX = value;
		haxepunk_HXP.needsResize = true;
		return this.scaleX;
	}
	,scaleY: null
	,set_scaleY: function(value) {
		this.scaleY = value;
		haxepunk_HXP.needsResize = true;
		return this.scaleY;
	}
	,__class__: haxepunk_Screen
	,__properties__: {set_scaleY:"set_scaleY",set_scaleX:"set_scaleX"}
};
var haxepunk_Sfx = function(source,complete) {
	this._position = 0;
	this._pan = 0;
	this._volume = 1;
	this._transform = new openfl_media_SoundTransform();
	this._volume = 1;
	this._pan = 0;
	this._position = 0;
	this._type = "";
	if(source == null) {
		throw new js__$Boot_HaxeError("Invalid source Sound.");
	}
	if(typeof(source) == "string") {
		this._sound = haxepunk_assets_AssetLoader.getSound(source);
		var value = this._sound;
		var _this = haxepunk_Sfx._sounds;
		var key = source;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
	} else {
		var o = source;
		var className = Type.getClassName(o == null ? null : js_Boot.getClass(o));
		if(StringTools.endsWith(className,"media.Sound")) {
			var __sound = source;
			var key1 = __sound.url;
			var _this1 = haxepunk_Sfx._sounds;
			this._sound = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			if(this._sound == null) {
				this._sound = source;
				var key2 = __sound.url;
				var _this2 = haxepunk_Sfx._sounds;
				var value1 = source;
				if(__map_reserved[key2] != null) {
					_this2.setReserved(key2,value1);
				} else {
					_this2.h[key2] = value1;
				}
			}
		} else {
			var _this3 = haxepunk_Sfx._sounds;
			this._sound = __map_reserved[className] != null ? _this3.getReserved(className) : _this3.h[className];
			if(this._sound == null) {
				this._sound = source;
				var _this4 = haxepunk_Sfx._sounds;
				var value2 = source;
				if(__map_reserved[className] != null) {
					_this4.setReserved(className,value2);
				} else {
					_this4.h[className] = value2;
				}
			}
		}
	}
	this.complete = complete;
};
$hxClasses["haxepunk.Sfx"] = haxepunk_Sfx;
haxepunk_Sfx.__name__ = ["haxepunk","Sfx"];
haxepunk_Sfx.getPan = function(type) {
	var result = 0;
	var _this = haxepunk_Sfx._typeTransforms;
	if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
		var _this1 = haxepunk_Sfx._typeTransforms;
		var transform = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		if(transform != null) {
			result = transform.pan;
		}
	}
	return result + haxepunk_HXP._pan;
};
haxepunk_Sfx.getVolume = function(type) {
	var result = 1;
	var _this = haxepunk_Sfx._typeTransforms;
	if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
		var _this1 = haxepunk_Sfx._typeTransforms;
		var transform = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		if(transform != null) {
			result = transform.volume;
		}
	}
	return result * haxepunk_HXP.volume;
};
haxepunk_Sfx.setVolume = function(type,volume) {
	var _this = haxepunk_Sfx._typeTransforms;
	var transform = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		var _this1 = haxepunk_Sfx._typeTransforms;
		if(__map_reserved[type] != null) {
			_this1.setReserved(type,transform);
		} else {
			_this1.h[type] = transform;
		}
	}
	transform.volume = volume < 0 ? 0 : volume;
	var _this2 = haxepunk_Sfx._typePlaying;
	if(__map_reserved[type] != null ? _this2.existsReserved(type) : _this2.h.hasOwnProperty(type)) {
		var _g = 0;
		var _this3 = haxepunk_Sfx._typePlaying;
		var _g1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_volume(sfx.get_volume());
		}
	}
};
haxepunk_Sfx.prototype = {
	complete: null
	,play: function(volume,pan,loop) {
		if(loop == null) {
			loop = false;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 1;
		}
		if(this._sound == null) {
			return;
		}
		if(this._channel != null) {
			this.stop();
		}
		this._pan = haxepunk_math_MathUtil.clamp(pan,-1,1);
		this._volume = volume < 0 ? 0 : volume;
		this._filteredPan = haxepunk_math_MathUtil.clamp(this._pan + haxepunk_Sfx.getPan(this._type),-1,1);
		this._filteredVol = Math.max(0,this._volume * haxepunk_Sfx.getVolume(this._type));
		this._transform.pan = this._filteredPan;
		this._transform.volume = this._filteredVol;
		this._channel = this._sound.play(0,loop ? -1 : 0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._looping = loop;
		this._position = 0;
	}
	,loop: function(vol,pan) {
		if(pan == null) {
			pan = 0;
		}
		if(vol == null) {
			vol = 1;
		}
		this.play(vol,pan,true);
	}
	,stop: function() {
		if(this._channel == null) {
			return false;
		}
		this.removePlaying();
		this._position = this._channel.get_position();
		this._channel.removeEventListener("soundComplete",$bind(this,this.onComplete));
		this._channel.stop();
		this._channel = null;
		return true;
	}
	,onComplete: function(e) {
		if(this._looping) {
			this.loop(this._volume,this._pan);
		} else {
			this.stop();
		}
		this._position = 0;
		if(this.complete != null) {
			this.complete();
		}
	}
	,addPlaying: function() {
		var list;
		var key = this._type;
		var _this = haxepunk_Sfx._typePlaying;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			list = [];
			var key1 = this._type;
			var _this1 = haxepunk_Sfx._typePlaying;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,list);
			} else {
				_this1.h[key1] = list;
			}
		} else {
			var key2 = this._type;
			var _this2 = haxepunk_Sfx._typePlaying;
			if(__map_reserved[key2] != null) {
				list = _this2.getReserved(key2);
			} else {
				list = _this2.h[key2];
			}
		}
		list.push(this);
	}
	,removePlaying: function() {
		var key = this._type;
		var _this = haxepunk_Sfx._typePlaying;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this._type;
			var _this1 = haxepunk_Sfx._typePlaying;
			HxOverrides.remove(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1],this);
		}
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(value) {
		if(value < 0) {
			value = 0;
		}
		if(this._channel == null) {
			return value;
		}
		this._volume = value;
		var filteredVol = value * haxepunk_Sfx.getVolume(this._type);
		if(filteredVol < 0) {
			filteredVol = 0;
		}
		if(this._filteredVol == filteredVol) {
			return value;
		}
		this._filteredVol = this._transform.volume = filteredVol;
		this._channel.set_soundTransform(this._transform);
		return this._volume;
	}
	,get_pan: function() {
		return this._pan;
	}
	,set_pan: function(value) {
		value = haxepunk_math_MathUtil.clamp(value,-1,1);
		if(this._channel == null) {
			return value;
		}
		var filteredPan = haxepunk_math_MathUtil.clamp(value + haxepunk_Sfx.getPan(this._type),-1,1);
		if(this._filteredPan == filteredPan) {
			return value;
		}
		this._pan = value;
		this._filteredPan = this._transform.pan = filteredPan;
		this._channel.set_soundTransform(this._transform);
		return this._pan;
	}
	,set_type: function(value) {
		if(this._type == value) {
			return value;
		}
		if(this._channel != null) {
			this.removePlaying();
			this._type = value;
			this.addPlaying();
			this.set_pan(this.get_pan());
			this.set_volume(this.get_volume());
		} else {
			this._type = value;
		}
		return value;
	}
	,_type: null
	,_volume: null
	,_pan: null
	,_filteredVol: null
	,_filteredPan: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_position: null
	,_looping: null
	,__class__: haxepunk_Sfx
	,__properties__: {set_type:"set_type",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"}
};
var haxepunk_Signal1 = function() {
	haxepunk_Signal.call(this);
};
$hxClasses["haxepunk.Signal1"] = haxepunk_Signal1;
haxepunk_Signal1.__name__ = ["haxepunk","Signal1"];
haxepunk_Signal1.__super__ = haxepunk_Signal;
haxepunk_Signal1.prototype = $extend(haxepunk_Signal.prototype,{
	__class__: haxepunk_Signal1
});
var haxepunk_Signals = function() {
	this.signals = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.Signals"] = haxepunk_Signals;
haxepunk_Signals.__name__ = ["haxepunk","Signals"];
haxepunk_Signals.prototype = {
	signals: null
	,resolve: function(field) {
		if(!this.signals.exists(field)) {
			var this1 = this.signals;
			var v = new haxepunk_Signal0();
			var _this = this1;
			if(__map_reserved[field] != null) {
				_this.setReserved(field,v);
			} else {
				_this.h[field] = v;
			}
		}
		var _this1 = this.signals;
		if(__map_reserved[field] != null) {
			return _this1.getReserved(field);
		} else {
			return _this1.h[field];
		}
	}
	,__class__: haxepunk_Signals
};
var haxepunk_TweenType = $hxClasses["haxepunk.TweenType"] = { __ename__ : ["haxepunk","TweenType"], __constructs__ : ["Persist","Looping","OneShot","PingPong"] };
haxepunk_TweenType.Persist = ["Persist",0];
haxepunk_TweenType.Persist.toString = $estr;
haxepunk_TweenType.Persist.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.Looping = ["Looping",1];
haxepunk_TweenType.Looping.toString = $estr;
haxepunk_TweenType.Looping.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.OneShot = ["OneShot",2];
haxepunk_TweenType.OneShot.toString = $estr;
haxepunk_TweenType.OneShot.__enum__ = haxepunk_TweenType;
haxepunk_TweenType.PingPong = ["PingPong",3];
haxepunk_TweenType.PingPong.toString = $estr;
haxepunk_TweenType.PingPong.__enum__ = haxepunk_TweenType;
var haxepunk_Tween = function() {
	this._time = 0;
	this.onComplete = new haxepunk_Signal0();
	this.onUpdate = new haxepunk_Signal0();
	this.onStart = new haxepunk_Signal0();
	this.forward = true;
	this.active = false;
};
$hxClasses["haxepunk.Tween"] = haxepunk_Tween;
haxepunk_Tween.__name__ = ["haxepunk","Tween"];
haxepunk_Tween.prototype = {
	active: null
	,forward: null
	,onStart: null
	,onUpdate: null
	,onComplete: null
	,updateInternal: function() {
	}
	,update: function(elapsed) {
		var _gthis = this;
		var isFinished = false;
		if(this.active) {
			this._time += elapsed;
			this._t = this.get_percent();
			if(this._t > 0 && this._t < 1) {
				var this1 = this._ease;
				if(this1 != null) {
					_gthis._t = this1(_gthis._t);
				}
			}
			if(this._time >= this._target) {
				this._t = this.forward ? 1 : 0;
				isFinished = true;
			}
			this.updateInternal();
			var _g = 0;
			var _g1 = this.onUpdate.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		}
		if(isFinished) {
			this.finish();
		}
	}
	,start: function() {
		this._time = 0;
		if(this._target == 0) {
			this.active = false;
			var _g = 0;
			var _g1 = this.onComplete.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
		} else {
			this.active = true;
			var _g2 = 0;
			var _g11 = this.onStart.callbacks;
			while(_g2 < _g11.length) {
				var callback1 = _g11[_g2];
				++_g2;
				callback1();
			}
		}
	}
	,finish: function() {
		switch(this._type[1]) {
		case 0:
			this._time = this._target;
			this.active = false;
			break;
		case 2:
			this._time = this._target;
			this.cancel();
			break;
		case 1:case 3:
			if(this._type == haxepunk_TweenType.PingPong) {
				this.forward = !this.forward;
			}
			this.start();
			break;
		}
		var _g = 0;
		var _g1 = this.onComplete.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
		if(this._type == haxepunk_TweenType.OneShot) {
			var _this = this.onComplete;
			while(_this.callbacks.length > 0) _this.callbacks.pop();
		}
	}
	,cancel: function() {
		this.active = false;
		if(this._parent != null) {
			this._parent.removeTween(this);
		}
	}
	,get_percent: function() {
		if(this._target == 0) {
			return 0;
		} else {
			return (this.forward ? this._time : this._target - this._time) / this._target;
		}
	}
	,_type: null
	,_ease: null
	,_t: null
	,_time: null
	,_target: null
	,_parent: null
	,_prev: null
	,_next: null
	,__class__: haxepunk_Tween
	,__properties__: {get_percent:"get_percent"}
};
var haxepunk__$internal_FlashApp = function(engine) {
	openfl_display_Sprite.call(this);
	this.engine = engine;
	this.addEventListener("addedToStage",$bind(this,this.onStage));
};
$hxClasses["haxepunk._internal.FlashApp"] = haxepunk__$internal_FlashApp;
haxepunk__$internal_FlashApp.__name__ = ["haxepunk","_internal","FlashApp"];
haxepunk__$internal_FlashApp.__super__ = openfl_display_Sprite;
haxepunk__$internal_FlashApp.prototype = $extend(openfl_display_Sprite.prototype,{
	engine: null
	,init: function() {
		openfl_Lib.get_current().addChild(this);
	}
	,getTimeMillis: function() {
		return openfl_Lib.getTimer();
	}
	,getMemoryUse: function() {
		return openfl_system_System.get_totalMemory();
	}
	,multiTouchSupported: function() {
		return openfl_ui_Multitouch.get_supportsTouchEvents();
	}
	,onEnterFrame: function(e) {
		this.engine.onUpdate();
	}
	,onStage: function(e) {
		var _gthis = this;
		this.removeEventListener("addedToStage",$bind(this,this.onStage));
		this.setStageProperties();
		var view = new openfl_display_OpenGLView();
		view.set_render(function(rect) {
			_gthis.engine.onRender();
		});
		this.addChild(view);
		this.initKeyInput();
		this.initMouseInput();
		this.initGamepadInput();
		if(this.multiTouchSupported()) {
			this.initTouchInput();
		}
		var _this = this.engine;
		if(_this._scene != null && _this._scenes.length > 0 && _this._scenes[_this._scenes.length - 1] != _this._scene) {
			var o = _this._scene;
			Type.getClassName(o == null ? null : js_Boot.getClass(o));
			_this._scene.end();
			_this._scene.updateLists(false);
			if(_this._scene.autoClear && _this._scene.get_hasTween()) {
				_this._scene.clearTweens();
			}
			_this._scene = _this._scenes[_this._scenes.length - 1];
			var _g = 0;
			var _g1 = _this.onSceneSwitch.callbacks;
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			var o1 = _this._scene;
			Type.getClassName(o1 == null ? null : js_Boot.getClass(o1));
			_this._scene.assetCache.enable();
			_this._scene.updateLists();
			if(_this._scene.started) {
				_this._scene.resume();
			} else {
				_this._scene.begin();
			}
			_this._scene.started = true;
			_this._scene.updateLists(true);
		}
		this.engine.init();
		this.engine._rate = 1000 / haxepunk_HXP.assignedFrameRate;
		this.engine._last = this.getTimeMillis();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		openfl_Lib.get_current().stage.application.onExit.add(function(_) {
			var _g2 = 0;
			var _g11 = _gthis.engine.onClose.callbacks;
			while(_g2 < _g11.length) {
				var callback1 = _g11[_g2];
				++_g2;
				callback1();
			}
		});
	}
	,setStageProperties: function() {
		var _gthis = this;
		this.stage.set_frameRate(haxepunk_HXP.assignedFrameRate);
		this.stage.align = 6;
		this.stage.scaleMode = 2;
		this.stage.set_displayState(2);
		haxepunk_HXP.screen.color = this.stage.get_color();
		this._resize();
		this.stage.addEventListener("resize",function(e) {
			_gthis._resize();
		});
		this.stage.addEventListener("activate",function(e1) {
			haxepunk_HXP.focused = true;
		});
		this.stage.addEventListener("deactivate",function(e2) {
			haxepunk_HXP.focused = false;
		});
	}
	,initMouseInput: function() {
		haxepunk__$internal_MouseInput.init(this);
	}
	,initKeyInput: function() {
		haxepunk__$internal_KeyInput.init(this);
	}
	,initGamepadInput: function() {
		haxepunk__$internal_GamepadInput.init(this);
	}
	,initTouchInput: function() {
		haxepunk__$internal_TouchInput.init(this);
	}
	,_resize: function() {
		if(haxepunk_HXP.width == 0 || haxepunk_HXP.height == 0) {
			haxepunk_HXP.width = this.stage.stageWidth;
			haxepunk_HXP.height = this.stage.stageHeight;
			haxepunk_HXP.screen.scaleMode.setBaseSize();
		}
		haxepunk_HXP.resize(this.stage.stageWidth,this.stage.stageHeight);
		if(this.get_scrollRect() == null) {
			this.set_scrollRect(new openfl_geom_Rectangle());
		}
		this.get_scrollRect().width = haxepunk_HXP.screen.width;
		this.get_scrollRect().height = haxepunk_HXP.screen.height;
		var _g = 0;
		var _g1 = this.engine.onResize.callbacks;
		while(_g < _g1.length) {
			var callback = _g1[_g];
			++_g;
			callback();
		}
	}
	,__class__: haxepunk__$internal_FlashApp
});
var haxepunk__$internal_GamepadInput = function() { };
$hxClasses["haxepunk._internal.GamepadInput"] = haxepunk__$internal_GamepadInput;
haxepunk__$internal_GamepadInput.__name__ = ["haxepunk","_internal","GamepadInput"];
haxepunk__$internal_GamepadInput.init = function(app) {
	lime_ui_Gamepad.onConnect.add(haxepunk__$internal_GamepadInput.onJoyDeviceAdded);
	var device = lime_ui_Gamepad.devices.iterator();
	while(device.hasNext()) haxepunk__$internal_GamepadInput.onJoyDeviceAdded(device.next());
};
haxepunk__$internal_GamepadInput.onJoyDeviceAdded = function(limeGamepad) {
	var joy = new haxepunk_input_Gamepad(limeGamepad.id);
	haxepunk_input_Gamepad.gamepads.h[limeGamepad.id] = joy;
	++haxepunk_input_Gamepad.gamepadCount;
	limeGamepad.onButtonUp.add($bind(joy,joy.onButtonUp));
	limeGamepad.onButtonDown.add($bind(joy,joy.onButtonDown));
	var a1 = limeGamepad;
	var tmp = function(a,v) {
		haxepunk__$internal_GamepadInput.onJoyAxisMove(a1,a,v);
	};
	limeGamepad.onAxisMove.add(tmp);
	var a11 = limeGamepad;
	var tmp1 = function() {
		haxepunk__$internal_GamepadInput.onJoyDeviceRemoved(a11);
	};
	limeGamepad.onDisconnect.add(tmp1);
	haxepunk_input_Input.handlers.push(joy);
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onConnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
};
haxepunk__$internal_GamepadInput.onJoyDeviceRemoved = function(limeGamepad) {
	var joy = haxepunk_input_Gamepad.gamepad(limeGamepad.id);
	joy.connected = false;
	haxepunk_input_Gamepad.gamepads.remove(limeGamepad.id);
	--haxepunk_input_Gamepad.gamepadCount;
	if(haxepunk_input_Input.handlers.indexOf(joy) > -1) {
		HxOverrides.remove(haxepunk_input_Input.handlers,joy);
	}
	var _g = 0;
	var _g1 = haxepunk_input_Gamepad.onDisconnect.callbacks;
	while(_g < _g1.length) {
		var callback = _g1[_g];
		++_g;
		callback(joy);
	}
};
haxepunk__$internal_GamepadInput.onJoyAxisMove = function(limeGamepad,a,v) {
	haxepunk_input_Gamepad.gamepad(limeGamepad.id).onAxisMove(a,v);
};
var haxepunk__$internal_KeyInput = function() { };
$hxClasses["haxepunk._internal.KeyInput"] = haxepunk__$internal_KeyInput;
haxepunk__$internal_KeyInput.__name__ = ["haxepunk","_internal","KeyInput"];
haxepunk__$internal_KeyInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("keyDown",haxepunk__$internal_KeyInput.keyDownCallback,false,2);
	stage.addEventListener("keyUp",haxepunk__$internal_KeyInput.keyUpCallback,false,2);
};
haxepunk__$internal_KeyInput.keyDownCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input__$Key_Key_$Impl_$.onKeyDown(code,e.shiftKey);
};
haxepunk__$internal_KeyInput.keyUpCallback = function(e) {
	var code = e.keyCode;
	if(code == -1) {
		return;
	}
	haxepunk_input__$Key_Key_$Impl_$.onKeyUp(code);
};
var haxepunk__$internal_MouseInput = function() { };
$hxClasses["haxepunk._internal.MouseInput"] = haxepunk__$internal_MouseInput;
haxepunk__$internal_MouseInput.__name__ = ["haxepunk","_internal","MouseInput"];
haxepunk__$internal_MouseInput.init = function(app) {
	var stage = app.stage;
	stage.addEventListener("mouseDown",haxepunk_input_Mouse.onMouseDown,false,2);
	stage.addEventListener("mouseUp",haxepunk_input_Mouse.onMouseUp,false,2);
	stage.addEventListener("mouseWheel",function(e) {
		haxepunk_input_Mouse.onMouseWheel(e.delta);
	},false,2);
	stage.addEventListener("middleMouseDown",haxepunk_input_Mouse.onMiddleMouseDown,false,2);
	stage.addEventListener("middleMouseUp",haxepunk_input_Mouse.onMiddleMouseUp,false,2);
	stage.addEventListener("rightMouseDown",haxepunk_input_Mouse.onRightMouseDown,false,2);
	stage.addEventListener("rightMouseUp",haxepunk_input_Mouse.onRightMouseUp,false,2);
	stage.addEventListener("mouseMove",haxepunk__$internal_MouseInput.onMouseOver,false,2);
	stage.addEventListener("mouseLeave",haxepunk__$internal_MouseInput.onMouseOut,false,2);
};
haxepunk__$internal_MouseInput.onMouseOver = function(_) {
	haxepunk_input_Mouse._mouseOnScreen = true;
};
haxepunk__$internal_MouseInput.onMouseOut = function(_) {
	haxepunk_input_Mouse._mouseOnScreen = false;
};
var haxepunk__$internal_TouchInput = function() { };
$hxClasses["haxepunk._internal.TouchInput"] = haxepunk__$internal_TouchInput;
haxepunk__$internal_TouchInput.__name__ = ["haxepunk","_internal","TouchInput"];
haxepunk__$internal_TouchInput.init = function(app) {
	haxepunk_input_Input.multiTouchSupported = true;
	haxepunk_input_Input.handlers.push(haxepunk_input_Touch);
	var stage = app.stage;
	openfl_ui_Multitouch.inputMode = 2;
	stage.addEventListener("touchBegin",haxepunk__$internal_TouchInput.onTouchBegin);
	stage.addEventListener("touchMove",haxepunk__$internal_TouchInput.onTouchMove);
	stage.addEventListener("touchEnd",haxepunk__$internal_TouchInput.onTouchEnd);
};
haxepunk__$internal_TouchInput.onTouchBegin = function(e) {
	haxepunk_input_Touch._touches.h[e.touchPointID] = new haxepunk_input_Touch(e.stageX / haxepunk_HXP.screen.scaleX,e.stageY / haxepunk_HXP.screen.scaleY,e.touchPointID);
	haxepunk_input_Touch._touchOrder.push(e.touchPointID);
};
haxepunk__$internal_TouchInput.onTouchMove = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		var point = haxepunk_input_Touch._touches.h[e.touchPointID];
		point.x = e.stageX / haxepunk_HXP.screen.scaleX;
		point.y = e.stageY / haxepunk_HXP.screen.scaleY;
	}
};
haxepunk__$internal_TouchInput.onTouchEnd = function(e) {
	if(haxepunk_input_Touch._touches.h.hasOwnProperty(e.touchPointID)) {
		haxepunk_input_Touch._touches.h[e.touchPointID].released = true;
	}
};
var haxepunk_assets_AssetLoader = function() { };
$hxClasses["haxepunk.assets.AssetLoader"] = haxepunk_assets_AssetLoader;
haxepunk_assets_AssetLoader.__name__ = ["haxepunk","assets","AssetLoader"];
haxepunk_assets_AssetLoader.getText = function(id) {
	return openfl_utils_Assets.getText(id);
};
haxepunk_assets_AssetLoader.getSound = function(id) {
	return openfl_utils_Assets.getSound(id,false);
};
haxepunk_assets_AssetLoader.getTexture = function(id) {
	return openfl_utils_Assets.getBitmapData(id,false);
};
var haxepunk_debug_ButtonTray = function() { };
$hxClasses["haxepunk.debug.ButtonTray"] = haxepunk_debug_ButtonTray;
haxepunk_debug_ButtonTray.__name__ = ["haxepunk","debug","ButtonTray"];
haxepunk_debug_ButtonTray.__super__ = haxepunk_EntityList;
haxepunk_debug_ButtonTray.prototype = $extend(haxepunk_EntityList.prototype,{
	__class__: haxepunk_debug_ButtonTray
});
var haxepunk_debug_Console = function() {
	this._stepping = false;
	this.panning = false;
	this.dragging = false;
	this.clickActive = false;
	this.selBox = new haxepunk_math_Rectangle();
	this.click = new haxepunk_math_Vector2();
	this._t = 0;
	this._dc = 0;
	this._tri = 0;
	this._ent = 0;
	this._mem = 0;
	this._fps = 0;
	this.selected = [];
	this.debugDraw = false;
};
$hxClasses["haxepunk.debug.Console"] = haxepunk_debug_Console;
haxepunk_debug_Console.__name__ = ["haxepunk","debug","Console"];
haxepunk_debug_Console.__super__ = haxepunk_Scene;
haxepunk_debug_Console.prototype = $extend(haxepunk_Scene.prototype,{
	fps: null
	,memory: null
	,entities: null
	,triangles: null
	,drawCalls: null
	,debugDraw: null
	,logo: null
	,buttonTray: null
	,logPanel: null
	,layerList: null
	,fpsChart: null
	,memoryChart: null
	,entitiesChart: null
	,trianglesChart: null
	,drawCallsChart: null
	,selected: null
	,_fps: null
	,_mem: null
	,_ent: null
	,_tri: null
	,_dc: null
	,_t: null
	,click: null
	,selBox: null
	,clickActive: null
	,dragging: null
	,panning: null
	,update: function() {
		haxepunk_Scene.prototype.update.call(this);
		var tmp;
		tmp = haxepunk_input__$Key_Key_$Impl_$._press.indexOf(192) >= 0;
		if(tmp) {
			this.togglePause();
			this.debugDraw = haxepunk_HXP.engine.paused;
		}
		if(!haxepunk_HXP.engine.paused) {
			this.updateMetrics();
		}
		if(haxepunk_HXP.engine.paused) {
			var tmp1;
			tmp1 = haxepunk_input__$Key_Key_$Impl_$._key.get(221);
			if(tmp1) {
				this.step();
			}
			var tmp2;
			tmp2 = haxepunk_input__$Key_Key_$Impl_$._key.get(16);
			if(tmp2) {
				var mx = 0;
				var my = 0;
				var tmp3;
				tmp3 = haxepunk_input__$Key_Key_$Impl_$._key.get(37);
				if(tmp3) {
					mx = -1;
				} else {
					var tmp4;
					tmp4 = haxepunk_input__$Key_Key_$Impl_$._key.get(39);
					if(tmp4) {
						mx = 1;
					}
				}
				var tmp5;
				tmp5 = haxepunk_input__$Key_Key_$Impl_$._key.get(38);
				if(tmp5) {
					my = -1;
				} else {
					var tmp6;
					tmp6 = haxepunk_input__$Key_Key_$Impl_$._key.get(40);
					if(tmp6) {
						my = 1;
					}
				}
				if(mx != 0 || my != 0) {
					var camera = haxepunk_HXP.engine._scene.camera;
					camera.x = camera.x + haxepunk_HXP.elapsed * 256 * mx | 0;
					camera.y = camera.y + haxepunk_HXP.elapsed * 256 * my | 0;
				}
				if(!this.clickActive && haxepunk_input_Mouse.mouseDown) {
					this.panning = true;
				}
			}
			if(haxepunk_input_Mouse.mousePressed) {
				this.clickActive = true;
				this.dragging = false;
				var _this = this.click;
				var _this1 = haxepunk_HXP.engine._scene;
				var _this2 = _this1.camera;
				var _this3 = haxepunk_HXP.engine._scene;
				var _this4 = _this3.camera;
				var y = (haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this3.y) / (_this4.scale * _this4.scaleY * haxepunk_HXP.screen.scaleY) + _this3.camera.y | 0;
				_this.x = (haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this1.x) / (_this2.scale * _this2.scaleX * haxepunk_HXP.screen.scaleX) + _this1.camera.x | 0;
				_this.y = y;
			}
			if(this.clickActive) {
				var _this5 = haxepunk_HXP.engine._scene;
				var _this6 = _this5.camera;
				var mx1 = (haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this5.x) / (_this6.scale * _this6.scaleX * haxepunk_HXP.screen.scaleX) + _this5.camera.x | 0;
				var _this7 = haxepunk_HXP.engine._scene;
				var _this8 = _this7.camera;
				var my1 = (haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this7.y) / (_this8.scale * _this8.scaleY * haxepunk_HXP.screen.scaleY) + _this7.camera.y | 0;
				if(this.panning) {
					var dx = mx1 - this.click.x | 0;
					var dy = my1 - this.click.y | 0;
					if(dx != 0 || dy != 0) {
						if(this.selected.length > 0) {
							var _g = 0;
							var _g1 = this.selected;
							while(_g < _g1.length) {
								var e = _g1[_g];
								++_g;
								e.set_x(e.get_x() + dx);
								e.set_y(e.get_y() + dy);
							}
						} else {
							haxepunk_HXP.engine._scene.camera.x -= dx;
							haxepunk_HXP.engine._scene.camera.y -= dy;
						}
						var _this9 = this.click;
						var _this10 = haxepunk_HXP.engine._scene;
						var _this11 = _this10.camera;
						var _this12 = haxepunk_HXP.engine._scene;
						var _this13 = _this12.camera;
						var y1 = (haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this12.y) / (_this13.scale * _this13.scaleY * haxepunk_HXP.screen.scaleY) + _this12.camera.y | 0;
						_this9.x = (haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this10.x) / (_this11.scale * _this11.scaleX * haxepunk_HXP.screen.scaleX) + _this10.camera.x | 0;
						_this9.y = y1;
					}
				} else {
					if(Math.abs(mx1 - this.click.x) + Math.abs(my1 - this.click.y) > 8) {
						this.dragging = true;
					}
					if(this.dragging) {
						this.selBox.setTo(Math.min(mx1,this.click.x),Math.min(my1,this.click.y),Math.abs(mx1 - this.click.x),Math.abs(my1 - this.click.y));
					}
					if(haxepunk_input_Mouse.mouseReleased) {
						if(!this.dragging) {
							this.selBox.setTo(this.click.x,this.click.y,1,1);
						}
						this.setSelection();
						this.clickActive = this.dragging = false;
					}
				}
			}
			if(!haxepunk_input_Mouse.mouseDown) {
				this.clickActive = this.dragging = this.panning = false;
			}
		}
		var _this14 = this.fpsChart;
		var _this15 = this.memoryChart;
		var _this16 = this.entitiesChart;
		var _this17 = this.trianglesChart;
		var _this18 = this.drawCallsChart;
		var _this19 = this.logPanel;
		var _this20 = this.layerList;
		_this14.set_active(_this14.set_visible(_this14.set_collidable(_this15.set_active(_this15.set_visible(_this15.set_collidable(_this16.set_active(_this16.set_visible(_this16.set_collidable(_this17.set_active(_this17.set_visible(_this17.set_collidable(_this18.set_active(_this18.set_visible(_this18.set_collidable(_this19.set_active(_this19.set_visible(_this19.set_collidable(_this20.set_active(_this20.set_visible(_this20.set_collidable(this.debugDraw)))))))))))))))))))));
		var _this21 = this.camera;
		this.logo.x = (haxepunk_HXP.screen.width / (_this21.scale * _this21.scaleX * haxepunk_HXP.screen.scaleX) - this.logo.get_width()) / 2;
		var _this22 = this.camera;
		this.logo.y = (haxepunk_HXP.screen.height / (_this22.scale * _this22.scaleY * haxepunk_HXP.screen.scaleY) - this.logo.get_height()) / 2;
		this.logo._visible = haxepunk_HXP.engine.paused;
		var _this23 = this.camera;
		this.buttonTray.set_x((haxepunk_HXP.screen.width / (_this23.scale * _this23.scaleX * haxepunk_HXP.screen.scaleX) - this.buttonTray.get_width()) / 2);
		var _this24 = this.camera;
		this.logPanel.set_width(haxepunk_HXP.screen.width / (_this24.scale * _this24.scaleX * haxepunk_HXP.screen.scaleX) - this.logPanel.get_x() - 8 | 0);
		var _this25 = this.camera;
		this.logPanel.set_y(haxepunk_HXP.screen.height / (_this25.scale * _this25.scaleY * haxepunk_HXP.screen.scaleY) - this.logPanel.get_height() - 8);
		var _this26 = this.camera;
		this.layerList.set_x(haxepunk_HXP.screen.width / (_this26.scale * _this26.scaleX * haxepunk_HXP.screen.scaleX) - this.layerList.get_width() - 8);
		this.bgAlpha = haxepunk_HXP.engine.paused ? 0.75 : 0;
		this.updateLists();
	}
	,togglePause: function() {
		haxepunk_HXP.engine.paused = !haxepunk_HXP.engine.paused;
	}
	,_stepping: null
	,step: function() {
		if(this._stepping || !haxepunk_HXP.engine.paused) {
			return;
		}
		this._stepping = true;
		haxepunk_HXP.engine.update();
		this.updateMetrics();
		this._stepping = false;
	}
	,updateMetrics: function() {
		var s = haxepunk_HXP.elapsed / 0.333333333333333315;
		this._fps += 1 / haxepunk_HXP.elapsed * s;
		this._mem += haxepunk_HXP.app.getMemoryUse() / 1024 / 1024 * s;
		this._ent += haxepunk_HXP.engine._scene._update.length * s;
		this._tri += haxepunk_graphics_hardware_HardwareRenderer.triangleCount * s;
		this._dc += haxepunk_graphics_hardware_HardwareRenderer.drawCallCount * s;
		this._t += s;
		if(this._t >= 1) {
			var _this = this.fps;
			_this.data[(_this.pos + _this.len) % _this.data.length] = this._fps / this._t;
			if(_this.len < _this.data.length) {
				++_this.len;
			} else {
				++_this.pos;
			}
			var _this1 = this.memory;
			_this1.data[(_this1.pos + _this1.len) % _this1.data.length] = this._mem / this._t;
			if(_this1.len < _this1.data.length) {
				++_this1.len;
			} else {
				++_this1.pos;
			}
			var _this2 = this.entities;
			_this2.data[(_this2.pos + _this2.len) % _this2.data.length] = this._ent / this._t | 0;
			if(_this2.len < _this2.data.length) {
				++_this2.len;
			} else {
				++_this2.pos;
			}
			var _this3 = this.triangles;
			_this3.data[(_this3.pos + _this3.len) % _this3.data.length] = this._tri / this._t | 0;
			if(_this3.len < _this3.data.length) {
				++_this3.len;
			} else {
				++_this3.pos;
			}
			var _this4 = this.drawCalls;
			_this4.data[(_this4.pos + _this4.len) % _this4.data.length] = this._dc / this._t | 0;
			if(_this4.len < _this4.data.length) {
				++_this4.len;
			} else {
				++_this4.pos;
			}
			this._fps = this._mem = this._ent = this._tri = this._dc = this._t = 0;
		}
	}
	,setSelection: function() {
		var _rect = haxepunk_HXP.rect;
		this.selected.length = 0;
		var _g_head = haxepunk_HXP.engine._scene._update.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			_rect.setTo(val.get_x() - 4,val.get_y() - 4,8,8);
			if(this.selBox.intersects(_rect)) {
				this.selected.push(val);
			}
		}
	}
	,__class__: haxepunk_debug_Console
});
var haxepunk_debug__$LayerList_LayerToggle = function(mouseManager) {
	haxepunk_Entity.call(this);
	this.label = new haxepunk_graphics_text_BitmapText("Layer",null,null,null,null,{ size : 12});
	this.label.set_alpha(0.75);
	this.addGraphic(this.label);
	this.set_width(220);
	this.set_height(18);
	this.set_type(mouseManager._type);
	mouseManager.add(this,null,$bind(this,this.onClick),$bind(this,this.onEnter),$bind(this,this.onExit),null,true);
};
$hxClasses["haxepunk.debug._LayerList.LayerToggle"] = haxepunk_debug__$LayerList_LayerToggle;
haxepunk_debug__$LayerList_LayerToggle.__name__ = ["haxepunk","debug","_LayerList","LayerToggle"];
haxepunk_debug__$LayerList_LayerToggle.__super__ = haxepunk_Entity;
haxepunk_debug__$LayerList_LayerToggle.prototype = $extend(haxepunk_Entity.prototype,{
	layerNumber: null
	,label: null
	,update: function() {
		this.set_visible(this.set_collidable(this.layerNumber != null));
		if(this.layerNumber != null) {
			var entityCount = haxepunk_HXP.engine._scene._layers.h.hasOwnProperty(this.layerNumber) ? Lambda.count(haxepunk_HXP.engine._scene._layers.h[this.layerNumber]) : 0;
			var txt = "Layer " + this.layerNumber + " [" + entityCount + "]";
			if(this.label.text != txt) {
				this.label.set_text(txt);
			}
			var tmp = this.label;
			var tmp1;
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			if(!_this._layerDisplay.exists(layer) || _this._layerDisplay.get(layer)) {
				tmp1 = 65280;
			} else {
				tmp1 = 16711680;
			}
			tmp.set_color(tmp1);
		}
	}
	,onClick: function() {
		if(this.layerNumber != null) {
			var _this = haxepunk_HXP.engine._scene;
			var layer = this.layerNumber;
			var display = !_this._layerDisplay.exists(layer) || _this._layerDisplay.get(layer);
			haxepunk_HXP.engine._scene._layerDisplay.set(this.layerNumber,!display);
			haxepunk_HXP.engine._scene.updateLists();
		}
	}
	,onEnter: function() {
		this.label.set_alpha(1);
	}
	,onExit: function() {
		this.label.set_alpha(0.75);
	}
	,__class__: haxepunk_debug__$LayerList_LayerToggle
});
var haxepunk_debug_LayerList = function() {
	this.childY = 8;
	this.alpha = 0.5;
};
$hxClasses["haxepunk.debug.LayerList"] = haxepunk_debug_LayerList;
haxepunk_debug_LayerList.__name__ = ["haxepunk","debug","LayerList"];
haxepunk_debug_LayerList.__super__ = haxepunk_EntityList;
haxepunk_debug_LayerList.prototype = $extend(haxepunk_EntityList.prototype,{
	alpha: null
	,mouseManager: null
	,sceneLabel: null
	,childY: null
	,update: function() {
		haxepunk_EntityList.prototype.update.call(this);
		var layerCount = haxepunk_HXP.engine._scene._layerList.length;
		while(this.entities.length < layerCount) {
			var toggle = new haxepunk_debug__$LayerList_LayerToggle(this.mouseManager);
			this.add(toggle);
			toggle.set_localY(this.childY);
			this.childY += toggle.get_height() + 4;
		}
		var _g1 = 0;
		var _g = this.entities.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.entities[i].layerNumber = i >= haxepunk_HXP.engine._scene._layerList.length ? null : haxepunk_HXP.engine._scene._layerList[i];
			this.entities[i].update();
		}
		var o = haxepunk_HXP.engine._scene;
		var txt = Type.getClassName(o == null ? null : js_Boot.getClass(o));
		if(this.sceneLabel.text != txt) {
			this.sceneLabel.set_text(txt);
		}
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = 0;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = this.alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled((this.get_x() - 2) * fsx,this.get_y() * fsy,(this.get_width() + 4) * fsx,this.get_height() * fsy);
		haxepunk_EntityList.prototype.render.call(this,camera);
	}
	,__class__: haxepunk_debug_LayerList
});
var haxepunk_debug_LogPanel = function() {
	this.logMessages = new haxepunk_utils_CircularBuffer(10);
	this.alpha = 0.5;
	this.expanded = false;
};
$hxClasses["haxepunk.debug.LogPanel"] = haxepunk_debug_LogPanel;
haxepunk_debug_LogPanel.__name__ = ["haxepunk","debug","LogPanel"];
haxepunk_debug_LogPanel.__super__ = haxepunk_Entity;
haxepunk_debug_LogPanel.prototype = $extend(haxepunk_Entity.prototype,{
	label: null
	,expanded: null
	,alpha: null
	,logMessages: null
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var targetHeight = this.expanded ? 216 : 48;
		if(this.get_height() != targetHeight) {
			var change = 2048 * haxepunk_HXP.elapsed | 0;
			if(Math.abs(this.get_height() - targetHeight) < change) {
				this.set_height(targetHeight);
			} else {
				var _g = this;
				_g.set_height(_g.get_height() + change * (this.get_height() > targetHeight ? -1 : 1));
			}
		}
		var txt = "";
		var _this = this.logMessages;
		_this._iterator.i = this.logMessages.len - (1 + (this.get_height() - 48) / 168 * 9 | 0);
		var _g1 = _this._iterator;
		while(_g1.i < _g1.buffer.len) {
			var _this1 = _g1.buffer;
			var i = _g1.i++;
			var msg = i < 0 || i >= _this1.len ? null : _this1.data[(_this1.pos + i) % _this1.data.length];
			if(msg != null) {
				txt += msg + "\n";
			}
		}
		var _this2 = haxepunk_HXP.engine._scene;
		var _this3 = _this2.camera;
		var _this4 = haxepunk_HXP.engine._scene;
		var _this5 = _this4.camera;
		txt += StringTools.rpad("Mouse: " + ((haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this2.x) / (_this3.scale * _this3.scaleX * haxepunk_HXP.screen.scaleX) + _this2.camera.x | 0) + "," + ((haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this4.y) / (_this5.scale * _this5.scaleY * haxepunk_HXP.screen.scaleY) + _this4.camera.y | 0)," ",20) + "Camera: " + haxepunk_HXP.engine._scene.camera.x + "," + haxepunk_HXP.engine._scene.camera.y;
		if(this.label.text != txt) {
			this.label.set_text(txt);
		}
		var _this6 = this.label;
		var value = this.get_height();
		var _this7 = this.label;
		if(_this7._dirty) {
			_this7.parseText();
		}
		_this6.y = value - _this7.textHeight - 4;
	}
	,render: function(camera) {
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.color = 0;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.alpha = this.alpha;
		if(haxepunk_utils_Draw.instance == null) {
			haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
		}
		haxepunk_utils_Draw.instance.lineThickness = 4;
		haxepunk_utils_Draw.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,__class__: haxepunk_debug_LogPanel
});
var haxepunk_debug_Metric = function() {
	this.points = [];
	this.color = 16777215;
	this.minScale = 0;
};
$hxClasses["haxepunk.debug.Metric"] = haxepunk_debug_Metric;
haxepunk_debug_Metric.__name__ = ["haxepunk","debug","Metric"];
haxepunk_debug_Metric.__super__ = haxepunk_Entity;
haxepunk_debug_Metric.prototype = $extend(haxepunk_Entity.prototype,{
	metricName: null
	,data: null
	,minScale: null
	,color: null
	,label: null
	,update: function() {
		var last;
		var _this = this.data;
		if((_this.len < 1 ? null : _this.data[(_this.pos + (_this.len - 1)) % _this.data.length]) == null) {
			last = 0;
		} else {
			var _this1 = this.data;
			last = ((_this1.len < 1 ? null : _this1.data[(_this1.pos + (_this1.len - 1)) % _this1.data.length]) * Math.pow(10,2) | 0) / Math.pow(10,2);
		}
		this.label.set_text("" + this.metricName + ": " + last);
	}
	,render: function(camera) {
		var _gthis = this;
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		haxepunk_debug_Metric.drawContext.scene = this._scene;
		var _this = haxepunk_debug_Metric.drawContext;
		var this1 = this.color;
		var a = this1 >>> 24 & 255;
		var r = this1 >>> 16 & 255;
		var g = this1 >>> 8 & 255;
		var b = this1 & 255;
		a += ((0 >>> 24 & 255) - a) * 0.9 | 0;
		r += ((0 >>> 16 & 255) - r) * 0.9 | 0;
		g += ((0 >>> 8 & 255) - g) * 0.9 | 0;
		b += ((0 & 255) - b) * 0.9 | 0;
		_this.color = a << 24 | r << 16 | g << 8 | b;
		_this.alpha = 0.8;
		haxepunk_debug_Metric.drawContext.rectFilled(this.get_x() * fsx,this.get_y() * fsy,this.get_width() * fsx,this.get_height() * fsy);
		if(this.data.len > 1) {
			this.points.length = 0;
			var max = this.minScale;
			var _this1 = this.data;
			_this1._iterator.i = 0;
			var _g = _this1._iterator;
			while(_g.i < _g.buffer.len) {
				var _this2 = _g.buffer;
				var i = _g.i++;
				var value = i < 0 || i >= _this2.len ? null : _this2.data[(_this2.pos + i) % _this2.data.length];
				if(value > max) {
					max = value;
				}
			}
			var _g1 = 0;
			var _g2 = this.data.len;
			while(_g1 < _g2) {
				var i1 = _g1++;
				var v = i1 / this.data.data.length;
				this.points.push((_gthis.get_x() + _gthis.get_width() * haxepunk_math_MathUtil.clamp(v,0,1)) * fsx);
				var _this3 = this.data;
				var v1 = i1 < 0 || i1 >= _this3.len ? null : _this3.data[(_this3.pos + i1) % _this3.data.length];
				this.points.push((_gthis.get_y() + _gthis.get_height() * (1 - haxepunk_math_MathUtil.clamp(v1 / max,0,1))) * fsy);
			}
			var _this4 = haxepunk_debug_Metric.drawContext;
			_this4.color = this.color;
			_this4.alpha = 0.75;
			haxepunk_debug_Metric.drawContext.polyline(this.points,false);
		}
		haxepunk_Entity.prototype.render.call(this,camera);
	}
	,points: null
	,__class__: haxepunk_debug_Metric
});
var haxepunk_graphics_ColoredRect = function(width,height,color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	haxepunk_Graphic.call(this);
	this.width = width;
	this.height = height;
	this.set_color(color);
	this.set_alpha(alpha);
	if(haxepunk_graphics_shader_ColorShader.defaultShader == null) {
		haxepunk_graphics_shader_ColorShader.defaultShader = new haxepunk_graphics_shader_ColorShader();
	}
	this.shader = haxepunk_graphics_shader_ColorShader.defaultShader;
};
$hxClasses["haxepunk.graphics.ColoredRect"] = haxepunk_graphics_ColoredRect;
haxepunk_graphics_ColoredRect.__name__ = ["haxepunk","graphics","ColoredRect"];
haxepunk_graphics_ColoredRect.__super__ = haxepunk_Graphic;
haxepunk_graphics_ColoredRect.prototype = $extend(haxepunk_Graphic.prototype,{
	width: null
	,height: null
	,render: function(point,camera) {
		var command = haxepunk_graphics_atlas_AtlasData._batch;
		var command1 = this.shader;
		var command2 = this.blend;
		var x = point.x;
		var y = point.y;
		var command3;
		if(this.clipRect != null) {
			if(this._screenClipRect == null) {
				this._screenClipRect = new haxepunk_math_Rectangle();
			}
			this._screenClipRect.setTo((x + this.clipRect.x) * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),(y + this.clipRect.y) * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY),this.clipRect.width * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX),this.clipRect.height * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY));
			command3 = this._screenClipRect;
		} else {
			command3 = null;
		}
		var command4 = command.getDrawCommand(null,command1,false,command2,command3);
		var fsx = camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX;
		var fsy = camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY;
		var x1 = point.x;
		var x2 = camera.x;
		var x3 = this.x;
		var x4 = this.originX;
		var x11 = ((this.pixelSnapping || camera.pixelSnapping ? Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x4)) * fsx;
		var x21 = x11 + this.width * fsx;
		var y1 = point.y;
		var y2 = camera.y;
		var y3 = this.y;
		var y4 = this.originY;
		var y11 = ((this.pixelSnapping || camera.pixelSnapping ? Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y1) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) + (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) - (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y4)) * fsy;
		var y21 = y11 + this.height * fsy;
		var alpha = this.alpha;
		if(alpha > 0) {
			var onScreen;
			if(command4.shader.attributeNames.length <= 0) {
				var onScreen1;
				var onScreen2;
				var _this = command4.visibleArea;
				if((x11 > x21 ? x21 > x11 ? x11 : x21 : x11 > x11 ? x11 : x11) <= _this.x + _this.width) {
					onScreen2 = (x11 < x21 ? x21 < x11 ? x11 : x21 : x11 < x11 ? x11 : x11) >= command4.visibleArea.x;
				} else {
					onScreen2 = false;
				}
				if(onScreen2) {
					var _this1 = command4.visibleArea;
					onScreen1 = (y11 > y11 ? y11 > y21 ? y21 : y11 : y11 > y21 ? y21 : y11) <= _this1.y + _this1.height;
				} else {
					onScreen1 = false;
				}
				if(onScreen1) {
					onScreen = (y11 < y11 ? y11 < y21 ? y21 : y11 : y11 < y21 ? y21 : y11) >= command4.visibleArea.y;
				} else {
					onScreen = false;
				}
			} else {
				onScreen = true;
			}
			if(onScreen) {
				var data;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data._next = null;
				} else {
					data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data1 = data;
				data1.tx1 = x11;
				data1.ty1 = y11;
				data1.uvx1 = 0;
				data1.uvy1 = 0;
				data1.tx2 = x21;
				data1.ty2 = y11;
				data1.uvx2 = 0;
				data1.uvy2 = 0;
				data1.tx3 = x11;
				data1.ty3 = y21;
				data1.uvx3 = 0;
				data1.uvy3 = 0;
				data1.color = this.color;
				data1.alpha = alpha;
				if(command4.data == null) {
					command4.data = data1;
				} else {
					command4._lastData._next = data1;
				}
				command4._lastData = data1;
				++command4.triangleCount;
				var a = data1.tx1;
				var b = data1.tx2;
				var c = data1.tx3;
				var x12 = a > b ? b > c ? c : b : a > c ? c : a;
				var a1 = data1.tx1;
				var b1 = data1.tx2;
				var c1 = data1.tx3;
				var x22 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
				var a2 = data1.ty1;
				var b2 = data1.ty2;
				var c2 = data1.ty3;
				var y12 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
				var a3 = data1.ty1;
				var b3 = data1.ty2;
				var c3 = data1.ty3;
				var y22 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
				if(command4.bounds.width == 0) {
					command4.bounds.x = x12;
					command4.bounds.width = x22 - x12;
				} else {
					if(x12 < command4.bounds.x) {
						command4.bounds.width += command4.bounds.x - x12;
						command4.bounds.x = x12;
					}
					var _this2 = command4.bounds;
					if(x22 > _this2.x + _this2.width) {
						command4.bounds.width = x22 - command4.bounds.x;
					}
				}
				if(command4.bounds.height == 0) {
					command4.bounds.y = y12;
					command4.bounds.height = y22 - y12;
				} else {
					if(y12 < command4.bounds.y) {
						command4.bounds.height += command4.bounds.y - y12;
						command4.bounds.y = y12;
					}
					var _this3 = command4.bounds;
					if(y22 > _this3.y + _this3.height) {
						command4.bounds.height = y22 - command4.bounds.y;
					}
				}
			}
		}
		var alpha1 = this.alpha;
		if(alpha1 > 0) {
			var onScreen3;
			if(command4.shader.attributeNames.length <= 0) {
				var onScreen4;
				var onScreen5;
				var _this4 = command4.visibleArea;
				if((x11 > x21 ? x21 > x21 ? x21 : x21 : x11 > x21 ? x21 : x11) <= _this4.x + _this4.width) {
					onScreen5 = (x11 < x21 ? x21 < x21 ? x21 : x21 : x11 < x21 ? x21 : x11) >= command4.visibleArea.x;
				} else {
					onScreen5 = false;
				}
				if(onScreen5) {
					var _this5 = command4.visibleArea;
					onScreen4 = (y21 > y11 ? y11 > y21 ? y21 : y11 : y21 > y21 ? y21 : y21) <= _this5.y + _this5.height;
				} else {
					onScreen4 = false;
				}
				if(onScreen4) {
					onScreen3 = (y21 < y11 ? y11 < y21 ? y21 : y11 : y21 < y21 ? y21 : y21) >= command4.visibleArea.y;
				} else {
					onScreen3 = false;
				}
			} else {
				onScreen3 = true;
			}
			if(onScreen3) {
				var data2;
				if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
					data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
					haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
					data2._next = null;
				} else {
					data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
				}
				var data3 = data2;
				data3.tx1 = x11;
				data3.ty1 = y21;
				data3.uvx1 = 0;
				data3.uvy1 = 0;
				data3.tx2 = x21;
				data3.ty2 = y11;
				data3.uvx2 = 0;
				data3.uvy2 = 0;
				data3.tx3 = x21;
				data3.ty3 = y21;
				data3.uvx3 = 0;
				data3.uvy3 = 0;
				data3.color = this.color;
				data3.alpha = alpha1;
				if(command4.data == null) {
					command4.data = data3;
				} else {
					command4._lastData._next = data3;
				}
				command4._lastData = data3;
				++command4.triangleCount;
				var a4 = data3.tx1;
				var b4 = data3.tx2;
				var c4 = data3.tx3;
				var x13 = a4 > b4 ? b4 > c4 ? c4 : b4 : a4 > c4 ? c4 : a4;
				var a5 = data3.tx1;
				var b5 = data3.tx2;
				var c5 = data3.tx3;
				var x23 = a5 < b5 ? b5 < c5 ? c5 : b5 : a5 < c5 ? c5 : a5;
				var a6 = data3.ty1;
				var b6 = data3.ty2;
				var c6 = data3.ty3;
				var y13 = a6 > b6 ? b6 > c6 ? c6 : b6 : a6 > c6 ? c6 : a6;
				var a7 = data3.ty1;
				var b7 = data3.ty2;
				var c7 = data3.ty3;
				var y23 = a7 < b7 ? b7 < c7 ? c7 : b7 : a7 < c7 ? c7 : a7;
				if(command4.bounds.width == 0) {
					command4.bounds.x = x13;
					command4.bounds.width = x23 - x13;
				} else {
					if(x13 < command4.bounds.x) {
						command4.bounds.width += command4.bounds.x - x13;
						command4.bounds.x = x13;
					}
					var _this6 = command4.bounds;
					if(x23 > _this6.x + _this6.width) {
						command4.bounds.width = x23 - command4.bounds.x;
					}
				}
				if(command4.bounds.height == 0) {
					command4.bounds.y = y13;
					command4.bounds.height = y23 - y13;
				} else {
					if(y13 < command4.bounds.y) {
						command4.bounds.height += command4.bounds.y - y13;
						command4.bounds.y = y13;
					}
					var _this7 = command4.bounds;
					if(y23 > _this7.y + _this7.height) {
						command4.bounds.height = y23 - command4.bounds.y;
					}
				}
			}
		}
	}
	,__class__: haxepunk_graphics_ColoredRect
});
var haxepunk_graphics_NineSlice = function(source,leftWidth,rightWidth,topHeight,bottomHeight) {
	if(bottomHeight == null) {
		bottomHeight = 0;
	}
	if(topHeight == null) {
		topHeight = 0;
	}
	if(rightWidth == null) {
		rightWidth = 0;
	}
	if(leftWidth == null) {
		leftWidth = 0;
	}
	this._clipRect = new haxepunk_math_Rectangle();
	this._sliceRect = new haxepunk_math_Rectangle();
	this.drawCenter = true;
	this.scaleBorder = false;
	this.source = source;
	var w = source.get_width();
	var h = source.get_height();
	var segment = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,0,leftWidth,topHeight));
	segment.originX = segment.originY = 0;
	this.topL = segment;
	var segment1 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,0,w - leftWidth - rightWidth,topHeight));
	segment1.originX = segment1.originY = 0;
	this.topC = segment1;
	var segment2 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,0,rightWidth,topHeight));
	segment2.originX = segment2.originY = 0;
	this.topR = segment2;
	var segment3 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,topHeight,leftWidth,h - topHeight - bottomHeight));
	segment3.originX = segment3.originY = 0;
	this.medL = segment3;
	var segment4 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,topHeight,w - leftWidth - rightWidth,h - topHeight - bottomHeight));
	segment4.originX = segment4.originY = 0;
	this.medC = segment4;
	var segment5 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,topHeight,rightWidth,h - topHeight - bottomHeight));
	segment5.originX = segment5.originY = 0;
	this.medR = segment5;
	var segment6 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(0,h - bottomHeight,leftWidth,bottomHeight));
	segment6.originX = segment6.originY = 0;
	this.botL = segment6;
	var segment7 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(leftWidth,h - bottomHeight,w - leftWidth - rightWidth,bottomHeight));
	segment7.originX = segment7.originY = 0;
	this.botC = segment7;
	var segment8 = new haxepunk_graphics_Image(source,new haxepunk_math_Rectangle(w - rightWidth,h - bottomHeight,rightWidth,bottomHeight));
	segment8.originX = segment8.originY = 0;
	this.botR = segment8;
	this._sliceRect.setTo(leftWidth,topHeight,w - rightWidth,h - bottomHeight);
	haxepunk_Graphic.call(this);
	this.width = w;
	this.height = h;
	this.pixelSnapping = false;
};
$hxClasses["haxepunk.graphics.NineSlice"] = haxepunk_graphics_NineSlice;
haxepunk_graphics_NineSlice.__name__ = ["haxepunk","graphics","NineSlice"];
haxepunk_graphics_NineSlice.__super__ = haxepunk_Graphic;
haxepunk_graphics_NineSlice.prototype = $extend(haxepunk_Graphic.prototype,{
	width: null
	,height: null
	,scaleBorder: null
	,drawCenter: null
	,set_color: function(v) {
		return this.topL.set_color(this.topC.set_color(this.topR.set_color(this.medL.set_color(this.medC.set_color(this.medR.set_color(this.botL.set_color(this.botC.set_color(this.botR.set_color(this.color = v)))))))));
	}
	,set_alpha: function(v) {
		return this.topL.set_alpha(this.topC.set_alpha(this.topR.set_alpha(this.medL.set_alpha(this.medC.set_alpha(this.medR.set_alpha(this.botL.set_alpha(this.botC.set_alpha(this.botR.set_alpha(this.alpha = v)))))))));
	}
	,source: null
	,render: function(point,camera) {
		var _gthis = this;
		var leftWidth;
		var rightWidth;
		var topHeight;
		var bottomHeight;
		if(this.scaleBorder) {
			var x = this._sliceRect.x;
			if(this.pixelSnapping || camera.pixelSnapping) {
				leftWidth = Math.floor(x * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			} else {
				leftWidth = x;
			}
			var x1 = this.source.get_width() - this._sliceRect.width;
			if(this.pixelSnapping || camera.pixelSnapping) {
				rightWidth = Math.floor(x1 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			} else {
				rightWidth = x1;
			}
			var y = this._sliceRect.y;
			if(this.pixelSnapping || camera.pixelSnapping) {
				topHeight = Math.floor(y * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
			} else {
				topHeight = y;
			}
			var y1 = this.source.get_height() - this._sliceRect.height;
			if(this.pixelSnapping || camera.pixelSnapping) {
				bottomHeight = Math.floor(y1 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
			} else {
				bottomHeight = y1;
			}
		} else {
			var x2 = this._sliceRect.x;
			leftWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x2 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x2) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			var x3 = this.source.get_width() - this._sliceRect.width;
			rightWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x3 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x3) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX);
			var y2 = this._sliceRect.y;
			topHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y2 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y2) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
			var y3 = this.source.get_height() - this._sliceRect.height;
			bottomHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y3 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y3) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY);
		}
		var x4 = this.width;
		var centerWidth = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(x4 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x4) - leftWidth - rightWidth;
		var y4 = this.height;
		var centerHeight = (this.pixelSnapping || camera.pixelSnapping ? Math.floor(y4 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y4) - topHeight - bottomHeight;
		var centerX = leftWidth;
		var rightX = leftWidth + centerWidth;
		var centerY = topHeight;
		var bottomY = topHeight + centerHeight;
		var segment = this.topL;
		if(segment != null && segment._visible) {
			var x5 = _gthis.x;
			segment.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x5 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x5) - _gthis.originX;
			var y5 = _gthis.y;
			segment.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y5 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y5) - _gthis.originY;
			var x6 = leftWidth;
			segment.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x6 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x6) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : 0)) / segment.get_width();
			var y6 = topHeight;
			segment.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y6 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y6) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : 0)) / segment.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x,_gthis.clipRect.y,_gthis.clipRect.width,_gthis.clipRect.height);
				segment.clipRect = _gthis._clipRect;
			} else {
				segment.clipRect = null;
			}
			segment.shader = _gthis.shader;
			segment.smooth = _gthis.smooth;
			segment.render(point,camera);
		}
		var segment1 = this.topC;
		if(segment1 != null && segment1._visible) {
			var x7 = _gthis.x;
			segment1.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x7 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x7) + centerX - _gthis.originX;
			var y7 = _gthis.y;
			segment1.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y7 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y7) - _gthis.originY;
			var x8 = centerX + centerWidth;
			segment1.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x8 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x8) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment1.get_width();
			var y8 = topHeight;
			segment1.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y8 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y8) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : 0)) / segment1.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y,_gthis.clipRect.width,_gthis.clipRect.height);
				segment1.clipRect = _gthis._clipRect;
			} else {
				segment1.clipRect = null;
			}
			segment1.shader = _gthis.shader;
			segment1.smooth = _gthis.smooth;
			segment1.render(point,camera);
		}
		var segment2 = this.topR;
		if(segment2 != null && segment2._visible) {
			var x9 = _gthis.x;
			segment2.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x9 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x9) + rightX - _gthis.originX;
			var y9 = _gthis.y;
			segment2.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y9 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y9) - _gthis.originY;
			var x10 = rightX + rightWidth;
			segment2.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x10 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x10) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment2.get_width();
			var y10 = topHeight;
			segment2.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y10 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y10) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : 0)) / segment2.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y,_gthis.clipRect.width,_gthis.clipRect.height);
				segment2.clipRect = _gthis._clipRect;
			} else {
				segment2.clipRect = null;
			}
			segment2.shader = _gthis.shader;
			segment2.smooth = _gthis.smooth;
			segment2.render(point,camera);
		}
		var segment3 = this.medL;
		if(segment3 != null && segment3._visible) {
			var x11 = _gthis.x;
			segment3.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x11 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x11) - _gthis.originX;
			var y11 = _gthis.y;
			segment3.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y11 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y11) + centerY - _gthis.originY;
			var x12 = leftWidth;
			segment3.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x12 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x12) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : 0)) / segment3.get_width();
			var y12 = centerY + centerHeight;
			segment3.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y12 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y12) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment3.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment3.clipRect = _gthis._clipRect;
			} else {
				segment3.clipRect = null;
			}
			segment3.shader = _gthis.shader;
			segment3.smooth = _gthis.smooth;
			segment3.render(point,camera);
		}
		if(this.drawCenter) {
			var segment4 = this.medC;
			if(segment4 != null && segment4._visible) {
				var x13 = _gthis.x;
				segment4.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x13 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x13) + centerX - _gthis.originX;
				var y13 = _gthis.y;
				segment4.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y13 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y13) + centerY - _gthis.originY;
				var x14 = centerX + centerWidth;
				segment4.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x14 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x14) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment4.get_width();
				var y14 = centerY + centerHeight;
				segment4.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y14 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y14) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment4.get_height();
				if(_gthis.clipRect != null) {
					_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
					segment4.clipRect = _gthis._clipRect;
				} else {
					segment4.clipRect = null;
				}
				segment4.shader = _gthis.shader;
				segment4.smooth = _gthis.smooth;
				segment4.render(point,camera);
			}
		}
		var segment5 = this.medR;
		if(segment5 != null && segment5._visible) {
			var x15 = _gthis.x;
			segment5.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x15 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x15) + rightX - _gthis.originX;
			var y15 = _gthis.y;
			segment5.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y15 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y15) + centerY - _gthis.originY;
			var x16 = rightX + rightWidth;
			segment5.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x16 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x16) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment5.get_width();
			var y16 = centerY + centerHeight;
			segment5.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y16 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y16) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : centerY)) / segment5.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - centerY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment5.clipRect = _gthis._clipRect;
			} else {
				segment5.clipRect = null;
			}
			segment5.shader = _gthis.shader;
			segment5.smooth = _gthis.smooth;
			segment5.render(point,camera);
		}
		var segment6 = this.botL;
		if(segment6 != null && segment6._visible) {
			var x17 = _gthis.x;
			segment6.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x17 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x17) - _gthis.originX;
			var y17 = _gthis.y;
			segment6.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y17 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y17) + bottomY - _gthis.originY;
			var x18 = leftWidth;
			segment6.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x18 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x18) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(0 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : 0)) / segment6.get_width();
			var y18 = bottomY + bottomHeight;
			segment6.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y18 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y18) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment6.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment6.clipRect = _gthis._clipRect;
			} else {
				segment6.clipRect = null;
			}
			segment6.shader = _gthis.shader;
			segment6.smooth = _gthis.smooth;
			segment6.render(point,camera);
		}
		var segment7 = this.botC;
		if(segment7 != null && segment7._visible) {
			var x19 = _gthis.x;
			segment7.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x19 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x19) + centerX - _gthis.originX;
			var y19 = _gthis.y;
			segment7.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y19 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y19) + bottomY - _gthis.originY;
			var x20 = centerX + centerWidth;
			segment7.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x20 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x20) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(centerX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : centerX)) / segment7.get_width();
			var y20 = bottomY + bottomHeight;
			segment7.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y20 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y20) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment7.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - centerX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment7.clipRect = _gthis._clipRect;
			} else {
				segment7.clipRect = null;
			}
			segment7.shader = _gthis.shader;
			segment7.smooth = _gthis.smooth;
			segment7.render(point,camera);
		}
		var segment8 = this.botR;
		if(segment8 != null && segment8._visible) {
			var x21 = _gthis.x;
			segment8.x = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x21 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x21) + rightX - _gthis.originX;
			var y21 = _gthis.y;
			segment8.y = (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y21 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y21) + bottomY - _gthis.originY;
			var x22 = rightX + rightWidth;
			segment8.scaleX = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(x22 * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : x22) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(rightX * (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX)) / (camera.scale * camera.scaleX * haxepunk_HXP.screen.scaleX) : rightX)) / segment8.get_width();
			var y22 = bottomY + bottomHeight;
			segment8.scaleY = ((_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(y22 * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : y22) - (_gthis.pixelSnapping || camera.pixelSnapping ? Math.floor(bottomY * (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY)) / (camera.scale * camera.scaleY * haxepunk_HXP.screen.scaleY) : bottomY)) / segment8.get_height();
			if(_gthis.clipRect != null) {
				_gthis._clipRect.setTo(_gthis.clipRect.x - rightX,_gthis.clipRect.y - bottomY,_gthis.clipRect.width,_gthis.clipRect.height);
				segment8.clipRect = _gthis._clipRect;
			} else {
				segment8.clipRect = null;
			}
			segment8.shader = _gthis.shader;
			segment8.smooth = _gthis.smooth;
			segment8.render(point,camera);
		}
	}
	,topL: null
	,topC: null
	,topR: null
	,medL: null
	,medC: null
	,medR: null
	,botL: null
	,botC: null
	,botR: null
	,_sliceRect: null
	,_clipRect: null
	,__class__: haxepunk_graphics_NineSlice
});
var haxepunk_graphics_atlas_Atlas = function(source) {
	this._data = source;
};
$hxClasses["haxepunk.graphics.atlas.Atlas"] = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_Atlas.__name__ = ["haxepunk","graphics","atlas","Atlas"];
haxepunk_graphics_atlas_Atlas.loadImageAsRegion = function(source) {
	var data = source;
	return new haxepunk_graphics_atlas_AtlasRegion(data,new haxepunk_math_Rectangle(0,0,data.width,data.height).clone());
};
haxepunk_graphics_atlas_Atlas.prototype = {
	_data: null
	,__class__: haxepunk_graphics_atlas_Atlas
};
var haxepunk_graphics_atlas_AtlasData = function(texture,name) {
	this.texture = texture;
	this._name = name;
	this.width = texture == null ? 0 : texture.width;
	this.height = texture == null ? 0 : texture.height;
};
$hxClasses["haxepunk.graphics.atlas.AtlasData"] = haxepunk_graphics_atlas_AtlasData;
haxepunk_graphics_atlas_AtlasData.__name__ = ["haxepunk","graphics","atlas","AtlasData"];
haxepunk_graphics_atlas_AtlasData.prototype = {
	width: null
	,height: null
	,texture: null
	,prepareTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha > 0) {
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(this.texture,shader,smooth,blend,clipRect,tx1,ty1,tx2,ty2,tx3,ty3,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var onScreen2;
					var _this = command.visibleArea;
					if((tx1 > tx2 ? tx2 > tx3 ? tx3 : tx2 : tx1 > tx3 ? tx3 : tx1) <= _this.x + _this.width) {
						onScreen2 = (tx1 < tx2 ? tx2 < tx3 ? tx3 : tx2 : tx1 < tx3 ? tx3 : tx1) >= command.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this1 = command.visibleArea;
						onScreen1 = (ty1 > ty2 ? ty2 > ty3 ? ty3 : ty2 : ty1 > ty3 ? ty3 : ty1) <= _this1.y + _this1.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (ty1 < ty2 ? ty2 < ty3 ? ty3 : ty2 : ty1 < ty3 ? ty3 : ty1) >= command.visibleArea.y;
					} else {
						onScreen = false;
					}
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = tx1;
					data1.ty1 = ty1;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = tx2;
					data1.ty2 = ty2;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy2;
					data1.tx3 = tx3;
					data1.ty3 = ty3;
					data1.uvx3 = uvx3;
					data1.uvy3 = uvy3;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a = data1.tx1;
					var b = data1.tx2;
					var c = data1.tx3;
					var x1 = a > b ? b > c ? c : b : a > c ? c : a;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
					var a2 = data1.ty1;
					var b2 = data1.ty2;
					var c2 = data1.ty3;
					var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,_name: null
	,__class__: haxepunk_graphics_atlas_AtlasData
};
var haxepunk_graphics_atlas_IAtlasRegion = function() { };
$hxClasses["haxepunk.graphics.atlas.IAtlasRegion"] = haxepunk_graphics_atlas_IAtlasRegion;
haxepunk_graphics_atlas_IAtlasRegion.__name__ = ["haxepunk","graphics","atlas","IAtlasRegion"];
haxepunk_graphics_atlas_IAtlasRegion.prototype = {
	get_width: null
	,get_height: null
	,draw: null
	,drawMatrix: null
	,clip: null
	,__class__: haxepunk_graphics_atlas_IAtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_AtlasRegion = function(parent,rect) {
	this._parent = parent;
	this._rect = rect;
	this.rotated = false;
};
$hxClasses["haxepunk.graphics.atlas.AtlasRegion"] = haxepunk_graphics_atlas_AtlasRegion;
haxepunk_graphics_atlas_AtlasRegion.__name__ = ["haxepunk","graphics","atlas","AtlasRegion"];
haxepunk_graphics_atlas_AtlasRegion.__interfaces__ = [haxepunk_graphics_atlas_IAtlasRegion];
haxepunk_graphics_atlas_AtlasRegion.prototype = {
	rotated: null
	,clip: function(clipRect,center) {
		var clipRectCopy = clipRect.clone();
		if(clipRectCopy.x + clipRectCopy.width > this._rect.width) {
			clipRectCopy.width = this._rect.width - clipRectCopy.x;
		}
		if(clipRectCopy.y + clipRectCopy.height > this._rect.height) {
			clipRectCopy.height = this._rect.height - clipRectCopy.y;
		}
		if(clipRectCopy.width < 0) {
			clipRectCopy.width = 0;
		}
		if(clipRectCopy.height < 0) {
			clipRectCopy.height = 0;
		}
		clipRectCopy.x += this._rect.x;
		clipRectCopy.y += this._rect.y;
		return new haxepunk_graphics_atlas_AtlasRegion(this._parent,clipRectCopy.clone());
	}
	,draw: function(x,y,scaleX,scaleY,angle,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(angle == null) {
			angle = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(this.rotated) {
			angle += 90;
		}
		var rect = this._rect;
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var texture = this._parent.texture;
		var rx = rect.x;
		var ry = rect.y;
		var rw = rect.width;
		var rh = rect.height;
		if(alpha > 0) {
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			if(texture == null) {
				uvy1 = 0;
				uvx1 = uvy1;
				uvx2 = rw;
				uvy2 = rh;
			} else {
				uvx1 = rx / (texture == null ? 0 : texture.width);
				uvy1 = ry / (texture == null ? 0 : texture.height);
				uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
				uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
			}
			var xa = rw * a + x;
			var yb = rw * b + y;
			var xc = rh * c + x;
			var yd = rh * d + y;
			var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,x,y,xa,yb,xc,yd,flexibleLayer);
			if(alpha > 0) {
				var onScreen;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen1;
					var onScreen2;
					var _this = command.visibleArea;
					if((x > xa ? xa > xc ? xc : xa : x > xc ? xc : x) <= _this.x + _this.width) {
						onScreen2 = (x < xa ? xa < xc ? xc : xa : x < xc ? xc : x) >= command.visibleArea.x;
					} else {
						onScreen2 = false;
					}
					if(onScreen2) {
						var _this1 = command.visibleArea;
						onScreen1 = (y > yb ? yb > yd ? yd : yb : y > yd ? yd : y) <= _this1.y + _this1.height;
					} else {
						onScreen1 = false;
					}
					if(onScreen1) {
						onScreen = (y < yb ? yb < yd ? yd : yb : y < yd ? yd : y) >= command.visibleArea.y;
					} else {
						onScreen = false;
					}
				} else {
					onScreen = true;
				}
				if(onScreen) {
					var data;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data._next = null;
					} else {
						data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data1 = data;
					data1.tx1 = x;
					data1.ty1 = y;
					data1.uvx1 = uvx1;
					data1.uvy1 = uvy1;
					data1.tx2 = xa;
					data1.ty2 = yb;
					data1.uvx2 = uvx2;
					data1.uvy2 = uvy1;
					data1.tx3 = xc;
					data1.ty3 = yd;
					data1.uvx3 = uvx1;
					data1.uvy3 = uvy2;
					data1.color = color;
					data1.alpha = alpha;
					if(command.data == null) {
						command.data = data1;
					} else {
						command._lastData._next = data1;
					}
					command._lastData = data1;
					++command.triangleCount;
					var a1 = data1.tx1;
					var b1 = data1.tx2;
					var c1 = data1.tx3;
					var x1 = a1 > b1 ? b1 > c1 ? c1 : b1 : a1 > c1 ? c1 : a1;
					var a2 = data1.tx1;
					var b2 = data1.tx2;
					var c2 = data1.tx3;
					var x2 = a2 < b2 ? b2 < c2 ? c2 : b2 : a2 < c2 ? c2 : a2;
					var a3 = data1.ty1;
					var b3 = data1.ty2;
					var c3 = data1.ty3;
					var y1 = a3 > b3 ? b3 > c3 ? c3 : b3 : a3 > c3 ? c3 : a3;
					var a4 = data1.ty1;
					var b4 = data1.ty2;
					var c4 = data1.ty3;
					var y2 = a4 < b4 ? b4 < c4 ? c4 : b4 : a4 < c4 ? c4 : a4;
					if(command.bounds.width == 0) {
						command.bounds.x = x1;
						command.bounds.width = x2 - x1;
					} else {
						if(x1 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x1;
							command.bounds.x = x1;
						}
						var _this2 = command.bounds;
						if(x2 > _this2.x + _this2.width) {
							command.bounds.width = x2 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y1;
						command.bounds.height = y2 - y1;
					} else {
						if(y1 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y1;
							command.bounds.y = y1;
						}
						var _this3 = command.bounds;
						if(y2 > _this3.y + _this3.height) {
							command.bounds.height = y2 - command.bounds.y;
						}
					}
				}
			}
			var tx3 = xa + rh * c;
			var ty3 = yb + rh * d;
			if(alpha > 0) {
				var onScreen3;
				if(command.shader.attributeNames.length <= 0) {
					var onScreen4;
					var onScreen5;
					var _this4 = command.visibleArea;
					if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
						onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
					} else {
						onScreen5 = false;
					}
					if(onScreen5) {
						var _this5 = command.visibleArea;
						onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
					} else {
						onScreen4 = false;
					}
					if(onScreen4) {
						onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
					} else {
						onScreen3 = false;
					}
				} else {
					onScreen3 = true;
				}
				if(onScreen3) {
					var data2;
					if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
						data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
						haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
						data2._next = null;
					} else {
						data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
					}
					var data3 = data2;
					data3.tx1 = xc;
					data3.ty1 = yd;
					data3.uvx1 = uvx1;
					data3.uvy1 = uvy2;
					data3.tx2 = xa;
					data3.ty2 = yb;
					data3.uvx2 = uvx2;
					data3.uvy2 = uvy1;
					data3.tx3 = tx3;
					data3.ty3 = ty3;
					data3.uvx3 = uvx2;
					data3.uvy3 = uvy2;
					data3.color = color;
					data3.alpha = alpha;
					if(command.data == null) {
						command.data = data3;
					} else {
						command._lastData._next = data3;
					}
					command._lastData = data3;
					++command.triangleCount;
					var a5 = data3.tx1;
					var b5 = data3.tx2;
					var c5 = data3.tx3;
					var x11 = a5 > b5 ? b5 > c5 ? c5 : b5 : a5 > c5 ? c5 : a5;
					var a6 = data3.tx1;
					var b6 = data3.tx2;
					var c6 = data3.tx3;
					var x21 = a6 < b6 ? b6 < c6 ? c6 : b6 : a6 < c6 ? c6 : a6;
					var a7 = data3.ty1;
					var b7 = data3.ty2;
					var c7 = data3.ty3;
					var y11 = a7 > b7 ? b7 > c7 ? c7 : b7 : a7 > c7 ? c7 : a7;
					var a8 = data3.ty1;
					var b8 = data3.ty2;
					var c8 = data3.ty3;
					var y21 = a8 < b8 ? b8 < c8 ? c8 : b8 : a8 < c8 ? c8 : a8;
					if(command.bounds.width == 0) {
						command.bounds.x = x11;
						command.bounds.width = x21 - x11;
					} else {
						if(x11 < command.bounds.x) {
							command.bounds.width += command.bounds.x - x11;
							command.bounds.x = x11;
						}
						var _this6 = command.bounds;
						if(x21 > _this6.x + _this6.width) {
							command.bounds.width = x21 - command.bounds.x;
						}
					}
					if(command.bounds.height == 0) {
						command.bounds.y = y11;
						command.bounds.height = y21 - y11;
					} else {
						if(y11 < command.bounds.y) {
							command.bounds.height += command.bounds.y - y11;
							command.bounds.y = y11;
						}
						var _this7 = command.bounds;
						if(y21 > _this7.y + _this7.height) {
							command.bounds.height = y21 - command.bounds.y;
						}
					}
				}
			}
		}
	}
	,drawMatrix: function(tx,ty,a,b,c,d,color,alpha,shader,smooth,blend,clipRect,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 16777215;
		}
		if(this.rotated) {
			var rect = this._rect;
			var tx1 = -ty;
			var c1 = -d;
			var texture = this._parent.texture;
			var rx = rect.x;
			var ry = rect.y;
			var rw = rect.width;
			var rh = rect.height;
			if(alpha > 0) {
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				if(texture == null) {
					uvy1 = 0;
					uvx1 = uvy1;
					uvx2 = rw;
					uvy2 = rh;
				} else {
					uvx1 = rx / (texture == null ? 0 : texture.width);
					uvy1 = ry / (texture == null ? 0 : texture.height);
					uvx2 = (rx + rw) / (texture == null ? 0 : texture.width);
					uvy2 = (ry + rh) / (texture == null ? 0 : texture.height);
				}
				var xa = rw * -b + tx1;
				var yb = rw * a + tx;
				var xc = rh * c1 + tx1;
				var yd = rh * c + tx;
				var command = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture,shader,smooth,blend,clipRect,tx1,tx,xa,yb,xc,yd,flexibleLayer);
				if(alpha > 0) {
					var onScreen;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen1;
						var onScreen2;
						var _this = command.visibleArea;
						if((tx1 > xa ? xa > xc ? xc : xa : tx1 > xc ? xc : tx1) <= _this.x + _this.width) {
							onScreen2 = (tx1 < xa ? xa < xc ? xc : xa : tx1 < xc ? xc : tx1) >= command.visibleArea.x;
						} else {
							onScreen2 = false;
						}
						if(onScreen2) {
							var _this1 = command.visibleArea;
							onScreen1 = (tx > yb ? yb > yd ? yd : yb : tx > yd ? yd : tx) <= _this1.y + _this1.height;
						} else {
							onScreen1 = false;
						}
						if(onScreen1) {
							onScreen = (tx < yb ? yb < yd ? yd : yb : tx < yd ? yd : tx) >= command.visibleArea.y;
						} else {
							onScreen = false;
						}
					} else {
						onScreen = true;
					}
					if(onScreen) {
						var data;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data._next = null;
						} else {
							data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data1 = data;
						data1.tx1 = tx1;
						data1.ty1 = tx;
						data1.uvx1 = uvx1;
						data1.uvy1 = uvy1;
						data1.tx2 = xa;
						data1.ty2 = yb;
						data1.uvx2 = uvx2;
						data1.uvy2 = uvy1;
						data1.tx3 = xc;
						data1.ty3 = yd;
						data1.uvx3 = uvx1;
						data1.uvy3 = uvy2;
						data1.color = color;
						data1.alpha = alpha;
						if(command.data == null) {
							command.data = data1;
						} else {
							command._lastData._next = data1;
						}
						command._lastData = data1;
						++command.triangleCount;
						var a1 = data1.tx1;
						var b1 = data1.tx2;
						var c2 = data1.tx3;
						var x1 = a1 > b1 ? b1 > c2 ? c2 : b1 : a1 > c2 ? c2 : a1;
						var a2 = data1.tx1;
						var b2 = data1.tx2;
						var c3 = data1.tx3;
						var x2 = a2 < b2 ? b2 < c3 ? c3 : b2 : a2 < c3 ? c3 : a2;
						var a3 = data1.ty1;
						var b3 = data1.ty2;
						var c4 = data1.ty3;
						var y1 = a3 > b3 ? b3 > c4 ? c4 : b3 : a3 > c4 ? c4 : a3;
						var a4 = data1.ty1;
						var b4 = data1.ty2;
						var c5 = data1.ty3;
						var y2 = a4 < b4 ? b4 < c5 ? c5 : b4 : a4 < c5 ? c5 : a4;
						if(command.bounds.width == 0) {
							command.bounds.x = x1;
							command.bounds.width = x2 - x1;
						} else {
							if(x1 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x1;
								command.bounds.x = x1;
							}
							var _this2 = command.bounds;
							if(x2 > _this2.x + _this2.width) {
								command.bounds.width = x2 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y1;
							command.bounds.height = y2 - y1;
						} else {
							if(y1 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y1;
								command.bounds.y = y1;
							}
							var _this3 = command.bounds;
							if(y2 > _this3.y + _this3.height) {
								command.bounds.height = y2 - command.bounds.y;
							}
						}
					}
				}
				var tx3 = xa + rh * c1;
				var ty3 = yb + rh * c;
				if(alpha > 0) {
					var onScreen3;
					if(command.shader.attributeNames.length <= 0) {
						var onScreen4;
						var onScreen5;
						var _this4 = command.visibleArea;
						if((xc > xa ? xa > tx3 ? tx3 : xa : xc > tx3 ? tx3 : xc) <= _this4.x + _this4.width) {
							onScreen5 = (xc < xa ? xa < tx3 ? tx3 : xa : xc < tx3 ? tx3 : xc) >= command.visibleArea.x;
						} else {
							onScreen5 = false;
						}
						if(onScreen5) {
							var _this5 = command.visibleArea;
							onScreen4 = (yd > yb ? yb > ty3 ? ty3 : yb : yd > ty3 ? ty3 : yd) <= _this5.y + _this5.height;
						} else {
							onScreen4 = false;
						}
						if(onScreen4) {
							onScreen3 = (yd < yb ? yb < ty3 ? ty3 : yb : yd < ty3 ? ty3 : yd) >= command.visibleArea.y;
						} else {
							onScreen3 = false;
						}
					} else {
						onScreen3 = true;
					}
					if(onScreen3) {
						var data2;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data2 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data2._next = null;
						} else {
							data2 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data3 = data2;
						data3.tx1 = xc;
						data3.ty1 = yd;
						data3.uvx1 = uvx1;
						data3.uvy1 = uvy2;
						data3.tx2 = xa;
						data3.ty2 = yb;
						data3.uvx2 = uvx2;
						data3.uvy2 = uvy1;
						data3.tx3 = tx3;
						data3.ty3 = ty3;
						data3.uvx3 = uvx2;
						data3.uvy3 = uvy2;
						data3.color = color;
						data3.alpha = alpha;
						if(command.data == null) {
							command.data = data3;
						} else {
							command._lastData._next = data3;
						}
						command._lastData = data3;
						++command.triangleCount;
						var a5 = data3.tx1;
						var b5 = data3.tx2;
						var c6 = data3.tx3;
						var x11 = a5 > b5 ? b5 > c6 ? c6 : b5 : a5 > c6 ? c6 : a5;
						var a6 = data3.tx1;
						var b6 = data3.tx2;
						var c7 = data3.tx3;
						var x21 = a6 < b6 ? b6 < c7 ? c7 : b6 : a6 < c7 ? c7 : a6;
						var a7 = data3.ty1;
						var b7 = data3.ty2;
						var c8 = data3.ty3;
						var y11 = a7 > b7 ? b7 > c8 ? c8 : b7 : a7 > c8 ? c8 : a7;
						var a8 = data3.ty1;
						var b8 = data3.ty2;
						var c9 = data3.ty3;
						var y21 = a8 < b8 ? b8 < c9 ? c9 : b8 : a8 < c9 ? c9 : a8;
						if(command.bounds.width == 0) {
							command.bounds.x = x11;
							command.bounds.width = x21 - x11;
						} else {
							if(x11 < command.bounds.x) {
								command.bounds.width += command.bounds.x - x11;
								command.bounds.x = x11;
							}
							var _this6 = command.bounds;
							if(x21 > _this6.x + _this6.width) {
								command.bounds.width = x21 - command.bounds.x;
							}
						}
						if(command.bounds.height == 0) {
							command.bounds.y = y11;
							command.bounds.height = y21 - y11;
						} else {
							if(y11 < command.bounds.y) {
								command.bounds.height += command.bounds.y - y11;
								command.bounds.y = y11;
							}
							var _this7 = command.bounds;
							if(y21 > _this7.y + _this7.height) {
								command.bounds.height = y21 - command.bounds.y;
							}
						}
					}
				}
			}
		} else {
			var rect1 = this._rect;
			var texture1 = this._parent.texture;
			var rx1 = rect1.x;
			var ry1 = rect1.y;
			var rw1 = rect1.width;
			var rh1 = rect1.height;
			if(alpha > 0) {
				var uvx11;
				var uvy11;
				var uvx21;
				var uvy21;
				if(texture1 == null) {
					uvy11 = 0;
					uvx11 = uvy11;
					uvx21 = rw1;
					uvy21 = rh1;
				} else {
					uvx11 = rx1 / (texture1 == null ? 0 : texture1.width);
					uvy11 = ry1 / (texture1 == null ? 0 : texture1.height);
					uvx21 = (rx1 + rw1) / (texture1 == null ? 0 : texture1.width);
					uvy21 = (ry1 + rh1) / (texture1 == null ? 0 : texture1.height);
				}
				var xa1 = rw1 * a + tx;
				var yb1 = rw1 * b + ty;
				var xc1 = rh1 * c + tx;
				var yd1 = rh1 * d + ty;
				var command1 = haxepunk_graphics_atlas_AtlasData._batch.getDrawCommand(texture1,shader,smooth,blend,clipRect,tx,ty,xa1,yb1,xc1,yd1,false);
				if(alpha > 0) {
					var onScreen6;
					if(command1.shader.attributeNames.length <= 0) {
						var onScreen7;
						var onScreen8;
						var _this8 = command1.visibleArea;
						if((tx > xa1 ? xa1 > xc1 ? xc1 : xa1 : tx > xc1 ? xc1 : tx) <= _this8.x + _this8.width) {
							onScreen8 = (tx < xa1 ? xa1 < xc1 ? xc1 : xa1 : tx < xc1 ? xc1 : tx) >= command1.visibleArea.x;
						} else {
							onScreen8 = false;
						}
						if(onScreen8) {
							var _this9 = command1.visibleArea;
							onScreen7 = (ty > yb1 ? yb1 > yd1 ? yd1 : yb1 : ty > yd1 ? yd1 : ty) <= _this9.y + _this9.height;
						} else {
							onScreen7 = false;
						}
						if(onScreen7) {
							onScreen6 = (ty < yb1 ? yb1 < yd1 ? yd1 : yb1 : ty < yd1 ? yd1 : ty) >= command1.visibleArea.y;
						} else {
							onScreen6 = false;
						}
					} else {
						onScreen6 = true;
					}
					if(onScreen6) {
						var data4;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data4 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data4._next = null;
						} else {
							data4 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data5 = data4;
						data5.tx1 = tx;
						data5.ty1 = ty;
						data5.uvx1 = uvx11;
						data5.uvy1 = uvy11;
						data5.tx2 = xa1;
						data5.ty2 = yb1;
						data5.uvx2 = uvx21;
						data5.uvy2 = uvy11;
						data5.tx3 = xc1;
						data5.ty3 = yd1;
						data5.uvx3 = uvx11;
						data5.uvy3 = uvy21;
						data5.color = color;
						data5.alpha = alpha;
						if(command1.data == null) {
							command1.data = data5;
						} else {
							command1._lastData._next = data5;
						}
						command1._lastData = data5;
						++command1.triangleCount;
						var a9 = data5.tx1;
						var b9 = data5.tx2;
						var c10 = data5.tx3;
						var x12 = a9 > b9 ? b9 > c10 ? c10 : b9 : a9 > c10 ? c10 : a9;
						var a10 = data5.tx1;
						var b10 = data5.tx2;
						var c11 = data5.tx3;
						var x22 = a10 < b10 ? b10 < c11 ? c11 : b10 : a10 < c11 ? c11 : a10;
						var a11 = data5.ty1;
						var b11 = data5.ty2;
						var c12 = data5.ty3;
						var y12 = a11 > b11 ? b11 > c12 ? c12 : b11 : a11 > c12 ? c12 : a11;
						var a12 = data5.ty1;
						var b12 = data5.ty2;
						var c13 = data5.ty3;
						var y22 = a12 < b12 ? b12 < c13 ? c13 : b12 : a12 < c13 ? c13 : a12;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x12;
							command1.bounds.width = x22 - x12;
						} else {
							if(x12 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x12;
								command1.bounds.x = x12;
							}
							var _this10 = command1.bounds;
							if(x22 > _this10.x + _this10.width) {
								command1.bounds.width = x22 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y12;
							command1.bounds.height = y22 - y12;
						} else {
							if(y12 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y12;
								command1.bounds.y = y12;
							}
							var _this11 = command1.bounds;
							if(y22 > _this11.y + _this11.height) {
								command1.bounds.height = y22 - command1.bounds.y;
							}
						}
					}
				}
				var tx31 = xa1 + rh1 * c;
				var ty31 = yb1 + rh1 * d;
				if(alpha > 0) {
					var onScreen9;
					if(command1.shader.attributeNames.length <= 0) {
						var onScreen10;
						var onScreen11;
						var _this12 = command1.visibleArea;
						if((xc1 > xa1 ? xa1 > tx31 ? tx31 : xa1 : xc1 > tx31 ? tx31 : xc1) <= _this12.x + _this12.width) {
							onScreen11 = (xc1 < xa1 ? xa1 < tx31 ? tx31 : xa1 : xc1 < tx31 ? tx31 : xc1) >= command1.visibleArea.x;
						} else {
							onScreen11 = false;
						}
						if(onScreen11) {
							var _this13 = command1.visibleArea;
							onScreen10 = (yd1 > yb1 ? yb1 > ty31 ? ty31 : yb1 : yd1 > ty31 ? ty31 : yd1) <= _this13.y + _this13.height;
						} else {
							onScreen10 = false;
						}
						if(onScreen10) {
							onScreen9 = (yd1 < yb1 ? yb1 < ty31 ? ty31 : yb1 : yd1 < ty31 ? ty31 : yd1) >= command1.visibleArea.y;
						} else {
							onScreen9 = false;
						}
					} else {
						onScreen9 = true;
					}
					if(onScreen9) {
						var data6;
						if(haxepunk_graphics_hardware_DrawCommand._dataPool != null) {
							data6 = haxepunk_graphics_hardware_DrawCommand._dataPool;
							haxepunk_graphics_hardware_DrawCommand._dataPool = haxepunk_graphics_hardware_DrawCommand._dataPool._next;
							data6._next = null;
						} else {
							data6 = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
						}
						var data7 = data6;
						data7.tx1 = xc1;
						data7.ty1 = yd1;
						data7.uvx1 = uvx11;
						data7.uvy1 = uvy21;
						data7.tx2 = xa1;
						data7.ty2 = yb1;
						data7.uvx2 = uvx21;
						data7.uvy2 = uvy11;
						data7.tx3 = tx31;
						data7.ty3 = ty31;
						data7.uvx3 = uvx21;
						data7.uvy3 = uvy21;
						data7.color = color;
						data7.alpha = alpha;
						if(command1.data == null) {
							command1.data = data7;
						} else {
							command1._lastData._next = data7;
						}
						command1._lastData = data7;
						++command1.triangleCount;
						var a13 = data7.tx1;
						var b13 = data7.tx2;
						var c14 = data7.tx3;
						var x13 = a13 > b13 ? b13 > c14 ? c14 : b13 : a13 > c14 ? c14 : a13;
						var a14 = data7.tx1;
						var b14 = data7.tx2;
						var c15 = data7.tx3;
						var x23 = a14 < b14 ? b14 < c15 ? c15 : b14 : a14 < c15 ? c15 : a14;
						var a15 = data7.ty1;
						var b15 = data7.ty2;
						var c16 = data7.ty3;
						var y13 = a15 > b15 ? b15 > c16 ? c16 : b15 : a15 > c16 ? c16 : a15;
						var a16 = data7.ty1;
						var b16 = data7.ty2;
						var c17 = data7.ty3;
						var y23 = a16 < b16 ? b16 < c17 ? c17 : b16 : a16 < c17 ? c17 : a16;
						if(command1.bounds.width == 0) {
							command1.bounds.x = x13;
							command1.bounds.width = x23 - x13;
						} else {
							if(x13 < command1.bounds.x) {
								command1.bounds.width += command1.bounds.x - x13;
								command1.bounds.x = x13;
							}
							var _this14 = command1.bounds;
							if(x23 > _this14.x + _this14.width) {
								command1.bounds.width = x23 - command1.bounds.x;
							}
						}
						if(command1.bounds.height == 0) {
							command1.bounds.y = y13;
							command1.bounds.height = y23 - y13;
						} else {
							if(y13 < command1.bounds.y) {
								command1.bounds.height += command1.bounds.y - y13;
								command1.bounds.y = y13;
							}
							var _this15 = command1.bounds;
							if(y23 > _this15.y + _this15.height) {
								command1.bounds.height = y23 - command1.bounds.y;
							}
						}
					}
				}
			}
		}
	}
	,get_width: function() {
		return this._rect.width | 0;
	}
	,get_height: function() {
		return this._rect.height | 0;
	}
	,_rect: null
	,_parent: null
	,__class__: haxepunk_graphics_atlas_AtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var haxepunk_graphics_atlas_TextureAtlas = function(source) {
	this._regions = new haxe_ds_StringMap();
	haxepunk_graphics_atlas_Atlas.call(this,source);
	if(source == null) {
		this._pages = new haxe_ds_StringMap();
	}
};
$hxClasses["haxepunk.graphics.atlas.TextureAtlas"] = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_atlas_TextureAtlas.__name__ = ["haxepunk","graphics","atlas","TextureAtlas"];
haxepunk_graphics_atlas_TextureAtlas.__super__ = haxepunk_graphics_atlas_Atlas;
haxepunk_graphics_atlas_TextureAtlas.prototype = $extend(haxepunk_graphics_atlas_Atlas.prototype,{
	defineRegion: function(name,rect,center,page) {
		var data;
		if(this._pages == null) {
			data = this._data;
		} else {
			var _this = this._pages;
			if(__map_reserved[page] != null) {
				data = _this.getReserved(page);
			} else {
				data = _this.h[page];
			}
		}
		var region = new haxepunk_graphics_atlas_AtlasRegion(data,rect.clone());
		var _this1 = this._regions;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,region);
		} else {
			_this1.h[name] = region;
		}
		return region;
	}
	,_regions: null
	,_pages: null
	,__class__: haxepunk_graphics_atlas_TextureAtlas
});
var haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker = function() { };
$hxClasses["haxepunk.graphics.atlas._TextureAtlas.GdxTexturePacker"] = haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker;
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.__name__ = ["haxepunk","graphics","atlas","_TextureAtlas","GdxTexturePacker"];
haxepunk_graphics_atlas__$TextureAtlas_GdxTexturePacker.load = function(file) {
	var data = haxepunk_assets_AssetLoader.getText(file);
	var inputDir = haxe_io_Path.directory(file);
	var atlas = new haxepunk_graphics_atlas_TextureAtlas();
	var reader = new haxe_io_StringInput(data);
	var page;
	var pageName;
	var extension;
	while(true) {
		var line = null;
		try {
			line = reader.readLine();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
				break;
			} else throw(e);
		}
		if(line == null) {
			break;
		}
		line = StringTools.trim(line);
		if(line.length == 0) {
			continue;
		}
		pageName = line;
		extension = haxe_io_Path.extension(pageName);
		var assetName = haxe_io_Path.join([inputDir,pageName]);
		page = haxepunk_assets_AssetCache.global.getAtlasData(assetName,false);
		var _this = atlas._pages;
		if(__map_reserved[pageName] != null) {
			_this.setReserved(pageName,page);
		} else {
			_this.h[pageName] = page;
		}
		var line1 = "";
		while(true) {
			try {
				line1 = reader.readLine();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				if( js_Boot.__instanceof(e1,haxe_io_Eof) ) {
					break;
				} else throw(e1);
			}
			if(line1.indexOf(":") == -1) {
				break;
			}
			var value_name;
			var parts = line1.split(":");
			value_name = StringTools.trim(parts[0]);
			StringTools.trim(parts[1]);
			switch(value_name) {
			case "filter":
				break;
			case "format":
				break;
			case "repeat":
				break;
			case "size":
				break;
			}
		}
		while(line1 != "") {
			var regionName = line1;
			try {
				line1 = reader.readLine();
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
				if( js_Boot.__instanceof(e2,haxe_io_Eof) ) {
					break;
				} else throw(e2);
			}
			var values = new haxe_ds_StringMap();
			while(line1.indexOf(":") > -1) {
				var value_value;
				var value_name1;
				var parts1 = line1.split(":");
				value_name1 = StringTools.trim(parts1[0]);
				value_value = StringTools.trim(parts1[1]);
				if(__map_reserved[value_name1] != null) {
					values.setReserved(value_name1,value_value);
				} else {
					values.h[value_name1] = value_value;
				}
				try {
					line1 = reader.readLine();
				} catch( e3 ) {
					haxe_CallStack.lastException = e3;
					if (e3 instanceof js__$Boot_HaxeError) e3 = e3.val;
					if( js_Boot.__instanceof(e3,haxe_io_Eof) ) {
						break;
					} else throw(e3);
				}
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = [];
			var _g11 = 0;
			var _g21 = (__map_reserved["xy"] != null ? values.getReserved("xy") : values.h["xy"]).split(",");
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				_g2.push(StringTools.trim(v));
			}
			while(_g1 < _g2.length) {
				var x = _g2[_g1];
				++_g1;
				_g.push(Std.parseInt(x));
			}
			var _g12 = [];
			var _g22 = 0;
			var _g3 = [];
			var _g13 = 0;
			var _g23 = (__map_reserved["size"] != null ? values.getReserved("size") : values.h["size"]).split(",");
			while(_g13 < _g23.length) {
				var v1 = _g23[_g13];
				++_g13;
				_g3.push(StringTools.trim(v1));
			}
			while(_g22 < _g3.length) {
				var x1 = _g3[_g22];
				++_g22;
				_g12.push(Std.parseInt(x1));
			}
			var r = ((__map_reserved["rotate"] != null ? values.getReserved("rotate") : values.h["rotate"]) == "true" ? -90 : 0) != 0 ? new haxepunk_math_Rectangle(_g[0],_g[1],_g12[1],_g12[0]) : new haxepunk_math_Rectangle(_g[0],_g[1],_g12[0],_g12[1]);
			atlas.defineRegion(haxe_io_Path.join([inputDir,regionName + "." + extension]),r,null,pageName);
		}
	}
	return atlas;
};
var haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image = function(source) {
	this.scale = 1;
	haxepunk_Graphic.call(this);
	this._source = source;
	this._sourceIsImage = js_Boot.__instanceof(this._source,haxepunk_graphics_Image);
	this._types = new haxe_ds_StringMap();
	this.active = true;
	this.particleCount = 0;
};
$hxClasses["haxepunk.graphics.emitter.BaseEmitter_haxepunk_graphics_Image"] = haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image;
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image.__name__ = ["haxepunk","graphics","emitter","BaseEmitter_haxepunk_graphics_Image"];
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image.__super__ = haxepunk_Graphic;
haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image.prototype = $extend(haxepunk_Graphic.prototype,{
	particleCount: null
	,scale: null
	,render: function(point,camera) {
		var p = this._particle;
		var t;
		var pt;
		var type;
		var td;
		var atd;
		var std;
		var rtd;
		var ctd;
		while(p != null) {
			t = p._time / p._duration;
			if(p._firstDraw) {
				p._ox = point.x;
				p._oy = point.y;
				p._firstDraw = false;
			}
			type = p._type;
			this._source.smooth = this.smooth;
			this._source.flexibleLayer = this.flexibleLayer;
			this._source.pixelSnapping = this.pixelSnapping;
			this._source.blend = type._blendMode == null ? this.blend : type._blendMode;
			var n = type._trailLength;
			while(n >= 0) {
				pt = p._time - n-- * type._trailDelay;
				t = pt / p._duration;
				if(t < 0 || pt >= p._stopTime) {
					continue;
				}
				if(type._ease != null) {
					td = type._ease(t);
				} else {
					td = t;
				}
				if(type._colorEase != null) {
					ctd = type._colorEase(t);
				} else {
					ctd = t;
				}
				this._source.set_color(p.color(ctd));
				if(type._alphaEase != null) {
					atd = type._alphaEase(t);
				} else {
					atd = t;
				}
				this._source.set_alpha(p.alpha(atd) * Math.pow(type._trailAlpha,n));
				if(this._sourceIsImage) {
					var _source = this._source;
					if(type._rotationEase != null) {
						rtd = type._rotationEase(t);
					} else {
						rtd = t;
					}
					_source.angle = p.angle(rtd);
					if(type._scaleEase != null) {
						std = type._scaleEase(t);
					} else {
						std = t;
					}
					_source.scale = this.scale * p.scale(std);
				}
				this._source.x = p.x(td) - point.x + this.x - this.originX;
				this._source.y = p.y(td) - point.y + this.y - this.originY;
				this._source.render(point,camera);
			}
			p = p._next;
		}
	}
	,update: function() {
		if(this._particle == null) {
			return;
		}
		var p = this._particle;
		var n;
		while(p != null) {
			p._time += haxepunk_HXP.elapsed;
			var type = p._type;
			if(p._time - type._trailLength * type._trailDelay >= p._stopTime) {
				if(p._next != null) {
					p._next._prev = p._prev;
				}
				if(p._prev != null) {
					p._prev._next = p._next;
				} else {
					this._particle = p._next;
				}
				n = p._next;
				p._next = this._cache;
				p._prev = null;
				this._cache = p;
				p = n;
				this.particleCount--;
				continue;
			}
			p = p._next;
		}
	}
	,addType: function(name,blendMode) {
		if(blendMode == null) {
			blendMode = this.blend;
		}
		var pt = this._types.get(name);
		if(pt != null) {
			throw new js__$Boot_HaxeError("Cannot add multiple particle types of the same name");
		}
		pt = new haxepunk_graphics_emitter_ParticleType(name,blendMode);
		this._types.set(name,pt);
		return pt;
	}
	,emit: function(name,x,y,angle) {
		if(angle == null) {
			angle = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p;
		var type = this._types.get(name);
		if(type == null) {
			throw new js__$Boot_HaxeError("Particle type \"" + name + "\" does not exist.");
		}
		if(this._cache != null) {
			p = this._cache;
			this._cache = p._next;
		} else {
			p = new haxepunk_graphics_emitter_Particle();
		}
		p._next = this._particle;
		p._prev = null;
		if(p._next != null) {
			p._next._prev = p;
		}
		p._type = type;
		p._time = 0;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._duration = type._duration + type._durationRange * (haxepunk_math_Random._seed / 2147483647);
		p._stopTime = p._duration;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._angle = angle + type._angle + type._angleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._startAngle = type._startAngle + type._startAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._spanAngle = type._spanAngle + type._spanAngleRange * (haxepunk_math_Random._seed / 2147483647);
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var d = type._distance + type._distanceRange * (haxepunk_math_Random._seed / 2147483647);
		p._moveX = Math.cos(p._angle * (Math.PI / -180)) * d;
		p._moveY = Math.sin(p._angle * (Math.PI / -180)) * d;
		p._x = x;
		p._y = y;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		p._gravity = type._gravity + type._gravityRange * (haxepunk_math_Random._seed / 2147483647);
		p._firstDraw = true;
		p._ox = p._oy = 0;
		this.particleCount++;
		return this._particle = p;
	}
	,emitInCircle: function(name,x,y,radius) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var angle = haxepunk_math_Random._seed / 2147483647 * Math.PI * 2;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		radius *= haxepunk_math_Random._seed / 2147483647;
		return this.emit(name,x + Math.cos(angle) * radius,y + Math.sin(angle) * radius);
	}
	,emitInRectangle: function(name,x,y,width,height) {
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		var tmp = x + haxepunk_math_Random._seed / 2147483647 * width;
		haxepunk_math_Random._seed = haxepunk_math_Random._seed * 16807.0 % 2147483647 | 0;
		return this.emit(name,tmp,y + haxepunk_math_Random._seed / 2147483647 * height);
	}
	,setMotion: function(name,angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards) {
		if(backwards == null) {
			backwards = false;
		}
		if(durationRange == null) {
			durationRange = 0;
		}
		if(distanceRange == null) {
			distanceRange = 0;
		}
		if(angleRange == null) {
			angleRange = 0;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setMotion(angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards);
	}
	,setGravity: function(name,gravity,gravityRange) {
		if(gravityRange == null) {
			gravityRange = 0;
		}
		if(gravity == null) {
			gravity = 0;
		}
		return this._types.get(name).setGravity(gravity,gravityRange);
	}
	,setAlpha: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setAlpha(start,finish,ease);
	}
	,setScale: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setScale(start,finish,ease);
	}
	,setRotation: function(name,startAngle,spanAngle,startAngleRange,spanAngleRange,ease) {
		if(spanAngleRange == null) {
			spanAngleRange = 0;
		}
		if(startAngleRange == null) {
			startAngleRange = 0;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setRotation(startAngle,spanAngle,startAngleRange,spanAngleRange,ease);
	}
	,setColor: function(name,start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 16777215;
		}
		var pt = this._types.get(name);
		if(pt == null) {
			return null;
		}
		return pt.setColor(start,finish,ease);
	}
	,_source: null
	,_sourceIsImage: null
	,_types: null
	,_particle: null
	,_cache: null
	,__class__: haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image
});
var haxepunk_graphics_emitter_Particle = function() {
	this._gravity = 0;
	this._spanAngle = 0;
	this._startAngle = 0;
	this._oy = 0;
	this._ox = 0;
	this._firstDraw = false;
	this._angle = 0;
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._duration = 0;
	this._stopTime = 0;
	this._time = 0;
};
$hxClasses["haxepunk.graphics.emitter.Particle"] = haxepunk_graphics_emitter_Particle;
haxepunk_graphics_emitter_Particle.__name__ = ["haxepunk","graphics","emitter","Particle"];
haxepunk_graphics_emitter_Particle.prototype = {
	x: function(td) {
		return this._x + this._ox + this._moveX * (this._type._backwards ? 1 - td : td);
	}
	,y: function(td) {
		return this._y + this._oy + this._moveY * (this._type._backwards ? 1 - td : td) + Math.pow(td * this._gravity,2);
	}
	,angle: function(td) {
		return this._startAngle + this._spanAngle * td;
	}
	,color: function(td) {
		return (((this._type._red + this._type._redRange * td) * 255 | 0) & 255) << 16 | (((this._type._green + this._type._greenRange * td) * 255 | 0) & 255) << 8 | ((this._type._blue + this._type._blueRange * td) * 255 | 0) & 255;
	}
	,alpha: function(td) {
		return this._type._alpha + this._type._alphaRange * td;
	}
	,scale: function(td) {
		return this._type._scale + this._type._scaleRange * td;
	}
	,_type: null
	,_time: null
	,_stopTime: null
	,_duration: null
	,_x: null
	,_y: null
	,_moveX: null
	,_moveY: null
	,_angle: null
	,_firstDraw: null
	,_ox: null
	,_oy: null
	,_startAngle: null
	,_spanAngle: null
	,_gravity: null
	,_prev: null
	,_next: null
	,__class__: haxepunk_graphics_emitter_Particle
};
var haxepunk_graphics_emitter_ParticleType = function(name,blendMode) {
	this._red = this._green = this._blue = this._alpha = this._scale = this._trailLength = 1;
	this._blendMode = blendMode;
	this._redRange = this._greenRange = this._blueRange = this._alphaRange = this._scaleRange = this._trailDelay = 0;
	this._trailAlpha = 1;
	this._startAngle = this._spanAngle = this._startAngleRange = this._spanAngleRange = 0;
	this._name = name;
	this._angle = this._angleRange = 0;
	this._gravity = this._gravityRange = 0;
	this._duration = this._durationRange = 0;
	this._distance = this._distanceRange = 0;
};
$hxClasses["haxepunk.graphics.emitter.ParticleType"] = haxepunk_graphics_emitter_ParticleType;
haxepunk_graphics_emitter_ParticleType.__name__ = ["haxepunk","graphics","emitter","ParticleType"];
haxepunk_graphics_emitter_ParticleType.prototype = {
	setMotion: function(angle,distance,duration,angleRange,distanceRange,durationRange,ease,backwards) {
		if(backwards == null) {
			backwards = false;
		}
		if(durationRange == null) {
			durationRange = 0;
		}
		if(distanceRange == null) {
			distanceRange = 0;
		}
		if(angleRange == null) {
			angleRange = 0;
		}
		this._angle = angle;
		this._distance = distance;
		this._duration = duration;
		this._angleRange = angleRange;
		this._distanceRange = distanceRange;
		this._durationRange = durationRange;
		this._ease = ease;
		this._backwards = backwards;
		return this;
	}
	,setGravity: function(gravity,gravityRange) {
		if(gravityRange == null) {
			gravityRange = 0;
		}
		if(gravity == null) {
			gravity = 0;
		}
		this._gravity = gravity;
		this._gravityRange = gravityRange;
		return this;
	}
	,setAlpha: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		if(start < 0) {
			start = 0;
		} else if(start > 1) {
			start = 1;
		} else {
			start = start;
		}
		if(finish < 0) {
			finish = 0;
		} else if(finish > 1) {
			finish = 1;
		} else {
			finish = finish;
		}
		this._alpha = start;
		this._alphaRange = finish - start;
		this._alphaEase = ease;
		return this;
	}
	,setScale: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 1;
		}
		this._scale = start;
		this._scaleRange = finish - start;
		this._scaleEase = ease;
		return this;
	}
	,setRotation: function(startAngle,spanAngle,startAngleRange,spanAngleRange,ease) {
		if(spanAngleRange == null) {
			spanAngleRange = 0;
		}
		if(startAngleRange == null) {
			startAngleRange = 0;
		}
		this._startAngle = startAngle;
		this._spanAngle = spanAngle;
		this._startAngleRange = startAngleRange;
		this._spanAngleRange = spanAngleRange;
		this._rotationEase = ease;
		return this;
	}
	,setColor: function(start,finish,ease) {
		if(finish == null) {
			finish = 0;
		}
		if(start == null) {
			start = 16777215;
		}
		start &= 16777215;
		finish &= 16777215;
		this._red = (start >> 16 & 255) / 255;
		this._green = (start >> 8 & 255) / 255;
		this._blue = (start & 255) / 255;
		this._redRange = (finish >> 16 & 255) / 255 - this._red;
		this._greenRange = (finish >> 8 & 255) / 255 - this._green;
		this._blueRange = (finish & 255) / 255 - this._blue;
		this._colorEase = ease;
		return this;
	}
	,_name: null
	,_blendMode: null
	,_angle: null
	,_angleRange: null
	,_distance: null
	,_distanceRange: null
	,_duration: null
	,_durationRange: null
	,_ease: null
	,_backwards: null
	,_gravity: null
	,_gravityRange: null
	,_alpha: null
	,_alphaRange: null
	,_alphaEase: null
	,_scale: null
	,_scaleRange: null
	,_scaleEase: null
	,_startAngle: null
	,_spanAngle: null
	,_startAngleRange: null
	,_spanAngleRange: null
	,_rotationEase: null
	,_red: null
	,_redRange: null
	,_green: null
	,_greenRange: null
	,_blue: null
	,_blueRange: null
	,_colorEase: null
	,_trailLength: null
	,_trailDelay: null
	,_trailAlpha: null
	,__class__: haxepunk_graphics_emitter_ParticleType
};
var haxepunk_graphics_emitter_StaticEmitter = function(source) {
	haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image.call(this,new haxepunk_graphics_Image(source));
	this._source.centerOrigin();
};
$hxClasses["haxepunk.graphics.emitter.StaticEmitter"] = haxepunk_graphics_emitter_StaticEmitter;
haxepunk_graphics_emitter_StaticEmitter.__name__ = ["haxepunk","graphics","emitter","StaticEmitter"];
haxepunk_graphics_emitter_StaticEmitter.__super__ = haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image;
haxepunk_graphics_emitter_StaticEmitter.prototype = $extend(haxepunk_graphics_emitter_BaseEmitter_$haxepunk_$graphics_$Image.prototype,{
	__class__: haxepunk_graphics_emitter_StaticEmitter
});
var haxepunk_graphics_hardware__$DrawCommand_DrawTriangle = function() {
	this.alpha = 0;
	this.color = 0;
	this.uvy3 = 0;
	this.uvx3 = 0;
	this.ty3 = 0;
	this.tx3 = 0;
	this.uvy2 = 0;
	this.uvx2 = 0;
	this.ty2 = 0;
	this.tx2 = 0;
	this.uvy1 = 0;
	this.uvx1 = 0;
	this.ty1 = 0;
	this.tx1 = 0;
};
$hxClasses["haxepunk.graphics.hardware._DrawCommand.DrawTriangle"] = haxepunk_graphics_hardware__$DrawCommand_DrawTriangle;
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.__name__ = ["haxepunk","graphics","hardware","_DrawCommand","DrawTriangle"];
haxepunk_graphics_hardware__$DrawCommand_DrawTriangle.prototype = {
	tx1: null
	,ty1: null
	,uvx1: null
	,uvy1: null
	,tx2: null
	,ty2: null
	,uvx2: null
	,uvy2: null
	,tx3: null
	,ty3: null
	,uvx3: null
	,uvy3: null
	,color: null
	,alpha: null
	,_next: null
	,__class__: haxepunk_graphics_hardware__$DrawCommand_DrawTriangle
};
var haxepunk_graphics_hardware_TriangleIterator = function() {
	this.triangle = null;
};
$hxClasses["haxepunk.graphics.hardware.TriangleIterator"] = haxepunk_graphics_hardware_TriangleIterator;
haxepunk_graphics_hardware_TriangleIterator.__name__ = ["haxepunk","graphics","hardware","TriangleIterator"];
haxepunk_graphics_hardware_TriangleIterator.prototype = {
	triangle: null
	,hasNext: function() {
		return this.triangle != null;
	}
	,next: function() {
		var current = this.triangle;
		this.triangle = this.triangle._next;
		return current;
	}
	,__class__: haxepunk_graphics_hardware_TriangleIterator
};
var haxepunk_graphics_hardware_DrawCommand = function() {
	this._iterator = new haxepunk_graphics_hardware_TriangleIterator();
	this.triangleCount = 0;
	this.bounds = new haxepunk_math_Rectangle();
	this.clipRect = null;
	this.blend = 1;
	this.smooth = false;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommand"] = haxepunk_graphics_hardware_DrawCommand;
haxepunk_graphics_hardware_DrawCommand.__name__ = ["haxepunk","graphics","hardware","DrawCommand"];
haxepunk_graphics_hardware_DrawCommand.create = function(texture,shader,smooth,blend,clipRect) {
	var command;
	if(haxepunk_graphics_hardware_DrawCommand._pool != null) {
		command = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._pool._next;
		command._prev = command._next = null;
	} else {
		command = new haxepunk_graphics_hardware_DrawCommand();
	}
	command.shader = shader;
	command.texture = texture;
	command.smooth = smooth;
	command.blend = blend;
	command.clipRect = clipRect;
	return command;
};
haxepunk_graphics_hardware_DrawCommand._prePopulatePool = function(n,m) {
	var _g1 = 0;
	while(_g1 < n) {
		++_g1;
		var cmd = new haxepunk_graphics_hardware_DrawCommand();
		var _g3 = 0;
		while(_g3 < m) {
			++_g3;
			var data = new haxepunk_graphics_hardware__$DrawCommand_DrawTriangle();
			if(cmd.data == null) {
				cmd.data = data;
			} else {
				cmd._lastData._next = data;
			}
			cmd._lastData = data;
			++cmd.triangleCount;
			var a = data.tx1;
			var b = data.tx2;
			var c = data.tx3;
			var x1 = a > b ? b > c ? c : b : a > c ? c : a;
			var a1 = data.tx1;
			var b1 = data.tx2;
			var c1 = data.tx3;
			var x2 = a1 < b1 ? b1 < c1 ? c1 : b1 : a1 < c1 ? c1 : a1;
			var a2 = data.ty1;
			var b2 = data.ty2;
			var c2 = data.ty3;
			var y1 = a2 > b2 ? b2 > c2 ? c2 : b2 : a2 > c2 ? c2 : a2;
			var a3 = data.ty1;
			var b3 = data.ty2;
			var c3 = data.ty3;
			var y2 = a3 < b3 ? b3 < c3 ? c3 : b3 : a3 < c3 ? c3 : a3;
			if(cmd.bounds.width == 0) {
				cmd.bounds.x = x1;
				cmd.bounds.width = x2 - x1;
			} else {
				if(x1 < cmd.bounds.x) {
					cmd.bounds.width += cmd.bounds.x - x1;
					cmd.bounds.x = x1;
				}
				var _this = cmd.bounds;
				if(x2 > _this.x + _this.width) {
					cmd.bounds.width = x2 - cmd.bounds.x;
				}
			}
			if(cmd.bounds.height == 0) {
				cmd.bounds.y = y1;
				cmd.bounds.height = y2 - y1;
			} else {
				if(y1 < cmd.bounds.y) {
					cmd.bounds.height += cmd.bounds.y - y1;
					cmd.bounds.y = y1;
				}
				var _this1 = cmd.bounds;
				if(y2 > _this1.y + _this1.height) {
					cmd.bounds.height = y2 - cmd.bounds.y;
				}
			}
		}
		cmd.recycle();
	}
	return haxepunk_graphics_hardware_DrawCommand._pool;
};
haxepunk_graphics_hardware_DrawCommand.prototype = {
	shader: null
	,texture: null
	,smooth: null
	,blend: null
	,clipRect: null
	,bounds: null
	,triangleCount: null
	,visibleArea: null
	,recycle: function() {
		this.triangleCount = 0;
		this.texture = null;
		if(this.data != null) {
			this._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
			haxepunk_graphics_hardware_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		this.bounds.setTo(0,0,0,0);
		var command = this;
		while(command._next != null) {
			command = command._next;
			command.triangleCount = 0;
			command.texture = null;
			if(command.data != null) {
				command._lastData._next = haxepunk_graphics_hardware_DrawCommand._dataPool;
				haxepunk_graphics_hardware_DrawCommand._dataPool = command.data;
			}
			command.data = command._lastData = null;
			command.bounds.setTo(0,0,0,0);
		}
		command._next = haxepunk_graphics_hardware_DrawCommand._pool;
		haxepunk_graphics_hardware_DrawCommand._pool = this;
	}
	,_iterator: null
	,data: null
	,_lastData: null
	,_prev: null
	,_next: null
	,__class__: haxepunk_graphics_hardware_DrawCommand
};
var haxepunk_graphics_hardware_DrawCommandIterator = function() {
	this.current = null;
	this.command = null;
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandIterator"] = haxepunk_graphics_hardware_DrawCommandIterator;
haxepunk_graphics_hardware_DrawCommandIterator.__name__ = ["haxepunk","graphics","hardware","DrawCommandIterator"];
haxepunk_graphics_hardware_DrawCommandIterator.prototype = {
	command: null
	,current: null
	,reset: function() {
		this.current = this.command;
	}
	,hasNext: function() {
		return this.current != null;
	}
	,next: function() {
		var result = this.current;
		this.current = this.current._next;
		return result;
	}
	,recycle: function() {
		if(this.command != null) {
			this.command.recycle();
		}
		this.command = this.current = null;
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandIterator
};
var haxepunk_graphics_hardware_DrawCommandBatch = function() {
	this.head = new haxepunk_graphics_hardware_DrawCommandIterator();
	this.visibleArea = new haxepunk_math_Rectangle();
};
$hxClasses["haxepunk.graphics.hardware.DrawCommandBatch"] = haxepunk_graphics_hardware_DrawCommandBatch;
haxepunk_graphics_hardware_DrawCommandBatch.__name__ = ["haxepunk","graphics","hardware","DrawCommandBatch"];
haxepunk_graphics_hardware_DrawCommandBatch.prototype = {
	visibleArea: null
	,head: null
	,last: null
	,iterator: function() {
		this.head.reset();
		return this.head;
	}
	,getDrawCommand: function(texture,shader,smooth,blend,clipRect,x1,y1,x2,y2,x3,y3,flexibleLayer) {
		if(flexibleLayer == null) {
			flexibleLayer = false;
		}
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var tmp;
		if(this.last != null) {
			var _this = this.last;
			if(_this.smooth != smooth) {
				tmp = false;
			} else if(_this.texture != texture) {
				tmp = false;
			} else if(_this.shader.id != shader.id) {
				tmp = false;
			} else if(_this.blend != blend) {
				tmp = false;
			} else {
				var aRectIsNull = _this.clipRect == null;
				if(aRectIsNull != (clipRect == null)) {
					tmp = false;
				} else if(aRectIsNull) {
					tmp = true;
				} else if((_this.clipRect.x | 0) == (clipRect.x | 0) && (_this.clipRect.y | 0) == (clipRect.y | 0) && (_this.clipRect.width | 0) == (clipRect.width | 0)) {
					tmp = (_this.clipRect.height | 0) == (clipRect.height | 0);
				} else {
					tmp = false;
				}
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.last;
		} else if((x1 != 0 || x2 != 0 || x3 != 0) && (y1 != 0 || y2 != 0 || y3 != 0)) {
			var t = 0;
			var current = this.last;
			var found = false;
			while(current != null && t < haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
				var tmp1;
				if(current.smooth != smooth) {
					tmp1 = false;
				} else if(current.texture != texture) {
					tmp1 = false;
				} else if(current.shader.id != shader.id) {
					tmp1 = false;
				} else if(current.blend != blend) {
					tmp1 = false;
				} else {
					var aRectIsNull1 = current.clipRect == null;
					if(aRectIsNull1 != (clipRect == null)) {
						tmp1 = false;
					} else if(aRectIsNull1) {
						tmp1 = true;
					} else if((current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0)) {
						tmp1 = (current.clipRect.height | 0) == (clipRect.height | 0);
					} else {
						tmp1 = false;
					}
				}
				if(tmp1) {
					found = true;
					if(flexibleLayer) {
						return current;
					}
					break;
				}
				t += current.triangleCount;
				current = current._prev;
			}
			if(found) {
				var rx1 = x1 > x2 ? x2 > x3 ? x3 : x2 : x1 > x3 ? x3 : x1;
				var ry1 = y1 > y2 ? y2 > y3 ? y3 : y2 : y1 > y3 ? y3 : y1;
				haxepunk_graphics_hardware_DrawCommandBatch._bounds.setTo(rx1,ry1,(x1 < x2 ? x2 < x3 ? x3 : x2 : x1 < x3 ? x3 : x1) - rx1,(y1 < y2 ? y2 < y3 ? y3 : y2 : y1 < y3 ? y3 : y1) - ry1);
				t = 0;
				current = this.last;
				while(current != null) {
					var tmp2;
					if(current.smooth != smooth) {
						tmp2 = false;
					} else if(current.texture != texture) {
						tmp2 = false;
					} else if(current.shader.id != shader.id) {
						tmp2 = false;
					} else if(current.blend != blend) {
						tmp2 = false;
					} else {
						var aRectIsNull2 = current.clipRect == null;
						if(aRectIsNull2 != (clipRect == null)) {
							tmp2 = false;
						} else if(aRectIsNull2) {
							tmp2 = true;
						} else if((current.clipRect.x | 0) == (clipRect.x | 0) && (current.clipRect.y | 0) == (clipRect.y | 0) && (current.clipRect.width | 0) == (clipRect.width | 0)) {
							tmp2 = (current.clipRect.height | 0) == (clipRect.height | 0);
						} else {
							tmp2 = false;
						}
					}
					if(tmp2) {
						return current;
					} else if(current.bounds.intersects(haxepunk_graphics_hardware_DrawCommandBatch._bounds)) {
						var collision = false;
						current._iterator.triangle = current.data;
						var _g = current._iterator;
						while(_g.triangle != null) {
							var current1 = _g.triangle;
							_g.triangle = _g.triangle._next;
							if(t++ >= haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks) {
								break;
							}
							var tmp3;
							var tmp4;
							var tmp5;
							var tmp6;
							var tmp7;
							var tmp8;
							var tmp9;
							var tmp10;
							var tmp11;
							var tmp12;
							var tmp13;
							var tmp14;
							var tmp15;
							var tmp16;
							var x21 = current1.tx1;
							var y21 = current1.ty1;
							var x22 = current1.tx2;
							var y22 = current1.ty2;
							var d = (y22 - y21) * (x2 - x1) - (x22 - x21) * (y2 - y1);
							if(d != 0) {
								var ua = ((x22 - x21) * (y1 - y21) - (y22 - y21) * (x1 - x21)) / d;
								var ub = ((x2 - x1) * (y1 - y21) - (y2 - y1) * (x1 - x21)) / d;
								if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
									d = 0;
								}
							}
							if(d != 0) {
								var x211 = current1.tx1;
								var y211 = current1.ty1;
								var x221 = current1.tx2;
								var y221 = current1.ty2;
								var d1 = (y221 - y211) * (x3 - x2) - (x221 - x211) * (y3 - y2);
								if(d1 != 0) {
									var ua1 = ((x221 - x211) * (y2 - y211) - (y221 - y211) * (x2 - x211)) / d1;
									var ub1 = ((x3 - x2) * (y2 - y211) - (y3 - y2) * (x2 - x211)) / d1;
									if(ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {
										d1 = 0;
									}
								}
								tmp16 = d1 == 0;
							} else {
								tmp16 = true;
							}
							if(!tmp16) {
								var x212 = current1.tx1;
								var y212 = current1.ty1;
								var x222 = current1.tx2;
								var y222 = current1.ty2;
								var d2 = (y222 - y212) * (x3 - x1) - (x222 - x212) * (y3 - y1);
								if(d2 != 0) {
									var ua2 = ((x222 - x212) * (y1 - y212) - (y222 - y212) * (x1 - x212)) / d2;
									var ub2 = ((x3 - x1) * (y1 - y212) - (y3 - y1) * (x1 - x212)) / d2;
									if(ua2 >= 0 && ua2 <= 1 && ub2 >= 0 && ub2 <= 1) {
										d2 = 0;
									}
								}
								tmp15 = d2 == 0;
							} else {
								tmp15 = true;
							}
							if(!tmp15) {
								var x213 = current1.tx2;
								var y213 = current1.ty2;
								var x223 = current1.tx3;
								var y223 = current1.ty3;
								var d3 = (y223 - y213) * (x2 - x1) - (x223 - x213) * (y2 - y1);
								if(d3 != 0) {
									var ua3 = ((x223 - x213) * (y1 - y213) - (y223 - y213) * (x1 - x213)) / d3;
									var ub3 = ((x2 - x1) * (y1 - y213) - (y2 - y1) * (x1 - x213)) / d3;
									if(ua3 >= 0 && ua3 <= 1 && ub3 >= 0 && ub3 <= 1) {
										d3 = 0;
									}
								}
								tmp14 = d3 == 0;
							} else {
								tmp14 = true;
							}
							if(!tmp14) {
								var x214 = current1.tx2;
								var y214 = current1.ty2;
								var x224 = current1.tx3;
								var y224 = current1.ty3;
								var d4 = (y224 - y214) * (x3 - x2) - (x224 - x214) * (y3 - y2);
								if(d4 != 0) {
									var ua4 = ((x224 - x214) * (y2 - y214) - (y224 - y214) * (x2 - x214)) / d4;
									var ub4 = ((x3 - x2) * (y2 - y214) - (y3 - y2) * (x2 - x214)) / d4;
									if(ua4 >= 0 && ua4 <= 1 && ub4 >= 0 && ub4 <= 1) {
										d4 = 0;
									}
								}
								tmp13 = d4 == 0;
							} else {
								tmp13 = true;
							}
							if(!tmp13) {
								var x215 = current1.tx2;
								var y215 = current1.ty2;
								var x225 = current1.tx3;
								var y225 = current1.ty3;
								var d5 = (y225 - y215) * (x3 - x1) - (x225 - x215) * (y3 - y1);
								if(d5 != 0) {
									var ua5 = ((x225 - x215) * (y1 - y215) - (y225 - y215) * (x1 - x215)) / d5;
									var ub5 = ((x3 - x1) * (y1 - y215) - (y3 - y1) * (x1 - x215)) / d5;
									if(ua5 >= 0 && ua5 <= 1 && ub5 >= 0 && ub5 <= 1) {
										d5 = 0;
									}
								}
								tmp12 = d5 == 0;
							} else {
								tmp12 = true;
							}
							if(!tmp12) {
								var x216 = current1.tx1;
								var y216 = current1.ty1;
								var x226 = current1.tx3;
								var y226 = current1.ty3;
								var d6 = (y226 - y216) * (x2 - x1) - (x226 - x216) * (y2 - y1);
								if(d6 != 0) {
									var ua6 = ((x226 - x216) * (y1 - y216) - (y226 - y216) * (x1 - x216)) / d6;
									var ub6 = ((x2 - x1) * (y1 - y216) - (y2 - y1) * (x1 - x216)) / d6;
									if(ua6 >= 0 && ua6 <= 1 && ub6 >= 0 && ub6 <= 1) {
										d6 = 0;
									}
								}
								tmp11 = d6 == 0;
							} else {
								tmp11 = true;
							}
							if(!tmp11) {
								var x217 = current1.tx1;
								var y217 = current1.ty1;
								var x227 = current1.tx3;
								var y227 = current1.ty3;
								var d7 = (y227 - y217) * (x3 - x2) - (x227 - x217) * (y3 - y2);
								if(d7 != 0) {
									var ua7 = ((x227 - x217) * (y2 - y217) - (y227 - y217) * (x2 - x217)) / d7;
									var ub7 = ((x3 - x2) * (y2 - y217) - (y3 - y2) * (x2 - x217)) / d7;
									if(ua7 >= 0 && ua7 <= 1 && ub7 >= 0 && ub7 <= 1) {
										d7 = 0;
									}
								}
								tmp10 = d7 == 0;
							} else {
								tmp10 = true;
							}
							if(!tmp10) {
								var x218 = current1.tx1;
								var y218 = current1.ty1;
								var x228 = current1.tx3;
								var y228 = current1.ty3;
								var d8 = (y228 - y218) * (x3 - x1) - (x228 - x218) * (y3 - y1);
								if(d8 != 0) {
									var ua8 = ((x228 - x218) * (y1 - y218) - (y228 - y218) * (x1 - x218)) / d8;
									var ub8 = ((x3 - x1) * (y1 - y218) - (y3 - y1) * (x1 - x218)) / d8;
									if(ua8 >= 0 && ua8 <= 1 && ub8 >= 0 && ub8 <= 1) {
										d8 = 0;
									}
								}
								tmp9 = d8 == 0;
							} else {
								tmp9 = true;
							}
							if(!tmp9) {
								var v0x = x3 - x1;
								var v0y = y3 - y1;
								var v1x = x2 - x1;
								var v1y = y2 - y1;
								var v2x = current1.tx1 - x1;
								var v2y = current1.ty1 - y1;
								var u = v2x * v0y - v2y * v0x;
								var v = v1x * v2y - v1y * v2x;
								var d9 = v1x * v0y - v1y * v0x;
								if(d9 < 0) {
									u = -u;
									v = -v;
									d9 = -d9;
								}
								if(u >= 0 && v >= 0) {
									tmp8 = u + v <= d9;
								} else {
									tmp8 = false;
								}
							} else {
								tmp8 = true;
							}
							if(!tmp8) {
								var v0x1 = x3 - x1;
								var v0y1 = y3 - y1;
								var v1x1 = x2 - x1;
								var v1y1 = y2 - y1;
								var v2x1 = current1.tx2 - x1;
								var v2y1 = current1.ty2 - y1;
								var u1 = v2x1 * v0y1 - v2y1 * v0x1;
								var v1 = v1x1 * v2y1 - v1y1 * v2x1;
								var d10 = v1x1 * v0y1 - v1y1 * v0x1;
								if(d10 < 0) {
									u1 = -u1;
									v1 = -v1;
									d10 = -d10;
								}
								if(u1 >= 0 && v1 >= 0) {
									tmp7 = u1 + v1 <= d10;
								} else {
									tmp7 = false;
								}
							} else {
								tmp7 = true;
							}
							if(!tmp7) {
								var v0x2 = x3 - x1;
								var v0y2 = y3 - y1;
								var v1x2 = x2 - x1;
								var v1y2 = y2 - y1;
								var v2x2 = current1.tx3 - x1;
								var v2y2 = current1.ty3 - y1;
								var u2 = v2x2 * v0y2 - v2y2 * v0x2;
								var v2 = v1x2 * v2y2 - v1y2 * v2x2;
								var d11 = v1x2 * v0y2 - v1y2 * v0x2;
								if(d11 < 0) {
									u2 = -u2;
									v2 = -v2;
									d11 = -d11;
								}
								if(u2 >= 0 && v2 >= 0) {
									tmp6 = u2 + v2 <= d11;
								} else {
									tmp6 = false;
								}
							} else {
								tmp6 = true;
							}
							if(!tmp6) {
								var x11 = current1.tx1;
								var y11 = current1.ty1;
								var v0x3 = current1.tx3 - x11;
								var v0y3 = current1.ty3 - y11;
								var v1x3 = current1.tx2 - x11;
								var v1y3 = current1.ty2 - y11;
								var v2x3 = x1 - x11;
								var v2y3 = y1 - y11;
								var u3 = v2x3 * v0y3 - v2y3 * v0x3;
								var v3 = v1x3 * v2y3 - v1y3 * v2x3;
								var d12 = v1x3 * v0y3 - v1y3 * v0x3;
								if(d12 < 0) {
									u3 = -u3;
									v3 = -v3;
									d12 = -d12;
								}
								if(u3 >= 0 && v3 >= 0) {
									tmp5 = u3 + v3 <= d12;
								} else {
									tmp5 = false;
								}
							} else {
								tmp5 = true;
							}
							if(!tmp5) {
								var x12 = current1.tx1;
								var y12 = current1.ty1;
								var v0x4 = current1.tx3 - x12;
								var v0y4 = current1.ty3 - y12;
								var v1x4 = current1.tx2 - x12;
								var v1y4 = current1.ty2 - y12;
								var v2x4 = x2 - x12;
								var v2y4 = y2 - y12;
								var u4 = v2x4 * v0y4 - v2y4 * v0x4;
								var v4 = v1x4 * v2y4 - v1y4 * v2x4;
								var d13 = v1x4 * v0y4 - v1y4 * v0x4;
								if(d13 < 0) {
									u4 = -u4;
									v4 = -v4;
									d13 = -d13;
								}
								if(u4 >= 0 && v4 >= 0) {
									tmp4 = u4 + v4 <= d13;
								} else {
									tmp4 = false;
								}
							} else {
								tmp4 = true;
							}
							if(!tmp4) {
								var x13 = current1.tx1;
								var y13 = current1.ty1;
								var v0x5 = current1.tx3 - x13;
								var v0y5 = current1.ty3 - y13;
								var v1x5 = current1.tx2 - x13;
								var v1y5 = current1.ty2 - y13;
								var v2x5 = x3 - x13;
								var v2y5 = y3 - y13;
								var u5 = v2x5 * v0y5 - v2y5 * v0x5;
								var v5 = v1x5 * v2y5 - v1y5 * v2x5;
								var d14 = v1x5 * v0y5 - v1y5 * v0x5;
								if(d14 < 0) {
									u5 = -u5;
									v5 = -v5;
									d14 = -d14;
								}
								if(u5 >= 0 && v5 >= 0) {
									tmp3 = u5 + v5 <= d14;
								} else {
									tmp3 = false;
								}
							} else {
								tmp3 = true;
							}
							if(tmp3) {
								collision = true;
								break;
							}
						}
						if(collision) {
							break;
						}
					}
					current = current._prev;
				}
			}
		}
		while(this.last != null && this.last.data == null) {
			var l = this.last;
			this.last = this.last._prev;
			if(this.last != null) {
				this.last._next = null;
			}
			l.recycle();
		}
		var command = haxepunk_graphics_hardware_DrawCommand.create(texture,shader,smooth,blend,clipRect);
		command.visibleArea = this.visibleArea;
		if(this.last == null) {
			this.head.command = this.last = command;
			command._prev = null;
		} else {
			this.last._next = command;
			command._prev = this.last;
			this.last = command;
		}
		return command;
	}
	,__class__: haxepunk_graphics_hardware_DrawCommandBatch
};
var haxepunk_graphics_hardware_FrameBuffer = function() {
	this._height = 0;
	this._width = 0;
};
$hxClasses["haxepunk.graphics.hardware.FrameBuffer"] = haxepunk_graphics_hardware_FrameBuffer;
haxepunk_graphics_hardware_FrameBuffer.__name__ = ["haxepunk","graphics","hardware","FrameBuffer"];
haxepunk_graphics_hardware_FrameBuffer.prototype = {
	texture: null
	,framebuffer: null
	,_width: null
	,_height: null
	,build: function() {
		this.framebuffer = lime_graphics_opengl_GL.context.__context.createFramebuffer();
		this.resize();
	}
	,destroy: function() {
		this.texture = null;
	}
	,resize: function() {
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.framebuffer);
		if(this.texture != null) {
			lime_graphics_opengl_GL.context.__context.deleteTexture(this.texture);
		}
		this._width = haxepunk_HXP.screen.width;
		this._height = haxepunk_HXP.screen.height;
		var width = this._width;
		var height = this._height;
		this.texture = lime_graphics_opengl_GL.context.__context.createTexture();
		lime_graphics_opengl_GL.context.__context.bindTexture(3553,this.texture);
		lime_graphics_opengl_GL.context.__context.texImage2D(3553,0,6408,width,height,0,6408,5121,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(null));
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33071);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.__context.framebufferTexture2D(36160,36064,3553,this.texture,0);
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,null);
	}
	,bindFrameBuffer: function() {
		if(this.texture == null || this.framebuffer == null) {
			this.destroy();
			this.build();
		} else if(haxepunk_HXP.screen.width != this._width || haxepunk_HXP.screen.height != this._height) {
			this.resize();
		}
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.framebuffer);
		lime_graphics_opengl_GL.context.__context.clearColor(0,0,0,0);
		lime_graphics_opengl_GL.context.__context.clear(16640);
	}
	,__class__: haxepunk_graphics_hardware_FrameBuffer
};
var haxepunk_graphics_hardware_HardwareRenderer = function() {
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.defaultFramebuffer = null;
	if(haxepunk_graphics_hardware_HardwareRenderer._ortho == null) {
		haxepunk_graphics_hardware_HardwareRenderer._ortho = new Float32Array(16);
		var _g = 0;
		while(_g < 15) haxepunk_graphics_hardware_HardwareRenderer._ortho[_g++] = 0;
		haxepunk_graphics_hardware_HardwareRenderer._ortho[15] = 1;
	}
};
$hxClasses["haxepunk.graphics.hardware.HardwareRenderer"] = haxepunk_graphics_hardware_HardwareRenderer;
haxepunk_graphics_hardware_HardwareRenderer.__name__ = ["haxepunk","graphics","hardware","HardwareRenderer"];
haxepunk_graphics_hardware_HardwareRenderer.prototype = {
	fb: null
	,backFb: null
	,buffer: null
	,defaultFramebuffer: null
	,render: function(drawCommand) {
		lime_graphics_opengl_GL.context.__context.getError();
		var x = this.x;
		var y = this.y;
		var width = this.width;
		var height = this.height;
		if(drawCommand != null && drawCommand.triangleCount > 0) {
			if(haxepunk_graphics_hardware_HardwareRenderer._tracking) {
				haxepunk_graphics_hardware_HardwareRenderer.triangleCount += drawCommand.triangleCount;
				++haxepunk_graphics_hardware_HardwareRenderer.drawCallCount;
				if(haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit > -1 && haxepunk_graphics_hardware_HardwareRenderer.drawCallCount > haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit) {
					return;
				}
			}
			var clipRect = drawCommand.clipRect;
			if(clipRect != null) {
				width -= clipRect.x | 0;
				height -= clipRect.y | 0;
				width = Math.min(width,clipRect.width) | 0;
				height = Math.min(height,clipRect.height) | 0;
			}
			if(width > 0 && height > 0) {
				var shader = drawCommand.shader;
				shader.bind();
				var triangles = drawCommand.triangleCount;
				var floatsPerTriangle = shader.get_floatsPerVertex() * 3;
				this.buffer.ensureSize(triangles,floatsPerTriangle);
				var x0 = -x;
				var x1 = -x + haxepunk_HXP.windowWidth;
				var y0 = -y + haxepunk_HXP.windowHeight;
				var y1 = -y;
				var sx = 1.0 / (x1 - x0);
				var sy = 1.0 / (y1 - y0);
				haxepunk_graphics_hardware_HardwareRenderer._ortho[0] = 2.0 * sx;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[5] = 2.0 * sy;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[10] = 0.001;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[12] = -(x0 + x1) * sx;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[13] = -(y0 + y1) * sy;
				haxepunk_graphics_hardware_HardwareRenderer._ortho[14] = -0.;
				if(!shader.uniformIndices.exists("uMatrix")) {
					shader.uniformIndices.set("uMatrix",lime_graphics_opengl_GL.context.__context.getUniformLocation(shader.glProgram,"uMatrix"));
				}
				var location = shader.uniformIndices.get("uMatrix");
				lime_graphics_opengl_GL.context.__context.uniformMatrix4fv(location,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(haxepunk_graphics_hardware_HardwareRenderer._ortho),64));
				lime_graphics_opengl_GL.context.__context.getError();
				var texture = drawCommand.texture;
				if(texture != null) {
					haxepunk_graphics_hardware_opengl_GLUtils.bindTexture(texture,drawCommand.smooth);
				}
				lime_graphics_opengl_GL.context.__context.getError();
				shader.prepare(drawCommand,this.buffer);
				lime_graphics_opengl_GL.context.__context.getError();
				switch(drawCommand.blend) {
				case 0:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
					break;
				case 1:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFunc(1,771);
					break;
				case 9:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(774,771,0,1);
					break;
				case 12:
					lime_graphics_opengl_GL.context.__context.blendEquation(32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,769,0,1);
					break;
				case 14:
					lime_graphics_opengl_GL.context.__context.blendEquationSeparate(32779,32774);
					lime_graphics_opengl_GL.context.__context.blendFuncSeparate(1,1,0,1);
					break;
				}
				if(clipRect != null) {
					x += Math.max(clipRect.x,0) | 0;
					y += Math.max(clipRect.y,0) | 0;
				}
				lime_graphics_opengl_GL.context.__context.scissor(x,haxepunk_HXP.windowHeight - y - height,width,height);
				lime_graphics_opengl_GL.context.__context.enable(3089);
				lime_graphics_opengl_GL.context.__context.drawArrays(4,0,triangles * 3);
				lime_graphics_opengl_GL.context.__context.getError();
				lime_graphics_opengl_GL.context.__context.disable(3089);
				lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
				shader.unbind();
				lime_graphics_opengl_GL.context.__context.getError();
			}
		}
	}
	,startScene: function(scene) {
		haxepunk_graphics_hardware_HardwareRenderer._tracking = scene.trackDrawCalls;
		if(this.buffer == null || this.buffer.glBuffer == null) {
			if(this.buffer == null) {
				this.buffer = new haxepunk_graphics_hardware_RenderBuffer();
			}
			if(this.fb == null) {
				this.fb = new haxepunk_graphics_hardware_FrameBuffer();
				this.backFb = new haxepunk_graphics_hardware_FrameBuffer();
			}
		}
		var postProcess = scene.shaders;
		if(postProcess != null && postProcess.length > 0) {
			this.fb.bindFrameBuffer();
		} else {
			lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
		}
		this.x = haxepunk_HXP.screen.x + Math.max(scene.x,0) | 0;
		this.y = haxepunk_HXP.screen.y + Math.max(scene.y,0) | 0;
		this.width = (scene._width == null ? haxepunk_HXP.screen.width - scene.x : scene._width) | 0;
		this.height = (scene._height == null ? haxepunk_HXP.screen.height - scene.y : scene._height) | 0;
	}
	,flushScene: function(scene) {
		var postProcess = scene.shaders;
		if(postProcess != null) {
			var _g1 = 0;
			var _g = postProcess.length;
			while(_g1 < _g) {
				var i = _g1++;
				var shader = postProcess[i];
				var renderTexture = this.fb.texture;
				if(i == postProcess.length - 1) {
					lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
				} else {
					var oldFb = this.fb;
					this.fb = this.backFb;
					this.backFb = oldFb;
					this.fb.bindFrameBuffer();
				}
				shader.bind();
				lime_graphics_opengl_GL.context.__context.activeTexture(33984);
				lime_graphics_opengl_GL.context.__context.bindTexture(3553,renderTexture);
				lime_graphics_opengl_GL.context.__context.blendEquation(32774);
				lime_graphics_opengl_GL.context.__context.blendFunc(1,771);
				lime_graphics_opengl_GL.context.__context.drawArrays(4,0,6);
				lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
				lime_graphics_opengl_GL.context.__context.bindTexture(3553,null);
				shader.unbind();
				lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,null);
			}
		}
	}
	,startFrame: function() {
		haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
		haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
		lime_graphics_opengl_GL.context.__context.bindFramebuffer(36160,this.defaultFramebuffer);
	}
	,x: null
	,y: null
	,width: null
	,height: null
	,__class__: haxepunk_graphics_hardware_HardwareRenderer
};
var haxepunk_graphics_hardware_RenderBuffer = function() {
	this.init();
};
$hxClasses["haxepunk.graphics.hardware.RenderBuffer"] = haxepunk_graphics_hardware_RenderBuffer;
haxepunk_graphics_hardware_RenderBuffer.__name__ = ["haxepunk","graphics","hardware","RenderBuffer"];
haxepunk_graphics_hardware_RenderBuffer.prototype = {
	buffer: null
	,glBuffer: null
	,intArray: null
	,byteOffset: null
	,init: function() {
		this.glBuffer = lime_graphics_opengl_GL.context.__context.createBuffer();
	}
	,ensureSize: function(triangles,floatsPerTriangle) {
		if(this.glBuffer == null) {
			this.buffer = null;
			this.init();
		}
		var bufferLength = this.buffer == null ? 0 : this.buffer.length;
		if(bufferLength < triangles * floatsPerTriangle) {
			var elements = Math.max(bufferLength * 2 / floatsPerTriangle | 0,triangles) * floatsPerTriangle | 0;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else {
				this1 = null;
			}
			this.buffer = this1;
			this.intArray = new Int32Array(this.buffer.buffer);
			this["use"]();
			lime_graphics_opengl_GL.context.__context.bufferData(34962,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.buffer),this.buffer.length * 4),35048);
		}
	}
	,'use': function() {
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,this.glBuffer);
		this.byteOffset = 0;
	}
	,prepareVertexOnly: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			this.buffer[this.byteOffset] = current.tx1;
			this.buffer[this.byteOffset + 1] = current.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.tx2;
			this.buffer[this.byteOffset + 1] = current.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.tx3;
			this.buffer[this.byteOffset + 1] = current.ty3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexAndColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var a = current.alpha;
			triangleColor = current.color & 16777215 | (a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24);
			this.buffer[this.byteOffset] = current.tx1;
			this.buffer[this.byteOffset + 1] = current.ty1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = current.tx2;
			this.buffer[this.byteOffset + 1] = current.ty2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = current.tx3;
			this.buffer[this.byteOffset + 1] = current.ty3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,prepareVertexAndUV: function(drawCommand) {
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			this.buffer[this.byteOffset] = current.tx1;
			this.buffer[this.byteOffset + 1] = current.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx1;
			this.buffer[this.byteOffset + 1] = current.uvy1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.tx2;
			this.buffer[this.byteOffset + 1] = current.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx2;
			this.buffer[this.byteOffset + 1] = current.uvy2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.tx3;
			this.buffer[this.byteOffset + 1] = current.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx3;
			this.buffer[this.byteOffset + 1] = current.uvy3;
			this.byteOffset += 2;
		}
	}
	,prepareVertexUVandColor: function(drawCommand) {
		var triangleColor = 0;
		drawCommand._iterator.triangle = drawCommand.data;
		var _g = drawCommand._iterator;
		while(_g.triangle != null) {
			var current = _g.triangle;
			_g.triangle = _g.triangle._next;
			var a = current.alpha;
			triangleColor = current.color & 16777215 | (a <= 0 ? 0 : a >= 1 ? -16777216 : (255 * a | 0) << 24);
			this.buffer[this.byteOffset] = current.tx1;
			this.buffer[this.byteOffset + 1] = current.ty1;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx1;
			this.buffer[this.byteOffset + 1] = current.uvy1;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = current.tx2;
			this.buffer[this.byteOffset + 1] = current.ty2;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx2;
			this.buffer[this.byteOffset + 1] = current.uvy2;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
			this.buffer[this.byteOffset] = current.tx3;
			this.buffer[this.byteOffset + 1] = current.ty3;
			this.byteOffset += 2;
			this.buffer[this.byteOffset] = current.uvx3;
			this.buffer[this.byteOffset + 1] = current.uvy3;
			this.byteOffset += 2;
			this.intArray[this.byteOffset] = triangleColor;
			this.byteOffset += 1;
		}
	}
	,__class__: haxepunk_graphics_hardware_RenderBuffer
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,__class__: openfl_geom_Point
};
var haxepunk_graphics_hardware__$Texture_Texture_$Impl_$ = {};
$hxClasses["haxepunk.graphics.hardware._Texture.Texture_Impl_"] = haxepunk_graphics_hardware__$Texture_Texture_$Impl_$;
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.__name__ = ["haxepunk","graphics","hardware","_Texture","Texture_Impl_"];
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width"};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.get_width = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.width;
	}
};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.get_height = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.height;
	}
};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.create = function(width,height,transparent,color) {
	if(color == null) {
		color = 0;
	}
	if(transparent == null) {
		transparent = false;
	}
	return new openfl_display_BitmapData(width,height,transparent,color);
};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.removeColor = function(this1,color) {
	this1.threshold(this1,this1.rect,haxepunk_graphics_hardware__$Texture_Texture_$Impl_$._zero,"==",color,0,-1,true);
};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.clearColor = function(this1,color) {
	this1.fillRect(this1.rect,color);
};
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$.drawCircle = function(this1,x,y,radius) {
	var sprite = new openfl_display_Sprite();
	sprite.get_graphics().clear();
	sprite.get_graphics().beginFill(16777215);
	sprite.get_graphics().drawCircle(x,y,radius);
	this1.draw(sprite);
};
var haxepunk_graphics_hardware_opengl_GLInternal = function() { };
$hxClasses["haxepunk.graphics.hardware.opengl.GLInternal"] = haxepunk_graphics_hardware_opengl_GLInternal;
haxepunk_graphics_hardware_opengl_GLInternal.__name__ = ["haxepunk","graphics","hardware","opengl","GLInternal"];
haxepunk_graphics_hardware_opengl_GLInternal.bindTexture = function(texture) {
	var texture1 = texture.getTexture((js_Boot.__cast(haxepunk_HXP.app , openfl_display_Sprite)).stage.__renderer.renderSession.gl);
	lime_graphics_opengl_GL.context.__context.bindTexture(3553,texture1);
};
var haxepunk_graphics_hardware_opengl_GLUtils = function() { };
$hxClasses["haxepunk.graphics.hardware.opengl.GLUtils"] = haxepunk_graphics_hardware_opengl_GLUtils;
haxepunk_graphics_hardware_opengl_GLUtils.__name__ = ["haxepunk","graphics","hardware","opengl","GLUtils"];
haxepunk_graphics_hardware_opengl_GLUtils.bindTexture = function(texture,smooth,index) {
	if(index == null) {
		index = 33984;
	}
	lime_graphics_opengl_GL.context.__context.activeTexture(index);
	haxepunk_graphics_hardware_opengl_GLInternal.bindTexture(texture);
	if(smooth) {
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9729);
	} else {
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10241,9729);
		lime_graphics_opengl_GL.context.__context.texParameteri(3553,10240,9728);
	}
	lime_graphics_opengl_GL.context.__context.texParameteri(3553,10242,33071);
	lime_graphics_opengl_GL.context.__context.texParameteri(3553,10243,33071);
};
var haxepunk_graphics_shader_ColorShader = function(fragment) {
	haxepunk_graphics_shader_Shader.call(this,haxepunk_graphics_shader_ColorShader.VERTEX_SHADER,fragment == null ? haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER : fragment);
	var _this = this.position;
	_this.name = "aPosition";
	_this.rebind();
	var _this1 = this.color;
	_this1.name = "aColor";
	_this1.rebind();
};
$hxClasses["haxepunk.graphics.shader.ColorShader"] = haxepunk_graphics_shader_ColorShader;
haxepunk_graphics_shader_ColorShader.__name__ = ["haxepunk","graphics","shader","ColorShader"];
haxepunk_graphics_shader_ColorShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_ColorShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	__class__: haxepunk_graphics_shader_ColorShader
});
var haxepunk_graphics_shader_SceneShader = function() { };
$hxClasses["haxepunk.graphics.shader.SceneShader"] = haxepunk_graphics_shader_SceneShader;
haxepunk_graphics_shader_SceneShader.__name__ = ["haxepunk","graphics","shader","SceneShader"];
haxepunk_graphics_shader_SceneShader.__super__ = haxepunk_graphics_shader_Shader;
haxepunk_graphics_shader_SceneShader.prototype = $extend(haxepunk_graphics_shader_Shader.prototype,{
	createBuffer: function() {
		haxepunk_graphics_shader_SceneShader.buffer = lime_graphics_opengl_GL.context.__context.createBuffer();
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		var array = haxepunk_graphics_shader_SceneShader._vertices;
		var this1;
		if(array != null) {
			this1 = new Float32Array(array);
		} else {
			this1 = null;
		}
		var v = this1;
		lime_graphics_opengl_GL.context.__context.bufferData(34962,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(v),v.length * 4),35044);
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,null);
	}
	,build: function() {
		haxepunk_graphics_shader_Shader.prototype.build.call(this);
		if(!this.uniformIndices.exists("uImage0")) {
			this.uniformIndices.set("uImage0",lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,"uImage0"));
		}
		this.image = this.uniformIndices.get("uImage0");
		if(!this.uniformIndices.exists("uResolution")) {
			this.uniformIndices.set("uResolution",lime_graphics_opengl_GL.context.__context.getUniformLocation(this.glProgram,"uResolution"));
		}
		this.resolution = this.uniformIndices.get("uResolution");
	}
	,bind: function() {
		haxepunk_graphics_shader_Shader.prototype.bind.call(this);
		if(haxepunk_graphics_shader_SceneShader.buffer == null) {
			this.createBuffer();
		}
		lime_graphics_opengl_GL.context.__context.bindBuffer(34962,haxepunk_graphics_shader_SceneShader.buffer);
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(this.position.index,2,5126,false,16,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		lime_graphics_opengl_GL.context.__context.vertexAttribPointer(this.texCoord.index,2,5126,false,16,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(8)));
		lime_graphics_opengl_GL.context.__context.uniform1i(this.image,0);
		lime_graphics_opengl_GL.context.__context.uniform2f(this.resolution,haxepunk_HXP.screen.width,haxepunk_HXP.screen.height);
	}
	,image: null
	,resolution: null
	,__class__: haxepunk_graphics_shader_SceneShader
});
var haxepunk_graphics_text_IBitmapFont = function() { };
$hxClasses["haxepunk.graphics.text.IBitmapFont"] = haxepunk_graphics_text_IBitmapFont;
haxepunk_graphics_text_IBitmapFont.__name__ = ["haxepunk","graphics","text","IBitmapFont"];
haxepunk_graphics_text_IBitmapFont.prototype = {
	getChar: null
	,getLineHeight: null
	,__class__: haxepunk_graphics_text_IBitmapFont
};
var haxepunk_graphics_text_BitmapFont = function(fontName) {
	this.atlases = [];
	this.fontName = fontName;
};
$hxClasses["haxepunk.graphics.text.BitmapFont"] = haxepunk_graphics_text_BitmapFont;
haxepunk_graphics_text_BitmapFont.__name__ = ["haxepunk","graphics","text","BitmapFont"];
haxepunk_graphics_text_BitmapFont.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFont.prototype = {
	fontName: null
	,atlases: null
	,addSize: function(atlas) {
		var _g1 = 0;
		var _g = this.atlases.length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(i == this.atlases.length || this.atlases[i].fontSize > atlas.fontSize) {
				this.atlases.splice(i,0,atlas);
			}
		}
	}
	,getChar: function(string,size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		var atlas1 = best;
		var glyph = atlas1.glyphData.exists(string) ? atlas1.glyphData.get(string) : atlas1.glyphData.get(" ");
		glyph.scale = size / atlas1.fontSize;
		return glyph;
	}
	,getLineHeight: function(size) {
		var best = null;
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) {
			var atlas = _g1[_g];
			++_g;
			best = atlas;
			if(atlas.fontSize > size) {
				break;
			}
		}
		return best.getLineHeight(size);
	}
	,__class__: haxepunk_graphics_text_BitmapFont
};
var haxepunk_graphics_text_BitmapFontAtlas = function(source) {
	this.fontSize = 0;
	this.lineHeight = 0;
	haxepunk_graphics_atlas_TextureAtlas.call(this,source);
	this.glyphData = new haxe_ds_StringMap();
};
$hxClasses["haxepunk.graphics.text.BitmapFontAtlas"] = haxepunk_graphics_text_BitmapFontAtlas;
haxepunk_graphics_text_BitmapFontAtlas.__name__ = ["haxepunk","graphics","text","BitmapFontAtlas"];
haxepunk_graphics_text_BitmapFontAtlas.__interfaces__ = [haxepunk_graphics_text_IBitmapFont];
haxepunk_graphics_text_BitmapFontAtlas.getFont = function(fontName,format,extraParams) {
	if(haxepunk_graphics_text_BitmapFontAtlas._fonts == null) {
		haxepunk_graphics_text_BitmapFontAtlas._fonts = new haxe_ds_StringMap();
	}
	if(format == null) {
		format = 1;
	}
	var _this = haxepunk_graphics_text_BitmapFontAtlas._fonts;
	if(!(__map_reserved[fontName] != null ? _this.existsReserved(fontName) : _this.h.hasOwnProperty(fontName))) {
		var this1 = haxepunk_graphics_text_BitmapFontAtlas._fonts;
		var v;
		switch(format) {
		case 1:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont(fontName);
			break;
		case 2:
			v = haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont(fontName,extraParams);
			break;
		}
		var _this1 = this1;
		if(__map_reserved[fontName] != null) {
			_this1.setReserved(fontName,v);
		} else {
			_this1.h[fontName] = v;
		}
	}
	var _this2 = haxepunk_graphics_text_BitmapFontAtlas._fonts;
	if(__map_reserved[fontName] != null) {
		return _this2.getReserved(fontName);
	} else {
		return _this2.h[fontName];
	}
};
haxepunk_graphics_text_BitmapFontAtlas.loadXMLFont = function(file) {
	var xmlText = haxepunk_assets_AssetLoader.getText(file);
	if(xmlText == null) {
		throw new js__$Boot_HaxeError("BitmapFontAtlas: \"" + file + "\" not found!");
	}
	var firstElement = Xml.parse(xmlText).firstElement();
	if(firstElement == null) {
		throw new js__$Boot_HaxeError("BitmapFontAtlas: \"" + file + "\" contains invalid XML!");
	}
	var fast = new haxe_xml_Fast(firstElement);
	var imageFile = new haxe_io_Path(file).dir + "/" + fast.node.resolve("pages").node.resolve("page").att.resolve("file");
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(haxepunk_assets_AssetCache.global.getAtlasData(imageFile,false));
	atlas.lineHeight = Std.parseInt(fast.node.resolve("common").att.resolve("lineHeight"));
	atlas.fontSize = Std.parseInt(fast.node.resolve("info").att.resolve("size"));
	var _g_head = fast.node.resolve("chars").nodes.resolve("char").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var tmp = val.att.resolve("x");
		haxepunk_HXP.rect.x = Std.parseInt(tmp);
		var tmp1 = val.att.resolve("y");
		haxepunk_HXP.rect.y = Std.parseInt(tmp1);
		var tmp2 = val.att.resolve("width");
		haxepunk_HXP.rect.width = Std.parseInt(tmp2);
		var tmp3 = val.att.resolve("height");
		haxepunk_HXP.rect.height = Std.parseInt(tmp3);
		var glyph = null;
		if(val.has.resolve("letter")) {
			glyph = val.att.resolve("letter");
		} else if(val.has.resolve("id")) {
			var unicode = Std.parseInt(val.att.resolve("id"));
			var u = new haxe_Utf8(4);
			u.__b += String.fromCharCode(unicode);
			glyph = u.__b;
		}
		if(glyph == null) {
			throw new js__$Boot_HaxeError("\"" + file + "\" is not a valid .fnt file!");
		}
		switch(glyph) {
		case "&amp;":
			glyph = "&";
			break;
		case "&gt;":
			glyph = ">";
			break;
		case "&lt;":
			glyph = "<";
			break;
		case "&quot;":
			glyph = "\"";
			break;
		case "space":
			glyph = " ";
			break;
		default:
			glyph = glyph;
		}
		var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
		var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : val.has.resolve("xoffset") ? Std.parseInt(val.att.resolve("xoffset")) : 0, yOffset : val.has.resolve("yoffset") ? Std.parseInt(val.att.resolve("yoffset")) : 0, xAdvance : val.has.resolve("xadvance") ? Std.parseInt(val.att.resolve("xadvance")) : 0, scale : 1, region : region};
		var _this = atlas.glyphData;
		if(__map_reserved[glyph] != null) {
			_this.setReserved(glyph,gd);
		} else {
			_this.h[glyph] = gd;
		}
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.loadXNAFont = function(asset,options) {
	var atlas = new haxepunk_graphics_text_BitmapFontAtlas(haxepunk_assets_AssetCache.global.getAtlasData(asset,false));
	var texture = null;
	try {
		texture = atlas._data.texture;
	} catch( _ ) {
		haxe_CallStack.lastException = _;
	}
	if(texture == null) {
		throw new js__$Boot_HaxeError("Invalid XNA font asset \"" + asset + "\": no Texture found.");
	}
	if(options == null) {
		options = { };
	}
	if(!Object.prototype.hasOwnProperty.call(options,"letters")) {
		options.letters = haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS;
	}
	if(!Object.prototype.hasOwnProperty.call(options,"glyphBGColor")) {
		options.glyphBGColor = -14671840;
	}
	var glyphString = options.letters;
	var globalBGColor = texture.getPixel(0,0);
	var cy = 0;
	var cx;
	var letterIdx = 0;
	var glyph;
	var alphabetLength = glyphString.length;
	while(cy < (texture == null ? 0 : texture.height) && letterIdx < alphabetLength) {
		var rowHeight = 0;
		cx = 0;
		while(cx < (texture == null ? 0 : texture.width) && letterIdx < alphabetLength) {
			if((texture.getPixel(cx,cy) | 0) != globalBGColor) {
				var gx = cx;
				var gy = cy;
				while((texture.getPixel(gx,cy) | 0) != globalBGColor) ++gx;
				while((texture.getPixel(cx,gy) | 0) != globalBGColor) ++gy;
				var gw = gx - cx;
				var gh = gy - cy;
				glyph = glyphString.charAt(letterIdx);
				haxepunk_HXP.rect.setTo(cx,cy,gw,gh);
				var region = atlas.defineRegion(glyph,haxepunk_HXP.rect);
				var gd = { glyph : glyph, rect : haxepunk_HXP.rect.clone(), xOffset : 0, yOffset : 0, xAdvance : gw, scale : 1, region : region};
				var _this = atlas.glyphData;
				if(__map_reserved[glyph] != null) {
					_this.setReserved(glyph,gd);
				} else {
					_this.h[glyph] = gd;
				}
				if(gh > rowHeight) {
					rowHeight = gh;
				}
				if(gh > atlas.fontSize) {
					atlas.fontSize = gh;
				}
				cx += gw;
				++letterIdx;
			}
			++cx;
		}
		cy += rowHeight + 1;
	}
	atlas.lineHeight = atlas.fontSize;
	var bgColor32 = texture.getPixel(0,0);
	texture.threshold(texture,texture.rect,haxepunk_graphics_hardware__$Texture_Texture_$Impl_$._zero,"==",bgColor32,0,-1,true);
	if(options.glyphBGColor != null) {
		texture.threshold(texture,texture.rect,haxepunk_graphics_hardware__$Texture_Texture_$Impl_$._zero,"==",options.glyphBGColor,0,-1,true);
	}
	return atlas;
};
haxepunk_graphics_text_BitmapFontAtlas.__super__ = haxepunk_graphics_atlas_TextureAtlas;
haxepunk_graphics_text_BitmapFontAtlas.prototype = $extend(haxepunk_graphics_atlas_TextureAtlas.prototype,{
	lineHeight: null
	,fontSize: null
	,glyphData: null
	,getChar: function(name,size) {
		var glyph;
		var _this = this.glyphData;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.glyphData;
			if(__map_reserved[name] != null) {
				glyph = _this1.getReserved(name);
			} else {
				glyph = _this1.h[name];
			}
		} else {
			var _this2 = this.glyphData;
			if(__map_reserved[" "] != null) {
				glyph = _this2.getReserved(" ");
			} else {
				glyph = _this2.h[" "];
			}
		}
		glyph.scale = size / this.fontSize;
		return glyph;
	}
	,getLineHeight: function(size) {
		return this.lineHeight * size / this.fontSize;
	}
	,__class__: haxepunk_graphics_text_BitmapFontAtlas
});
var haxepunk_input_Gamepad = function(id) {
	this._allAxes = [];
	this._axisMap = new haxe_ds_IntMap();
	this._axisControl = new haxe_ds_StringMap();
	this._allButtons = [];
	this._buttonMap = new haxe_ds_IntMap();
	this._control = new haxe_ds_StringMap();
	this.lastAxis = new haxe_ds_IntMap();
	this.axis = new haxe_ds_IntMap();
	this.buttons = new haxe_ds_IntMap();
	this.connected = true;
	this.id = 0;
	this.id = id;
};
$hxClasses["haxepunk.input.Gamepad"] = haxepunk_input_Gamepad;
haxepunk_input_Gamepad.__name__ = ["haxepunk","input","Gamepad"];
haxepunk_input_Gamepad.gamepad = function(id) {
	return haxepunk_input_Gamepad.gamepads.h[id];
};
haxepunk_input_Gamepad.prototype = {
	id: null
	,connected: null
	,buttons: null
	,axis: null
	,lastAxis: null
	,update: function() {
	}
	,postUpdate: function() {
		var _g = 0;
		var _g1 = this._allButtons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var _g2 = this.buttons.get(button);
			if(_g2 != null) {
				switch(_g2) {
				case -1:
					this.buttons.set(button,0);
					break;
				case 2:
					this.buttons.set(button,1);
					break;
				default:
				}
			}
		}
		var _g3 = 0;
		var _g11 = this._allAxes;
		while(_g3 < _g11.length) {
			var axis = _g11[_g3];
			++_g3;
			this.lastAxis.h[axis] = this.axis.h[axis];
		}
	}
	,checkInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.check(button)) {
					return true;
				}
			}
		}
		var _this2 = this._axisControl;
		if(__map_reserved[input] != null ? _this2.existsReserved(input) : _this2.h.hasOwnProperty(input)) {
			var _g2 = 0;
			var _this3 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this3.getReserved(input) : _this3.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue) {
					return true;
				}
			}
		}
		return false;
	}
	,pressedInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.pressed(button)) {
					return true;
				}
			}
		}
		var _this2 = this._axisControl;
		if(__map_reserved[input] != null ? _this2.existsReserved(input) : _this2.h.hasOwnProperty(input)) {
			var _g2 = 0;
			var _this3 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this3.getReserved(input) : _this3.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.pressedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,releasedInput: function(input) {
		var _this = this._control;
		if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
			var _g = 0;
			var _this1 = this._control;
			var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
			while(_g < _g1.length) {
				var button = _g1[_g];
				++_g;
				if(this.released(button)) {
					return true;
				}
			}
		}
		var _this2 = this._axisControl;
		if(__map_reserved[input] != null ? _this2.existsReserved(input) : _this2.h.hasOwnProperty(input)) {
			var _g2 = 0;
			var _this3 = this._axisControl;
			var _g11 = __map_reserved[input] != null ? _this3.getReserved(input) : _this3.h[input];
			while(_g2 < _g11.length) {
				var axisDef = _g11[_g2];
				++_g2;
				if(this.releasedAxis(axisDef)) {
					return true;
				}
			}
		}
		return false;
	}
	,pressed: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == 2;
		} else {
			return false;
		}
	}
	,released: function(button) {
		if(this.buttons.h.hasOwnProperty(button)) {
			return this.buttons.h[button] == -1;
		} else {
			return false;
		}
	}
	,check: function(button) {
		if(this.buttons.h.hasOwnProperty(button) && this.buttons.h[button] != 0) {
			return this.buttons.h[button] != -1;
		} else {
			return false;
		}
	}
	,pressedAxis: function(axisDef) {
		if(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue) {
			return !(this.lastAxis.exists(axisDef.axis) && this.lastAxis.get(axisDef.axis) >= axisDef.minValue && this.lastAxis.get(axisDef.axis) <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,releasedAxis: function(axisDef) {
		if(this.lastAxis.exists(axisDef.axis) && this.lastAxis.get(axisDef.axis) >= axisDef.minValue && this.lastAxis.get(axisDef.axis) <= axisDef.maxValue) {
			return !(this.axis.exists(axisDef.axis) && this.axis.get(axisDef.axis) >= axisDef.minValue && this.axis.get(axisDef.axis) <= axisDef.maxValue);
		} else {
			return false;
		}
	}
	,onButtonUp: function(id) {
		this.buttons.h[id] = -1;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(inputType);
			}
		}
	}
	,onButtonDown: function(id) {
		if(!this.buttons.h.hasOwnProperty(id)) {
			this._allButtons.push(id);
		}
		this.buttons.h[id] = 2;
		if(this._buttonMap.h.hasOwnProperty(id)) {
			var _g = 0;
			var _g1 = this._buttonMap.h[id];
			while(_g < _g1.length) {
				var inputType = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(inputType);
			}
		}
	}
	,onAxisMove: function(axis,v) {
		if(Math.abs(v) < haxepunk_input_Gamepad.deadZone) {
			v = 0;
		}
		if(!this.axis.h.hasOwnProperty(axis)) {
			this._allAxes.push(axis);
		}
		this.axis.h[axis] = v;
		if(this._axisMap.h.hasOwnProperty(axis)) {
			var _g = 0;
			var _g1 = this._axisMap.h[axis];
			while(_g < _g1.length) {
				var axisDef = _g1[_g];
				++_g;
				if(v >= axisDef.minValue && v <= axisDef.maxValue) {
					haxepunk_input_Input.triggerPress(axisDef.input);
				} else if(this.lastAxis.h[axis] >= axisDef.minValue && this.lastAxis.h[axis] <= axisDef.maxValue) {
					haxepunk_input_Input.triggerRelease(axisDef.input);
				}
			}
		}
	}
	,_control: null
	,_buttonMap: null
	,_allButtons: null
	,_axisControl: null
	,_axisMap: null
	,_allAxes: null
	,__class__: haxepunk_input_Gamepad
};
var haxepunk_input_GestureType = function() {
	this.released = false;
	this.pressed = false;
	this.active = false;
	this.time = 0;
	this.magnitude = 0;
	this.y2 = 0;
	this.x2 = 0;
	this.y = 0;
	this.x = 0;
	this.reset();
};
$hxClasses["haxepunk.input.GestureType"] = haxepunk_input_GestureType;
haxepunk_input_GestureType.__name__ = ["haxepunk","input","GestureType"];
haxepunk_input_GestureType.prototype = {
	x: null
	,y: null
	,x2: null
	,y2: null
	,magnitude: null
	,time: null
	,active: null
	,pressed: null
	,released: null
	,reset: function() {
		this.x = this.y = this.x2 = this.y2 = this.time = 0;
		this.active = this.pressed = this.released = false;
	}
	,start: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.active = this.pressed = true;
		this.x = x;
		this.y = y;
		this.x2 = this.y2 = this.magnitude = 0;
		this.time = 0;
	}
	,release: function() {
		this.released = true;
	}
	,update: function() {
		if(this.pressed) {
			this.pressed = false;
		} else if(this.released) {
			this.reset();
		} else if(this.active) {
			this.time += haxepunk_HXP.elapsed;
		}
	}
	,__class__: haxepunk_input_GestureType
};
var haxepunk_input__$Gesture_Gesture_$Impl_$ = {};
$hxClasses["haxepunk.input._Gesture.Gesture_Impl_"] = haxepunk_input__$Gesture_Gesture_$Impl_$;
haxepunk_input__$Gesture_Gesture_$Impl_$.__name__ = ["haxepunk","input","_Gesture","Gesture_Impl_"];
haxepunk_input__$Gesture_Gesture_$Impl_$.check = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		return false;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active;
};
haxepunk_input__$Gesture_Gesture_$Impl_$.get = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(gestureType)) {
		return null;
	}
	return haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType];
};
haxepunk_input__$Gesture_Gesture_$Impl_$.start = function(gestureType,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].start(x,y);
	}
};
haxepunk_input__$Gesture_Gesture_$Impl_$.finish = function(gestureType) {
	if(!haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var this1 = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures;
		var v = new haxepunk_input_GestureType();
		this1.h[gestureType] = v;
	}
	haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].release();
};
haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll = function() {
	var gesture = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while(gesture.hasNext()) {
		var gesture1 = gesture.next();
		if(gesture1.active) {
			gesture1.release();
		}
	}
};
haxepunk_input__$Gesture_Gesture_$Impl_$.update = function() {
	var gesture = haxepunk_input__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while(gesture.hasNext()) gesture.next().update();
	var touches = haxepunk_input_Touch._touches;
	var touchOrder = haxepunk_input_Touch._touchOrder;
	var touchCount = 0;
	var _g = 0;
	while(_g < touchOrder.length) {
		var touch = touchOrder[_g];
		++_g;
		if(touches.h.hasOwnProperty(touch)) {
			if(touches.h[touch].time == 0 || !touches.h[touch].released) {
				++touchCount;
			}
		} else {
			HxOverrides.remove(touchOrder,touch);
		}
	}
	if(haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap > 0) {
		haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = Math.max(0,haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap - haxepunk_HXP.elapsed / haxepunk_input__$Gesture_Gesture_$Impl_$.doubleTapTime);
	}
	switch(haxepunk_input__$Gesture_Gesture_$Impl_$.mode) {
	case 0:
		if(touchCount > 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = touchCount == 1 ? 1 : 3;
		}
		break;
	case 1:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
			var touch1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t = touch1.time < haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime ? 1 : 3;
			if(t == 1 && haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap > 0) {
				t = 2;
			}
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(t)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(t,touch1.x,touch1.y);
				if(t == 1) {
					haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = 1;
				}
			}
		} else if(touchCount == 1) {
			var touch2 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x1 = touch2.startX;
			var y1 = touch2.startY;
			var x2 = touch2.x;
			var y2 = touch2.y;
			if(Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)) > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 2;
			} else if(touch2.time >= haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime && !haxepunk_input__$Gesture_Gesture_$Impl_$.check(3)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(3,touch2.x,touch2.y);
			}
		} else if(touchCount > 1) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 3;
		}
		break;
	case 2:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
		} else {
			var touch3 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var x11 = touch3.startX;
			var y11 = touch3.startY;
			var x21 = touch3.x;
			var y21 = touch3.y;
			var dist = Math.sqrt((x21 - x11) * (x21 - x11) + (y21 - y11) * (y21 - y11));
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(4)) {
				haxepunk_input__$Gesture_Gesture_$Impl_$.start(4,touch3.startX,touch3.startY);
			}
			var g = haxepunk_input__$Gesture_Gesture_$Impl_$.get(4);
			g.x2 = touch3.x;
			g.y2 = touch3.y;
			g.magnitude = dist;
		}
		if(touchCount > 1) {
			var touch4 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			haxepunk_input__$Gesture_Gesture_$Impl_$.start(6,touch4.x,touch4.y);
		} else if(haxepunk_input__$Gesture_Gesture_$Impl_$.check(6)) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.finish(6);
		}
		break;
	case 3:
		if(touchCount < 2) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = touchCount == 0 ? 0 : 5;
			if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(5)) {
				var t1 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
				var t2 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
				if(t2 != null) {
					haxepunk_input__$Gesture_Gesture_$Impl_$.start(6,(t1.startX - t2.startX) / 2,(t1.startY - t2.startY) / 2);
				}
			}
			haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll();
		} else {
			var t11 = 0 >= touchOrder.length ? null : touches.h[touchOrder[0]];
			var t21 = 1 >= touchOrder.length ? null : touches.h[touchOrder[1]];
			if(t11 != null && t21 != null) {
				var x12 = t11.startX;
				var y12 = t11.startY;
				var x22 = t11.x;
				var y22 = t11.y;
				var x13 = t21.startX;
				var y13 = t21.startY;
				var x23 = t21.x;
				var y23 = t21.y;
				if(Math.sqrt((x22 - x12) * (x22 - x12) + (y22 - y12) * (y22 - y12)) > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone && Math.sqrt((x23 - x13) * (x23 - x13) + (y23 - y13) * (y23 - y13)) > haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone) {
					if(!haxepunk_input__$Gesture_Gesture_$Impl_$.check(5)) {
						haxepunk_input__$Gesture_Gesture_$Impl_$.start(5,(t11.startX - t21.startX) / 2,(t11.startY - t21.startY) / 2);
					}
					var x14 = t11.startX;
					var y14 = t11.startY;
					var x24 = t21.startX;
					var y24 = t21.startY;
					var inner = Math.sqrt((x24 - x14) * (x24 - x14) + (y24 - y14) * (y24 - y14));
					var x15 = t11.x;
					var y15 = t11.y;
					var x25 = t21.x;
					var y25 = t21.y;
					var outer = Math.sqrt((x25 - x15) * (x25 - x15) + (y25 - y15) * (y25 - y15));
					haxepunk_input__$Gesture_Gesture_$Impl_$.get(5).magnitude = inner / outer;
				}
			}
		}
		break;
	default:
		if(touchCount == 0) {
			haxepunk_input__$Gesture_Gesture_$Impl_$.mode = 0;
		}
	}
	if(touchCount == 0) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.finishAll();
	}
};
var haxepunk_input__$Key_Key_$Impl_$ = {};
$hxClasses["haxepunk.input._Key.Key_Impl_"] = haxepunk_input__$Key_Key_$Impl_$;
haxepunk_input__$Key_Key_$Impl_$.__name__ = ["haxepunk","input","_Key","Key_Impl_"];
haxepunk_input__$Key_Key_$Impl_$.nameOfKey = function($char) {
	if($char == -1) {
		return "";
	} else if($char >= 65 && $char <= 90) {
		return String.fromCharCode($char);
	} else if($char >= 112 && $char <= 126) {
		return "F" + Std.string(($char | 0) - 111);
	} else if($char >= 96 && $char <= 105) {
		return "NUMPAD " + Std.string(($char | 0) - 96);
	} else {
		switch($char) {
		case 8:
			return "BACKSPACE";
		case 9:
			return "TAB";
		case 13:
			return "ENTER";
		case 16:
			return "SHIFT";
		case 17:
			return "CONTROL";
		case 20:
			return "CAPS LOCK";
		case 27:
			return "ESCAPE";
		case 32:
			return "SPACE";
		case 33:
			return "PAGE UP";
		case 34:
			return "PAGE DOWN";
		case 35:
			return "END";
		case 36:
			return "HOME";
		case 37:
			return "LEFT";
		case 38:
			return "UP";
		case 39:
			return "RIGHT";
		case 40:
			return "DOWN";
		case 45:
			return "INSERT";
		case 46:
			return "DELETE";
		case 106:
			return "NUMPAD MULTIPLY";
		case 107:
			return "NUMPAD ADD";
		case 108:
			return "NUMPAD ENTER";
		case 109:
			return "NUMPAD SUBTRACT";
		case 110:
			return "NUMPAD DECIMAL";
		case 111:
			return "NUMPAD DIVIDE";
		case 192:
			return "~";
		case 219:
			return "{";
		case 221:
			return "}";
		default:
			return String.fromCharCode($char);
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.define = function(input,keys) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			HxOverrides.remove(haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key],input);
		}
	}
	var _this2 = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null) {
		_this2.setReserved(input,keys);
	} else {
		_this2.h[input] = keys;
	}
	var _g2 = 0;
	while(_g2 < keys.length) {
		var key1 = keys[_g2];
		++_g2;
		if(!haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(key1)) {
			var this1 = haxepunk_input__$Key_Key_$Impl_$._keyMap;
			var v = [];
			this1.h[key1] = v;
		}
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key1].indexOf(input) < 0) {
			haxepunk_input__$Key_Key_$Impl_$._keyMap.h[key1].push(input);
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.checkInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0 || haxepunk_input__$Key_Key_$Impl_$._key.get(key)) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.pressedInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input__$Key_Key_$Impl_$._pressNum != 0 : haxepunk_input__$Key_Key_$Impl_$._press.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.releasedInput = function(input) {
	var _this = haxepunk_input__$Key_Key_$Impl_$._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _g = 0;
		var _this1 = haxepunk_input__$Key_Key_$Impl_$._control;
		var _g1 = __map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input];
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key < 0 ? haxepunk_input__$Key_Key_$Impl_$._releaseNum != 0 : haxepunk_input__$Key_Key_$Impl_$._release.indexOf(key) >= 0) {
				return true;
			}
		}
	}
	return false;
};
haxepunk_input__$Key_Key_$Impl_$.check = function(key) {
	if(!(key < 0 && haxepunk_input__$Key_Key_$Impl_$._keyNum > 0)) {
		return haxepunk_input__$Key_Key_$Impl_$._key.h[key];
	} else {
		return true;
	}
};
haxepunk_input__$Key_Key_$Impl_$.pressed = function(key) {
	if(key < 0) {
		return haxepunk_input__$Key_Key_$Impl_$._pressNum != 0;
	} else {
		return haxepunk_input__$Key_Key_$Impl_$._press.indexOf(key) >= 0;
	}
};
haxepunk_input__$Key_Key_$Impl_$.released = function(key) {
	if(key < 0) {
		return haxepunk_input__$Key_Key_$Impl_$._releaseNum != 0;
	} else {
		return haxepunk_input__$Key_Key_$Impl_$._release.indexOf(key) >= 0;
	}
};
haxepunk_input__$Key_Key_$Impl_$.update = function() {
};
haxepunk_input__$Key_Key_$Impl_$.postUpdate = function() {
	while(haxepunk_input__$Key_Key_$Impl_$._pressNum > 0) haxepunk_input__$Key_Key_$Impl_$._press[--haxepunk_input__$Key_Key_$Impl_$._pressNum] = -1;
	while(haxepunk_input__$Key_Key_$Impl_$._releaseNum > 0) haxepunk_input__$Key_Key_$Impl_$._release[--haxepunk_input__$Key_Key_$Impl_$._releaseNum] = -1;
};
haxepunk_input__$Key_Key_$Impl_$.onKeyDown = function(code,shift) {
	haxepunk_input__$Key_Key_$Impl_$.lastKey = code;
	if(code == 8) {
		haxepunk_input__$Key_Key_$Impl_$.keyString = HxOverrides.substr(haxepunk_input__$Key_Key_$Impl_$.keyString,0,haxepunk_input__$Key_Key_$Impl_$.keyString.length - 1);
	} else if(code > 47 && code < 58 || code > 64 && code < 91 || code == 32) {
		if(haxepunk_input__$Key_Key_$Impl_$.keyString.length > 100) {
			haxepunk_input__$Key_Key_$Impl_$.keyString = HxOverrides.substr(haxepunk_input__$Key_Key_$Impl_$.keyString,1,null);
		}
		var $char = String.fromCharCode(code);
		var tmp;
		tmp = haxepunk_input__$Key_Key_$Impl_$._key.get(20);
		if(shift != tmp) {
			$char = $char.toUpperCase();
		} else {
			$char = $char.toLowerCase();
		}
		haxepunk_input__$Key_Key_$Impl_$.keyString += $char;
	}
	if(!haxepunk_input__$Key_Key_$Impl_$._key.h[code]) {
		haxepunk_input__$Key_Key_$Impl_$._key.h[code] = true;
		haxepunk_input__$Key_Key_$Impl_$._keyNum++;
		haxepunk_input__$Key_Key_$Impl_$._press[haxepunk_input__$Key_Key_$Impl_$._pressNum++] = code;
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input__$Key_Key_$Impl_$._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input__$Key_Key_$Impl_$.onKeyUp = function(code) {
	if(haxepunk_input__$Key_Key_$Impl_$._key.h[code]) {
		haxepunk_input__$Key_Key_$Impl_$._key.h[code] = false;
		haxepunk_input__$Key_Key_$Impl_$._keyNum--;
		haxepunk_input__$Key_Key_$Impl_$._release[haxepunk_input__$Key_Key_$Impl_$._releaseNum++] = code;
		if(haxepunk_input__$Key_Key_$Impl_$._keyMap.h.hasOwnProperty(code)) {
			var _g = 0;
			var _g1 = haxepunk_input__$Key_Key_$Impl_$._keyMap.h[code];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerRelease(input);
			}
		}
	}
};
var haxepunk_input_Mouse = function() { };
$hxClasses["haxepunk.input.Mouse"] = haxepunk_input_Mouse;
haxepunk_input_Mouse.__name__ = ["haxepunk","input","Mouse"];
haxepunk_input_Mouse.__properties__ = {get_mouseWheelDelta:"get_mouseWheelDelta",get_mouseOnScreen:"get_mouseOnScreen",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"};
haxepunk_input_Mouse.get_mouseX = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.stage.get_mouseX() - _this.x) / _this.scaleX | 0;
};
haxepunk_input_Mouse.get_mouseY = function() {
	var _this = haxepunk_HXP.screen;
	return (haxepunk_HXP.app.stage.get_mouseY() - _this.y) / _this.scaleY | 0;
};
haxepunk_input_Mouse.get_mouseOnScreen = function() {
	return haxepunk_input_Mouse._mouseOnScreen;
};
haxepunk_input_Mouse.get_mouseWheelDelta = function() {
	if(haxepunk_input_Mouse.mouseWheel) {
		haxepunk_input_Mouse.mouseWheel = false;
		return haxepunk_input_Mouse._mouseWheelDelta;
	}
	return 0;
};
haxepunk_input_Mouse.showCursor = function() {
	openfl_ui_Mouse.show();
};
haxepunk_input_Mouse.hideCursor = function() {
	openfl_ui_Mouse.hide();
};
haxepunk_input_Mouse.define = function(input,button) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		HxOverrides.remove(haxepunk_input_Mouse._buttonMap.h[button],input);
	}
	var _this1 = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null) {
		_this1.setReserved(input,button);
	} else {
		_this1.h[input] = button;
	}
	if(!haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(button)) {
		var this1 = haxepunk_input_Mouse._buttonMap;
		var v = [];
		this1.h[button] = v;
	}
	if(haxepunk_input_Mouse._buttonMap.h[button].indexOf(input) < 0) {
		haxepunk_input_Mouse._buttonMap.h[button].push(input);
	}
};
haxepunk_input_Mouse.checkInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseDown;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseDown;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseDown;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.pressedInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mousePressed;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMousePressed;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMousePressed;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.releasedInput = function(input) {
	var _this = haxepunk_input_Mouse._control;
	if(__map_reserved[input] != null ? _this.existsReserved(input) : _this.h.hasOwnProperty(input)) {
		var _this1 = haxepunk_input_Mouse._control;
		var tmp;
		switch(__map_reserved[input] != null ? _this1.getReserved(input) : _this1.h[input]) {
		case 1:
			tmp = haxepunk_input_Mouse.mouseReleased;
			break;
		case 2:
			tmp = haxepunk_input_Mouse.rightMouseReleased;
			break;
		case 3:
			tmp = haxepunk_input_Mouse.middleMouseReleased;
			break;
		}
		if(tmp) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Mouse.check = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseDown;
	case 2:
		return haxepunk_input_Mouse.rightMouseDown;
	case 3:
		return haxepunk_input_Mouse.middleMouseDown;
	}
};
haxepunk_input_Mouse.pressed = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mousePressed;
	case 2:
		return haxepunk_input_Mouse.rightMousePressed;
	case 3:
		return haxepunk_input_Mouse.middleMousePressed;
	}
};
haxepunk_input_Mouse.released = function(btn) {
	switch(btn) {
	case 1:
		return haxepunk_input_Mouse.mouseReleased;
	case 2:
		return haxepunk_input_Mouse.rightMouseReleased;
	case 3:
		return haxepunk_input_Mouse.middleMouseReleased;
	}
};
haxepunk_input_Mouse.update = function() {
};
haxepunk_input_Mouse.postUpdate = function() {
	haxepunk_input_Mouse.mousePressed = haxepunk_input_Mouse.mouseReleased = haxepunk_input_Mouse.middleMousePressed = haxepunk_input_Mouse.middleMouseReleased = haxepunk_input_Mouse.rightMousePressed = haxepunk_input_Mouse.rightMouseReleased = false;
};
haxepunk_input_Mouse.onMouseDown = function(_) {
	if(!haxepunk_input_Mouse.mouseDown) {
		haxepunk_input_Mouse.mouseDown = true;
		haxepunk_input_Mouse.mouseUp = false;
		haxepunk_input_Mouse.mousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMouseUp = function(_) {
	haxepunk_input_Mouse.mouseDown = false;
	haxepunk_input_Mouse.mouseUp = true;
	haxepunk_input_Mouse.mouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(1)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[1];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onMouseWheel = function(delta) {
	haxepunk_input_Mouse.mouseWheel = true;
	haxepunk_input_Mouse._mouseWheelDelta = delta;
};
haxepunk_input_Mouse.onMiddleMouseDown = function(_) {
	if(!haxepunk_input_Mouse.middleMouseDown) {
		haxepunk_input_Mouse.middleMouseDown = true;
		haxepunk_input_Mouse.middleMouseUp = false;
		haxepunk_input_Mouse.middleMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onMiddleMouseUp = function(_) {
	haxepunk_input_Mouse.middleMouseDown = false;
	haxepunk_input_Mouse.middleMouseUp = true;
	haxepunk_input_Mouse.middleMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(3)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[3];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
haxepunk_input_Mouse.onRightMouseDown = function(_) {
	if(!haxepunk_input_Mouse.rightMouseDown) {
		haxepunk_input_Mouse.rightMouseDown = true;
		haxepunk_input_Mouse.rightMouseUp = false;
		haxepunk_input_Mouse.rightMousePressed = true;
		if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
			var _g = 0;
			var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				haxepunk_input_Input.triggerPress(input);
			}
		}
	}
};
haxepunk_input_Mouse.onRightMouseUp = function(_) {
	haxepunk_input_Mouse.rightMouseDown = false;
	haxepunk_input_Mouse.rightMouseUp = true;
	haxepunk_input_Mouse.rightMouseReleased = true;
	if(haxepunk_input_Mouse._buttonMap.h.hasOwnProperty(2)) {
		var _g = 0;
		var _g1 = haxepunk_input_Mouse._buttonMap.h[2];
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			haxepunk_input_Input.triggerRelease(input);
		}
	}
};
var haxepunk_input_Input = function() { };
$hxClasses["haxepunk.input.Input"] = haxepunk_input_Input;
haxepunk_input_Input.__name__ = ["haxepunk","input","Input"];
haxepunk_input_Input.triggerPress = function(type) {
	haxepunk_input_Input._signals.push("press");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.triggerRelease = function(type) {
	haxepunk_input_Input._signals.push("release");
	haxepunk_input_Input._signals.push(type);
};
haxepunk_input_Input.pressed = function(input) {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		if(handler.pressedInput(input)) {
			return true;
		}
	}
	return false;
};
haxepunk_input_Input.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.update();
	}
	var i = 0;
	while(i < haxepunk_input_Input._signals.length) {
		var op = i++;
		var type = haxepunk_input_Input._signals[i++];
		switch(haxepunk_input_Input._signals[op]) {
		case "press":
			var signals = haxepunk_HXP.engine.onInputPressed;
			if(signals.signals.exists(type)) {
				var _g2 = 0;
				var _g11 = signals.resolve(type).callbacks;
				while(_g2 < _g11.length) {
					var callback = _g11[_g2];
					++_g2;
					callback();
				}
			}
			var signals1 = haxepunk_HXP.engine._scene.onInputPressed;
			if(signals1.signals.exists(type)) {
				var _g3 = 0;
				var _g12 = signals1.resolve(type).callbacks;
				while(_g3 < _g12.length) {
					var callback1 = _g12[_g3];
					++_g3;
					callback1();
				}
			}
			break;
		case "release":
			var signals2 = haxepunk_HXP.engine.onInputReleased;
			if(signals2.signals.exists(type)) {
				var _g4 = 0;
				var _g13 = signals2.resolve(type).callbacks;
				while(_g4 < _g13.length) {
					var callback2 = _g13[_g4];
					++_g4;
					callback2();
				}
			}
			var signals3 = haxepunk_HXP.engine._scene.onInputReleased;
			if(signals3.signals.exists(type)) {
				var _g5 = 0;
				var _g14 = signals3.resolve(type).callbacks;
				while(_g5 < _g14.length) {
					var callback3 = _g14[_g5];
					++_g5;
					callback3();
				}
			}
			break;
		default:
		}
	}
	haxepunk_input_Input._signals.length = 0;
};
haxepunk_input_Input.postUpdate = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Input.handlers;
	while(_g < _g1.length) {
		var handler = _g1[_g];
		++_g;
		handler.postUpdate();
	}
};
var haxepunk_input_MouseManager = function() {
	this._lastFallthrough = false;
	this._lastCollisions = [];
	this._collisions = [];
	this._registeredObjects = new haxe_ds_ObjectMap();
	haxepunk_Entity.call(this);
	this.set_width(this.set_height(0));
	this.set_collidable(false);
	this.set_visible(false);
};
$hxClasses["haxepunk.input.MouseManager"] = haxepunk_input_MouseManager;
haxepunk_input_MouseManager.__name__ = ["haxepunk","input","MouseManager"];
haxepunk_input_MouseManager.__super__ = haxepunk_Entity;
haxepunk_input_MouseManager.prototype = $extend(haxepunk_Entity.prototype,{
	_registeredObjects: null
	,_collisions: null
	,_lastCollisions: null
	,_default: null
	,_lastFallthrough: null
	,add: function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
		if(fallThrough == null) {
			fallThrough = false;
		}
		if(this._type == "") {
			this.set_type(entity._type);
		} else if(this._type != entity._type) {
			throw new js__$Boot_HaxeError("Entities added to a MouseManager must all be the same type.");
		}
		this._registeredObjects.set(entity,new haxepunk_input_MouseData(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough));
		return entity;
	}
	,addDefault: function(onPress,onRelease,onEnter,onExit,onWheel) {
		this._default = new haxepunk_input_MouseData(null,onPress,onRelease,onEnter,onExit,onWheel,false);
	}
	,getData: function(entity) {
		if(this._registeredObjects.h.__keys__[entity.__id__] != null) {
			return this._registeredObjects.h[entity.__id__];
		} else {
			return null;
		}
	}
	,update: function() {
		haxepunk_Entity.prototype.update.call(this);
		var mouseX = haxepunk_HXP.app.stage.get_mouseX();
		var mouseY = haxepunk_HXP.app.stage.get_mouseY();
		var collisions = this._collisions;
		var tmp;
		var tmp1;
		if(haxepunk_input_Mouse._mouseOnScreen && mouseX >= this._scene.x && mouseY >= this._scene.y) {
			var _this = this._scene;
			tmp1 = mouseX <= this._scene.x + (_this._width == null ? haxepunk_HXP.screen.width - _this.x : _this._width);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this1 = this._scene;
			tmp = mouseY <= this._scene.y + (_this1._height == null ? haxepunk_HXP.screen.height - _this1.y : _this1._height);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this2 = this._scene;
			var _this3 = _this2.camera;
			var _this4 = this._scene;
			var _this5 = _this4.camera;
			this._scene.collidePointInto(this._type,(haxepunk_HXP.app.stage.get_mouseX() - haxepunk_HXP.screen.x - _this2.x) / (_this3.scale * _this3.scaleX * haxepunk_HXP.screen.scaleX) + _this2.camera.x | 0,(haxepunk_HXP.app.stage.get_mouseY() - haxepunk_HXP.screen.y - _this4.y) / (_this5.scale * _this5.scaleY * haxepunk_HXP.screen.scaleY) + _this4.camera.y | 0,collisions,true);
		}
		var fallthrough = true;
		var _g1 = 0;
		var _g = collisions.length;
		while(_g1 < _g) {
			var i = _g1++;
			var current = this.getData(collisions[i]);
			if(current != null && !current.fallThrough) {
				while(collisions.length > i + 1) collisions.pop();
				fallthrough = false;
				break;
			}
		}
		var _g2 = 0;
		while(_g2 < collisions.length) {
			var entity = collisions[_g2];
			++_g2;
			var current1 = this.getData(entity);
			if(current1 == null) {
				continue;
			}
			if(current1.onEnter != null) {
				if(this._lastCollisions.indexOf(entity) == -1) {
					current1.onEnter();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseWheel) {
			var delta = haxepunk_input_Mouse.get_mouseWheelDelta();
			var _g3 = 0;
			while(_g3 < collisions.length) {
				var entity1 = collisions[_g3];
				++_g3;
				var current2 = this.getData(entity1);
				if(current2 == null) {
					continue;
				}
				if(current2.onWheel != null) {
					current2.onWheel(delta);
				}
			}
		}
		if(haxepunk_input_Mouse.mousePressed) {
			var _g4 = 0;
			while(_g4 < collisions.length) {
				var entity2 = collisions[_g4];
				++_g4;
				var current3 = this.getData(entity2);
				if(current3 == null) {
					continue;
				}
				if(current3.onPress != null) {
					current3.onPress();
				}
			}
		}
		if(haxepunk_input_Mouse.mouseReleased) {
			var _g5 = 0;
			while(_g5 < collisions.length) {
				var entity3 = collisions[_g5];
				++_g5;
				var current4 = this.getData(entity3);
				if(current4 == null) {
					continue;
				}
				if(current4.onRelease != null) {
					current4.onRelease();
				}
			}
		}
		var _g6 = 0;
		var _g11 = this._lastCollisions;
		while(_g6 < _g11.length) {
			var entity4 = _g11[_g6];
			++_g6;
			var current5 = this.getData(entity4);
			if(current5 == null) {
				continue;
			}
			if(current5.onExit != null) {
				if(collisions.indexOf(entity4) == -1) {
					current5.onExit();
				}
			}
		}
		if(fallthrough) {
			if(this._default != null) {
				if(this._default.onEnter != null && !this._lastFallthrough) {
					this._default.onEnter();
				}
				if(this._default.onPress != null && haxepunk_input_Mouse.mousePressed) {
					this._default.onPress();
				}
				if(this._default.onRelease != null && haxepunk_input_Mouse.mouseReleased) {
					this._default.onRelease();
				}
			}
		} else if(this._lastFallthrough) {
			if(this._default != null) {
				if(this._default.onExit != null) {
					this._default.onExit();
				}
			}
		}
		this._collisions = this._lastCollisions;
		if(this._collisions.length > 0) {
			this._collisions.splice(0,this._collisions.length);
		}
		this._lastCollisions = collisions;
		this._lastFallthrough = fallthrough;
	}
	,__class__: haxepunk_input_MouseManager
});
var haxepunk_input_MouseData = function(entity,onPress,onRelease,onEnter,onExit,onWheel,fallThrough) {
	this.entity = entity;
	this.onPress = onPress;
	this.onRelease = onRelease;
	this.onEnter = onEnter;
	this.onExit = onExit;
	this.onWheel = onWheel;
	this.fallThrough = fallThrough;
};
$hxClasses["haxepunk.input.MouseData"] = haxepunk_input_MouseData;
haxepunk_input_MouseData.__name__ = ["haxepunk","input","MouseData"];
haxepunk_input_MouseData.prototype = {
	entity: null
	,onPress: null
	,onRelease: null
	,onEnter: null
	,onExit: null
	,onWheel: null
	,fallThrough: null
	,__class__: haxepunk_input_MouseData
};
var haxepunk_input_Touch = function(x,y,id) {
	this.released = false;
	this.startX = this.x = x;
	this.startY = this.y = y;
	this.id = id;
	this.time = 0;
};
$hxClasses["haxepunk.input.Touch"] = haxepunk_input_Touch;
haxepunk_input_Touch.__name__ = ["haxepunk","input","Touch"];
haxepunk_input_Touch.__properties__ = {get_touchOrder:"get_touchOrder",get_touches:"get_touches"};
haxepunk_input_Touch.update = function() {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		haxepunk_input_Touch._touches.h[touchId].updateTouch();
	}
	if(haxepunk_input__$Gesture_Gesture_$Impl_$.enabled) {
		haxepunk_input__$Gesture_Gesture_$Impl_$.update();
	}
	var i = 0;
	while(i < haxepunk_input_Touch._touchOrder.length) {
		var touchId1 = haxepunk_input_Touch._touchOrder[i];
		var touch = haxepunk_input_Touch._touches.h[touchId1];
		if(touch.released && touch.time != 0) {
			haxepunk_input_Touch._touches.remove(touchId1);
			HxOverrides.remove(haxepunk_input_Touch._touchOrder,touchId1);
		} else {
			++i;
		}
	}
};
haxepunk_input_Touch.postUpdate = function() {
};
haxepunk_input_Touch.checkInput = function(input) {
	return false;
};
haxepunk_input_Touch.pressedInput = function(input) {
	return false;
};
haxepunk_input_Touch.releasedInput = function(input) {
	return false;
};
haxepunk_input_Touch.touchPoints = function(touchCallback) {
	var _g = 0;
	var _g1 = haxepunk_input_Touch._touchOrder;
	while(_g < _g1.length) {
		var touchId = _g1[_g];
		++_g;
		touchCallback(haxepunk_input_Touch._touches.h[touchId]);
	}
};
haxepunk_input_Touch.get_touches = function() {
	return haxepunk_input_Touch._touches;
};
haxepunk_input_Touch.get_touchOrder = function() {
	return haxepunk_input_Touch._touchOrder;
};
haxepunk_input_Touch.prototype = {
	id: null
	,x: null
	,y: null
	,startX: null
	,startY: null
	,time: null
	,released: null
	,updateTouch: function() {
		this.time += haxepunk_HXP.elapsed;
	}
	,__class__: haxepunk_input_Touch
};
var haxepunk_layout__$Measurement_Measurement_$Impl_$ = {};
$hxClasses["haxepunk.layout._Measurement.Measurement_Impl_"] = haxepunk_layout__$Measurement_Measurement_$Impl_$;
haxepunk_layout__$Measurement_Measurement_$Impl_$.__name__ = ["haxepunk","layout","_Measurement","Measurement_Impl_"];
haxepunk_layout__$Measurement_Measurement_$Impl_$._new = function(value,unit) {
	if(unit == null) {
		unit = "px";
	}
	return { value : value, unit : unit};
};
var haxepunk_masks_Circle = function() { };
$hxClasses["haxepunk.masks.Circle"] = haxepunk_masks_Circle;
haxepunk_masks_Circle.__name__ = ["haxepunk","masks","Circle"];
haxepunk_masks_Circle.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Circle.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var distanceX = Math.abs(this._parent.get_x() + this._x - other._parent.get_x() - other._parent.get_width() * 0.5);
		var distanceY = Math.abs(this._parent.get_y() + this._y - other._parent.get_y() - other._parent.get_height() * 0.5);
		if(distanceX > other._parent.get_width() * 0.5 + this._radius || distanceY > other._parent.get_height() * 0.5 + this._radius) {
			return false;
		}
		if(distanceX <= other._parent.get_width() * 0.5 || distanceY <= other._parent.get_height() * 0.5) {
			return true;
		}
		return (distanceX - other._parent.get_width() * 0.5) * (distanceX - other._parent.get_width() * 0.5) + (distanceY - other._parent.get_height() * 0.5) * (distanceY - other._parent.get_height() * 0.5) <= this._squaredRadius;
	}
	,collideHitbox: function(other) {
		var _otherHalfWidth = other._width * 0.5;
		var _otherHalfHeight = other._height * 0.5;
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x;
		var oy = other._y;
		if((other._parent != haxepunk_Entity._EMPTY ? other._parent : null) != null) {
			ox += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_x();
			oy += (other._parent != haxepunk_Entity._EMPTY ? other._parent : null).get_y();
		}
		var distanceX = Math.abs(px - ox - _otherHalfWidth);
		var distanceY = Math.abs(py - oy - _otherHalfHeight);
		if(distanceX > _otherHalfWidth + this._radius || distanceY > _otherHalfHeight + this._radius) {
			return false;
		}
		if(distanceX <= _otherHalfWidth || distanceY <= _otherHalfHeight) {
			return true;
		}
		return (distanceX - _otherHalfWidth) * (distanceX - _otherHalfWidth) + (distanceY - _otherHalfHeight) * (distanceY - _otherHalfHeight) <= this._squaredRadius;
	}
	,project: function(axis,projection) {
		projection.min = -this._radius;
		projection.max = this._radius;
	}
	,get_x: function() {
		return this._x - this._radius;
	}
	,get_y: function() {
		return this._y - this._radius;
	}
	,update: function() {
		if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x + this._radius;
			this._parent.originY = -this._y + this._radius;
			this._parent.set_height(this._parent.set_width(this._radius + this._radius));
			if(this.list != null) {
				this.list.update();
			}
		}
	}
	,_radius: null
	,_squaredRadius: null
	,__class__: haxepunk_masks_Circle
});
var haxepunk_masks_Grid = function() { };
$hxClasses["haxepunk.masks.Grid"] = haxepunk_masks_Grid;
haxepunk_masks_Grid.__name__ = ["haxepunk","masks","Grid"];
haxepunk_masks_Grid.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Grid.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	usePositions: null
	,getTile: function(column,row) {
		if(row == null) {
			row = 0;
		}
		if(column == null) {
			column = 0;
		}
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		return this.getTileXY(column,row);
	}
	,getTileXY: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(!(!(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1))) {
			return false;
		}
		return this.data[y][x];
	}
	,columns: null
	,rows: null
	,data: null
	,collideMask: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		var tmp = other._parent.get_x() - other._parent.originX - this._parent.get_x();
		this._rect.x = tmp + this._parent.originX;
		var tmp1 = other._parent.get_y() - other._parent.originY - this._parent.get_y();
		this._rect.y = tmp1 + this._parent.originY;
		pointX = ((this._rect.x + other._parent.get_width() - 1) / this._tile.width | 0) + 1;
		pointY = ((this._rect.y + other._parent.get_height() - 1) / this._tile.height | 0) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g1 = rectY;
		while(_g1 < pointY) {
			var dy = _g1++;
			var _g3 = rectX;
			while(_g3 < pointX) if(this.getTile(_g3++,dy)) {
				return true;
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		var tmp = other._parent.get_x() - other._x - this._parent.get_x();
		this._rect.x = tmp + this._x;
		var tmp1 = other._parent.get_y() - other._y - this._parent.get_y();
		this._rect.y = tmp1 + this._y;
		pointX = ((this._rect.x + other._width - 1) / this._tile.width | 0) + 1;
		pointY = ((this._rect.y + other._height - 1) / this._tile.height | 0) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g1 = rectY;
		while(_g1 < pointY) {
			var dy = _g1++;
			var _g3 = rectX;
			while(_g3 < pointX) if(this.getTile(_g3++,dy)) {
				return true;
			}
		}
		return false;
	}
	,_tile: null
	,_rect: null
	,__class__: haxepunk_masks_Grid
});
var haxepunk_math_Projection = function() {
	this.max = this.min = 0;
};
$hxClasses["haxepunk.math.Projection"] = haxepunk_math_Projection;
haxepunk_math_Projection.__name__ = ["haxepunk","math","Projection"];
haxepunk_math_Projection.prototype = {
	max: null
	,min: null
	,__class__: haxepunk_math_Projection
};
var haxepunk_masks_Polygon = function(points,origin) {
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
	haxepunk_masks_Hitbox.call(this);
	if(points.length < 3) {
		throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	}
	this._points = points;
	this._fakeEntity = new haxepunk_Entity();
	this._fakeTileHitbox = new haxepunk_masks_Hitbox();
	var this1 = this._check;
	var key = Type.getClassName(haxepunk_Mask);
	var _this = this1;
	var value = $bind(this,this.collideMask);
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var this2 = this._check;
	var key1 = Type.getClassName(haxepunk_masks_Hitbox);
	var _this1 = this2;
	var value1 = $bind(this,this.collideHitbox);
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
	var this3 = this._check;
	var key2 = Type.getClassName(haxepunk_masks_Grid);
	var _this2 = this3;
	var value2 = $bind(this,this.collideGrid);
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,value2);
	} else {
		_this2.h[key2] = value2;
	}
	var this4 = this._check;
	var key3 = Type.getClassName(haxepunk_masks_Circle);
	var _this3 = this4;
	var value3 = $bind(this,this.collideCircle);
	if(__map_reserved[key3] != null) {
		_this3.setReserved(key3,value3);
	} else {
		_this3.h[key3] = value3;
	}
	var this5 = this._check;
	var key4 = Type.getClassName(haxepunk_masks_Polygon);
	var _this4 = this5;
	var value4 = $bind(this,this.collidePolygon);
	if(__map_reserved[key4] != null) {
		_this4.setReserved(key4,value4);
	} else {
		_this4.h[key4] = value4;
	}
	this.origin = origin != null ? origin : new haxepunk_math_Vector2();
	this._angle = 0;
	this.updateAxes();
};
$hxClasses["haxepunk.masks.Polygon"] = haxepunk_masks_Polygon;
haxepunk_masks_Polygon.__name__ = ["haxepunk","masks","Polygon"];
haxepunk_masks_Polygon.fromPoints = function(points,origin) {
	var cp = haxepunk_math_MakeConvex.run(points);
	var list = new haxepunk_masks_Masklist();
	var _g = 0;
	while(_g < cp.length) {
		var p = cp[_g];
		++_g;
		list.add(new haxepunk_masks_Polygon(p,origin));
	}
	return list;
};
haxepunk_masks_Polygon.createPolygon = function(sides,radius,angle) {
	if(angle == null) {
		angle = 0;
	}
	if(radius == null) {
		radius = 100;
	}
	if(sides == null) {
		sides = 3;
	}
	if(sides < 3) {
		throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	}
	var rotationAngle = Math.PI * 2 / sides;
	var points = [];
	var _g1 = 0;
	while(_g1 < sides) {
		var tempAngle = Math.PI + _g1++ * rotationAngle;
		var p = new haxepunk_math_Vector2();
		p.x = Math.cos(tempAngle) * radius + radius;
		p.y = Math.sin(tempAngle) * radius + radius;
		points.push(p);
	}
	var poly = new haxepunk_masks_Polygon(points);
	poly.origin.x = radius;
	poly.origin.y = radius;
	poly.set_angle(angle);
	return poly;
};
haxepunk_masks_Polygon.createFromArray = function(points) {
	var p = [];
	var i = 0;
	while(i < points.length) p.push(new haxepunk_math_Vector2(points[i++],points[i++]));
	return new haxepunk_masks_Polygon(p);
};
haxepunk_masks_Polygon.__super__ = haxepunk_masks_Hitbox;
haxepunk_masks_Polygon.prototype = $extend(haxepunk_masks_Hitbox.prototype,{
	origin: null
	,minX: null
	,minY: null
	,maxX: null
	,maxY: null
	,collideMask: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this.min > other1.max || _this.max < other1.min))) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		other.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this1 = haxepunk_masks_Polygon.firstProj;
		var other2 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this1.min > other2.max || _this1.max < other2.min))) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this2 = haxepunk_masks_Polygon.firstProj;
			var other3 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this2.min > other3.max || _this2.max < other3.min))) {
				return false;
			}
		}
		return true;
	}
	,collideHitbox: function(hitbox) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - hitbox._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - hitbox._parent.get_y();
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetY;
		haxepunk_masks_Polygon.firstProj.max += offsetY;
		var _this = haxepunk_masks_Polygon.firstProj;
		var other = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this.min > other.max || _this.max < other.min))) {
			return false;
		}
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		hitbox.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.secondProj);
		haxepunk_masks_Polygon.firstProj.min += offsetX;
		haxepunk_masks_Polygon.firstProj.max += offsetX;
		var _this1 = haxepunk_masks_Polygon.firstProj;
		var other1 = haxepunk_masks_Polygon.secondProj;
		if(!(!(_this1.min > other1.max || _this1.max < other1.min))) {
			return false;
		}
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			hitbox.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this2 = haxepunk_masks_Polygon.firstProj;
			var other2 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this2.min > other2.max || _this2.max < other2.min))) {
				return false;
			}
		}
		return true;
	}
	,collideGrid: function(grid) {
		var tileW = grid._tile.width | 0;
		var tileH = grid._tile.height | 0;
		var solidTile;
		this._fakeEntity.set_width(tileW);
		this._fakeEntity.set_height(tileH);
		this._fakeEntity.set_x(this._parent.get_x());
		this._fakeEntity.set_y(this._parent.get_y());
		this._fakeEntity.originX = grid._parent.originX + grid._x;
		this._fakeEntity.originY = grid._parent.originY + grid._y;
		this._fakeTileHitbox._width = tileW;
		this._fakeTileHitbox._height = tileH;
		this._fakeTileHitbox.set_parent(this._fakeEntity);
		var _g1 = 0;
		var _g = grid.rows;
		while(_g1 < _g) {
			var r = _g1++;
			var _g3 = 0;
			var _g2 = grid.columns;
			while(_g3 < _g2) {
				var c = _g3++;
				this._fakeEntity.set_x(grid._parent.get_x() + grid._x + c * tileW);
				this._fakeEntity.set_y(grid._parent.get_y() + grid._y + r * tileH);
				solidTile = grid.getTile(c,r);
				if(solidTile && this.collideHitbox(this._fakeTileHitbox)) {
					return true;
				}
			}
		}
		return false;
	}
	,collideCircle: function(circle) {
		var edgesCrossed = 0;
		var p1;
		var p2;
		var i;
		var j;
		var nPoints = this._points.length;
		var offsetX = this._parent.get_x() + this._x;
		var offsetY = this._parent.get_y() + this._y;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var distFromCenter = (p2.x - p1.x) * (circle._y + circle._parent.get_y() - p1.y - offsetY) / (p2.y - p1.y) + p1.x + offsetX;
			if(p1.y + offsetY > circle._y + circle._parent.get_y() != p2.y + offsetY > circle._y + circle._parent.get_y() && circle._x + circle._parent.get_x() < distFromCenter) {
				++edgesCrossed;
			}
			j = i;
			++i;
		}
		if((edgesCrossed & 1) > 0) {
			return true;
		}
		var radiusSqr = circle._radius * circle._radius;
		var cx = circle._x + circle._parent.get_x();
		var cy = circle._y + circle._parent.get_y();
		var minDistanceSqr = 0;
		var closestX;
		var closestY;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var t = ((cx - p1.x - offsetX) * (p2.x - p1.x) + (cy - p1.y - offsetY) * (p2.y - p1.y)) / ((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
			if(t < 0) {
				closestX = p1.x;
				closestY = p1.y;
			} else if(t > 1) {
				closestX = p2.x;
				closestY = p2.y;
			} else {
				closestX = p1.x + t * (p2.x - p1.x);
				closestY = p1.y + t * (p2.y - p1.y);
			}
			closestX += offsetX;
			closestY += offsetY;
			minDistanceSqr = (cx - closestX) * (cx - closestX) + (cy - closestY) * (cy - closestY);
			if(minDistanceSqr <= radiusSqr) {
				return true;
			}
			j = i;
			++i;
		}
		return false;
	}
	,collidePolygon: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x() - other._x;
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y() - other._y;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,haxepunk_masks_Polygon.firstProj);
			other.project(a,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this = haxepunk_masks_Polygon.firstProj;
			var other1 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this.min > other1.max || _this.max < other1.min))) {
				return false;
			}
		}
		var _g2 = 0;
		var _g11 = other._axes;
		while(_g2 < _g11.length) {
			var a1 = _g11[_g2];
			++_g2;
			this.project(a1,haxepunk_masks_Polygon.firstProj);
			other.project(a1,haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a1.x + offsetY * a1.y;
			haxepunk_masks_Polygon.firstProj.min += offset;
			haxepunk_masks_Polygon.firstProj.max += offset;
			var _this1 = haxepunk_masks_Polygon.firstProj;
			var other2 = haxepunk_masks_Polygon.secondProj;
			if(!(!(_this1.min > other2.max || _this1.max < other2.min))) {
				return false;
			}
		}
		return true;
	}
	,project: function(axis,projection) {
		var p = this._points[0];
		var min = axis.x * p.x + axis.y * p.y;
		var max = min;
		var _g1 = 1;
		var _g = this._points.length;
		while(_g1 < _g) {
			p = this._points[_g1++];
			var cur = axis.x * p.x + axis.y * p.y;
			if(cur < min) {
				min = cur;
			} else if(cur > max) {
				max = cur;
			}
		}
		projection.min = min;
		projection.max = max;
	}
	,set_angle: function(value) {
		if(value != this._angle) {
			this.rotate(value - this._angle);
			if(this.list != null || (this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
				this.update();
			}
		}
		return value;
	}
	,update: function() {
		this.project(haxepunk_masks_Polygon.horizontal,haxepunk_masks_Polygon.firstProj);
		var projX = Math.round(haxepunk_masks_Polygon.firstProj.min);
		this._width = Math.round(haxepunk_masks_Polygon.firstProj.max - haxepunk_masks_Polygon.firstProj.min);
		this.project(haxepunk_masks_Polygon.vertical,haxepunk_masks_Polygon.secondProj);
		var projY = Math.round(haxepunk_masks_Polygon.secondProj.min);
		this._height = Math.round(haxepunk_masks_Polygon.secondProj.max - haxepunk_masks_Polygon.secondProj.min);
		this.minX = this._x + projX;
		this.minY = this._y + projY;
		this.maxX = Math.round(this.minX + this._width);
		this.maxY = Math.round(this.minY + this._height);
		if(this.list != null) {
			this.list.update();
		} else if((this._parent != haxepunk_Entity._EMPTY ? this._parent : null) != null) {
			this._parent.originX = -this._x - projX;
			this._parent.originY = -this._y - projY;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
		}
	}
	,rotate: function(angleDelta) {
		this._angle += angleDelta;
		angleDelta *= Math.PI / -180;
		var p;
		var _g1 = 0;
		var _g = this._points.length;
		while(_g1 < _g) {
			p = this._points[_g1++];
			var dx = p.x - this.origin.x;
			var dy = p.y - this.origin.y;
			var pointAngle = Math.atan2(dy,dx);
			var length = Math.sqrt(dx * dx + dy * dy);
			p.x = Math.cos(pointAngle + angleDelta) * length + this.origin.x;
			p.y = Math.sin(pointAngle + angleDelta) * length + this.origin.y;
		}
		var _g2 = 0;
		var _g11 = this._axes;
		while(_g2 < _g11.length) {
			var a = _g11[_g2];
			++_g2;
			var axisAngle = Math.atan2(a.y,a.x);
			a.x = Math.cos(axisAngle + angleDelta);
			a.y = Math.sin(axisAngle + angleDelta);
		}
	}
	,generateAxes: function() {
		this._axes = [];
		var temp;
		var nPoints = this._points.length;
		var edge;
		var i;
		var j;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			edge = new haxepunk_math_Vector2();
			edge.x = this._points[i].x - this._points[j].x;
			edge.y = this._points[i].y - this._points[j].y;
			temp = edge.y;
			edge.y = -edge.x;
			edge.x = temp;
			if(!(edge.x == 0 && edge.y == 0)) {
				var normal = 1 / Math.sqrt(edge.x * edge.x + edge.y * edge.y);
				edge.x *= normal;
				edge.y *= normal;
			}
			this._axes.push(edge);
			j = i;
			++i;
		}
	}
	,removeDuplicateAxes: function() {
		var i = this._axes.length - 1;
		var j = i - 1;
		while(i > 0) {
			if(Math.abs(this._axes[i].x - this._axes[j].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y - this._axes[j].y) < haxepunk_masks_Polygon.EPSILON || Math.abs(this._axes[j].x + this._axes[i].x) < haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y + this._axes[j].y) < haxepunk_masks_Polygon.EPSILON) {
				this._axes.splice(i,1);
				--i;
			}
			--j;
			if(j < 0) {
				--i;
				j = i - 1;
			}
		}
	}
	,updateAxes: function() {
		this.generateAxes();
		this.removeDuplicateAxes();
		this.update();
	}
	,_angle: null
	,_points: null
	,_axes: null
	,_fakeEntity: null
	,_fakeTileHitbox: null
	,__class__: haxepunk_masks_Polygon
	,__properties__: $extend(haxepunk_masks_Hitbox.prototype.__properties__,{set_angle:"set_angle"})
});
var haxepunk_math_MakeConvex = function() { };
$hxClasses["haxepunk.math.MakeConvex"] = haxepunk_math_MakeConvex;
haxepunk_math_MakeConvex.__name__ = ["haxepunk","math","MakeConvex"];
haxepunk_math_MakeConvex.findInvalid = function(p) {
	var invalidVertices = [];
	var np = p.length;
	var _g1 = 0;
	while(_g1 < np) {
		var currentVIndex = _g1++;
		var nextV = p[(currentVIndex + 1) % np];
		if(haxepunk_math__$MakeConvex_Point_$Impl_$.dot(haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR(haxepunk_math__$MakeConvex_Point_$Impl_$.subR(nextV,p[currentVIndex])),haxepunk_math__$MakeConvex_Point_$Impl_$.subR(p[(currentVIndex + 2) % np],nextV)) < 0) {
			invalidVertices.push((currentVIndex + 1) % np);
		}
	}
	return invalidVertices;
};
haxepunk_math_MakeConvex.run = function(polygon) {
	var p = polygon.slice();
	var r = [];
	var invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
	var np = p.length;
	var n = invalidVertices.length;
	while(true) {
		n = invalidVertices.length;
		if(!(n > 0)) {
			break;
		}
		var startIndex = 0;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			if(n == 1 || (invalidVertices[i] + 1) % np != invalidVertices[(i + 1) % n]) {
				startIndex = invalidVertices[i];
				break;
			}
		}
		var startVertex = [p[startIndex]];
		var firstEdge = haxepunk_math__$MakeConvex_Point_$Impl_$.subR(p[(startIndex + 1) % np],startVertex[0]);
		var found = false;
		var target = [0];
		var _g11 = 2;
		var _g2 = np;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var curIndex = (startIndex + i1) % np;
			var curVertex = p[curIndex];
			if(invalidVertices.indexOf(curIndex) > -1) {
				found = true;
				target[0] = curIndex;
			} else if(haxepunk_math__$MakeConvex_Point_$Impl_$.dot(haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR(haxepunk_math__$MakeConvex_Point_$Impl_$.subR(startVertex[0],curVertex)),firstEdge) < 0) {
				found = true;
				target[0] = (startIndex + i1 - 1) % np;
			}
			if(found) {
				var newPoly = [[]];
				var k = startIndex;
				while(true) {
					newPoly[0].push(p[k]);
					if(k == target[0]) {
						break;
					}
					k = (k + 1) % np;
				}
				r.push(newPoly[0]);
				var p1 = (function(newPoly1,target1,startVertex1) {
					return function(x) {
						if(!(newPoly1[0].indexOf(x) == -1 || x == startVertex1[0])) {
							return x == p[target1[0]];
						} else {
							return true;
						}
					};
				})(newPoly,target,startVertex);
				p = p.filter(p1);
				np = p.length;
				invalidVertices = haxepunk_math_MakeConvex.findInvalid(p);
				if(invalidVertices.length == 0) {
					r.push(p);
				}
				break;
			}
		}
	}
	if(r.length == 0) {
		return [polygon];
	} else {
		return r;
	}
};
var haxepunk_math__$MakeConvex_Point_$Impl_$ = {};
$hxClasses["haxepunk.math._MakeConvex.Point_Impl_"] = haxepunk_math__$MakeConvex_Point_$Impl_$;
haxepunk_math__$MakeConvex_Point_$Impl_$.__name__ = ["haxepunk","math","_MakeConvex","Point_Impl_"];
haxepunk_math__$MakeConvex_Point_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new haxepunk_math_Vector2(x,y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.addR = function(this1,b) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(this1.x + b.x,this1.y + b.y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.subR = function(this1,b) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$.addR(this1,haxepunk_math__$MakeConvex_Point_$Impl_$.negR(b));
};
haxepunk_math__$MakeConvex_Point_$Impl_$.negR = function(this1) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(-this1.x,-this1.y);
};
haxepunk_math__$MakeConvex_Point_$Impl_$.dot = function(this1,b) {
	return this1.x * b.x + this1.y * b.y;
};
haxepunk_math__$MakeConvex_Point_$Impl_$.orthoR = function(this1) {
	return haxepunk_math__$MakeConvex_Point_$Impl_$._new(this1.y,-this1.x);
};
var haxepunk_math_MathUtil = function() { };
$hxClasses["haxepunk.math.MathUtil"] = haxepunk_math_MathUtil;
haxepunk_math_MathUtil.__name__ = ["haxepunk","math","MathUtil"];
haxepunk_math_MathUtil.clamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
haxepunk_math_MathUtil.iclamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
var haxepunk_math_Random = function() { };
$hxClasses["haxepunk.math.Random"] = haxepunk_math_Random;
haxepunk_math_Random.__name__ = ["haxepunk","math","Random"];
var haxepunk_screen_ScaleMode = function(integer) {
	if(integer == null) {
		integer = false;
	}
	this.baseHeight = 0;
	this.baseWidth = 0;
	this.integer = false;
	this.integer = integer;
	this.setBaseSize(haxepunk_HXP.width,haxepunk_HXP.height);
};
$hxClasses["haxepunk.screen.ScaleMode"] = haxepunk_screen_ScaleMode;
haxepunk_screen_ScaleMode.__name__ = ["haxepunk","screen","ScaleMode"];
haxepunk_screen_ScaleMode.prototype = {
	integer: null
	,baseWidth: null
	,baseHeight: null
	,setBaseSize: function(width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(width == -1) {
			width = haxepunk_HXP.width;
		}
		if(height == -1) {
			height = haxepunk_HXP.height;
		}
		this.baseWidth = width;
		this.baseHeight = height;
	}
	,resize: function(stageWidth,stageHeight) {
		haxepunk_HXP.screen.x = haxepunk_HXP.screen.y = 0;
		haxepunk_HXP.screen.set_scaleX(stageWidth / this.baseWidth);
		haxepunk_HXP.screen.set_scaleY(stageHeight / this.baseHeight);
		haxepunk_HXP.screen.width = stageWidth;
		haxepunk_HXP.screen.height = stageHeight;
		if(this.integer) {
			haxepunk_HXP.screen.set_scaleX(Math.max(1,haxepunk_HXP.screen.scaleX) | 0);
			haxepunk_HXP.screen.set_scaleY(Math.max(1,haxepunk_HXP.screen.scaleY) | 0);
		}
	}
	,__class__: haxepunk_screen_ScaleMode
};
var haxepunk_utils__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["haxepunk.utils._BlendMode.BlendMode_Impl_"] = haxepunk_utils__$BlendMode_BlendMode_$Impl_$;
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.__name__ = ["haxepunk","utils","_BlendMode","BlendMode_Impl_"];
haxepunk_utils__$BlendMode_BlendMode_$Impl_$.fromFlashBlendMode = function(blend) {
	return blend;
};
var haxepunk_utils_CircularBuffer = function(len) {
	this.len = 0;
	this.pos = 0;
	this.data = new Array(len);
	this._iterator = new haxepunk_utils__$CircularBuffer_CircularBufferIterator(this);
};
$hxClasses["haxepunk.utils.CircularBuffer"] = haxepunk_utils_CircularBuffer;
haxepunk_utils_CircularBuffer.__name__ = ["haxepunk","utils","CircularBuffer"];
haxepunk_utils_CircularBuffer.prototype = {
	pos: null
	,len: null
	,data: null
	,_iterator: null
	,iterator: function() {
		this._iterator.i = 0;
		return this._iterator;
	}
	,__class__: haxepunk_utils_CircularBuffer
};
var haxepunk_utils__$CircularBuffer_CircularBufferIterator = function(buffer) {
	this.i = 0;
	this.buffer = buffer;
};
$hxClasses["haxepunk.utils._CircularBuffer.CircularBufferIterator"] = haxepunk_utils__$CircularBuffer_CircularBufferIterator;
haxepunk_utils__$CircularBuffer_CircularBufferIterator.__name__ = ["haxepunk","utils","_CircularBuffer","CircularBufferIterator"];
haxepunk_utils__$CircularBuffer_CircularBufferIterator.prototype = {
	buffer: null
	,i: null
	,hasNext: function() {
		return this.i < this.buffer.len;
	}
	,next: function() {
		var _this = this.buffer;
		var i = this.i++;
		if(i < 0 || i >= _this.len) {
			return null;
		} else {
			return _this.data[(_this.pos + i) % _this.data.length];
		}
	}
	,__class__: haxepunk_utils__$CircularBuffer_CircularBufferIterator
};
var haxepunk_utils_Data = function() { };
$hxClasses["haxepunk.utils.Data"] = haxepunk_utils_Data;
haxepunk_utils_Data.__name__ = ["haxepunk","utils","Data"];
haxepunk_utils_Data.load = function(file) {
	if(file == null) {
		file = "";
	}
	var data = haxepunk_utils_Data.loadData(file);
	haxepunk_utils_Data._data = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(data);
	while(_g < _g1.length) {
		var str = _g1[_g];
		++_g;
		var value = Reflect.field(data,str);
		var _this = haxepunk_utils_Data._data;
		if(__map_reserved[str] != null) {
			_this.setReserved(str,value);
		} else {
			_this.h[str] = value;
		}
	}
};
haxepunk_utils_Data.save = function(file,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(file == null) {
		file = "";
	}
	if(haxepunk_utils_Data._shared != null) {
		haxepunk_utils_Data._shared.clear();
	}
	var data = haxepunk_utils_Data.loadData(file);
	if(overwrite) {
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var str = _g1[_g];
			++_g;
			Reflect.deleteField(data,str);
		}
	}
	var str1 = haxepunk_utils_Data._data.keys();
	while(str1.hasNext()) {
		var str2 = str1.next();
		var _this = haxepunk_utils_Data._data;
		data[str2] = __map_reserved[str2] != null ? _this.getReserved(str2) : _this.h[str2];
	}
	haxepunk_utils_Data._shared.flush();
};
haxepunk_utils_Data.readString = function(name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = "";
	}
	return Std.string(haxepunk_utils_Data.read(name,defaultValue));
};
haxepunk_utils_Data.read = function(name,defaultValue) {
	var _this = haxepunk_utils_Data._data;
	if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null) {
		var _this1 = haxepunk_utils_Data._data;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	return defaultValue;
};
haxepunk_utils_Data.write = function(name,value) {
	var _this = haxepunk_utils_Data._data;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,value);
	} else {
		_this.h[name] = value;
	}
};
haxepunk_utils_Data.loadData = function(file) {
	if(file == null) {
		file = "_file";
	}
	var p = haxepunk_utils_Data.PREFIX == null ? "" : haxepunk_utils_Data.PREFIX + "/";
	if(haxepunk_utils_Data.id != "") {
		haxepunk_utils_Data._shared = openfl_net_SharedObject.getLocal("" + p + haxepunk_utils_Data.id + "/" + file,"/");
	} else {
		haxepunk_utils_Data._shared = openfl_net_SharedObject.getLocal("" + p + file);
	}
	return haxepunk_utils_Data._shared.data;
};
var haxepunk_utils_Draw = function() { };
$hxClasses["haxepunk.utils.Draw"] = haxepunk_utils_Draw;
haxepunk_utils_Draw.__name__ = ["haxepunk","utils","Draw"];
haxepunk_utils_Draw.rectFilled = function(x,y,width,height) {
	if(haxepunk_utils_Draw.instance == null) {
		haxepunk_utils_Draw.instance = new haxepunk_utils_DrawContext();
	}
	haxepunk_utils_Draw.instance.rectFilled(x,y,width,height);
};
var haxepunk_utils_Ease = function() { };
$hxClasses["haxepunk.utils.Ease"] = haxepunk_utils_Ease;
haxepunk_utils_Ease.__name__ = ["haxepunk","utils","Ease"];
haxepunk_utils_Ease.quadOut = function(t) {
	return -t * (t - 2);
};
haxepunk_utils_Ease.quadInOut = function(t) {
	if(t <= .5) {
		return t * t * 2;
	} else {
		return 1 - --t * t * 2;
	}
};
var haxepunk_utils__$Utf8String_Utf8String_$Impl_$ = {};
$hxClasses["haxepunk.utils._Utf8String.Utf8String_Impl_"] = haxepunk_utils__$Utf8String_Utf8String_$Impl_$;
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.__name__ = ["haxepunk","utils","_Utf8String","Utf8String_Impl_"];
haxepunk_utils__$Utf8String_Utf8String_$Impl_$.concat = function(this1,rhs) {
	var buf_b = "";
	buf_b = "" + Std.string(this1 == null ? "null" : "" + this1);
	buf_b += Std.string(Std.string(rhs));
	return buf_b;
};
var hxbit_ConvertField = function() { };
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = ["hxbit","ConvertField"];
hxbit_ConvertField.prototype = {
	index: null
	,same: null
	,defaultValue: null
	,from: null
	,to: null
	,__class__: hxbit_ConvertField
};
var hxbit_Convert = function() { };
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = ["hxbit","Convert"];
hxbit_Convert.sameType = function(a,b) {
	switch(a[1]) {
	case 0:
		switch(b[1]) {
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		case 16:
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		switch(b[1]) {
		case 7:
			if(hxbit_Convert.sameType(a[2],b[2])) {
				return hxbit_Convert.sameType(a[3],b[3]);
			} else {
				return false;
			}
			break;
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		switch(b[1]) {
		case 8:
			return hxbit_Convert.sameType(a[2],b[2]);
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		switch(b[1]) {
		case 9:
			var fa = a[2];
			var fb = b[2];
			if(fa.length != fb.length) {
				return false;
			}
			var _g1 = 0;
			var _g = fa.length;
			while(_g1 < _g) {
				var i = _g1++;
				var a1 = fa[i];
				var b1 = fb[i];
				if(a1.name != b1.name || a1.opt != b1.opt || !hxbit_Convert.sameType(a1.type,b1.type)) {
					return false;
				}
			}
			return true;
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		if(b[1] == 10) {
			return hxbit_Convert.sameType(a[2],b[2]);
		} else {
			return hxbit_Convert.sameType(a[2],b);
		}
		break;
	case 11:
		switch(b[1]) {
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		case 11:
			return hxbit_Convert.sameType(a[2],b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		switch(b[1]) {
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		case 12:
			return hxbit_Convert.sameType(a[2],b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		switch(b[1]) {
		case 0:
			return true;
		case 10:
			return hxbit_Convert.sameType(a,b[2]);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b[1] == 10) {
			return hxbit_Convert.sameType(a,b[2]);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t[1]) {
	case 1:
		return 0.;
	case 2:
		return false;
	case 7:
		switch(t[2][1]) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		return [];
	case 3:case 4:case 5:case 6:case 9:case 12:case 13:case 14:case 17:
		return null;
	case 10:
		return hxbit_Convert.getDefault(t[2]);
	case 11:
		return new Array(0);
	case 15:
		return new haxe__$Int64__$_$_$Int64(0,0);
	case 0:case 16:
		return 0;
	}
};
hxbit_Convert.prototype = {
	read: null
	,write: null
	,__class__: hxbit_Convert
};
var hxbit_PropTypeDesc = $hxClasses["hxbit.PropTypeDesc"] = { __ename__ : ["hxbit","PropTypeDesc"], __constructs__ : ["PInt","PFloat","PBool","PString","PBytes","PSerializable","PEnum","PMap","PArray","PObj","PAlias","PVector","PNull","PUnknown","PDynamic","PInt64","PFlags","PStruct"] };
hxbit_PropTypeDesc.PInt = ["PInt",0];
hxbit_PropTypeDesc.PInt.toString = $estr;
hxbit_PropTypeDesc.PInt.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFloat = ["PFloat",1];
hxbit_PropTypeDesc.PFloat.toString = $estr;
hxbit_PropTypeDesc.PFloat.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBool = ["PBool",2];
hxbit_PropTypeDesc.PBool.toString = $estr;
hxbit_PropTypeDesc.PBool.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PString = ["PString",3];
hxbit_PropTypeDesc.PString.toString = $estr;
hxbit_PropTypeDesc.PString.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PBytes = ["PBytes",4];
hxbit_PropTypeDesc.PBytes.toString = $estr;
hxbit_PropTypeDesc.PBytes.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PSerializable = function(name) { var $x = ["PSerializable",5,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PEnum = function(name) { var $x = ["PEnum",6,name]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PMap = function(k,v) { var $x = ["PMap",7,k,v]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PArray = function(k) { var $x = ["PArray",8,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PObj = function(fields) { var $x = ["PObj",9,fields]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PAlias = function(k) { var $x = ["PAlias",10,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PVector = function(k) { var $x = ["PVector",11,k]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PNull = function(t) { var $x = ["PNull",12,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PUnknown = ["PUnknown",13];
hxbit_PropTypeDesc.PUnknown.toString = $estr;
hxbit_PropTypeDesc.PUnknown.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PDynamic = ["PDynamic",14];
hxbit_PropTypeDesc.PDynamic.toString = $estr;
hxbit_PropTypeDesc.PDynamic.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PInt64 = ["PInt64",15];
hxbit_PropTypeDesc.PInt64.toString = $estr;
hxbit_PropTypeDesc.PInt64.__enum__ = hxbit_PropTypeDesc;
hxbit_PropTypeDesc.PFlags = function(t) { var $x = ["PFlags",16,t]; $x.__enum__ = hxbit_PropTypeDesc; $x.toString = $estr; return $x; };
hxbit_PropTypeDesc.PStruct = ["PStruct",17];
hxbit_PropTypeDesc.PStruct.toString = $estr;
hxbit_PropTypeDesc.PStruct.__enum__ = hxbit_PropTypeDesc;
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = ["hxbit","Schema"];
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.prototype = {
	isFinal: null
	,fieldsNames: null
	,fieldsTypes: null
	,__uid: null
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.b.push(0);
		__ctx.out.b.push(this.isFinal ? 1 : 0);
		var a = this.fieldsNames;
		if(a == null) {
			__ctx.out.b.push(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.b.push(v);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v1 = a[_g];
				++_g;
				if(v1 == null) {
					__ctx.out.b.push(0);
				} else {
					var v2 = v1.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.b.push(v2);
					} else {
						__ctx.out.b.push(128);
						__ctx.out.addInt32(v2);
					}
					var _this = __ctx.out;
					var src = haxe_io_Bytes.ofString(v1);
					var b2 = src.b;
					var _g1 = 0;
					var _g2 = src.length;
					while(_g1 < _g2) _this.b.push(b2[_g1++]);
				}
			}
		}
		var a1 = this.fieldsTypes;
		if(a1 == null) {
			__ctx.out.b.push(0);
		} else {
			var v3 = a1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.b.push(v3);
			} else {
				__ctx.out.b.push(128);
				__ctx.out.addInt32(v3);
			}
			var _g3 = 0;
			while(_g3 < a1.length) {
				var v4 = a1[_g3];
				++_g3;
				hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(__ctx,v4);
			}
		}
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var __version = v;
		if(__version < 0) {
			throw new js__$Boot_HaxeError("version " + __version + " less than min version " + 0);
		}
		if(__version > 0) {
			throw new js__$Boot_HaxeError("version " + __version + " greater than current version " + 0);
		}
		this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v1 = __ctx.input.b[__ctx.inPos++];
		if(v1 == 128) {
			v1 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v1;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var v2 = __ctx.input.b[__ctx.inPos++];
				if(v2 == 128) {
					v2 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v2;
				if(len1 == 0) {
					e0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsNames = tmp;
		var e01;
		var v3 = __ctx.input.b[__ctx.inPos++];
		if(v3 == 128) {
			v3 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v3;
		var tmp1;
		if(len2 == 0) {
			tmp1 = null;
		} else {
			--len2;
			var a1 = [];
			var _g11 = 0;
			var _g2 = len2;
			while(_g11 < _g2) {
				e01 = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(__ctx);
				a1[_g11++] = e01;
			}
			tmp1 = a1;
		}
		this.fieldsTypes = tmp1;
	}
	,__class__: hxbit_Schema
};
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = ["hxbit","StructSerializable"];
hxbit_StructSerializable.prototype = {
	customSerialize: null
	,customUnserialize: null
	,__class__: hxbit_StructSerializable
};
var hxbit_enumSer_hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.hxbit_PropTypeDesc"] = hxbit_enumSer_hxbit_$PropTypeDesc;
hxbit_enumSer_hxbit_$PropTypeDesc.__name__ = ["hxbit","enumSer","hxbit_PropTypeDesc"];
hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.b.push(0);
	} else {
		switch(v[1]) {
		case 0:
			ctx.out.b.push(1);
			break;
		case 1:
			ctx.out.b.push(2);
			break;
		case 2:
			ctx.out.b.push(3);
			break;
		case 3:
			ctx.out.b.push(4);
			break;
		case 4:
			ctx.out.b.push(5);
			break;
		case 5:
			var name = v[2];
			ctx.out.b.push(6);
			if(name == null) {
				ctx.out.b.push(0);
			} else {
				var v1 = name.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.b.push(v1);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v1);
				}
				var _this = ctx.out;
				var src = haxe_io_Bytes.ofString(name);
				var b2 = src.b;
				var _g1 = 0;
				var _g = src.length;
				while(_g1 < _g) _this.b.push(b2[_g1++]);
			}
			break;
		case 6:
			var name1 = v[2];
			ctx.out.b.push(7);
			if(name1 == null) {
				ctx.out.b.push(0);
			} else {
				var v2 = name1.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.b.push(v2);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v2);
				}
				var _this1 = ctx.out;
				var src1 = haxe_io_Bytes.ofString(name1);
				var b21 = src1.b;
				var _g11 = 0;
				var _g2 = src1.length;
				while(_g11 < _g2) _this1.b.push(b21[_g11++]);
			}
			break;
		case 7:
			ctx.out.b.push(8);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[3]);
			break;
		case 8:
			ctx.out.b.push(9);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			break;
		case 9:
			var fields = v[2];
			ctx.out.b.push(10);
			if(fields == null) {
				ctx.out.b.push(0);
			} else {
				var v3 = fields.length + 1;
				if(v3 >= 0 && v3 < 128) {
					ctx.out.b.push(v3);
				} else {
					ctx.out.b.push(128);
					ctx.out.addInt32(v3);
				}
				var _g3 = 0;
				while(_g3 < fields.length) {
					var v4 = fields[_g3];
					++_g3;
					if(v4 == null) {
						ctx.out.b.push(0);
					} else {
						var fbits = 0;
						if(v4.name != null) {
							fbits = 1;
						}
						if(v4.type != null) {
							fbits |= 2;
						}
						var v5 = fbits + 1;
						if(v5 >= 0 && v5 < 128) {
							ctx.out.b.push(v5);
						} else {
							ctx.out.b.push(128);
							ctx.out.addInt32(v5);
						}
						if((fbits & 1) != 0) {
							var s = v4.name;
							if(s == null) {
								ctx.out.b.push(0);
							} else {
								var v6 = s.length + 1;
								if(v6 >= 0 && v6 < 128) {
									ctx.out.b.push(v6);
								} else {
									ctx.out.b.push(128);
									ctx.out.addInt32(v6);
								}
								var _this2 = ctx.out;
								var src2 = haxe_io_Bytes.ofString(s);
								var b22 = src2.b;
								var _g12 = 0;
								var _g4 = src2.length;
								while(_g12 < _g4) _this2.b.push(b22[_g12++]);
							}
						}
						ctx.out.b.push(v4.opt ? 1 : 0);
						if((fbits & 2) != 0) {
							hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v4.type);
						}
					}
				}
			}
			break;
		case 10:
			ctx.out.b.push(11);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			break;
		case 11:
			ctx.out.b.push(12);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			break;
		case 12:
			ctx.out.b.push(13);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			break;
		case 13:
			ctx.out.b.push(14);
			break;
		case 14:
			ctx.out.b.push(15);
			break;
		case 15:
			ctx.out.b.push(16);
			break;
		case 16:
			ctx.out.b.push(17);
			hxbit_enumSer_hxbit_$PropTypeDesc.doSerialize(ctx,v[2]);
			break;
		case 17:
			ctx.out.b.push(18);
			break;
		}
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name1;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		if(len1 == 0) {
			_name1 = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			_name1 = s1;
		}
		return hxbit_PropTypeDesc.PEnum(_name1);
	case 8:
		return hxbit_PropTypeDesc.PMap(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx),hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 9:
		return hxbit_PropTypeDesc.PArray(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 10:
		var _fields;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len2 = v2;
		if(len2 == 0) {
			_fields = null;
		} else {
			--len2;
			var a = [];
			var _g1 = 0;
			var _g = len2;
			while(_g1 < _g) {
				var i = _g1++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var opt;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v4;
						if(len3 == 0) {
							name = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							name = s2;
						}
					}
					opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						type = hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx);
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		return hxbit_PropTypeDesc.PAlias(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 12:
		return hxbit_PropTypeDesc.PVector(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 13:
		return hxbit_PropTypeDesc.PNull(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		return hxbit_PropTypeDesc.PFlags(hxbit_enumSer_hxbit_$PropTypeDesc.doUnserialize(ctx));
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var s1 = s.fieldsTypes;
	var _g = [];
	var _g1 = 0;
	var _g2 = [hxbit_PropTypeDesc.PString];
	while(_g1 < _g2.length) {
		var t = _g2[_g1];
		++_g1;
		_g.push({ name : "", type : t, opt : false});
	}
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PSerializable");
	var s2 = s.fieldsTypes;
	var _g11 = [];
	var _g21 = 0;
	var _g3 = [hxbit_PropTypeDesc.PString];
	while(_g21 < _g3.length) {
		var t1 = _g3[_g21];
		++_g21;
		_g11.push({ name : "", type : t1, opt : false});
	}
	s2.push(hxbit_PropTypeDesc.PObj(_g11));
	s.fieldsNames.push("PEnum");
	var s3 = s.fieldsTypes;
	var _g22 = [];
	var _g31 = 0;
	var _g4 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g31 < _g4.length) {
		var t2 = _g4[_g31];
		++_g31;
		_g22.push({ name : "", type : t2, opt : false});
	}
	s3.push(hxbit_PropTypeDesc.PObj(_g22));
	s.fieldsNames.push("PMap");
	var s4 = s.fieldsTypes;
	var _g32 = [];
	var _g41 = 0;
	var _g5 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g41 < _g5.length) {
		var t3 = _g5[_g41];
		++_g41;
		_g32.push({ name : "", type : t3, opt : false});
	}
	s4.push(hxbit_PropTypeDesc.PObj(_g32));
	s.fieldsNames.push("PArray");
	var s5 = s.fieldsTypes;
	var _g42 = [];
	var _g51 = 0;
	var _g6 = [hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ opt : false, type : hxbit_PropTypeDesc.PString, name : "name"},{ opt : false, type : hxbit_PropTypeDesc.PBool, name : "opt"},{ opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), name : "type"}]))];
	while(_g51 < _g6.length) {
		var t4 = _g6[_g51];
		++_g51;
		_g42.push({ name : "", type : t4, opt : false});
	}
	s5.push(hxbit_PropTypeDesc.PObj(_g42));
	s.fieldsNames.push("PObj");
	var s6 = s.fieldsTypes;
	var _g52 = [];
	var _g61 = 0;
	var _g7 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g61 < _g7.length) {
		var t5 = _g7[_g61];
		++_g61;
		_g52.push({ name : "", type : t5, opt : false});
	}
	s6.push(hxbit_PropTypeDesc.PObj(_g52));
	s.fieldsNames.push("PAlias");
	var s7 = s.fieldsTypes;
	var _g62 = [];
	var _g71 = 0;
	var _g8 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g71 < _g8.length) {
		var t6 = _g8[_g71];
		++_g71;
		_g62.push({ name : "", type : t6, opt : false});
	}
	s7.push(hxbit_PropTypeDesc.PObj(_g62));
	s.fieldsNames.push("PVector");
	var s8 = s.fieldsTypes;
	var _g72 = [];
	var _g81 = 0;
	var _g9 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g81 < _g9.length) {
		var t7 = _g9[_g81];
		++_g81;
		_g72.push({ name : "", type : t7, opt : false});
	}
	s8.push(hxbit_PropTypeDesc.PObj(_g72));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var s9 = s.fieldsTypes;
	var _g82 = [];
	var _g91 = 0;
	var _g10 = [hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")];
	while(_g91 < _g10.length) {
		var t8 = _g10[_g91];
		++_g91;
		_g82.push({ name : "", type : t8, opt : false});
	}
	s9.push(hxbit_PropTypeDesc.PObj(_g82));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	return s;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5GLRenderContext = function(context) {
	this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
	this.COLOR_ATTACHMENT0 = 36064;
	this.DEPTH_STENCIL = 34041;
	this.FRAMEBUFFER = 36160;
	this.CLAMP_TO_EDGE = 33071;
	this.TEXTURE0 = 33984;
	this.TEXTURE_2D = 3553;
	this.TEXTURE_WRAP_T = 10243;
	this.TEXTURE_WRAP_S = 10242;
	this.TEXTURE_MIN_FILTER = 10241;
	this.TEXTURE_MAG_FILTER = 10240;
	this.LINEAR = 9729;
	this.NEAREST = 9728;
	this.VERSION = 7938;
	this.RENDERER = 7937;
	this.VENDOR = 7936;
	this.DECR = 7683;
	this.INCR = 7682;
	this.KEEP = 7680;
	this.EQUAL = 514;
	this.SHADING_LANGUAGE_VERSION = 35724;
	this.RGBA = 6408;
	this.ALPHA = 6406;
	this.FLOAT = 5126;
	this.UNSIGNED_BYTE = 5121;
	this.MAX_VIEWPORT_DIMS = 3386;
	this.MAX_TEXTURE_SIZE = 3379;
	this.SCISSOR_TEST = 3089;
	this.STENCIL_TEST = 2960;
	this.BLEND = 3042;
	this.STATIC_DRAW = 35044;
	this.ARRAY_BUFFER = 34962;
	this.FUNC_REVERSE_SUBTRACT = 32779;
	this.FUNC_ADD = 32774;
	this.ONE_MINUS_DST_COLOR = 775;
	this.DST_COLOR = 774;
	this.ONE_MINUS_DST_ALPHA = 773;
	this.DST_ALPHA = 772;
	this.ONE_MINUS_SRC_ALPHA = 771;
	this.SRC_ALPHA = 770;
	this.ONE_MINUS_SRC_COLOR = 769;
	this.SRC_COLOR = 768;
	this.ONE = 1;
	this.ZERO = 0;
	this.TRIANGLE_STRIP = 5;
	this.COLOR_BUFFER_BIT = 16384;
	this.STENCIL_BUFFER_BIT = 1024;
	this.__context = context;
	this.version = 1;
	this.type = lime_graphics_opengl_GLContextType.WEBGL;
	if(context != null) {
		var gl = context;
		if(Object.prototype.hasOwnProperty.call(context,"rawgl")) {
			gl = Reflect.field(context,"rawgl");
		}
		if(Object.prototype.hasOwnProperty.call(window,"WebGL2RenderingContext") && js_Boot.__instanceof(gl,WebGL2RenderingContext)) {
			this.version = 2;
		}
	}
};
$hxClasses["lime._backend.html5.HTML5GLRenderContext"] = lime__$backend_html5_HTML5GLRenderContext;
lime__$backend_html5_HTML5GLRenderContext.__name__ = ["lime","_backend","html5","HTML5GLRenderContext"];
lime__$backend_html5_HTML5GLRenderContext.prototype = {
	STENCIL_BUFFER_BIT: null
	,COLOR_BUFFER_BIT: null
	,TRIANGLE_STRIP: null
	,ZERO: null
	,ONE: null
	,SRC_COLOR: null
	,ONE_MINUS_SRC_COLOR: null
	,SRC_ALPHA: null
	,ONE_MINUS_SRC_ALPHA: null
	,DST_ALPHA: null
	,ONE_MINUS_DST_ALPHA: null
	,DST_COLOR: null
	,ONE_MINUS_DST_COLOR: null
	,FUNC_ADD: null
	,FUNC_REVERSE_SUBTRACT: null
	,ARRAY_BUFFER: null
	,STATIC_DRAW: null
	,BLEND: null
	,STENCIL_TEST: null
	,SCISSOR_TEST: null
	,MAX_TEXTURE_SIZE: null
	,MAX_VIEWPORT_DIMS: null
	,UNSIGNED_BYTE: null
	,FLOAT: null
	,ALPHA: null
	,RGBA: null
	,SHADING_LANGUAGE_VERSION: null
	,EQUAL: null
	,KEEP: null
	,INCR: null
	,DECR: null
	,VENDOR: null
	,RENDERER: null
	,VERSION: null
	,NEAREST: null
	,LINEAR: null
	,TEXTURE_MAG_FILTER: null
	,TEXTURE_MIN_FILTER: null
	,TEXTURE_WRAP_S: null
	,TEXTURE_WRAP_T: null
	,TEXTURE_2D: null
	,TEXTURE0: null
	,CLAMP_TO_EDGE: null
	,FRAMEBUFFER: null
	,DEPTH_STENCIL: null
	,COLOR_ATTACHMENT0: null
	,UNPACK_PREMULTIPLY_ALPHA_WEBGL: null
	,type: null
	,version: null
	,__context: null
	,__contextLost: null
	,bufferDataWEBGL: function(target,srcData,usage,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferData(target,srcData,usage,srcOffset,length);
		} else {
			this.__context.bufferData(target,srcData,usage);
		}
	}
	,texImage2DWEBGL: function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
		} else if(format != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
		} else {
			this.__context.texImage2D(target,level,internalformat,width,height,border);
		}
	}
	,__class__: lime__$backend_html5_HTML5GLRenderContext
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit && lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$backend_html5_HTML5HTTPRequest.originHostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$backend_html5_HTML5HTTPRequest.originProtocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$backend_html5_HTML5HTTPRequest.originPort = lime__$backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	if(protocol != "file:" && (hostname == "" || hostname == lime__$backend_html5_HTML5HTTPRequest.originHostname)) {
		return port == "" || port == lime__$backend_html5_HTML5HTTPRequest.originPort;
	} else {
		return false;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		if(this.parent.context[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			var allowWebGL2 = this.parent.window.backend.renderType != "webgl1";
			var transparentBackground = Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(this.parent.window.config,"colorDepth") ? this.parent.window.config.colorDepth : 16;
			var options = Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer") ? this.parent.window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer, preserveDrawingBuffer : false};
			var glContextType = ["webgl","experimental-webgl"];
			if(allowWebGL2) {
				glContextType.unshift("webgl2");
			}
			var _g = 0;
			while(_g < glContextType.length) {
				var name = glContextType[_g];
				++_g;
				webgl = this.parent.window.backend.canvas.getContext(name,options1);
				if(webgl != null) {
					break;
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = new lime__$backend_html5_HTML5GLRenderContext(webgl);
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,handleEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			event.preventDefault();
			if(lime_graphics_opengl_GL.context != null) {
				lime_graphics_opengl_GL.context.__contextLost = true;
			}
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"renderer")) {
		this.renderType = parent.config.renderer;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else if(this.renderType == "dom") {
			this.div = window.document.createElement("div");
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.cacheElementWidth = this.parent.__width;
			this.cacheElementHeight = this.parent.__height;
			this.resizeElement = true;
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.updateSize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.enableTextEvents) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.enableTextEvents) {
						lime__$backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g1 = 0;
			var _g = changeEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$backend_html5_HTML5Window.textInput.value,lime__$backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.enableTextEvents) {
				this.parent.onTextInput.dispatch(text);
			}
			event.preventDefault();
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,setClipboard: function(value) {
		var inputEnabled = this.enableTextEvents;
		this.setEnableTextEvents(true);
		var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
		lime__$backend_html5_HTML5Window.textInput.value = value;
		lime__$backend_html5_HTML5Window.textInput.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		lime__$backend_html5_HTML5Window.textInput.value = cacheText;
		this.setEnableTextEvents(inputEnabled);
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.requestFullscreen();
				} else if(this.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.mozRequestFullScreen();
				} else if(this.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.element.webkitRequestFullscreen();
				} else if(this.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.element != null) {
			elementWidth = this.element.clientWidth;
			elementHeight = this.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.set_width(elementWidth);
						this.parent.set_height(elementHeight);
						if(this.canvas != null) {
							if(this.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 153, className : "lime.app.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 191, className : "lime.app.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 223, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 227, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 276, className : "lime.app.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							if(__map_reserved[name2[0]] != null) {
								total1 = _this6.getReserved(name2[0]);
							} else {
								total1 = _this6.h[name2[0]];
							}
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 335, className : "lime.app.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 349, className : "lime.app.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,type: null
	,version: null
	,width: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		switch(this.type[1]) {
		case 0:
			if(alphaImage != null || sourceImage.type != lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return bgra;
				default:
					var rgba1 = 0;
					rgba1 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var argb2 = 0;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var argb3 = 0;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var argb4 = 0;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var argb5 = 0;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {get_rect:"get_rect",set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_format:"set_format",get_format:"get_format",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			buffer.data.set(this2);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
	}
	,render: function() {
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function() { };
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.prototype = {
	__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = { __ename__ : ["lime","graphics","opengl","GLContextType"], __constructs__ : ["OPENGL","GLES","WEBGL"] };
lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL",0];
lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.GLES = ["GLES",1];
lime_graphics_opengl_GLContextType.GLES.toString = $estr;
lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL",2];
lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
var lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGLContext.WebGLContext_Impl_"] = lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$;
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGLContext","WebGLContext_Impl_"];
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferDataWEBGL(target,srcData,usage,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,null);
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.byteOffset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			offset = row + _g3++ * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						++_g3;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						++_g31;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						++_g32;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						++_g33;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255)) & 255;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.byteOffset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var offset = row + _g3++ * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var fromPreMult;
	if(image.buffer.premultiplied || sourceImage.buffer.premultiplied) {
		fromPreMult = function(col,alpha) {
			var col1 = col | 0;
			if(col1 < 0) {
				return 0;
			} else if(col1 > 255) {
				return 255;
			} else {
				return col1;
			}
		};
	} else {
		fromPreMult = function(col2,alpha1) {
			var col3 = col2 / alpha1 * 255 | 0;
			if(col3 < 0) {
				return 0;
			} else if(col3 > 255) {
				return 255;
			} else {
				return col3;
			}
		};
	}
	var boxesForGauss = function(sigma,n) {
		var wl = Math.floor(Math.sqrt(12 * sigma * sigma / n + 1));
		if(wl % 2 == 0) {
			--wl;
		}
		var wu = wl + 2;
		var m = Math.round((12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4));
		var sizes = [];
		var _g1 = 0;
		while(_g1 < n) sizes.push(_g1++ < m ? wl : wu);
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g11 = 0;
		while(_g11 < h) {
			var ti = _g11++ * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g3 = 0;
			while(_g3 < r) val = val + imgA[(ti + _g3++) * 4 + off];
			var _g31 = 0;
			var _g2 = r + 1;
			while(_g31 < _g2) {
				++_g31;
				val = val + (imgA[ri * 4 + off] - fv);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++ti;
			}
			var _g32 = r + 1;
			var _g21 = w - r;
			while(_g32 < _g21) {
				++_g32;
				val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++li;
				++ti;
			}
			var _g33 = w - r;
			while(_g33 < w) {
				++_g33;
				val = val + (lv - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++li;
				++ti;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g12 = 0;
		while(_g12 < w1) {
			var ti1 = _g12++ * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val1 = (r1 + 1) * fv1;
			var _g34 = 0;
			while(_g34 < r1) val1 = val1 + imgA1[ti1 + _g34++ * ws];
			var _g35 = 0;
			var _g22 = r1 + 1;
			while(_g35 < _g22) {
				++_g35;
				val1 = val1 + (imgA1[ri1] - fv1);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				ri1 += ws;
				ti1 += ws;
			}
			var _g36 = r1 + 1;
			var _g23 = h1 - r1;
			while(_g36 < _g23) {
				++_g36;
				val1 = val1 + (imgA1[ri1] - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g37 = h1 - r1;
			while(_g37 < h1) {
				++_g37;
				val1 = val1 + (lv1 - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g13 = 0;
		var _g = imgA2.length;
		while(_g13 < _g) {
			var i = _g13++;
			imgB2[i] = imgA2[i];
		}
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,0);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,1);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,2);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,3);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,0);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,1);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,2);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,3);
	};
	var imgB3 = image.get_data();
	var imgA3 = sourceImage.get_data();
	var w3 = sourceRect.width | 0;
	var h3 = sourceRect.height | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss((blurX | 0) * rng,n1);
	var bys = boxesForGauss((blurY | 0) * rng,n1);
	var offset = (w3 * oY + oX) * 4 | 0;
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g14 = 0;
	var _g4 = n1 / 2 | 0;
	while(_g14 < _g4) {
		++_g14;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var x;
	var y;
	if(offset <= 0) {
		y = 0;
		while(y < h3) {
			x = 0;
			while(x < w3) {
				var sourceRect1 = sourceImage.get_rect();
				var d = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX = x - (destPoint.x | 0);
				var sourceY = y - (destPoint.y | 0);
				var s = sourceX < 0 || sourceY < 0 || sourceX >= sourceRect1.width || sourceY >= sourceRect1.height ? -1 : 4 * (sourceY * (sourceRect1.width | 0) + sourceX);
				var a = s >= 0 ? _$UInt_UInt_$Impl_$.toFloat(imgB3[s + 3]) * strength | 0 : 0;
				if(a < 0) {
					a = 0;
				} else if(a > 255) {
					a = 255;
				} else {
					a = a;
				}
				imgB3[d] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s]),a) : 0;
				imgB3[d + 1] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s + 1]),a) : 0;
				imgB3[d + 2] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s + 2]),a) : 0;
				imgB3[d + 3] = a;
				++x;
			}
			++y;
		}
	} else {
		y = h3 - 1;
		while(y >= 0) {
			x = w3 - 1;
			while(x >= 0) {
				var sourceRect2 = sourceImage.get_rect();
				var d1 = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX1 = x - (destPoint.x | 0);
				var sourceY1 = y - (destPoint.y | 0);
				var s1 = sourceX1 < 0 || sourceY1 < 0 || sourceX1 >= sourceRect2.width || sourceY1 >= sourceRect2.height ? -1 : 4 * (sourceY1 * (sourceRect2.width | 0) + sourceX1);
				var a1 = s1 >= 0 ? _$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 3]) * strength | 0 : 0;
				if(a1 < 0) {
					a1 = 0;
				} else if(a1 > 255) {
					a1 = 255;
				} else {
					a1 = a1;
				}
				imgB3[d1] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1]),a1) : 0;
				imgB3[d1 + 1] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 1]),a1) : 0;
				imgB3[d1 + 2] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 2]),a1) : 0;
				imgB3[d1 + 3] = a1;
				--x;
			}
			--y;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imgB3 == image.get_data()) {
		return image;
	}
	return sourceImage;
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	while(_g2 < length) {
		index = _g2++ * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var rgba2 = 0;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var rgba3 = 0;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var rgba4 = 0;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var rgba5 = 0;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.__update();
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = new Uint8Array(256);
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
var lime_math_Matrix3 = function() { };
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: lime_math_Rectangle
	,__properties__: {get_right:"get_right",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,__class__: lime_math_Vector4
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
var lime_media_ALAudioContext = function() { };
$hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
lime_media_ALAudioContext.__name__ = ["lime","media","ALAudioContext"];
var lime_media_ALCAudioContext = function() { };
$hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
lime_media_ALCAudioContext.__name__ = ["lime","media","ALCAudioContext"];
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	switch(bytes.getString(0,4)) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g2 = bytes.b[2];
		var _g11 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g11 == 68) {
				if(_g2 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 493, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	__srcHowl: null
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src"}
};
var lime_media_AudioContext = $hxClasses["lime.media.AudioContext"] = { __ename__ : ["lime","media","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_media_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_media_AudioManager.context = lime_media_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_media_AudioManager.context = lime_media_AudioContext.HTML5(new lime_media_HTML5AudioContext());
			}
		} else {
			lime_media_AudioManager.context = context;
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		this.backend.play();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",set_length:"set_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() { };
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = ["lime","media","FlashAudioContext"];
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,backend: null
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__windows[0];
	if($window != null) {
		$window.backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_DisplayMode = function() { };
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_endianness:"get_endianness"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,windowConfig) {
	if(lime_system_System.__applicationEntryPoint == null || lime_system_System.__applicationConfig == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		var _this1 = lime_system_System.__applicationConfig;
		var defaultConfig = __map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName];
		var config = { };
		lime_system_System.__copyMissingFields(config,defaultConfig);
		if(windowConfig != null) {
			config.windows = [];
			if((windowConfig instanceof Array) && windowConfig.__enum__ == null) {
				config.windows = windowConfig;
			} else {
				config.windows[0] = windowConfig;
			}
			var _g1 = 0;
			var _g = config.windows.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i < defaultConfig.windows.length) {
					lime_system_System.__copyMissingFields(config.windows[i],defaultConfig.windows[i]);
				}
				lime_system_System.__copyMissingFields(config.windows[i].parameters,defaultConfig.windows[i].parameters);
				if(typeof(windowConfig.background) == "string") {
					var background = StringTools.replace(Std.string(windowConfig.background),"#","");
					if(background.indexOf("0x") > -1) {
						windowConfig.background = Std.parseInt(background);
					} else {
						windowConfig.background = Std.parseInt("0x" + background);
					}
				}
			}
		}
		if(Reflect.field(config.windows[0],"rootPath")) {
			config.rootPath = Reflect.field(config.windows[0],"rootPath");
			Reflect.deleteField(config.windows[0],"rootPath");
		}
		config.windows[0].element = htmlElement;
		config.windows[0].width = width;
		config.windows[0].height = height;
		var _this2 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this2.getReserved(projectName) : _this2.h[projectName])(config);
	}
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint,config) {
	if(lime_system_System.__applicationConfig == null) {
		lime_system_System.__applicationConfig = new haxe_ds_StringMap();
	}
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
	var _this1 = lime_system_System.__applicationConfig;
	if(__map_reserved[projectName] != null) {
		_this1.setReserved(projectName,config);
	} else {
		_this1.h[projectName] = config;
	}
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var this1;
		if(arrayBuffer != null) {
			this1 = new Uint8Array(arrayBuffer,0);
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var this2;
		if(arrayBuffer != null) {
			this2 = new Uint16Array(arrayBuffer,0);
		} else {
			this2 = null;
		}
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(this2[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	var s = this1;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = s.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = s.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		i = 0;
	}
	var s1 = this1;
	var c1 = s1.charCodeAt(i);
	return HxOverrides.substr(s1,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2);
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	if(index < 0 || index >= lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this1,0,this1.length)) {
		return null;
	}
	var s = this1;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = s.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = s.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		i = 0;
	}
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this1,i);
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var s = this1;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = s.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = s.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		index = 0;
	}
	var index2 = this1.indexOf(str,index);
	if(index2 >= 0) {
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this1,0,index2);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	return HxOverrides.substr(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var s = this1;
		if(startIndex >= 0) {
			var index = 0;
			var len = s.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = s.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			si = 0;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = this1.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var s1 = this1;
		if(endIndex >= 0) {
			var index1 = 0;
			var len1 = s1.length;
			var i1 = 0;
			while(i1 < endIndex && index1 < len1) {
				var c1 = s1.charCodeAt(index1);
				index1 += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index1;
		} else {
			ei = 0;
		}
	}
	return this1.substring(si,ei);
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var lime_text_unifill_Exception = function() {
};
$hxClasses["lime.text.unifill.Exception"] = lime_text_unifill_Exception;
lime_text_unifill_Exception.__name__ = ["lime","text","unifill","Exception"];
lime_text_unifill_Exception.prototype = {
	__class__: lime_text_unifill_Exception
};
var lime_text_unifill_InvalidCodeUnitSequence = function(index) {
	lime_text_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime.text.unifill.InvalidCodeUnitSequence"] = lime_text_unifill_InvalidCodeUnitSequence;
lime_text_unifill_InvalidCodeUnitSequence.__name__ = ["lime","text","unifill","InvalidCodeUnitSequence"];
lime_text_unifill_InvalidCodeUnitSequence.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodeUnitSequence.prototype = $extend(lime_text_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime_text_unifill_InvalidCodeUnitSequence
});
var lime_text_unifill_Unifill = function() { };
$hxClasses["lime.text.unifill.Unifill"] = lime_text_unifill_Unifill;
lime_text_unifill_Unifill.__name__ = ["lime","text","unifill","Unifill"];
lime_text_unifill_Unifill.uCompare = function(a,b) {
	var aiter_index;
	var aiter_i;
	var endIndex = a.length;
	aiter_i = 0;
	aiter_index = 0;
	var biter_index;
	var biter_i;
	var endIndex1 = b.length;
	biter_i = 0;
	biter_index = 0;
	while(aiter_index < endIndex && biter_index < endIndex1) {
		aiter_i = aiter_index;
		var c = a.charCodeAt(aiter_index);
		aiter_index += !(55296 <= c && c <= 56319) ? 1 : 2;
		var acode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(a,aiter_i);
		biter_i = biter_index;
		var c1 = b.charCodeAt(biter_index);
		biter_index += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
		var bcode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(b,biter_i);
		if(acode < bcode) {
			return -1;
		}
		if(acode > bcode) {
			return 1;
		}
	}
	if(biter_index < endIndex1) {
		return -1;
	}
	if(aiter_index < endIndex) {
		return 1;
	}
	return 0;
};
var lime_text_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.Utf16_Impl_"] = lime_text_unifill__$Utf16_Utf16_$Impl_$;
lime_text_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","Utf16_Impl_"];
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return i;
};
var lime_text_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime.text.unifill._Utf16.Utf16Impl"] = lime_text_unifill__$Utf16_Utf16Impl;
lime_text_unifill__$Utf16_Utf16Impl.__name__ = ["lime","text","unifill","_Utf16","Utf16Impl"];
lime_text_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) {
			return hi - 55232 << 10 | lo & 1023;
		} else {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
	} else if(56320 <= hi && hi <= 57343) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,__class__: lime_ui_Joystick
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_cursor:"set_cursor"};
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		if(this.config == null) {
			this.config = { };
		}
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,resize: function(width,height) {
		this.__width = width;
		this.__height = height;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_width:"set_width",set_height:"set_height",set_fullscreen:"set_fullscreen"}
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 135608;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 140, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		switch(type != null ? js_Boot.__cast(type , String) : null) {
		case "FONT":
			return this.cachedFonts.exists(id);
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 440, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				if(__map_reserved[id] != null) {
					tmp = _this3.existsReserved(id);
				} else {
					tmp = _this3.h.hasOwnProperty(id);
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 686, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var _this1 = this.sizes;
			var size = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			var _this2 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this3 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this4 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this4.setReserved(id,size);
			} else {
				_this4.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this.preload;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			var tmp;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				if(__map_reserved[id] != null) {
					tmp = _this7.getReserved(id);
				} else {
					tmp = _this7.h[id];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this8 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(rootPath != null) {
		manifest.rootPath = rootPath;
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.libraryPaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null) {
			path = _this1.getReserved(id);
		} else {
			path = _this1.h[id];
		}
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) {
		path += "/library.json";
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			var _this2 = lime_utils_Assets.libraries;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,library1);
			} else {
				_this2.h[id] = library1;
			}
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	return new lime_net__$HTTPRequest_$lime_$utils_$Bytes().load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = ["lime","utils","_DataPointer","DataPointer_Impl_"];
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	return data;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(arrayBufferView));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,byteoffset);
			} else {
				this2 = new Float32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) {
			return data.bufferView;
		} else {
			if(length > data.bufferView.byteLength) {
				length = data.bufferView.byteLength;
			}
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Float32Array(buffer1,byteoffset1);
				} else {
					this3 = new Float32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	if(_g[1] == 2) {
		return data.offset;
	} else {
		return 0;
	}
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else {
		this.type = lime_utils_DataPointerObjectType.VALUE;
	}
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35632:
			message = "Error compiling fragment shader";
			break;
		case 35633:
			message = "Error compiling vertex shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.__context.createProgram();
	lime_graphics_opengl_GL.context.__context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.__context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.__context.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message = "Unable to initialize the shader program" + ("\n" + lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program));
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 58, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + message;
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + message);
	}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.__properties__ = {get_current:"get_current"};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,window) {
	if(window == null) {
		window = "_blank";
	}
	var uri = request.url;
	if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,window);
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = ["openfl","_Vector","AbstractVector"];
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,get: null
	,indexOf: null
	,push: null
	,set: null
	,splice: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = false;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = null;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) this.__array[_g1++] = 0;
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					++_g1;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
var openfl__$internal_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.TouchData"] = openfl__$internal_TouchData;
openfl__$internal_TouchData.__name__ = ["openfl","_internal","TouchData"];
openfl__$internal_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_TouchData
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,renderStage3D: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,initShader: function(shader) {
		return shader;
	}
	,setShader: function(shader) {
	}
	,updateShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var c7 = data;
				this.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var c8 = data;
				this.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var c9 = data;
				this.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
				break;
			case 11:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				this.endFill();
				break;
			case 12:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var c10 = data;
				this.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 13:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var c11 = data;
				this.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 14:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var c12 = data;
				this.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],c12.buffer.f[c12.fPos],c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 15:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var c13 = data;
				this.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 16:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var c14 = data;
				this.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 17:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var c15 = data;
				this.overrideMatrix(c15.buffer.o[c15.oPos]);
				break;
			case 18:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				this.windingEvenOdd();
				break;
			case 19:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",18];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",19];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",20];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.allowSmoothing = true;
	this.clearRenderDirty = false;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,clearRenderDirty: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,renderType: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,z: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasBlendModeManager"];
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.renderSession.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.renderSession.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.renderSession.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.renderSession.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.renderSession.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.renderSession.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.renderSession.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.renderSession.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.renderSession.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.renderSession.context.globalCompositeOperation = "screen";
			break;
		default:
			this.renderSession.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
});
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x = px - (openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx);
		y = py - (openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty);
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var c = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var c1 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else {
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var c2 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],1);
				}
				break;
			case 3:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var c8 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 11:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var c9 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.b[c9.bPos],c9.buffer.b[c9.bPos + 1]);
				break;
			case 13:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c10.buffer.o[c10.oPos],c10.buffer.ii[c10.iiPos],c10.buffer.ff[c10.ffPos],c10.buffer.ii[c10.iiPos + 1],c10.buffer.o[c10.oPos + 1],c10.buffer.o[c10.oPos + 2],c10.buffer.o[c10.oPos + 3],c10.buffer.f[c10.fPos]);
				break;
			case 14:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c11.buffer.o[c11.oPos],c11.buffer.i[c11.iPos],1,c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				break;
			case 15:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],true,c.buffer.b[c.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c.buffer.o[c.oPos + 1] != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var c1 = data;
				if(c1.buffer.f[c1.fPos] < 0.005) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				} else {
					if(c1.buffer.f[c1.fPos] == 1) {
						var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
					} else {
						r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
						g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
						b = c1.buffer.i[c1.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 3:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2] - offsetX,c3.buffer.f[c3.fPos + 3] - offsetY,c3.buffer.f[c3.fPos + 4] - offsetX,c3.buffer.f[c3.fPos + 5] - offsetY);
				break;
			case 4:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY);
				break;
			case 5:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 1] - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var c6 = data;
				x = c6.buffer.f[c6.fPos];
				y = c6.buffer.f[c6.fPos + 1];
				width = c6.buffer.f[c6.fPos + 2];
				height = c6.buffer.f[c6.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * .5522848;
				oy = height / 2 * .5522848;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var c7 = data;
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
							canOptimizeMatrix = false;
						} else {
							if(stl == null) {
								stl = openfl_geom_Point.__pool.get();
							}
							if(sbr == null) {
								sbr = openfl_geom_Point.__pool.get();
							}
							stl.setTo(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1]);
							var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px = stl.x;
							var py = stl.y;
							stl.x = px * _this.a + py * _this.c + _this.tx;
							stl.y = px * _this.b + py * _this.d + _this.ty;
							sbr.setTo(c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3]);
							var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px1 = sbr.x;
							var py1 = sbr.y;
							sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
							sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c7.buffer.f[c7.fPos + 1];
						sl = c7.buffer.f[c7.fPos];
						sb = c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3];
						sr = c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2];
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
						}
					}
				}
				if(!optimizationUsed) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				}
				break;
			case 8:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var c8 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c8.buffer.f[c8.fPos] - offsetX,c8.buffer.f[c8.fPos + 1] - offsetY,c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var c9 = data;
				var v = c9.buffer.o[c9.oPos];
				var ind = c9.buffer.o[c9.oPos + 1];
				var uvt = c9.buffer.o[c9.oPos + 2];
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g2 = v.data.get_length() / 2 | 0;
						while(_g3 < _g2) {
							var i = _g3++;
							var x1 = v.data.get(i * 2);
							uvt.data.push(x1 - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
							var x2 = v.data.get(i * 2 + 1);
							uvt.data.push(x2 - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
					}
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,uvt.data.get_length() != v.data.get_length());
					uvt = normalizedUVT.uvt;
					if(normalizedUVT.max > 1) {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
					} else {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var i1 = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y1;
				var x21;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x11 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x21 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					switch(c9.buffer.o[c9.oPos + 3]) {
					case 0:
						if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					uvx1 = uvt.data.get(iax) * pattern.width;
					uvx2 = uvt.data.get(ibx) * pattern.width;
					uvx3 = uvt.data.get(icx) * pattern.width;
					uvy1 = uvt.data.get(iay) * pattern.height;
					uvy2 = uvt.data.get(iby) * pattern.height;
					uvy3 = uvt.data.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i1 += 3;
				}
				break;
			case 12:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var c10 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 13:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var c11 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 14:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var c12 = data;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c12.buffer.o[c12.oPos] == null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1;
					var tmp1 = c12.buffer.o[c12.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 3]).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
					var tmp2 = c12.buffer.o[c12.oPos + 2] == null ? "round" : c12.buffer.o[c12.oPos + 2] == 0 ? "butt" : openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 2]).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c12.buffer.f[c12.fPos + 1];
					if(c12.buffer.f[c12.fPos] == 1) {
						var tmp3 = StringTools.hex(c12.buffer.i[c12.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
					} else {
						r = (c12.buffer.i[c12.iPos] & 16711680) >>> 16;
						g = (c12.buffer.i[c12.iPos] & 65280) >>> 8;
						b = c12.buffer.i[c12.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c12.buffer.f[c12.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 15:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY);
				positionX = c13.buffer.f[c13.fPos];
				positionY = c13.buffer.f[c13.fPos + 1];
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 16:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var c14 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY);
				positionX = c14.buffer.f[c14.fPos];
				positionY = c14.buffer.f[c14.fPos + 1];
				if(setStart) {
					closeGap = true;
				}
				startX = c14.buffer.f[c14.fPos];
				startY = c14.buffer.f[c14.fPos + 1];
				setStart = true;
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			if(renderSession.renderType == lime_graphics_RendererType.DOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.resetTransform();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else {
						switch(data.prev[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
					}
					break;
				case 3:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var c3 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					} else {
						initStrokeX = c3.buffer.f[c3.fPos + 4];
						initStrokeY = c3.buffer.f[c3.fPos + 5];
					}
					break;
				case 4:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var c4 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 2];
						initStrokeY = c4.buffer.f[c4.fPos + 3];
					}
					break;
				case 5:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var c5 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					}
					break;
				case 6:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var c6 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					}
					break;
				case 7:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					}
					break;
				case 10:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
					break;
				case 11:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 12:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var c10 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
					break;
				case 13:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var c11 = data;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
					break;
				case 14:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var c12 = data;
					if(!hasLineStyle && c12.buffer.o[c12.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c12.buffer.o[c12.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],c12.buffer.f[c12.fPos],c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
					break;
				case 15:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var c13 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					} else {
						initStrokeX = c13.buffer.f[c13.fPos];
						initStrokeY = c13.buffer.f[c13.fPos + 1];
					}
					break;
				case 16:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var c14 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					} else {
						initStrokeX = c14.buffer.f[c14.fPos];
						initStrokeY = c14.buffer.f[c14.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 5:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var c3 = data;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= 0;
				y -= 0;
				ox = width / 2 * .5522848;
				oy = height / 2 * .5522848;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1]);
				break;
			case 16:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1]);
				break;
			default:
				switch(data.prev[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.CANVAS;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(this.renderSession);
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCanvas(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.dom.DOMBlendModeManager"] = openfl__$internal_renderer_dom_DOMBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.__name__ = ["openfl","_internal","renderer","dom","DOMBlendModeManager"];
openfl__$internal_renderer_dom_DOMBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		if(this.renderSession.context != null) {
			switch(blendMode) {
			case 0:
				this.renderSession.context.globalCompositeOperation = "lighter";
				break;
			case 1:
				this.renderSession.context.globalCompositeOperation = "destination-in";
				break;
			case 2:
				this.renderSession.context.globalCompositeOperation = "darken";
				break;
			case 3:
				this.renderSession.context.globalCompositeOperation = "difference";
				break;
			case 4:
				this.renderSession.context.globalCompositeOperation = "destination-out";
				break;
			case 5:
				this.renderSession.context.globalCompositeOperation = "hard-light";
				break;
			case 7:
				this.renderSession.context.globalCompositeOperation = "source-over";
				break;
			case 8:
				this.renderSession.context.globalCompositeOperation = "lighten";
				break;
			case 9:
				this.renderSession.context.globalCompositeOperation = "multiply";
				break;
			case 11:
				this.renderSession.context.globalCompositeOperation = "overlay";
				break;
			case 12:
				this.renderSession.context.globalCompositeOperation = "screen";
				break;
			default:
				this.renderSession.context.globalCompositeOperation = "source-over";
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMBlendModeManager
});
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderSession) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_dom_DOMBlendModeManager(this.renderSession);
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.DOM;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	renderSession.maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderSession) {
	if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderSession) {
	if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		renderSession.filterManager.pushObject(bitmap);
		var shader = renderSession.shaderManager.initShader(bitmap.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		var useColorTransform = !bitmap.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) {
			shader.get_data().uColorTransform.value = [];
		}
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		gl.__context.vertexAttribPointer(index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		var index1 = shader.get_data().aTexCoord.index;
		gl.__context.vertexAttribPointer(index1,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
		var index2 = shader.get_data().aAlpha.index;
		gl.__context.vertexAttribPointer(index2,1,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20)));
		var index3 = shader.get_data().aColorMultipliers0.index;
		gl.__context.vertexAttribPointer(index3,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24)));
		var index4 = shader.get_data().aColorMultipliers1.index;
		gl.__context.vertexAttribPointer(index4,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40)));
		var index5 = shader.get_data().aColorMultipliers2.index;
		gl.__context.vertexAttribPointer(index5,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56)));
		var index6 = shader.get_data().aColorMultipliers3.index;
		gl.__context.vertexAttribPointer(index6,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72)));
		var index7 = shader.get_data().aColorOffsets.index;
		gl.__context.vertexAttribPointer(index7,4,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88)));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
openfl__$internal_renderer_opengl_GLBitmap.renderMask = function(bitmap,renderSession) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		gl.__context.vertexAttribPointer(index,3,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		var index1 = shader.get_data().aTexCoord.index;
		gl.__context.vertexAttribPointer(index1,2,gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.__context.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.__context.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		return;
	}
	,renderPass: function(target,shader) {
		if(target == null || shader == null) {
			return;
		}
		shader.get_data().uImage0.input = target;
		var tmp = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		var _this = this.gl;
		var target1 = this.gl.ARRAY_BUFFER;
		var buffer = target.getBuffer(this.gl,1,null);
		_this.__context.bindBuffer(target1,buffer);
		var _this1 = this.gl;
		var index = shader.get_data().aPosition.index;
		_this1.__context.vertexAttribPointer(index,3,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		var _this2 = this.gl;
		var index1 = shader.get_data().aTexCoord.index;
		_this2.__context.vertexAttribPointer(index1,2,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
		var _this3 = this.gl;
		var index2 = shader.get_data().aAlpha.index;
		_this3.__context.vertexAttribPointer(index2,1,this.gl.FLOAT,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20)));
		this.gl.__context.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\t\n\t\t\t\tmat4 colorMultiplier;\n\t\t\t\tcolorMultiplier[0] = vColorMultipliers0;\n\t\t\t\tcolorMultiplier[1] = vColorMultipliers1;\n\t\t\t\tcolorMultiplier[2] = vColorMultipliers2;\n\t\t\t\tcolorMultiplier[3] = vColorMultipliers3;\n\t\t\t\t\n\t\t\t\tcolor = vColorOffsets + (color * colorMultiplier);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aColorMultipliers0;\n\t\tattribute vec4 aColorMultipliers1;\n\t\tattribute vec4 aColorMultipliers2;\n\t\tattribute vec4 aColorMultipliers3;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers0 = aColorMultipliers0;\n\t\t\t\tvColorMultipliers1 = aColorMultipliers1;\n\t\t\t\tvColorMultipliers2 = aColorMultipliers2;\n\t\t\t\tvColorMultipliers3 = aColorMultipliers3;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.__context.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.__context.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.__context.disableVertexAttribArray(parameter2.index);
		}
		this.gl.__context.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.__context.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL) {
			this.gl.__context.disable(this.gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.__context.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL && textureCount > 0) {
			this.gl.__context.enable(this.gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__uniformMatrix2 = new Float32Array(4);
			this.__uniformMatrix3 = new Float32Array(9);
			this.__uniformMatrix4 = new Float32Array(16);
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),"#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1 ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource());
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var key = input.name;
					var _this = this.__isUniform;
					if(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) {
						input.index = this.gl.__context.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.__context.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var key1 = parameter.name;
					var _this1 = this.__isUniform;
					if(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) {
						parameter.index = this.gl.__context.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.__context.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var key2 = parameter1.name;
					var _this2 = this.__isUniform;
					if(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]) {
						parameter1.index = this.gl.__context.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.__context.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var key3 = parameter2.name;
					var _this3 = this.__isUniform;
					if(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]) {
						parameter2.index = this.gl.__context.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.__context.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.__context.activeTexture(this.gl.TEXTURE0 + textureCount);
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = input.input.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				if(input.smoothing) {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				switch(parameter.type) {
				case 0:
					this.gl.__context.uniform1i(index,value[0] ? 1 : 0);
					break;
				case 1:
					this.gl.__context.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case 2:
					this.gl.__context.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case 3:
					this.gl.__context.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else {
				var key = parameter.name;
				var _this1 = this.__isUniform;
				if(!(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])) {
					this.gl.__context.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				switch(parameter1.type) {
				case 4:
					this.gl.__context.uniform1f(index1,value1[0]);
					break;
				case 5:
					this.gl.__context.uniform2f(index1,value1[0],value1[1]);
					break;
				case 6:
					this.gl.__context.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.__context.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g21 = 0;
					while(_g21 < 4) {
						var i = _g21++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.__context.uniformMatrix2fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix2),16));
					break;
				case 16:
					var _g22 = 0;
					while(_g22 < 9) {
						var i1 = _g22++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.__context.uniformMatrix3fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix3),36));
					break;
				case 20:
					var _g23 = 0;
					while(_g23 < 16) {
						var i2 = _g23++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.__context.uniformMatrix4fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix4),64));
					break;
				default:
				}
			} else {
				var key1 = parameter1.name;
				var _this2 = this.__isUniform;
				if(!(__map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1])) {
					this.gl.__context.enableVertexAttribArray(parameter1.index);
					switch(parameter1.type) {
					case 12:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						break;
					case 16:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						break;
					case 20:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 3);
						break;
					default:
					}
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				switch(parameter2.type) {
				case 8:
					this.gl.__context.uniform1i(index2,value2[0]);
					break;
				case 9:
					this.gl.__context.uniform2i(index2,value2[0],value2[1]);
					break;
				case 10:
					this.gl.__context.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.__context.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var key2 = parameter2.name;
				var _this3 = this.__isUniform;
				if(!(__map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2])) {
					this.gl.__context.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,__class__: openfl_display_Shader
	,__properties__: {get_glVertexSource:"get_glVertexSource",get_glFragmentSource:"get_glFragmentSource",get_data:"get_data"}
};
var openfl__$internal_renderer_opengl_GLMaskShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskShader"] = openfl__$internal_renderer_opengl_GLMaskShader;
openfl__$internal_renderer_opengl_GLMaskShader.__name__ = ["openfl","_internal","renderer","opengl","GLMaskShader"];
openfl__$internal_renderer_opengl_GLMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_opengl_GLMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl__$internal_renderer_opengl_GLMaskShader
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,maskObjects: null
	,numClipRects: null
	,stencilReference: null
	,tempRect: null
	,pushMask: function(mask) {
		if(this.stencilReference == 0) {
			this.gl.__context.enable(this.gl.STENCIL_TEST);
			this.gl.__context.stencilMask(255);
			this.gl.__context.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(false,false,false,false);
		mask.__renderGLMask(this.renderSession);
		this.maskObjects.push(mask);
		this.stencilReference++;
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(true,true,true,true);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) {
			return;
		}
		if(this.stencilReference > 1) {
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(false,false,false,false);
			this.maskObjects.pop().__renderGLMask(this.renderSession);
			this.stencilReference--;
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(true,true,true,true);
		} else {
			this.stencilReference = 0;
			this.gl.__context.disable(this.gl.STENCIL_TEST);
		}
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.__context.scissor(Math.floor(clipRect.x),Math.floor(renderer.height - clipRect.y - clipRect.height),width,height);
		} else {
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,defaultRenderTarget) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = gl.__context.getParameter(gl.MAX_TEXTURE_SIZE);
	}
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.OPENGL;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) {
			stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		}
		this.resize(defaultRenderTarget != null ? defaultRenderTarget.width : Math.ceil(stage.window.__width * stage.window.__scale),defaultRenderTarget != null ? defaultRenderTarget.height : Math.ceil(stage.window.__height * stage.window.__scale));
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,defaultRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.__context.clearColor(0,0,0,0);
		} else {
			this.gl.__context.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped ? this.projectionFlipped : this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.values;
	}
	,render: function() {
		this.gl.__context.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.__context.clearColor(0,0,0,1);
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.__context.scissor(0,0,this.offsetX,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.__context.scissor(0,0,this.width,this.offsetY);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = this.renderTargetA.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this1 = this.gl;
				var target1 = this.gl.TEXTURE_2D;
				var texture1 = this.renderTargetB.getTexture(this.gl);
				_this1.__context.bindTexture(target1,texture1);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		this.displayMatrix = this.defaultRenderTarget == null ? this.stage.__displayMatrix : new openfl_geom_Matrix();
		var _this2 = this.displayMatrix;
		this.offsetX = Math.round(0 * _this2.a + 0 * _this2.c + _this2.tx);
		var _this3 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this3.b + 0 * _this3.d + _this3.ty);
		var _this4 = this.displayMatrix;
		this.displayWidth = Math.round((this.defaultRenderTarget == null ? this.stage.stageWidth : this.defaultRenderTarget.width) * _this4.a + 0 * _this4.c + _this4.tx - this.offsetX);
		var _this5 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this5.b + (this.defaultRenderTarget == null ? this.stage.stageHeight : this.defaultRenderTarget.height) * _this5.d + _this5.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.initShader(this.defaultShader);
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,initShader: function(shader) {
		if(shader != null) {
			if(shader.gl == null) {
				shader.gl = this.gl;
				shader.__init();
			}
			return shader;
		}
		return this.defaultShader;
	}
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.__context.useProgram(null);
			return;
		} else {
			this.currentShader = shader;
			this.initShader(shader);
			this.gl.__context.useProgram(shader.glProgram);
			this.currentShader.__enable();
		}
	}
	,updateShader: function(shader) {
		if(this.currentShader != null) {
			this.currentShader.__update();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var _g1 = 0;
		while(_g1 < 4096) this._registers.data.set(_g1++,-999999999.0);
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = function(gl) {
	this.__formatMapAlpha = new haxe_ds_IntMap();
	this.__formatMap = new haxe_ds_IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = ["openfl","_internal","stage3D","GLCompressedTextureFormats"];
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			this.__formatMap.h[0] = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMapAlpha.h[0] = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			this.__formatMap.h[2] = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMapAlpha.h[2] = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			this.__formatMap.h[1] = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.h[1] = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
		}
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.__context.getError();
	if(error != 0) {
		var errorText;
		switch(error) {
		case 0:
			errorText = "GL_NO_ERROR";
			break;
		case 1280:
			errorText = "GL_INVALID_ENUM";
			break;
		case 1281:
			errorText = "GL_INVALID_VALUE";
			break;
		case 1282:
			errorText = "GL_INVALID_OPERATION";
			break;
		case 1285:
			errorText = "GL_OUT_OF_MEMORY";
			break;
		case 1286:
			errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
			break;
		default:
			if(error == null) {
				errorText = "null";
			} else {
				errorText = "" + error;
			}
		}
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + errorText + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(mipmapGenerated == null) {
		mipmapGenerated = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.textureAlpha = textureAlpha;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,textureAlpha: null
	,__samplerDirty: null
	,set_lodBias: function(value) {
		if(this.lodBias != value) {
			this.__samplerDirty = true;
		}
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) {
			this.__samplerDirty = true;
		}
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) {
			this.__samplerDirty = true;
		}
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) {
			this.__samplerDirty = true;
		}
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
	,__properties__: {set_wrapModeT:"set_wrapModeT",set_wrapModeS:"set_wrapModeS",set_minFilter:"set_minFilter",set_maxAniso:"set_maxAniso",set_magFilter:"set_magFilter",set_lodBias:"set_lodBias"}
};
var openfl__$internal_stage3D_opengl_GLContext3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLContext3D"] = openfl__$internal_stage3D_opengl_GLContext3D;
openfl__$internal_stage3D_opengl_GLContext3D.__name__ = ["openfl","_internal","stage3D","opengl","GLContext3D"];
openfl__$internal_stage3D_opengl_GLContext3D.create = function(context) {
	var gl = context.__renderSession.gl;
	context.__vertexConstants = new Float32Array(512);
	context.__fragmentConstants = new Float32Array(512);
	var array = [1.0,1.0,1.0,1.0];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	context.__positionScale = this1;
	context.__samplerDirty = 0;
	context.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	context.__samplerStates = [];
	var _g = 0;
	while(_g < 8) context.__samplerStates[_g++] = new openfl__$internal_stage3D_SamplerState(gl.LINEAR,gl.LINEAR,gl.CLAMP_TO_EDGE,gl.CLAMP_TO_EDGE);
	context.maxBackBufferHeight = context.maxBackBufferWidth = gl.__context.getParameter(gl.MAX_VIEWPORT_DIMS);
	context.__backBufferAntiAlias = 0;
	context.__backBufferEnableDepthAndStencil = true;
	context.__backBufferWantsBestResolution = false;
	context.__frameCount = 0;
	context.__rttDepthAndStencil = false;
	context.__samplerDirty = 0;
	context.__stencilCompareMode = 0;
	context.__stencilRef = 0;
	context.__stencilReadMask = 255;
	var anisoExtension = gl.__context.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("MOZ_EXT_texture_filter_anisotropic");
	}
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	}
	context.__supportsPackedDepthStencil = true;
	openfl_display3D_Context3D.DEPTH_STENCIL = gl.DEPTH_STENCIL;
	context.__supportsAnisotropicFiltering = anisoExtension != null;
	if(context.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		var maxAnisotropy = gl.__context.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		context.__maxAnisotropyTexture2D = maxAnisotropy;
		context.__maxAnisotropyTexture2D = maxAnisotropy;
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = gl.__context.getParameter(gl.VENDOR);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = gl.__context.getParameter(gl.VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = gl.__context.getParameter(gl.RENDERER);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = gl.__context.getParameter(gl.SHADING_LANGUAGE_VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
openfl__$internal_stage3D_opengl_GLContext3D.__setViewport = function(originX,originY,width,height) {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		originY *= -1;
	}
	if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.viewport(originX,originY,width,height);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors = function() {
	if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
		return;
	}
	var src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
	var dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	switch(openfl_display3D_Context3D.__stateCache._srcBlendFactor) {
	case 0:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 1:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_COLOR;
		break;
	case 2:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 4:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_COLOR;
		break;
	case 5:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 7:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 9:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	switch(openfl_display3D_Context3D.__stateCache._destBlendFactor) {
	case 0:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 2:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 5:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 6:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_COLOR;
		break;
	case 7:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 8:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_COLOR;
		break;
	case 9:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.BLEND);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.blendFunc(src,dest);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport = function() {
	if(!openfl_display_Stage3D.__active) {
		openfl_display_Stage3D.__active = true;
		openfl__$internal_stage3D_opengl_GLContext3D.context.__renderSession.renderer.clear();
	}
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture == null && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth > 0 && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight > 0) {
		openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_x() | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_y() | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight);
	}
};
var openfl__$internal_stage3D_opengl_GLProgram3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLProgram3D"] = openfl__$internal_stage3D_opengl_GLProgram3D;
openfl__$internal_stage3D_opengl_GLProgram3D.__name__ = ["openfl","_internal","stage3D","opengl","GLProgram3D"];
openfl__$internal_stage3D_opengl_GLProgram3D["use"] = function(program,renderSession) {
	var gl = renderSession.gl;
	gl.__context.useProgram(program.__programID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	program.__vertexUniformMap.markAllDirty();
	program.__fragmentUniformMap.markAllDirty();
	var _g_head = program.__samplerUniforms.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(val.regCount == 1) {
			gl.__context.uniform1i(val.location,val.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
	var _g_head1 = program.__alphaSamplerUniforms.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		if(val1.regCount == 1) {
			gl.__context.uniform1i(val1.location,val1.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
};
var openfl__$internal_stage3D_opengl_GLRectangleTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLRectangleTexture"] = openfl__$internal_stage3D_opengl_GLRectangleTexture;
openfl__$internal_stage3D_opengl_GLRectangleTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLRectangleTexture"];
openfl__$internal_stage3D_opengl_GLRectangleTexture.create = function(rectangleTexture,renderSession) {
	rectangleTexture.__textureTarget = renderSession.gl.TEXTURE_2D;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray = function(rectangleTexture,renderSession,data) {
	var gl = renderSession.gl;
	gl.__context.bindTexture(rectangleTexture.__textureTarget,rectangleTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.texImage2D(rectangleTexture.__textureTarget,0,rectangleTexture.__internalFormat,rectangleTexture.__width,rectangleTexture.__height,0,rectangleTexture.__format,gl.UNSIGNED_BYTE,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data)));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(rectangleTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
var openfl__$internal_stage3D_opengl_GLTextureBase = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTextureBase"] = openfl__$internal_stage3D_opengl_GLTextureBase;
openfl__$internal_stage3D_opengl_GLTextureBase.__name__ = ["openfl","_internal","stage3D","opengl","GLTextureBase"];
openfl__$internal_stage3D_opengl_GLTextureBase.create = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	textureBase.__textureID = gl.__context.createTexture();
	textureBase.__textureContext = gl;
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = true;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
				openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = false;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = gl.RGBA;
		}
	}
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	}
	textureBase.__internalFormat = openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat;
	textureBase.__format = openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					return openfl_utils_Assets.getBitmapData(symbol1.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) if(symbol.next().className == className) {
			return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var _this2 = this.alphaCheck;
		if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						this.__copyChannel(image,openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha));
						var _this3 = this.cachedImages;
						if(__map_reserved[id] != null) {
							_this3.setReserved(id,image);
						} else {
							_this3.h[id] = image;
						}
						this.cachedImages.remove(bitmapSymbol.alpha);
						var _this4 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,true);
						} else {
							_this4.h[id] = true;
						}
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var key = this.id;
			var _this = this.preload;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			var key1 = _gthis.id;
			var _this1 = _gthis.cachedText;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,data);
			} else {
				_this1.h[key1] = data;
			}
			_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						var key2 = bitmapSymbol.className;
						var value = bitmapSymbol.path;
						var _this2 = _gthis.imageClassNames;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value);
						} else {
							_this2.h[key2] = value;
						}
					}
				}
			}
			var key3 = _gthis.id;
			var value1 = _gthis.swf;
			var _this3 = openfl__$internal_swf_SWFLite.instances;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value1);
			} else {
				_this3.h[key3] = value1;
			}
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this4 = this.preload;
				if(__map_reserved[id1] != null) {
					_this4.setReserved(id1,true);
				} else {
					_this4.h[id1] = true;
				}
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				var _this5 = this.preload;
				if(__map_reserved[id3] != null) {
					_this5.setReserved(id3,true);
				} else {
					_this5.h[id3] = true;
				}
			}
			var path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var tmp;
		if(!this.preloading) {
			var _this2 = this.alphaCheck;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										var _this3 = _gthis.cachedImages;
										if(__map_reserved[id] != null) {
											_this3.setReserved(id,image);
										} else {
											_this3.h[id] = image;
										}
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										var _this4 = _gthis.alphaCheck;
										if(__map_reserved[id] != null) {
											_this4.setReserved(id,true);
										} else {
											_this4.h[id] = true;
										}
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var bitmapSymbol = swf.symbols.get(command[2]);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),command[3],command[4],command[5]);
				}
				break;
			case 1:
				graphics.beginFill(command[2],command[3]);
				break;
			case 2:
				graphics.beginGradientFill(command[2],command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				break;
			case 3:
				graphics.curveTo(command[2],command[3],command[4],command[5]);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				graphics.lineTo(command[2],command[3]);
				break;
			case 7:
				graphics.moveTo(command[2],command[3]);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								graphics.curveTo(command[2] * scale + offsetX,command[3] * scale + offsetY,command[4] * scale + offsetX,command[5] * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,command[3],command[4],command[5],command[6],command[7],command[8],command[9]);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								graphics.lineTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							case 7:
								graphics.moveTo(command[2] * scale + offsetX,command[3] * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_HTMLParser = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = ["openfl","_internal","text","HTMLParser"];
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_text_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_text_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					textFormatRanges.data.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						}
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						}
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								format.size = (formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat).size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) {
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase());
						}
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g11 = 0;
							while(_g11 < values.length) {
								var stop = values[_g11];
								++_g11;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						textFormatRanges.data.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					textFormatRanges.data.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			textFormatRanges.data.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__hasFocus: null
	,__restrictRegexp: null
	,__useIntAdvances: null
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Math.min(br,lf) | 0;
		}
		if(lf == -1) {
			return Math.min(br,cr) | 0;
		}
		if(br == -1) {
			return Math.min(cr,lf) | 0;
		}
		return Math.min(Math.min(cr,lf),br) | 0;
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var leading;
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
			++rangeIndex;
			formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) {
			maxHeightValue = heightValue;
		}
		if(ascent > maxAscent) {
			maxAscent = ascent;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var text = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,breakIndex);
					var tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text).width;
					while(offsetX + tempWidth > _gthis.width - 2) {
						var i = 1;
						while(textIndex + i < breakIndex + 1) {
							var text1 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i);
							tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text1).width;
							if(offsetX + tempWidth > _gthis.width - 2) {
								--i;
								break;
							}
							++i;
						}
						if(i == 0 && tempWidth > _gthis.width - 4) {
							i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex = textIndex + i;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex;
							}
							var text2 = _gthis.text;
							var endIndex1 = textIndex + i;
							var positions1 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth = 0.0;
								var width;
								var _g1 = textIndex;
								var _g = endIndex1;
								while(_g1 < _g) {
									width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text2,textIndex,_g1++ + 1)).width;
									positions1.push(width - previousWidth);
									previousWidth = width;
								}
							} else {
								var _g11 = textIndex;
								var _g2 = endIndex1;
								while(_g11 < _g2) {
									var i1 = _g11++;
									var advance;
									if(i1 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text2) - 1) {
										var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i1 + 1)).width;
										advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text2,i1,2)).width - nextWidth;
									} else {
										advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i1)).width;
									}
									positions1.push(advance);
								}
							}
							layoutGroup.positions = positions1;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width1 = 0.0;
							var _g3 = 0;
							while(_g3 < positions2.length) {
								var position = positions2[_g3];
								++_g3;
								width1 += position;
							}
							layoutGroup.width = width1;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g4 = 0;
							var _g12 = _gthis.layoutGroups;
							while(_g4 < _g12.data.get_length()) {
								var lg = _g12.data.get(_g4);
								++_g4;
								if(lg.lineIndex < lineIndex) {
									continue;
								}
								if(lg.lineIndex > lineIndex) {
									break;
								}
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i;
							var text3 = _gthis.text;
							var positions3 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth1 = 0.0;
								var width2;
								var _g13 = textIndex;
								var _g5 = breakIndex;
								while(_g13 < _g5) {
									width2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text3,textIndex,_g13++ + 1)).width;
									positions3.push(width2 - previousWidth1);
									previousWidth1 = width2;
								}
							} else {
								var _g14 = textIndex;
								var _g6 = breakIndex;
								while(_g14 < _g6) {
									var i2 = _g14++;
									var advance1;
									if(i2 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text3) - 1) {
										var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i2 + 1)).width;
										advance1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text3,i2,2)).width - nextWidth1;
									} else {
										advance1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i2)).width;
									}
									positions3.push(advance1);
								}
							}
							positions = positions3;
							var width3 = 0.0;
							var _g7 = 0;
							while(_g7 < positions.length) {
								var position1 = positions[_g7];
								++_g7;
								width3 += position1;
							}
							widthValue = width3;
							tempWidth = widthValue;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				var text4 = this.text;
				var positions4 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width4;
					var _g15 = textIndex;
					var _g8 = breakIndex;
					while(_g15 < _g8) {
						width4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text4,textIndex,_g15++ + 1)).width;
						positions4.push(width4 - previousWidth2);
						previousWidth2 = width4;
					}
				} else {
					var _g16 = textIndex;
					var _g9 = breakIndex;
					while(_g16 < _g9) {
						var i3 = _g16++;
						var advance2;
						if(i3 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text4) - 1) {
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i3 + 1)).width;
							advance2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text4,i3,2)).width - nextWidth2;
						} else {
							advance2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i3)).width;
						}
						positions4.push(advance2);
					}
				}
				layoutGroup.positions = positions4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions5 = layoutGroup.positions;
				var width5 = 0.0;
				var _g10 = 0;
				while(_g10 < positions5.length) {
					var position2 = positions5[_g10];
					++_g10;
					width5 += position2;
				}
				layoutGroup.width = width5;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var _g17 = 0;
			var _g18 = _gthis.layoutGroups;
			while(_g17 < _g18.data.get_length()) {
				var lg1 = _g18.data.get(_g17);
				++_g17;
				if(lg1.lineIndex < lineIndex) {
					continue;
				}
				if(lg1.lineIndex > lineIndex) {
					break;
				}
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex2 = -1;
				if(spaceIndex == -1) {
					endIndex2 = breakIndex;
				} else {
					endIndex2 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex2) {
						endIndex2 = breakIndex;
					}
				}
				if(endIndex2 == -1 || endIndex2 > formatRange.end) {
					endIndex2 = formatRange.end;
				}
				var text5 = this.text;
				var positions6 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth3 = 0.0;
					var width6;
					var _g19 = textIndex;
					var _g20 = endIndex2;
					while(_g19 < _g20) {
						width6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text5,textIndex,_g19++ + 1)).width;
						positions6.push(width6 - previousWidth3);
						previousWidth3 = width6;
					}
				} else {
					var _g110 = textIndex;
					var _g21 = endIndex2;
					while(_g110 < _g21) {
						var i4 = _g110++;
						var advance3;
						if(i4 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text5) - 1) {
							var nextWidth3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i4 + 1)).width;
							advance3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text5,i4,2)).width - nextWidth3;
						} else {
							advance3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i4)).width;
						}
						positions6.push(advance3);
					}
				}
				positions = positions6;
				var width7 = 0.0;
				var _g22 = 0;
				while(_g22 < positions.length) {
					var position3 = positions[_g22];
					++_g22;
					width7 += position3;
				}
				widthValue = width7;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						++textIndex;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
						--endIndex2;
						widthValue -= positions.pop();
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
							if(offsetX + widthValue - positions[positions.length - 1] <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var this1 = this.layoutGroups;
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this1.data.get(index);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i5 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i5);
						if(i5 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i5;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) {
							maxAscent = ascent;
						}
						if(heightValue > maxHeightValue) {
							maxHeightValue = heightValue;
						}
						var _g23 = 0;
						var _g111 = _gthis.layoutGroups;
						while(_g23 < _g111.data.get_length()) {
							var lg2 = _g111.data.get(_g23);
							++_g23;
							if(lg2.lineIndex < lineIndex) {
								continue;
							}
							if(lg2.lineIndex > lineIndex) {
								break;
							}
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2;
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var this2 = this.layoutGroups;
						var index1 = this.layoutGroups.data.get_length() - offsetCount;
						var bumpX = this2.data.get(index1).offsetX;
						var _g112 = this.layoutGroups.data.get_length() - offsetCount;
						var _g24 = this.layoutGroups.data.get_length();
						while(_g112 < _g24) {
							layoutGroup = this.layoutGroups.data.get(_g112++);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var text6 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex2);
						var tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text6).width;
						while(offsetX + tempWidth1 > _gthis.width - 2) {
							var i6 = 1;
							while(textIndex + i6 < endIndex2 + 1) {
								var text7 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i6);
								tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text7).width;
								if(offsetX + tempWidth1 > _gthis.width - 2) {
									--i6;
									break;
								}
								++i6;
							}
							if(i6 == 0 && tempWidth1 > _gthis.width - 4) {
								i6 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
							}
							if(i6 == 0) {
								offsetX = 2;
								offsetY += layoutGroup.height;
								++lineIndex;
								break;
							} else {
								var endIndex3 = textIndex + i6;
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
									_gthis.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = endIndex3;
								}
								var text8 = _gthis.text;
								var endIndex4 = textIndex + i6;
								var positions7 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth4 = 0.0;
									var width8;
									var _g113 = textIndex;
									var _g25 = endIndex4;
									while(_g113 < _g25) {
										width8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text8,textIndex,_g113++ + 1)).width;
										positions7.push(width8 - previousWidth4);
										previousWidth4 = width8;
									}
								} else {
									var _g114 = textIndex;
									var _g26 = endIndex4;
									while(_g114 < _g26) {
										var i7 = _g114++;
										var advance4;
										if(i7 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text8) - 1) {
											var nextWidth4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i7 + 1)).width;
											advance4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text8,i7,2)).width - nextWidth4;
										} else {
											advance4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i7)).width;
										}
										positions7.push(advance4);
									}
								}
								layoutGroup.positions = positions7;
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions8 = layoutGroup.positions;
								var width9 = 0.0;
								var _g27 = 0;
								while(_g27 < positions8.length) {
									var position4 = positions8[_g27];
									++_g27;
									width9 += position4;
								}
								layoutGroup.width = width9;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) {
									maxAscent = ascent;
								}
								if(heightValue > maxHeightValue) {
									maxHeightValue = heightValue;
								}
								var _g28 = 0;
								var _g115 = _gthis.layoutGroups;
								while(_g28 < _g115.data.get_length()) {
									var lg3 = _g115.data.get(_g28);
									++_g28;
									if(lg3.lineIndex < lineIndex) {
										continue;
									}
									if(lg3.lineIndex > lineIndex) {
										break;
									}
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2;
								textIndex += i6;
								var text9 = _gthis.text;
								var positions9 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth5 = 0.0;
									var width10;
									var _g116 = textIndex;
									var _g29 = endIndex2;
									while(_g116 < _g29) {
										width10 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text9,textIndex,_g116++ + 1)).width;
										positions9.push(width10 - previousWidth5);
										previousWidth5 = width10;
									}
								} else {
									var _g117 = textIndex;
									var _g30 = endIndex2;
									while(_g117 < _g30) {
										var i8 = _g117++;
										var advance5;
										if(i8 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text9) - 1) {
											var nextWidth5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i8 + 1)).width;
											advance5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text9,i8,2)).width - nextWidth5;
										} else {
											advance5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i8)).width;
										}
										positions9.push(advance5);
									}
								}
								positions = positions9;
								var width11 = 0.0;
								var _g31 = 0;
								while(_g31 < positions.length) {
									var position5 = positions[_g31];
									++_g31;
									width11 += position5;
								}
								widthValue = width11;
								tempWidth1 = widthValue;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
						_gthis.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex2;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex2;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
							_gthis.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex2;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex2;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex2) {
							++endIndex2;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex2;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) {
						maxHeightValue = heightValue;
					}
					if(ascent > maxAscent) {
						maxAscent = ascent;
					}
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) || spaceIndex > formatRange.end) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text)) {
				if(this.wordWrap && this.width >= 4) {
					var endIndex5 = formatRange.end;
					var text10 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex5);
					var tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text10).width;
					while(offsetX + tempWidth2 > _gthis.width - 2) {
						var i9 = 1;
						while(textIndex + i9 < endIndex5 + 1) {
							var text11 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i9);
							tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text11).width;
							if(offsetX + tempWidth2 > _gthis.width - 2) {
								--i9;
								break;
							}
							++i9;
						}
						if(i9 == 0 && tempWidth2 > _gthis.width - 4) {
							i9 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i9 == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex6 = textIndex + i9;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex6);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex6;
							}
							var text12 = _gthis.text;
							var endIndex7 = textIndex + i9;
							var positions10 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth6 = 0.0;
								var width12;
								var _g118 = textIndex;
								var _g32 = endIndex7;
								while(_g118 < _g32) {
									width12 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text12,textIndex,_g118++ + 1)).width;
									positions10.push(width12 - previousWidth6);
									previousWidth6 = width12;
								}
							} else {
								var _g119 = textIndex;
								var _g33 = endIndex7;
								while(_g119 < _g33) {
									var i10 = _g119++;
									var advance6;
									if(i10 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text12) - 1) {
										var nextWidth6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i10 + 1)).width;
										advance6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text12,i10,2)).width - nextWidth6;
									} else {
										advance6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i10)).width;
									}
									positions10.push(advance6);
								}
							}
							layoutGroup.positions = positions10;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions11 = layoutGroup.positions;
							var width13 = 0.0;
							var _g34 = 0;
							while(_g34 < positions11.length) {
								var position6 = positions11[_g34];
								++_g34;
								width13 += position6;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g35 = 0;
							var _g120 = _gthis.layoutGroups;
							while(_g35 < _g120.data.get_length()) {
								var lg4 = _g120.data.get(_g35);
								++_g35;
								if(lg4.lineIndex < lineIndex) {
									continue;
								}
								if(lg4.lineIndex > lineIndex) {
									break;
								}
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i9;
							var text13 = _gthis.text;
							var positions12 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth7 = 0.0;
								var width14;
								var _g121 = textIndex;
								var _g36 = endIndex5;
								while(_g121 < _g36) {
									width14 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text13,textIndex,_g121++ + 1)).width;
									positions12.push(width14 - previousWidth7);
									previousWidth7 = width14;
								}
							} else {
								var _g122 = textIndex;
								var _g37 = endIndex5;
								while(_g122 < _g37) {
									var i11 = _g122++;
									var advance7;
									if(i11 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text13) - 1) {
										var nextWidth7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i11 + 1)).width;
										advance7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text13,i11,2)).width - nextWidth7;
									} else {
										advance7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i11)).width;
									}
									positions12.push(advance7);
								}
							}
							positions = positions12;
							var width15 = 0.0;
							var _g38 = 0;
							while(_g38 < positions.length) {
								var position7 = positions[_g38];
								++_g38;
								width15 += position7;
							}
							widthValue = width15;
							tempWidth2 = widthValue;
						}
					}
				}
				var text14 = this.text;
				var endIndex8 = formatRange.end;
				var positions13 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth8 = 0.0;
					var width16;
					var _g123 = textIndex;
					var _g39 = endIndex8;
					while(_g123 < _g39) {
						width16 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text14,textIndex,_g123++ + 1)).width;
						positions13.push(width16 - previousWidth8);
						previousWidth8 = width16;
					}
				} else {
					var _g124 = textIndex;
					var _g40 = endIndex8;
					while(_g124 < _g40) {
						var i12 = _g124++;
						var advance8;
						if(i12 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text14) - 1) {
							var nextWidth8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i12 + 1)).width;
							advance8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text14,i12,2)).width - nextWidth8;
						} else {
							advance8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i12)).width;
						}
						positions13.push(advance8);
					}
				}
				positions = positions13;
				var width17 = 0.0;
				var _g41 = 0;
				while(_g41 < positions.length) {
					var position8 = positions[_g41];
					++_g41;
					width17 += position8;
				}
				widthValue = width17;
				var endIndex9 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex9);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex9;
				}
				var text15 = this.text;
				var endIndex10 = formatRange.end;
				var positions14 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth9 = 0.0;
					var width18;
					var _g125 = textIndex;
					var _g42 = endIndex10;
					while(_g125 < _g42) {
						width18 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text15,textIndex,_g125++ + 1)).width;
						positions14.push(width18 - previousWidth9);
						previousWidth9 = width18;
					}
				} else {
					var _g126 = textIndex;
					var _g43 = endIndex10;
					while(_g126 < _g43) {
						var i13 = _g126++;
						var advance9;
						if(i13 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text15) - 1) {
							var nextWidth9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i13 + 1)).width;
							advance9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text15,i13,2)).width - nextWidth9;
						} else {
							advance9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i13)).width;
						}
						positions14.push(advance9);
					}
				}
				layoutGroup.positions = positions14;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions15 = layoutGroup.positions;
				var width19 = 0.0;
				var _g44 = 0;
				while(_g44 < positions15.length) {
					var position9 = positions15[_g44];
					++_g44;
					width19 += position9;
				}
				layoutGroup.width = width19;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				var _g45 = 0;
				var _g127 = _gthis.layoutGroups;
				while(_g45 < _g127.data.get_length()) {
					var lg5 = _g127.data.get(_g45);
					++_g45;
					if(lg5.lineIndex < lineIndex) {
						continue;
					}
					if(lg5.lineIndex > lineIndex) {
						break;
					}
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2;
				++textIndex;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g2 = this.layoutGroups.data.get_length();
						while(_g3 < _g2) {
							var j = _g3++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								while(true) {
									if(j1 > 1 && lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										++j1;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.data.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_text: function(value) {
		if(value == null) {
			return this.text = value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() { };
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	blendMode: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		if(openfl__$internal_Lib.current == null) {
			openfl__$internal_Lib.current = new openfl_display_MovieClip();
		}
		openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new openfl_display_Window(_g1[0]));
					break;
				}
			}
			this.__preloader == null || this.__preloader.complete;
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_IShaderDrawable = function() { };
$hxClasses["openfl.display.IShaderDrawable"] = openfl_display_IShaderDrawable;
openfl_display_IShaderDrawable.__name__ = ["openfl","display","IShaderDrawable"];
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,shader: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			var image = this.__bitmapData.image;
			if(this.__bitmapData.image.version != this.__imageVersion) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				var context = renderSession.context;
				if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
					renderSession.maskManager.pushObject(bitmap,false);
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = bitmap.__worldAlpha;
					var transform = bitmap.__renderTransform;
					var scrollRect = bitmap.__scrollRect;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = false;
						context.msImageSmoothingEnabled = false;
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = true;
						context.msImageSmoothingEnabled = true;
						context.imageSmoothingEnabled = true;
					}
					renderSession.maskManager.popObject(bitmap,false);
				}
			}
		} else if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context1 = renderSession.context;
			if(this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
				renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__bitmapData.image);
				context1.globalAlpha = this.__worldAlpha;
				var transform1 = this.__renderTransform;
				var scrollRect1 = this.__scrollRect;
				if(renderSession.roundPixels) {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
				} else {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = false;
					context1.msImageSmoothingEnabled = false;
					context1.imageSmoothingEnabled = false;
				}
				if(scrollRect1 == null) {
					context1.drawImage(this.__bitmapData.image.get_src(),0,0);
				} else {
					context1.drawImage(this.__bitmapData.image.get_src(),scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height,scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = true;
					context1.msImageSmoothingEnabled = true;
					context1.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else if(this.stage != null && this.__worldVisible && this.__renderable && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
			renderSession.maskManager.pushObject(this);
			if(this.__bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
			renderSession.maskManager.popObject(this);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderSession);
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this,renderSession);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateMask: function(maskGraphics) {
		if(this.__bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.__bitmapData.width,this.__bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__filters != null && this.__filters.length > 0;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromImage(lime_graphics_Image.fromBase64(base64,type));
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromImage(lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)));
	if(rawAlpha != null) {
		bitmapData.__applyAlpha(rawAlpha);
	}
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__buffer: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__framebufferContext: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureVersion: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = false;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.renderType = lime_graphics_RendererType.CANVAS;
			renderSession1.clearRenderDirty = false;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			renderSession1.blendModeManager.setBlendMode(blendMode);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.__context.enable(gl.SCISSOR_TEST);
				gl.__context.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.__context.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.__context.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.__context.disable(gl.SCISSOR_TEST);
			}
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			this.__bufferData = new Float32Array(104);
			this.__bufferData[0] = this.width;
			this.__bufferData[1] = this.height;
			this.__bufferData[3] = 1;
			this.__bufferData[4] = 1;
			this.__bufferData[27] = this.height;
			this.__bufferData[30] = 1;
			this.__bufferData[52] = this.width;
			this.__bufferData[55] = 1;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.__context.createBuffer();
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else {
			var dirty = false;
			if(this.__bufferAlpha != alpha) {
				dirty = true;
				var _g1 = 0;
				while(_g1 < 4) this.__bufferData[26 * _g1++ + 5] = alpha;
				this.__bufferAlpha = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				dirty = true;
				if(colorTransform != null) {
					if(this.__bufferColorTransform == null) {
						this.__bufferColorTransform = colorTransform.__clone();
					} else {
						this.__bufferColorTransform.__copyFrom(colorTransform);
					}
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						this.__bufferData[26 * i1 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i1 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i1 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i1 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i1 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i1 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i1 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i1 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i2 = _g3++;
						this.__bufferData[26 * i2 + 6] = 1;
						this.__bufferData[26 * i2 + 11] = 1;
						this.__bufferData[26 * i2 + 16] = 1;
						this.__bufferData[26 * i2 + 21] = 1;
						this.__bufferData[26 * i2 + 22] = 0;
						this.__bufferData[26 * i2 + 23] = 0;
						this.__bufferData[26 * i2 + 24] = 0;
						this.__bufferData[26 * i2 + 25] = 0;
					}
				}
			}
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			if(dirty) {
				var usage = gl.STATIC_DRAW;
				gl.__context.bufferData(gl.ARRAY_BUFFER,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__bufferData),this.__bufferData.byteLength),usage);
			}
		}
		return this.__buffer;
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != gl) {
			this.__textureContext = gl;
			this.__texture = gl.__context.createTexture();
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				if(openfl_display_BitmapData.__supportsBGRA == null) {
					openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
					var bgraExtension = null;
					if(bgraExtension != null) {
						openfl_display_BitmapData.__supportsBGRA = true;
						openfl_display_BitmapData.__textureFormat = bgraExtension.BGRA_EXT;
						if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
							openfl_display_BitmapData.__textureInternalFormat = bgraExtension.BGRA_EXT;
						}
					} else {
						openfl_display_BitmapData.__supportsBGRA = false;
						openfl_display_BitmapData.__textureFormat = gl.RGBA;
					}
				}
				internalFormat = openfl_display_BitmapData.__textureInternalFormat;
				format = openfl_display_BitmapData.__textureFormat;
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(!openfl_display_BitmapData.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				var target = gl.TEXTURE_2D;
				var width = textureImage.buffer.width;
				var height = textureImage.buffer.height;
				var type = gl.UNSIGNED_BYTE;
				var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(textureImage.get_data());
				gl.__context.texImage2D(target,0,internalFormat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
			} else {
				lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,__applyAlpha: function(alpha) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) data[_g1++ * 4 + 3] = alpha.readUnsignedByte();
		this.image.version++;
	}
	,__draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = true;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.renderType = lime_graphics_RendererType.CANVAS;
			renderSession1.clearRenderDirty = true;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			var cacheRenderable = source.__renderable;
			if(source.__isMask) {
				source.__renderable = true;
			}
			var cacheAlpha = source.__worldAlpha;
			source.__worldAlpha = 1;
			source.__renderCanvas(renderSession1);
			source.__renderable = cacheRenderable;
			source.__worldAlpha = cacheAlpha;
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,__fromFile: function(path) {
		this.__fromImage(lime_graphics_Image.fromFile(path));
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null || this.__framebufferContext != gl) {
			this.getTexture(gl);
			this.__framebufferContext = gl;
			this.__framebuffer = gl.__context.createFramebuffer();
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = this.getBuffer(gl,1,this.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		gl.__context.vertexAttribPointer(index,3,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0)));
		var index1 = shader.get_data().aTexCoord.index;
		gl.__context.vertexAttribPointer(index1,2,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12)));
		var index2 = shader.get_data().aAlpha.index;
		gl.__context.vertexAttribPointer(index2,1,gl.FLOAT,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20)));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			ix = this.__calculateBezierQuadPoint((this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX),this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			iy = this.__calculateBezierQuadPoint((this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY),this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		this.__renderTransform.ty = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_Loader = function() { };
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,loader: null
	,parameters: null
	,uncaughtErrorEvents: null
	,url: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = this.__currentFrame;
			while(_g1 < _g) {
				frameData = this.__symbol.frames[_g1++];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					switch(frameObject.type[1]) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					currentInstances.push(instance2);
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g4 = currentInstances.length;
			while(_g11 < _g4) {
				var i = _g11++;
				existingChild = this.__children[i];
				instance = currentInstances[i];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i);
				} else {
					child = this.__children[i];
				}
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child1;
			var i1 = currentInstances.length;
			var length = this.__children.length;
			while(i1 < length) {
				child1 = this.__children[i1];
				var _g5 = 0;
				var _g12 = this.__activeInstances;
				while(_g5 < _g12.length) {
					var instance3 = _g12[_g5];
					++_g5;
					if(instance3.displayObject == child1) {
						this.removeChild(child1);
						--i1;
						--length;
					}
				}
				++i1;
			}
			this.__lastFrameUpdate = this.__currentFrame;
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__frameScripts.h[frame]();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				break;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								console.log("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString());
							}
						};
					})(script);
					this.__frameScripts.h[frame] = wrapper;
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 519, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 523, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g2 = this.__totalFrames;
		while(_g11 < _g2) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g3 = frameData1.objects;
			while(_g21 < _g3.length) {
				var frameObject = _g3[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.h[frameObject.symbol];
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		var _g6 = 0;
		var _g12 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g6 < _g12.length) {
			var field = _g12[_g6];
			++_g6;
			var _g22 = 0;
			var _g31 = this.__children;
			while(_g22 < _g31.length) {
				var child = _g31[_g22];
				++_g22;
				if(child.get_name() == field) {
					this[field] = child;
				}
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		this.__timeElapsed += deltaTime;
		var nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__updateDisplayObject: function(displayObject,frameObject) {
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					filters.push(new openfl_filters_BlurFilter(filter[2],filter[3],filter[4]));
					break;
				case 1:
					filters.push(new openfl_filters_ColorMatrixFilter(filter[2]));
					break;
				case 2:
					filters.push(new openfl_filters_DropShadowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9],filter[10],filter[11],filter[12]));
					break;
				case 3:
					filters.push(new openfl_filters_GlowFilter(filter[2],filter[3],filter[4],filter[5],filter[6],filter[7],filter[8],filter[9]));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,__class__: openfl_display_MovieClip
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__enterFrame: function(deltaTime) {
		if(this.__render != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) {
				this.__render(rect);
			}
		}
	}
	,__renderGLMask: function(renderSession) {
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		if(this.simulateProgress) {
			return;
		}
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready && !this.simulateProgress) {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.__hitTestState = hitTestState != null ? hitTestState : new openfl_display_DisplayObject();
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.data.get_length()) {
			var previousState = _g1.data.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.data.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderSession);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true,maskGraphics);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) {
			this.__currentState.__updateChildren(transformOnly);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateChildren(transformOnly);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.data.push(this.__currentState);
				}
				var index = this.__previousStates.data.indexOf(value,0);
				if(index > -1) {
					new openfl__$Vector_AbstractVector(this.__previousStates.data.splice(index,1));
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.get_downState());
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	this.set_color(color);
	this.set_name(null);
	this.__contentsScaleFactor = window.__scale;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = window.__fullscreen;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.stage3Ds.data.push(new openfl_display_Stage3D());
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) this.__onGamepadConnect(gamepad.next());
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,setPreloader: function(preloader) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			window.onMouseUp.cancel();
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onRenderContextLost: function(renderer) {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(renderer,context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.renderer != null) {
			this.__createRenderer();
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__broadcastEvent(new openfl_events_Event("activate"));
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__resize();
		if(this.__wasFullscreen && !window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
			this.__renderer.clear();
			this.__renderer.renderStage3D();
			this.__renderDirty = true;
		}
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null && this.__renderDirty) {
			if(!openfl_display_Stage3D.__active) {
				this.__renderer.clear();
			}
			this.__renderer.render();
		} else {
			renderer.onRender.cancel();
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var _g = this.window.renderer.context;
		switch(_g[1]) {
		case 0:
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,_g[2]);
			break;
		case 1:
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,_g[2]);
			break;
		case 2:
			this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,_g[2]);
			break;
		case 4:
			break;
		case 5:
			break;
		default:
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g1 = 0;
				var _g = length - 1;
				while(_g1 < _g) {
					stack[_g1++].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i = length - 2;
					while(i >= 0) {
						stack[i].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i;
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var event = new openfl_events_KeyboardEvent(type,true,true,openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)),keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchTarget(this.__mouseOverTarget,event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(target2,event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					this.__dispatchTarget(target3,event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				event.bubbles = true;
				this.__dispatchTarget(target,event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,deltaY | 0),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				this.__dispatchTarget(target1,touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					this.__dispatchTarget(target2,touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var targetScale = Math.min(windowWidth / this.stageWidth,windowHeight / this.stageHeight);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGraphics);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		this.__colorSplit = [((value & 16711680) >>> 16) / 255,((value & 65280) >>> 8) / 255,(value & 255) / 255];
		this.__colorString = "#" + StringTools.hex(value & 16777215,6);
		return this.__color = value;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return value;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextRequested: null
	,__stage: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var transparentBackground = Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call($window.config,"colorDepth") ? $window.config.colorDepth : 16;
			var options = Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0;
			var options1 = Object.prototype.hasOwnProperty.call($window.config,"depthBuffer") ? $window.config.depthBuffer : true;
			var options2 = Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer;
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,{ alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false});
			if(this.__webgl != null) {
				this.__renderContext = new lime__$backend_html5_HTML5GLRenderContext(this.__webgl);
				lime_graphics_opengl_GL.context = this.__renderContext;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__renderContext;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
			if(openfl__$internal_stage3D_GLUtils.debug) {
				renderSession.gl.__context.getError();
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,get_x: function() {
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {get_y:"get_y",get_x:"get_x"}
});
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background") ? this.config.background : 16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"parameters")) {
			try {
				this.stage.get_loaderInfo().parameters = this.config.parameters;
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLContext3D.create(this);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__fragmentConstants: null
	,__frameCount: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__stage3D: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__supportsAnisotropicFiltering: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,__updateBackbufferViewport: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP(this);
	}
	,__updateBlendFactors: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP(this);
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_Program3D = function() { };
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentUniformMap: null
	,__programID: null
	,__samplerUniforms: null
	,__vertexUniformMap: null
	,__use: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D["use"](this,this.__context.__renderSession);
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function() { };
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	location: null
	,regIndex: null
	,regCount: null
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function() { };
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	openfl__$internal_stage3D_opengl_GLTextureBase.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,__class__: openfl_events_MouseEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		if(lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality) == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",set_blurY:"set_blurY",set_blurX:"set_blurX"}
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 0;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					destPixel = ((Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)) | 0) & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | ((Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)) | 0) & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | ((Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)) | 0) & 255) << 8 | destPixel & 255 & 255;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | (Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)) | 0) & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,this.__color >> 16 & 255,this.__color >> 8 & 255,this.__color & 255,this.__color >> 24 & 255));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		if(lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength) == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,__class__: openfl_filters_DropShadowFilter
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,this.__color >> 16 & 255,this.__color >> 8 & 255,this.__color & 255,this.__alpha * 255));
		if(lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength) == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",get_alpha:"get_alpha"}
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			openfl_geom_ColorTransform.__limeColorMatrix = new Float32Array(20);
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Matrix3D = function() { };
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.prototype = {
	__class__: openfl_geom_Matrix3D
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_right:"get_right",get_bottom:"get_bottom"}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix:"set_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.prototype = {
	__class__: openfl_geom_Vector3D
};
var openfl_media_ID3Info = function() { };
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var key = this.url;
			var _this = defaultLibrary.cachedAudioBuffers;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var key1 = this.url;
			var _this1 = defaultLibrary.cachedAudioBuffers;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			if(this.__isValid) {
				this.__source.set_gain(openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		if(lime_app_Application.current != null) {
			lime_app_Application.current.onExit.add(openfl_net_SharedObject.application_onExit);
		}
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	if(__map_reserved[id] != null) {
		return _this2.getReserved(id);
	} else {
		return _this2.h[id];
	}
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var _this = openfl_net_SharedObject.__sharedObjects;
	var sharedObject = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(sharedObject.hasNext()) sharedObject.next().flush();
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 1;
		}
		return 0;
	}
	,__class__: openfl_net_SharedObject
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var tmp;
		switch(request.method) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var value = Reflect.field(request.data,field);
					var _this = this.__httpRequest.formData;
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function() { };
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_totalMemory:"get_totalMemory"};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.data.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__rawHtmlText: null
	,__forceCachedBitmapUpdate: null
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
		this.__updateScrollH();
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1));
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha_r = new RegExp("[^a-zA-Z]+","g".split("u").join(""));
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if(HxOverrides.substr(font2.name.replace(alpha_r,""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font2.name;
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			var key = format.font;
			var _this = openfl_text_TextField.__missingFontWarning;
			if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
				var k = format.font;
				var _this1 = openfl_text_TextField.__missingFontWarning;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,true);
				} else {
					_this1.h[k] = true;
				}
				lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1093, className : "openfl.text.TextField", methodName : "__fromSymbol"});
			}
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return false;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) x += group.positions[_g3++];
					rect.setTo(x,group.offsetY,group.positions[charIndex - group.startIndex],group.ascent + group.descent);
					return true;
				} catch( e ) {
					haxe_CallStack.lastException = e;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) x += group.positions[_g3++];
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights.data.get(_g1++);
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.data.get_length();
		while(_g11 < _g2) {
			var i = _g11++;
			group = this.__textEngine.layoutGroups.data.get(i);
			if(i < this.__textEngine.layoutGroups.data.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.data.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx)),norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx)),norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(renderSession.renderType == lime_graphics_RendererType.DOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__renderedOnCanvasWhileOnDOM = true;
			if(this.get_type() == 1) {
				this.replaceText(0,lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text),this.__text);
			}
			if(this.__isHTML) {
				this.__updateText(openfl__$internal_text_HTMLParser.parse(this.__text,this.__textFormat,this.__textEngine.textFormatRanges));
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.get_alpha();
								var tmp3 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.get_blurX(),glowFilter.get_blurY());
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 += textEngine.lineHeights.data.get(i2 - 1);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp4 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp5 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp6 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 += textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp7 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,this.__forceCachedBitmapUpdate || !this.__worldColorTransform.__isDefault());
		this.__forceCachedBitmapUpdate = false;
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else {
			if(this.__renderedOnCanvasWhileOnDOM) {
				this.__renderedOnCanvasWhileOnDOM = false;
				if(this.__isHTML && this.__rawHtmlText != null) {
					this.__updateText(this.__rawHtmlText);
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
			var textField = this;
			var textEngine = textField.__textEngine;
			if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
				if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
					if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
						if(textField.__div == null) {
							textField.__div = window.document.createElement("div");
							openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
							textField.__style.setProperty("outline","none",null);
							textField.__div.addEventListener("input",function(event) {
								event.preventDefault();
								if(textField.get_htmlText() != textField.__div.innerHTML) {
									textField.set_htmlText(textField.__div.innerHTML);
									textField.__dirty = false;
								}
							},true);
						}
						if(!textEngine.wordWrap) {
							textField.__style.setProperty("white-space","nowrap",null);
						} else {
							textField.__style.setProperty("word-wrap","break-word",null);
						}
						textField.__style.setProperty("overflow","hidden",null);
						if(textEngine.selectable) {
							textField.__style.setProperty("cursor","text",null);
							textField.__style.setProperty("-webkit-user-select","text",null);
							textField.__style.setProperty("-moz-user-select","text",null);
							textField.__style.setProperty("-ms-user-select","text",null);
							textField.__style.setProperty("-o-user-select","text",null);
						} else {
							textField.__style.setProperty("cursor","inherit",null);
						}
						textField.__div.contentEditable = textEngine.type == 1;
						var style = textField.__style;
						if(textEngine.background) {
							style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
						} else {
							style.removeProperty("background-color");
						}
						var w = textEngine.width;
						var h = textEngine.height;
						var scale = 1;
						var unscaledSize = textField.__textFormat.size;
						var scaledSize = unscaledSize;
						var t = textField.__renderTransform;
						if(t.a != 1.0 || t.d != 1.0) {
							if(t.a == t.d) {
								scale = t.a;
								t.a = t.d = 1.0;
							} else if(t.a > t.d) {
								scale = t.a;
								t.d /= t.a;
								t.a = 1.0;
							} else {
								scale = t.d;
								t.a /= t.d;
								t.d = 1.0;
							}
							scaledSize *= scale;
							w = Math.ceil(w * scale);
							h = Math.ceil(h * scale);
						}
						textField.__textFormat.size = scaledSize;
						var text = textEngine.text;
						var adjustment = 0;
						if(!textField.__isHTML) {
							text = StringTools.htmlEscape(text);
						} else {
							var matchText = text;
							while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
								var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
								var style1 = "";
								if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
									style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
									style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
									var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									var size;
									adjustment = parseFloat(sizeAttr) * scale;
									if(firstChar == 43 || firstChar == 45) {
										size = scaledSize + adjustment;
									} else {
										size = adjustment;
									}
									style1 += "font-size:" + size + "px;";
								}
								text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
								matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
							}
							text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
						}
						text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
						var unscaledLeading = textField.__textFormat.leading;
						textField.__textFormat.leading += adjustment | 0;
						var _this_r = new RegExp("\r\n","g".split("u").join(""));
						var tmp = text.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						var _this_r1 = new RegExp("\n","g".split("u").join(""));
						var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
						textField.__div.innerHTML = tmp1;
						var _this_r2 = new RegExp("\r","g".split("u").join(""));
						var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
						textField.__div.innerHTML = tmp2;
						style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
						textField.__textFormat.size = unscaledSize;
						textField.__textFormat.leading = unscaledLeading;
						style.setProperty("top","3px",null);
						if(textEngine.border) {
							style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
							textField.__renderTransform.translate(-1,-1);
							textField.__renderTransformChanged = true;
							textField.__transformDirty = true;
						} else if(style.border != "") {
							style.removeProperty("border");
							textField.__renderTransformChanged = true;
						}
						style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
						style.setProperty("width",w + "px",null);
						style.setProperty("height",h + "px",null);
						switch(textField.__textFormat.align) {
						case 0:
							style.setProperty("text-align","center",null);
							break;
						case 4:
							style.setProperty("text-align","right",null);
							break;
						default:
							style.setProperty("text-align","left",null);
						}
						textField.__dirty = false;
					} else if(textField.__div != null) {
						renderSession.element.removeChild(textField.__div);
						textField.__div = null;
					}
				}
				if(textField.__div != null) {
					var old = renderSession.roundPixels;
					renderSession.roundPixels = true;
					openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
					openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
					renderSession.roundPixels = old;
				}
			} else {
				openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderSession);
			}
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a * scale,transform.b * scale,transform.c * scale,transform.d * scale,transform.tx * scale,transform.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) scrollY -= textEngine.lineHeights.data.get(_g1++);
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.get_alpha();
								var tmp3 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.get_blurX(),glowFilter.get_blurY());
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i = _g3++;
										if(group.positions.length <= i) {
											break;
										}
										advance += group.positions[i];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) scrollY1 += textEngine.lineHeights.data.get(_g31++ - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp4 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp5 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp6 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) scrollY2 += textEngine.lineHeights.data.get(_g12++);
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp7 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a * scale,transform.b * scale,transform.c * scale,transform.d * scale,transform.tx * scale,transform.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) scrollY -= textEngine.lineHeights.data.get(_g1++);
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * glowFilter.get_alpha();
								var tmp3 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(glowFilter.get_blurX(),glowFilter.get_blurY());
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i = _g3++;
										if(group.positions.length <= i) {
											break;
										}
										advance += group.positions[i];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) scrollY1 += textEngine.lineHeights.data.get(_g31++ - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp4 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp5 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp6 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) scrollY2 += textEngine.lineHeights.data.get(_g12++);
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp7 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		if(openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		if(openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true) {
			this.__disableInput();
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,renderSession,force)) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				if(this.__caretIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
					this.set_scrollH(Math.ceil(offsetX));
				} else {
					var caret = openfl_geom_Rectangle.__pool.get();
					this.__getCharBoundaries(this.__caretIndex,caret);
					if(caret.x < this.get_scrollH()) {
						this.set_scrollH(Math.floor(caret.x - 2));
					} else if(caret.x > this.get_scrollH() + this.__textEngine.width) {
						this.set_scrollH(Math.ceil(caret.x - this.__textEngine.width - 2));
					}
					openfl_geom_Rectangle.__pool.release(caret);
				}
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			while(_g1 < length) {
				++_g1;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters != null && this.__filters.length == 1 && js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
			return false;
		}
		return openfl_display_InteractiveObject.prototype.get_cacheAsBitmap.call(this);
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		if(openfl_display_DisplayObject.__supportDOM) {
			this.__rawHtmlText = value;
		}
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
				var this1 = this.__textEngine.textFormatRanges;
				var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
				new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
			}
			var range = this.__textEngine.textFormatRanges.data.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		return value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
		}
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(value);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
				} else {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !js_Boot.__instanceof(event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextCharacter();
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__updateScrollH();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousCharacter();
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__updateScrollH();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextLine();
				} else {
					this.__caretNextLine(this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0),Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousLine();
				} else {
					this.__caretPreviousLine(this.getLineIndexOfChar(Math.min(this.__caretIndex,this.__selectionIndex) | 0),Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",set_type:"set_type",get_type:"get_type",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_selectable:"get_selectable",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_multiline:"set_multiline",get_multiline:"get_multiline",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_embedFonts:"set_embedFonts",set_displayAsPassword:"set_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_border:"set_border",set_background:"set_background"})
});
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
var openfl_ui_GameInput = function() { };
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var device = new openfl_ui_GameInputDevice(lime_ui_Joystick.__getDeviceData()[gamepad.id].id,lime_ui_Joystick.__getDeviceData()[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,__axis: null
	,__button: null
	,__controls: null
	,__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,getBitmapData: null
	,getSound: null
	,hasBitmapData: null
	,hasSound: null
	,removeBitmapData: null
	,setBitmapData: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {get_length:"get_length"};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	haxe_io_Bytes.call(this,new haxe_io_Bytes(new ArrayBuffer(length)).b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	position: null
	,__endian: null
	,__length: null
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__class__: openfl_utils_ByteArrayData
});
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var spinehaxe_Updatable = function() { };
$hxClasses["spinehaxe.Updatable"] = spinehaxe_Updatable;
spinehaxe_Updatable.__name__ = ["spinehaxe","Updatable"];
spinehaxe_Updatable.prototype = {
	update: null
	,__class__: spinehaxe_Updatable
};
var spinehaxe_Bone = function(data,skeleton,parent) {
	this._children = [];
	if(data == null) {
		throw new js__$Boot_HaxeError("data cannot be null.");
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError("skeleton cannot be null.");
	}
	this._data = data;
	this._skeleton = skeleton;
	this._parent = parent;
	this.setToSetupPose();
};
$hxClasses["spinehaxe.Bone"] = spinehaxe_Bone;
spinehaxe_Bone.__name__ = ["spinehaxe","Bone"];
spinehaxe_Bone.__interfaces__ = [spinehaxe_Updatable];
spinehaxe_Bone.prototype = {
	_data: null
	,_skeleton: null
	,_parent: null
	,_children: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,ax: null
	,ay: null
	,arotation: null
	,ascaleX: null
	,ascaleY: null
	,ashearX: null
	,ashearY: null
	,appliedValid: null
	,_a: null
	,_b: null
	,_c: null
	,_d: null
	,_worldX: null
	,_worldY: null
	,_sorted: null
	,update: function() {
		this.updateWorldTransformWith(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransform: function() {
		this.updateWorldTransformWith(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransformWith: function(x,y,rotation,scaleX,scaleY,shearX,shearY) {
		this.ax = x;
		this.ay = y;
		this.arotation = rotation;
		this.ascaleX = scaleX;
		this.ascaleY = scaleY;
		this.ashearX = shearX;
		this.ashearY = shearY;
		this.appliedValid = true;
		var rotationY = 0;
		var la = 0;
		var lb = 0;
		var lc = 0;
		var ld = 0;
		var sin = 0;
		var cos = 0;
		var s = 0;
		var parent = this._parent;
		if(parent == null) {
			rotationY = rotation + 90 + shearY;
			la = Math.cos(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			lb = Math.cos(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			lc = Math.sin(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			ld = Math.sin(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			var skeleton = this._skeleton;
			if(skeleton.flipX) {
				x = -x;
				la = -la;
				lb = -lb;
			}
			if(skeleton.flipY != spinehaxe_Bone.yDown) {
				y = -y;
				lc = -lc;
				ld = -ld;
			}
			this._a = la;
			this._b = lb;
			this._c = lc;
			this._d = ld;
			this._worldX = x + skeleton.x;
			this._worldY = y + skeleton.y;
			return;
		}
		var pa = parent._a;
		var pb = parent._b;
		var pc = parent._c;
		var pd = parent._d;
		this._worldX = pa * x + pb * y + parent._worldX;
		this._worldY = pc * x + pd * y + parent._worldY;
		switch(this._data.transformMode) {
		case "normal":
			rotationY = rotation + 90 + shearY;
			la = Math.cos(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			lb = Math.cos(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			lc = Math.sin(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			ld = Math.sin(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			this._a = pa * la + pb * lc;
			this._b = pa * lb + pb * ld;
			this._c = pc * la + pd * lc;
			this._d = pc * lb + pd * ld;
			return;
		case "norotationorreflection":
			s = pa * pa + pc * pc;
			var prx = 0;
			if(s > 0.0001) {
				s = Math.abs(pa * pd - pb * pc) / s;
				pb = pc * s;
				pd = pa * s;
				prx = Math.atan2(pc,pa) * spinehaxe_MathUtils.radDeg;
			} else {
				pa = 0;
				pc = 0;
				prx = 90 - Math.atan2(pd,pb) * spinehaxe_MathUtils.radDeg;
			}
			var rx = rotation + shearX - prx;
			var ry = rotation + shearY - prx + 90;
			la = Math.cos(spinehaxe_MathUtils.degRad * rx) * scaleX;
			lb = Math.cos(spinehaxe_MathUtils.degRad * ry) * scaleY;
			lc = Math.sin(spinehaxe_MathUtils.degRad * rx) * scaleX;
			ld = Math.sin(spinehaxe_MathUtils.degRad * ry) * scaleY;
			this._a = pa * la - pb * lc;
			this._b = pa * lb - pb * ld;
			this._c = pc * la + pd * lc;
			this._d = pc * lb + pd * ld;
			break;
		case "noscale":case "noscaleorreflection":
			cos = Math.cos(spinehaxe_MathUtils.degRad * rotation);
			sin = Math.sin(spinehaxe_MathUtils.degRad * rotation);
			var za = pa * cos + pb * sin;
			var zc = pc * cos + pd * sin;
			s = Math.sqrt(za * za + zc * zc);
			if(s > 0.00001) {
				s = 1 / s;
			}
			za *= s;
			zc *= s;
			s = Math.sqrt(za * za + zc * zc);
			var r = Math.PI / 2 + Math.atan2(zc,za);
			var zb = Math.cos(r) * s;
			var zd = Math.sin(r) * s;
			la = Math.cos(spinehaxe_MathUtils.degRad * shearX) * scaleX;
			lb = Math.cos(spinehaxe_MathUtils.degRad * (90 + shearY)) * scaleY;
			lc = Math.sin(spinehaxe_MathUtils.degRad * shearX) * scaleX;
			ld = Math.sin(spinehaxe_MathUtils.degRad * (90 + shearY)) * scaleY;
			this._a = za * la + zb * lc;
			this._b = za * lb + zb * ld;
			this._c = zc * la + zd * lc;
			this._d = zc * lb + zd * ld;
			if(this._data.transformMode != "noscaleorreflection" ? pa * pd - pb * pc < 0 : this._skeleton.flipX != this._skeleton.flipY) {
				this._b = -this._b;
				this._d = -this._d;
			}
			return;
		case "onlytranslation":
			rotationY = rotation + 90 + shearY;
			this._a = Math.cos(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			this._b = Math.cos(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			this._c = Math.sin(spinehaxe_MathUtils.degRad * (rotation + shearX)) * scaleX;
			this._d = Math.sin(spinehaxe_MathUtils.degRad * rotationY) * scaleY;
			break;
		}
		if(this._skeleton.flipX) {
			this._a = -this._a;
			this._b = -this._b;
		}
		if(this._skeleton.flipY != spinehaxe_Bone.yDown) {
			this._c = -this._c;
			this._d = -this._d;
		}
	}
	,setToSetupPose: function() {
		this.x = this._data.x;
		this.y = this._data.y;
		this.rotation = this._data.rotation;
		this.scaleX = this._data.scaleX;
		this.scaleY = this._data.scaleY;
		this.shearX = this._data.shearX;
		this.shearY = this._data.shearY;
	}
	,updateAppliedTransform: function() {
		this.appliedValid = true;
		var parent = this._parent;
		if(parent == null) {
			this.ax = this._worldX;
			this.ay = this._worldY;
			this.arotation = Math.atan2(this._c,this._a) * spinehaxe_MathUtils.radDeg;
			this.ascaleX = Math.sqrt(this._a * this._a + this._c * this._c);
			this.ascaleY = Math.sqrt(this._b * this._b + this._d * this._d);
			this.ashearX = 0;
			this.ashearY = Math.atan2(this._a * this._b + this._c * this._d,this._a * this._d - this._b * this._c) * spinehaxe_MathUtils.radDeg;
			return;
		}
		var pa = parent._a;
		var pb = parent._b;
		var pc = parent._c;
		var pd = parent._d;
		var pid = 1 / (pa * pd - pb * pc);
		var dx = this._worldX - parent._worldX;
		var dy = this._worldY - parent._worldY;
		this.ax = dx * pd * pid - dy * pb * pid;
		this.ay = dy * pa * pid - dx * pc * pid;
		var ia = pid * pd;
		var id = pid * pa;
		var ib = pid * pb;
		var ic = pid * pc;
		var ra = ia * this._a - ib * this._c;
		var rb = ia * this._b - ib * this._d;
		var rc = id * this._c - ic * this._a;
		var rd = id * this._d - ic * this._b;
		this.ashearX = 0;
		this.ascaleX = Math.sqrt(ra * ra + rc * rc);
		if(this.scaleX > 0.0001) {
			var det = ra * rd - rb * rc;
			this.ascaleY = det / this.ascaleX;
			this.ashearY = Math.atan2(ra * rb + rc * rd,det) * spinehaxe_MathUtils.radDeg;
			this.arotation = Math.atan2(rc,ra) * spinehaxe_MathUtils.radDeg;
		} else {
			this.ascaleX = 0;
			this.ascaleY = Math.sqrt(rb * rb + rd * rd);
			this.ashearY = 0;
			this.arotation = 90 - Math.atan2(rd,rb) * spinehaxe_MathUtils.radDeg;
		}
	}
	,localToWorld: function(local) {
		var localX = local[0];
		var localY = local[1];
		local[0] = localX * this._a + localY * this._b + this._worldX;
		local[1] = localX * this._c + localY * this._d + this._worldY;
	}
	,__class__: spinehaxe_Bone
};
var spinehaxe_BoneData = function(index,name,parent) {
	this.transformMode = "normal";
	this.shearY = 0;
	this.shearX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.length = 0;
	if(index < 0) {
		throw new js__$Boot_HaxeError("index must be >= 0");
	}
	if(name == null) {
		throw new js__$Boot_HaxeError("name cannot be null.");
	}
	this._index = index;
	this._name = name;
	this._parent = parent;
};
$hxClasses["spinehaxe.BoneData"] = spinehaxe_BoneData;
spinehaxe_BoneData.__name__ = ["spinehaxe","BoneData"];
spinehaxe_BoneData.prototype = {
	_index: null
	,_name: null
	,_parent: null
	,length: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,transformMode: null
	,__class__: spinehaxe_BoneData
};
var spinehaxe_Constraint = function() { };
$hxClasses["spinehaxe.Constraint"] = spinehaxe_Constraint;
spinehaxe_Constraint.__name__ = ["spinehaxe","Constraint"];
spinehaxe_Constraint.__interfaces__ = [spinehaxe_Updatable];
var spinehaxe_Event = function(time,data) {
	if(data == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("data cannot be null."));
	}
	this.time = time;
	this._data = data;
};
$hxClasses["spinehaxe.Event"] = spinehaxe_Event;
spinehaxe_Event.__name__ = ["spinehaxe","Event"];
spinehaxe_Event.prototype = {
	_data: null
	,time: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,__class__: spinehaxe_Event
};
var spinehaxe_EventData = function(name) {
	if(name == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spinehaxe.EventData"] = spinehaxe_EventData;
spinehaxe_EventData.__name__ = ["spinehaxe","EventData"];
spinehaxe_EventData.prototype = {
	name: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,__class__: spinehaxe_EventData
};
var spinehaxe_Exception = function(msg) {
	this.msg = msg;
};
$hxClasses["spinehaxe.Exception"] = spinehaxe_Exception;
spinehaxe_Exception.__name__ = ["spinehaxe","Exception"];
spinehaxe_Exception.prototype = {
	msg: null
	,__class__: spinehaxe_Exception
};
var spinehaxe_IkConstraint = function(data,skeleton) {
	if(data == null) {
		throw new js__$Boot_HaxeError("data cannot be null.");
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError("skeleton cannot be null.");
	}
	this._data = data;
	this.mix = data.mix;
	this.bendDirection = data.bendDirection;
	this.bones = [];
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones[this.bones.length] = skeleton.findBone(boneData._name);
	}
	this.target = skeleton.findBone(data.target._name);
};
$hxClasses["spinehaxe.IkConstraint"] = spinehaxe_IkConstraint;
spinehaxe_IkConstraint.__name__ = ["spinehaxe","IkConstraint"];
spinehaxe_IkConstraint.__interfaces__ = [spinehaxe_Constraint];
spinehaxe_IkConstraint.apply1 = function(bone,targetX,targetY,alpha) {
	if(!bone.appliedValid) {
		bone.updateAppliedTransform();
	}
	var p = bone._parent;
	var id = 1 / (p._a * p._d - p._b * p._c);
	var x = targetX - p._worldX;
	var y = targetY - p._worldY;
	var rotationIK = Math.atan2((y * p._a - x * p._c) * id - bone.ay,(x * p._d - y * p._b) * id - bone.ax) * spinehaxe_MathUtils.radDeg - bone.ashearX - bone.arotation;
	if(bone.ascaleX < 0) {
		rotationIK += 180;
	}
	if(rotationIK > 180) {
		rotationIK -= 360;
	} else if(rotationIK < -180) {
		rotationIK += 360;
	}
	bone.updateWorldTransformWith(bone.ax,bone.ay,bone.arotation + rotationIK * alpha,bone.ascaleX,bone.ascaleY,bone.ashearX,bone.ashearY);
};
spinehaxe_IkConstraint.apply2 = function(parent,child,targetX,targetY,bendDir,alpha) {
	if(alpha == 0) {
		child.updateWorldTransform();
		return;
	}
	if(!parent.appliedValid) {
		parent.updateAppliedTransform();
	}
	if(!child.appliedValid) {
		child.updateAppliedTransform();
	}
	var px = parent.ax;
	var py = parent.ay;
	var psx = parent.ascaleX;
	var psy = parent.ascaleY;
	var csx = child.ascaleX;
	var os1;
	var os2;
	var s2;
	if(psx < 0) {
		psx = -psx;
		os1 = 180;
		s2 = -1;
	} else {
		os1 = 0;
		s2 = 1;
	}
	if(psy < 0) {
		psy = -psy;
		s2 = -s2;
	}
	if(csx < 0) {
		csx = -csx;
		os2 = 180;
	} else {
		os2 = 0;
	}
	var cx = child.ax;
	var cy = 0;
	var cwx = 0;
	var cwy = 0;
	var a = parent._a;
	var b = parent._b;
	var c = parent._c;
	var d = parent._d;
	var u = Math.abs(psx - psy) <= 0.0001;
	if(!u) {
		cy = 0;
		cwx = a * cx + parent._worldX;
		cwy = c * cx + parent._worldY;
	} else {
		cy = child.ay;
		cwx = a * cx + b * cy + parent._worldX;
		cwy = c * cx + d * cy + parent._worldY;
	}
	var pp = parent._parent;
	a = pp._a;
	b = pp._b;
	c = pp._c;
	d = pp._d;
	var id = 1 / (a * d - b * c);
	var x = targetX - pp._worldX;
	var y = targetY - pp._worldY;
	var tx = (x * d - y * b) * id - px;
	var ty = (y * a - x * c) * id - py;
	x = cwx - pp._worldX;
	y = cwy - pp._worldY;
	var dx = (x * d - y * b) * id - px;
	var dy = (y * a - x * c) * id - py;
	var l1 = Math.sqrt(dx * dx + dy * dy);
	var l2 = child._data.length * csx;
	var a1 = 0;
	var a2 = 0;
	var breakOuter = false;
	if(u) {
		l2 *= psx;
		var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);
		if(cos < -1) {
			cos = -1;
		} else if(cos > 1) {
			cos = 1;
		}
		a2 = Math.acos(cos) * bendDir;
		a = l1 + l2 * cos;
		b = l2 * Math.sin(a2);
		a1 = Math.atan2(ty * a - tx * b,tx * a + ty * b);
	} else {
		a = psx * l2;
		b = psy * l2;
		var aa = a * a;
		var bb = b * b;
		var dd = tx * tx + ty * ty;
		var ta = Math.atan2(ty,tx);
		c = bb * l1 * l1 + aa * dd - aa * bb;
		var c1 = -2 * bb * l1;
		var c2 = bb - aa;
		d = c1 * c1 - 4 * c2 * c;
		if(d >= 0) {
			var q = Math.sqrt(d);
			if(c1 < 0) {
				q = -q;
			}
			q = -(c1 + q) / 2;
			var r0 = q / c2;
			var r1 = c / q;
			var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
			if(r * r <= dd) {
				y = Math.sqrt(dd - r * r) * bendDir;
				a1 = ta - Math.atan2(y,r);
				a2 = Math.atan2(y / psy,(r - l1) / psx);
				breakOuter = true;
			}
		}
		if(!breakOuter) {
			var minAngle = 0;
			var minDist = 2147483647;
			var minX = 0;
			var minY = 0;
			var maxAngle = 0;
			var maxDist = 0;
			var maxX = 0;
			var maxY = 0;
			x = l1 + a;
			d = x * x;
			if(d > maxDist) {
				maxAngle = 0;
				maxDist = d;
				maxX = x;
			}
			x = l1 - a;
			d = x * x;
			if(d < minDist) {
				minAngle = Math.PI;
				minDist = d;
				minX = x;
			}
			var angle = Math.acos(-a * l1 / (aa - bb));
			x = a * Math.cos(angle) + l1;
			y = b * Math.sin(angle);
			d = x * x + y * y;
			if(d < minDist) {
				minAngle = angle;
				minDist = d;
				minX = x;
				minY = y;
			}
			if(d > maxDist) {
				maxAngle = angle;
				maxDist = d;
				maxX = x;
				maxY = y;
			}
			if(dd <= (minDist + maxDist) / 2) {
				a1 = ta - Math.atan2(minY * bendDir,minX);
				a2 = minAngle * bendDir;
			} else {
				a1 = ta - Math.atan2(maxY * bendDir,maxX);
				a2 = maxAngle * bendDir;
			}
		}
	}
	var os = Math.atan2(cy,cx) * s2;
	var rotation = parent.arotation;
	a1 = (a1 - os) * spinehaxe_MathUtils.radDeg + os1 - rotation;
	if(a1 > 180) {
		a1 -= 360;
	} else if(a1 < -180) {
		a1 += 360;
	}
	parent.updateWorldTransformWith(px,py,rotation + a1 * alpha,parent.ascaleX,parent.ascaleY,0,0);
	rotation = child.arotation;
	a2 = ((a2 + os) * spinehaxe_MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
	if(a2 > 180) {
		a2 -= 360;
	} else if(a2 < -180) {
		a2 += 360;
	}
	child.updateWorldTransformWith(cx,cy,rotation + a2 * alpha,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
};
spinehaxe_IkConstraint.prototype = {
	_data: null
	,bones: null
	,target: null
	,mix: null
	,bendDirection: null
	,update: function() {
		switch(this.bones.length) {
		case 1:
			spinehaxe_IkConstraint.apply1(this.bones[0],this.target._worldX,this.target._worldY,this.mix);
			break;
		case 2:
			spinehaxe_IkConstraint.apply2(this.bones[0],this.bones[1],this.target._worldX,this.target._worldY,this.bendDirection,this.mix);
			break;
		}
	}
	,__class__: spinehaxe_IkConstraint
};
var spinehaxe_IkConstraintData = function(name) {
	this.mix = 1;
	this.bendDirection = 1;
	this.bones = [];
	if(name == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("name cannot be null."));
	}
	this._name = name;
};
$hxClasses["spinehaxe.IkConstraintData"] = spinehaxe_IkConstraintData;
spinehaxe_IkConstraintData.__name__ = ["spinehaxe","IkConstraintData"];
spinehaxe_IkConstraintData.prototype = {
	_name: null
	,order: null
	,bones: null
	,target: null
	,bendDirection: null
	,mix: null
	,__class__: spinehaxe_IkConstraintData
};
var spinehaxe_LinkedMesh = function(mesh,skin,slotIndex,parent) {
	this.mesh = mesh;
	this.skin = skin;
	this.slotIndex = slotIndex;
	this.parent = parent;
};
$hxClasses["spinehaxe.LinkedMesh"] = spinehaxe_LinkedMesh;
spinehaxe_LinkedMesh.__name__ = ["spinehaxe","LinkedMesh"];
spinehaxe_LinkedMesh.prototype = {
	parent: null
	,skin: null
	,slotIndex: null
	,mesh: null
	,__class__: spinehaxe_LinkedMesh
};
var spinehaxe_MathUtils = function() { };
$hxClasses["spinehaxe.MathUtils"] = spinehaxe_MathUtils;
spinehaxe_MathUtils.__name__ = ["spinehaxe","MathUtils"];
var spinehaxe_PathConstraint = function(data,skeleton) {
	this._segments = new Array(10);
	this._lengths = [];
	this._curves = [];
	this._world = [];
	this._positions = [];
	this._spaces = [];
	if(data == null) {
		throw new js__$Boot_HaxeError("data cannot be null.");
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError("skeleton cannot be null.");
	}
	this._data = data;
	this._bones = [];
	var _g = 0;
	var _g1 = data._bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this._bones.push(skeleton.findBone(boneData._name));
	}
	this.target = skeleton.findSlot(data.target._name);
	this.position = data.position;
	this.spacing = data.spacing;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
};
$hxClasses["spinehaxe.PathConstraint"] = spinehaxe_PathConstraint;
spinehaxe_PathConstraint.__name__ = ["spinehaxe","PathConstraint"];
spinehaxe_PathConstraint.__interfaces__ = [spinehaxe_Constraint];
spinehaxe_PathConstraint.prototype = {
	_data: null
	,_bones: null
	,target: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,_spaces: null
	,_positions: null
	,_world: null
	,_curves: null
	,_lengths: null
	,_segments: null
	,update: function() {
		var attachment = this.target._attachment;
		if(attachment == null) {
			return;
		}
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var rotate = rotateMix > 0;
		if(!(translateMix > 0) && !rotate) {
			return;
		}
		var data = this._data;
		var spacingMode = data.spacingMode;
		var lengthSpacing = spacingMode == "length";
		var rotateMode = data.rotateMode;
		var tangents = rotateMode == "tangent";
		var scale = rotateMode == "chainscale";
		var boneCount = this._bones.length;
		var spacesCount = tangents ? boneCount : boneCount + 1;
		var bones = this._bones;
		var array = this._spaces;
		while(array.length < spacesCount) array.push(0);
		while(array.length > spacesCount) array.pop();
		var spaces = this._spaces;
		var lengths = null;
		var spacing = this.spacing;
		if(scale || lengthSpacing) {
			if(scale) {
				var array1 = this._lengths;
				while(array1.length < boneCount) array1.push(0);
				while(array1.length > boneCount) array1.pop();
				lengths = this._lengths;
			}
			var _g1 = 0;
			var _g = spacesCount - 1;
			while(_g1 < _g) {
				var i = _g1++;
				var bone = bones[i];
				var length = bone._data.length;
				var x = length * bone._a;
				var y = length * bone._c;
				length = Math.sqrt(x * x + y * y);
				if(scale) {
					lengths[i] = length;
				}
				spaces[i + 1] = lengthSpacing ? Math.max(0,length + spacing) : spacing;
			}
		} else {
			var _g11 = 1;
			var _g2 = spacesCount;
			while(_g11 < _g2) spaces[_g11++] = spacing;
		}
		var positions = this.computeWorldPositions(attachment,spacesCount,tangents,data.positionMode == "percent",spacingMode == "percent");
		var boneX = positions[0];
		var boneY = positions[1];
		var offsetRotation = data.offsetRotation;
		var tip = false;
		if(offsetRotation == 0) {
			tip = rotateMode == "chain";
		} else {
			tip = false;
			var pa = this.target._bone;
			offsetRotation *= pa._a * pa._d - pa._b * pa._c > 0 ? spinehaxe_MathUtils.degRad : -spinehaxe_MathUtils.degRad;
		}
		var p = 3;
		var _g12 = 0;
		var _g3 = bones.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			var bone1 = bones[i1];
			bone1._worldX += (boneX - bone1._worldX) * translateMix;
			bone1._worldY += (boneY - bone1._worldY) * translateMix;
			var x1 = positions[p];
			var y1 = positions[p + 1];
			var dx = x1 - boneX;
			var dy = y1 - boneY;
			if(scale) {
				var length1 = lengths[i1];
				if(length1 != 0) {
					var s = (Math.sqrt(dx * dx + dy * dy) / length1 - 1) * rotateMix + 1;
					bone1._a *= s;
					bone1._c *= s;
				}
			}
			boneX = x1;
			boneY = y1;
			if(rotate) {
				var a = bone1._a;
				var b = bone1._b;
				var c = bone1._c;
				var d = bone1._d;
				var r;
				var cos;
				var sin;
				if(tangents) {
					r = positions[p - 1];
				} else if(spaces[i1 + 1] == 0) {
					r = positions[p + 2];
				} else {
					r = Math.atan2(dy,dx);
				}
				r -= Math.atan2(c,a);
				if(tip) {
					cos = Math.cos(r);
					sin = Math.sin(r);
					var length2 = bone1._data.length;
					boneX = x1 + (length2 * (cos * a - sin * c) - dx) * rotateMix;
					boneY = y1 + (length2 * (sin * a + cos * c) - dy) * rotateMix;
				} else {
					r += offsetRotation;
				}
				if(r > Math.PI) {
					r -= Math.PI * 2;
				} else if(r < -Math.PI) {
					r += Math.PI * 2;
				}
				r *= rotateMix;
				cos = Math.cos(r);
				sin = Math.sin(r);
				bone1._a = cos * a - sin * c;
				bone1._b = cos * b - sin * d;
				bone1._c = sin * a + cos * c;
				bone1._d = sin * b + cos * d;
			}
			bone1.appliedValid = false;
			p += 3;
		}
	}
	,computeWorldPositions: function(path,spacesCount,tangents,percentPosition,percentSpacing) {
		var target = this.target;
		var position = this.position;
		var spaces = this._spaces;
		var array = this._positions;
		var length = spacesCount * 3 + 2;
		while(array.length < length) array.push(0);
		while(array.length > length) array.pop();
		var out = this._positions;
		var world;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = -1;
		if(!path.constantSpeed) {
			var lengths = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths[curveCount];
			if(percentPosition) {
				position *= pathLength;
			}
			if(percentSpacing) {
				var _g1 = 0;
				while(_g1 < spacesCount) spaces[_g1++] *= pathLength;
			}
			var array1 = this._world;
			while(array1.length < 8) array1.push(0);
			while(array1.length > 8) array1.pop();
			world = this._world;
			var i = 0;
			var o = 0;
			var curve = 0;
			while(i < spacesCount) {
				var space = spaces[i];
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != -2) {
						prevCurve = -2;
						path.computeWorldVertices2(target,2,4,world,0);
					}
					this.addBeforePosition(p,world,0,out,o);
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != -3) {
						prevCurve = -3;
						path.computeWorldVertices2(target,verticesLength - 6,4,world,0);
					}
					this.addAfterPosition(p - pathLength,world,0,out,o);
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length1 = lengths[curve];
					if(p > length1) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length1;
					} else {
						var prev = lengths[curve - 1];
						p = (p - prev) / (length1 - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						path.computeWorldVertices2(target,verticesLength - 4,4,world,0);
						path.computeWorldVertices2(target,0,4,world,4);
					} else {
						path.computeWorldVertices2(target,curve * 6 + 2,8,world,0);
					}
				}
				this.addCurvePosition(p,world[0],world[1],world[2],world[3],world[4],world[5],world[6],world[7],out,o,tangents || i > 0 && space == 0);
				++i;
				o += 3;
			}
			return out;
		}
		if(closed) {
			verticesLength += 2;
			var array2 = this._world;
			while(array2.length < verticesLength) array2.push(0);
			while(array2.length > verticesLength) array2.pop();
			world = this._world;
			path.computeWorldVertices2(target,2,verticesLength - 4,world,0);
			path.computeWorldVertices2(target,0,2,world,verticesLength - 4);
			world[verticesLength - 2] = world[0];
			world[verticesLength - 1] = world[1];
		} else {
			--curveCount;
			verticesLength -= 4;
			var array3 = this._world;
			while(array3.length < verticesLength) array3.push(0);
			while(array3.length > verticesLength) array3.pop();
			world = this._world;
			path.computeWorldVertices2(target,2,verticesLength,world,0);
		}
		var array4 = this._curves;
		while(array4.length < curveCount) array4.push(0);
		while(array4.length > curveCount) array4.pop();
		var curves = this._curves;
		var pathLength1 = 0;
		var x1 = world[0];
		var y1 = world[1];
		var cx1 = 0;
		var cy1 = 0;
		var cx2 = 0;
		var cy2 = 0;
		var x2 = 0;
		var y2 = 0;
		var tmpx;
		var tmpy;
		var dddfx;
		var dddfy;
		var ddfx;
		var ddfy;
		var dfx;
		var dfy;
		var i1 = 0;
		var w = 2;
		while(i1 < curveCount) {
			cx1 = world[w];
			cy1 = world[w + 1];
			cx2 = world[w + 2];
			cy2 = world[w + 3];
			x2 = world[w + 4];
			y2 = world[w + 5];
			tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
			tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
			dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
			dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
			ddfx = tmpx * 2 + dddfx;
			ddfy = tmpy * 2 + dddfy;
			dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
			dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx + dddfx;
			dfy += ddfy + dddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			curves[i1] = pathLength1;
			x1 = x2;
			y1 = y2;
			++i1;
			w += 6;
		}
		if(percentPosition) {
			position *= pathLength1;
		}
		if(percentSpacing) {
			var _g11 = 0;
			while(_g11 < spacesCount) spaces[_g11++] *= pathLength1;
		}
		var segments = this._segments;
		var curveLength = 0;
		var o1 = 0;
		var curve1 = 0;
		var segment = 0;
		var _g12 = 0;
		while(_g12 < spacesCount) {
			var i2 = _g12++;
			var space1 = spaces[i2];
			var p1 = position += space1;
			if(closed) {
				p1 %= pathLength1;
				if(p1 < 0) {
					p1 += pathLength1;
				}
				curve1 = 0;
			} else if(p1 < 0) {
				this.addBeforePosition(p1,world,0,out,o1);
				o1 += 3;
				continue;
			} else if(p1 > pathLength1) {
				this.addAfterPosition(p1 - pathLength1,world,verticesLength - 4,out,o1);
				o1 += 3;
				continue;
			}
			while(true) {
				var length2 = curves[curve1];
				if(p1 > length2) {
					++curve1;
					continue;
				}
				if(curve1 == 0) {
					p1 /= length2;
				} else {
					var prev1 = curves[curve1 - 1];
					p1 = (p1 - prev1) / (length2 - prev1);
				}
				break;
			}
			if(curve1 != prevCurve) {
				prevCurve = curve1;
				var ii = curve1 * 6;
				x1 = world[ii];
				y1 = world[ii + 1];
				cx1 = world[ii + 2];
				cy1 = world[ii + 3];
				cx2 = world[ii + 4];
				cy2 = world[ii + 5];
				x2 = world[ii + 6];
				y2 = world[ii + 7];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
				curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
				segments[0] = curveLength;
				ii = 1;
				while(ii < 8) {
					dfx += ddfx;
					dfy += ddfy;
					ddfx += dddfx;
					ddfy += dddfy;
					curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
					segments[ii] = curveLength;
					++ii;
				}
				dfx += ddfx;
				dfy += ddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[8] = curveLength;
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[9] = curveLength;
				segment = 0;
			}
			p1 *= curveLength;
			while(true) {
				var length3 = segments[segment];
				if(p1 > length3) {
					++segment;
					continue;
				}
				if(segment == 0) {
					p1 /= length3;
				} else {
					var prev2 = segments[segment - 1];
					p1 = segment + (p1 - prev2) / (length3 - prev2);
				}
				break;
			}
			this.addCurvePosition(p1 * 0.1,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o1,tangents || i2 > 0 && space1 == 0);
			o1 += 3;
		}
		return out;
	}
	,addBeforePosition: function(p,temp,i,out,o) {
		var x1 = temp[i];
		var y1 = temp[i + 1];
		var r = Math.atan2(temp[i + 3] - y1,temp[i + 2] - x1);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addAfterPosition: function(p,temp,i,out,o) {
		var x1 = temp[i + 2];
		var y1 = temp[i + 3];
		var r = Math.atan2(y1 - temp[i + 1],x1 - temp[i]);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addCurvePosition: function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents) {
		if(p == 0 || isNaN(p)) {
			p = 0.0001;
		}
		var tt = p * p;
		var ttt = tt * p;
		var u = 1 - p;
		var uu = u * u;
		var uuu = uu * u;
		var ut = u * p;
		var ut3 = ut * 3;
		var uut3 = u * ut3;
		var utt3 = ut3 * p;
		var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
		var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
		out[o] = x;
		out[o + 1] = y;
		if(tangents) {
			out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
		}
	}
	,__class__: spinehaxe_PathConstraint
};
var spinehaxe_PathConstraintData = function(name) {
	this._bones = [];
	if(name == null) {
		throw new js__$Boot_HaxeError("name cannot be null.");
	}
	this._name = name;
};
$hxClasses["spinehaxe.PathConstraintData"] = spinehaxe_PathConstraintData;
spinehaxe_PathConstraintData.__name__ = ["spinehaxe","PathConstraintData"];
spinehaxe_PathConstraintData.prototype = {
	_name: null
	,order: null
	,_bones: null
	,target: null
	,positionMode: null
	,spacingMode: null
	,rotateMode: null
	,offsetRotation: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,__class__: spinehaxe_PathConstraintData
};
var spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry = function(instantiator) {
	this.items = [];
	this.instantiator = instantiator;
};
$hxClasses["spinehaxe.Pool_spinehaxe_animation_TrackEntry"] = spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry;
spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry.__name__ = ["spinehaxe","Pool_spinehaxe_animation_TrackEntry"];
spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry.prototype = {
	items: null
	,instantiator: null
	,obtain: function() {
		if(this.items.length > 0) {
			return this.items.pop();
		} else {
			return this.instantiator();
		}
	}
	,free: function(item) {
		if(js_Boot.__instanceof(item,spinehaxe_Poolable)) {
			(js_Boot.__cast(item , spinehaxe_Poolable)).reset();
		}
		this.items.push(item);
	}
	,__class__: spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry
};
var spinehaxe_Poolable = function() { };
$hxClasses["spinehaxe.Poolable"] = spinehaxe_Poolable;
spinehaxe_Poolable.__name__ = ["spinehaxe","Poolable"];
spinehaxe_Poolable.prototype = {
	reset: null
	,__class__: spinehaxe_Poolable
};
var spinehaxe_Skeleton = function(data) {
	this.y = 0;
	this.x = 0;
	this.flipY = false;
	this.flipX = false;
	this.time = 0;
	this._updateCacheReset = [];
	this._updateCache = [];
	if(data == null) {
		throw new js__$Boot_HaxeError("data cannot be null.");
	}
	this._data = data;
	this.bones = [];
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		var bone;
		if(boneData._parent == null) {
			bone = new spinehaxe_Bone(boneData,this,null);
		} else {
			var parent = this.bones[boneData._parent._index];
			bone = new spinehaxe_Bone(boneData,this,parent);
			parent._children.push(bone);
		}
		this.bones.push(bone);
	}
	this.slots = [];
	this.drawOrder = [];
	var _g2 = 0;
	var _g11 = data.slots;
	while(_g2 < _g11.length) {
		var slotData = _g11[_g2];
		++_g2;
		var slot = new spinehaxe_Slot(slotData,this.bones[slotData._boneData._index]);
		this.slots.push(slot);
		this.drawOrder[this.drawOrder.length] = slot;
	}
	this.ikConstraints = [];
	var _g3 = 0;
	var _g12 = data.ikConstraints;
	while(_g3 < _g12.length) {
		var ikConstraintData = _g12[_g3];
		++_g3;
		this.ikConstraints.push(new spinehaxe_IkConstraint(ikConstraintData,this));
	}
	this.transformConstraints = [];
	var _g4 = 0;
	var _g13 = data.transformConstraints;
	while(_g4 < _g13.length) {
		var transformConstraintData = _g13[_g4];
		++_g4;
		this.transformConstraints.push(new spinehaxe_TransformConstraint(transformConstraintData,this));
	}
	this.pathConstraints = [];
	var _g5 = 0;
	var _g14 = data.pathConstraints;
	while(_g5 < _g14.length) {
		var pathConstraintData = _g14[_g5];
		++_g5;
		this.pathConstraints.push(new spinehaxe_PathConstraint(pathConstraintData,this));
	}
	this.updateCache();
};
$hxClasses["spinehaxe.Skeleton"] = spinehaxe_Skeleton;
spinehaxe_Skeleton.__name__ = ["spinehaxe","Skeleton"];
spinehaxe_Skeleton.prototype = {
	_data: null
	,bones: null
	,slots: null
	,drawOrder: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,_updateCache: null
	,_updateCacheReset: null
	,_skin: null
	,time: null
	,flipX: null
	,flipY: null
	,x: null
	,y: null
	,updateCache: function() {
		var updateCache = this._updateCache;
		while(updateCache.length < 0) updateCache.push(null);
		while(updateCache.length > 0) updateCache.pop();
		var bones = this.bones;
		var _g = 0;
		while(_g < bones.length) {
			var bone = bones[_g];
			++_g;
			bone._sorted = false;
		}
		var ikConstraints = this.ikConstraints;
		var transformConstraints = this.transformConstraints;
		var pathConstraints = this.pathConstraints;
		var ikCount = ikConstraints.length;
		var transformCount = transformConstraints.length;
		var pathCount = pathConstraints.length;
		var constraintCount = ikCount + transformCount + pathCount;
		var continueOuter;
		var _g1 = 0;
		while(_g1 < constraintCount) {
			var i = _g1++;
			continueOuter = false;
			var _g3 = 0;
			while(_g3 < ikCount) {
				var ikConstraint = ikConstraints[_g3++];
				if(ikConstraint._data.order == i) {
					this.sortIkConstraint(ikConstraint);
					continueOuter = true;
					break;
				}
			}
			if(!continueOuter) {
				var _g31 = 0;
				while(_g31 < transformCount) {
					var transformConstraint = transformConstraints[_g31++];
					if(transformConstraint._data.order == i) {
						this.sortTransformConstraint(transformConstraint);
						continueOuter = true;
						break;
					}
				}
			}
			if(!continueOuter) {
				var _g32 = 0;
				while(_g32 < pathCount) {
					var pathConstraint = pathConstraints[_g32++];
					if(pathConstraint._data.order == i) {
						this.sortPathConstraint(pathConstraint);
						continueOuter = true;
						break;
					}
				}
			}
		}
		var _g2 = 0;
		while(_g2 < bones.length) {
			var bone1 = bones[_g2];
			++_g2;
			this.sortBone(bone1);
		}
	}
	,sortIkConstraint: function(constraint) {
		this.sortBone(constraint.target);
		var constrained = constraint.bones;
		var parent = constrained[0];
		this.sortBone(parent);
		if(constrained.length > 1) {
			var child = constrained[constrained.length - 1];
			if(this._updateCache.indexOf(child) <= -1) {
				this._updateCacheReset.push(child);
			}
		}
		this._updateCache.push(constraint);
		this.sortReset(parent._children);
		constrained[constrained.length - 1]._sorted = true;
	}
	,sortPathConstraint: function(constraint) {
		var slot = constraint.target;
		var slotIndex = slot._data._index;
		var slotBone = slot._bone;
		if(this._skin != null) {
			this.sortPathConstraintAttachment(this._skin,slotIndex,slotBone);
		}
		if(this._data.defaultSkin != null && this._data.defaultSkin != this._skin) {
			this.sortPathConstraintAttachment(this._data.defaultSkin,slotIndex,slotBone);
		}
		var _g1 = 0;
		var _g = this._data.skins.length;
		while(_g1 < _g) this.sortPathConstraintAttachment(this._data.skins[_g1++],slotIndex,slotBone);
		var attachment = slot._attachment;
		if(js_Boot.__instanceof(attachment,spinehaxe_attachments_PathAttachment)) {
			this.sortPathConstraintAttachment2(attachment,slotBone);
		}
		var constrained = constraint._bones;
		var boneCount = constrained.length;
		var _g11 = 0;
		while(_g11 < boneCount) this.sortBone(constrained[_g11++]);
		this._updateCache.push(constraint);
		var _g12 = 0;
		while(_g12 < boneCount) this.sortReset(constrained[_g12++]._children);
		var _g13 = 0;
		while(_g13 < boneCount) constrained[_g13++]._sorted = true;
	}
	,sortTransformConstraint: function(constraint) {
		this.sortBone(constraint.target);
		var constrained = constraint._bones;
		var boneCount = constrained.length;
		var _g1 = 0;
		while(_g1 < boneCount) this.sortBone(constrained[_g1++]);
		this._updateCache.push(constraint);
		var _g11 = 0;
		while(_g11 < boneCount) this.sortReset(constrained[_g11++]._children);
		var _g12 = 0;
		while(_g12 < boneCount) constrained[_g12++]._sorted = true;
	}
	,sortPathConstraintAttachment: function(skin,slotIndex,slotBone) {
		var dict = skin.attachments[slotIndex];
		if(dict == null) {
			return;
		}
		var value = new haxe_ds__$StringMap_StringMapIterator(dict,dict.arrayKeys());
		while(value.hasNext()) this.sortPathConstraintAttachment2(value.next(),slotBone);
	}
	,sortPathConstraintAttachment2: function(attachment,slotBone) {
		var pathAttachment = attachment;
		if(pathAttachment == null) {
			return;
		}
		var pathBones = pathAttachment.bones;
		if(pathBones == null) {
			this.sortBone(slotBone);
		} else {
			var bones = this.bones;
			var i = 0;
			while(i < pathBones.length) {
				var boneCount = i++;
				var n = i + pathBones[boneCount];
				while(i < n) {
					this.sortBone(bones[pathBones[i]]);
					++i;
				}
			}
		}
	}
	,sortBone: function(bone) {
		if(bone._sorted) {
			return;
		}
		var parent = bone._parent;
		if(parent != null) {
			this.sortBone(parent);
		}
		bone._sorted = true;
		this._updateCache.push(bone);
	}
	,sortReset: function(bones) {
		var _g = 0;
		while(_g < bones.length) {
			var bone = bones[_g];
			++_g;
			if(bone._sorted) {
				this.sortReset(bone._children);
			}
			bone._sorted = false;
		}
	}
	,updateWorldTransform: function() {
		var updateCacheReset = this._updateCacheReset;
		var _g = 0;
		while(_g < updateCacheReset.length) {
			var bone = updateCacheReset[_g];
			++_g;
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
		}
		var _g1 = 0;
		var _g11 = this._updateCache;
		while(_g1 < _g11.length) {
			var updatable = _g11[_g1];
			++_g1;
			updatable.update();
		}
	}
	,setToSetupPose: function() {
		this.setBonesToSetupPose();
		this.setSlotsToSetupPose();
	}
	,setBonesToSetupPose: function() {
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) {
			var bone = _g1[_g];
			++_g;
			bone.setToSetupPose();
		}
		var _g2 = 0;
		var _g11 = this.ikConstraints;
		while(_g2 < _g11.length) {
			var ikConstraint = _g11[_g2];
			++_g2;
			ikConstraint.bendDirection = ikConstraint._data.bendDirection;
			ikConstraint.mix = ikConstraint._data.mix;
		}
		var _g3 = 0;
		var _g12 = this.transformConstraints;
		while(_g3 < _g12.length) {
			var transformConstraint = _g12[_g3];
			++_g3;
			transformConstraint.rotateMix = transformConstraint._data.rotateMix;
			transformConstraint.translateMix = transformConstraint._data.translateMix;
			transformConstraint.scaleMix = transformConstraint._data.scaleMix;
			transformConstraint.shearMix = transformConstraint._data.shearMix;
		}
		var _g4 = 0;
		var _g13 = this.pathConstraints;
		while(_g4 < _g13.length) {
			var pathConstraint = _g13[_g4];
			++_g4;
			pathConstraint.position = pathConstraint._data.position;
			pathConstraint.spacing = pathConstraint._data.spacing;
			pathConstraint.rotateMix = pathConstraint._data.rotateMix;
			pathConstraint.translateMix = pathConstraint._data.translateMix;
		}
	}
	,setSlotsToSetupPose: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			this.drawOrder[i++] = slot;
			slot.setToSetupPose();
		}
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError("boneName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) {
			var bone = _g1[_g];
			++_g;
			if(bone._data._name == boneName) {
				return bone;
			}
		}
		return null;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError("slotName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot._data._name == slotName) {
				return slot;
			}
		}
		return null;
	}
	,findSlotIndex: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError("slotName cannot be null.");
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot._data._name == slotName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getAttachmentForSlotIndex: function(slotIndex,attachmentName) {
		if(attachmentName == null) {
			throw new js__$Boot_HaxeError("attachmentName cannot be null.");
		}
		if(this._skin != null) {
			var attachment = this._skin.getAttachment(slotIndex,attachmentName);
			if(attachment != null) {
				return attachment;
			}
		}
		if(this._data.defaultSkin != null) {
			return this._data.defaultSkin.getAttachment(slotIndex,attachmentName);
		}
		return null;
	}
	,__class__: spinehaxe_Skeleton
};
var spinehaxe_SkeletonData = function() {
	this.pathConstraints = [];
	this.transformConstraints = [];
	this.ikConstraints = [];
	this.animations = [];
	this.events = [];
	this.skins = [];
	this.slots = [];
	this.bones = [];
};
$hxClasses["spinehaxe.SkeletonData"] = spinehaxe_SkeletonData;
spinehaxe_SkeletonData.__name__ = ["spinehaxe","SkeletonData"];
spinehaxe_SkeletonData.prototype = {
	name: null
	,bones: null
	,slots: null
	,skins: null
	,defaultSkin: null
	,events: null
	,animations: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,width: null
	,height: null
	,version: null
	,hash: null
	,fps: null
	,imagesPath: null
	,findBone: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError("boneName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) {
			var bone = _g1[_g];
			++_g;
			if(bone._name == boneName) {
				return bone;
			}
		}
		return null;
	}
	,findBoneIndex: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError("boneName cannot be null.");
		}
		var _g1 = 0;
		var _g = this.bones.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.bones[i]._name == boneName) {
				return i;
			}
		}
		return -1;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError("slotName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot._name == slotName) {
				return slot;
			}
		}
		return null;
	}
	,findSlotIndex: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError("slotName cannot be null.");
		}
		var _g1 = 0;
		var _g = this.slots.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.slots[i]._name == slotName) {
				return i;
			}
		}
		return -1;
	}
	,findSkin: function(skinName) {
		if(skinName == null) {
			throw new js__$Boot_HaxeError("skinName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.skins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			if(skin.name == skinName) {
				return skin;
			}
		}
		return null;
	}
	,findEvent: function(eventName) {
		if(eventName == null) {
			throw new js__$Boot_HaxeError("eventName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var eventData = _g1[_g];
			++_g;
			if(eventData.name == eventName) {
				return eventData;
			}
		}
		return null;
	}
	,findAnimation: function(animationName) {
		if(animationName == null) {
			throw new js__$Boot_HaxeError("animationName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			if(animation.name == animationName) {
				return animation;
			}
		}
		return null;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError("constraintName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.ikConstraints;
		while(_g < _g1.length) {
			var ikConstraintData = _g1[_g];
			++_g;
			if(ikConstraintData._name == constraintName) {
				return ikConstraintData;
			}
		}
		return null;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError("constraintName cannot be null.");
		}
		var _g = 0;
		var _g1 = this.transformConstraints;
		while(_g < _g1.length) {
			var transformConstraintData = _g1[_g];
			++_g;
			if(transformConstraintData._name == constraintName) {
				return transformConstraintData;
			}
		}
		return null;
	}
	,findPathConstraintIndex: function(pathConstraintName) {
		if(pathConstraintName == null) {
			throw new js__$Boot_HaxeError("pathConstraintName cannot be null.");
		}
		var pathConstraints = this.pathConstraints;
		var _g1 = 0;
		var _g = pathConstraints.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(pathConstraints[i]._name == pathConstraintName) {
				return i;
			}
		}
		return -1;
	}
	,toString: function() {
		if(this.name != null) {
			return this.name;
		} else {
			return Std.string(this);
		}
	}
	,__class__: spinehaxe_SkeletonData
};
var spinehaxe_SkeletonJson = function(attachmentLoader) {
	this.linkedMeshes = [];
	this.scale = 1;
	this.attachmentLoader = attachmentLoader;
};
$hxClasses["spinehaxe.SkeletonJson"] = spinehaxe_SkeletonJson;
spinehaxe_SkeletonJson.__name__ = ["spinehaxe","SkeletonJson"];
spinehaxe_SkeletonJson.readCurve = function(map,timeline,frameIndex) {
	var curve = Reflect.field(map,"curve");
	if(curve == null) {
		return;
	}
	if(typeof(curve) == "string" && js_Boot.__cast(curve , String) == "stepped") {
		timeline.setStepped(frameIndex);
	} else if((curve instanceof Array) && curve.__enum__ == null) {
		var curveValues = curve;
		timeline.setCurve(frameIndex,curveValues[0],curveValues[1],curveValues[2],curveValues[3]);
	}
};
spinehaxe_SkeletonJson.toColor = function(hexString,colorIndex) {
	if(hexString.length != 8) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("Color hexidecimal length must be 8, recieved: " + hexString));
	}
	return Std.parseInt("0x" + hexString.substring(colorIndex * 2,colorIndex * 2 + 2)) / 255;
};
spinehaxe_SkeletonJson.prototype = {
	attachmentLoader: null
	,scale: null
	,linkedMeshes: null
	,readSkeletonData: function(object,name) {
		if(object == null) {
			throw new js__$Boot_HaxeError("object cannot be null.");
		}
		var root = JSON.parse(object);
		var skeletonData = new spinehaxe_SkeletonData();
		skeletonData.name = name;
		if(Object.prototype.hasOwnProperty.call(root,"skeleton")) {
			var skeletonMap = Reflect.field(root,"skeleton");
			var value = Reflect.field(skeletonMap,"hash");
			skeletonData.hash = value == null ? null : Std.string(value);
			var value1 = Reflect.field(skeletonMap,"spine");
			skeletonData.version = value1 == null ? null : Std.string(value1);
			var value2 = Reflect.field(skeletonMap,"width");
			skeletonData.width = value2 == null ? 0 : js_Boot.__cast(value2 , Float);
			var value3 = Reflect.field(skeletonMap,"height");
			skeletonData.height = value3 == null ? 0 : js_Boot.__cast(value3 , Float);
			var value4 = Reflect.field(skeletonMap,"fps");
			skeletonData.fps = value4 == null ? 0 : js_Boot.__cast(value4 , Float);
			var value5 = Reflect.field(skeletonMap,"images");
			skeletonData.imagesPath = value5 == null ? null : Std.string(value5);
		}
		var _g = 0;
		var _g1 = Reflect.field(root,"bones");
		while(_g < _g1.length) {
			var boneMap = _g1[_g];
			++_g;
			var parent = null;
			var value6 = Reflect.field(boneMap,"parent");
			var parentName = value6 == null ? null : Std.string(value6);
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw new js__$Boot_HaxeError("Parent bone not found: " + parentName);
				}
			}
			var value7 = Reflect.field(boneMap,"name");
			var boneData = new spinehaxe_BoneData(skeletonData.bones.length,value7 == null ? null : Std.string(value7),parent);
			var value8 = Reflect.field(boneMap,"length");
			boneData.length = (value8 == null ? 0 : js_Boot.__cast(value8 , Float)) * this.scale;
			var value9 = Reflect.field(boneMap,"x");
			boneData.x = (value9 == null ? 0 : js_Boot.__cast(value9 , Float)) * this.scale;
			var value10 = Reflect.field(boneMap,"y");
			boneData.y = (value10 == null ? 0 : js_Boot.__cast(value10 , Float)) * this.scale;
			var value11 = Reflect.field(boneMap,"rotation");
			boneData.rotation = value11 == null ? 0 : js_Boot.__cast(value11 , Float);
			var value12 = Reflect.field(boneMap,"scaleX");
			boneData.scaleX = value12 == null ? 1 : js_Boot.__cast(value12 , Float);
			var value13 = Reflect.field(boneMap,"scaleY");
			boneData.scaleY = value13 == null ? 1 : js_Boot.__cast(value13 , Float);
			var value14 = Reflect.field(boneMap,"shearX");
			boneData.shearX = value14 == null ? 0 : js_Boot.__cast(value14 , Float);
			var value15 = Reflect.field(boneMap,"shearY");
			boneData.shearY = value15 == null ? 0 : js_Boot.__cast(value15 , Float);
			var value16 = Reflect.field(boneMap,"transform");
			boneData.transformMode = value16 == null ? "normal" : Std.string(value16);
			skeletonData.bones.push(boneData);
		}
		var _g2 = 0;
		var _g11 = Reflect.field(root,"slots");
		while(_g2 < _g11.length) {
			var slotMap = _g11[_g2];
			++_g2;
			var value17 = Reflect.field(slotMap,"name");
			var slotName = value17 == null ? null : Std.string(value17);
			var value18 = Reflect.field(slotMap,"bone");
			var boneName = value18 == null ? null : Std.string(value18);
			var boneData1 = skeletonData.findBone(boneName);
			if(boneData1 == null) {
				throw new js__$Boot_HaxeError("Slot bone not found: " + boneName);
			}
			var slotData = new spinehaxe_SlotData(skeletonData.slots.length,slotName,boneData1);
			var value19 = Reflect.field(slotMap,"color");
			var color = value19 == null ? null : Std.string(value19);
			if(color != null) {
				slotData.r = spinehaxe_SkeletonJson.toColor(color,0);
				slotData.g = spinehaxe_SkeletonJson.toColor(color,1);
				slotData.b = spinehaxe_SkeletonJson.toColor(color,2);
				slotData.a = spinehaxe_SkeletonJson.toColor(color,3);
			}
			var value20 = Reflect.field(slotMap,"attachment");
			slotData.attachmentName = value20 == null ? null : Std.string(value20);
			var value21 = Reflect.field(slotMap,"blend");
			slotData.blendMode = value21 == null ? "normal" : Std.string(value21);
			skeletonData.slots.push(slotData);
		}
		var constraints = Reflect.field(root,"ik");
		var _g3 = 0;
		var _g12 = Reflect.fields(constraints);
		while(_g3 < _g12.length) {
			var constraintName = _g12[_g3];
			++_g3;
			var constraintMap = Reflect.field(constraints,constraintName);
			var value22 = Reflect.field(constraintMap,"name");
			var ikConstraintData = new spinehaxe_IkConstraintData(value22 == null ? null : Std.string(value22));
			var value23 = Reflect.field(constraintMap,"order");
			ikConstraintData.order = value23 == null ? 0 : js_Boot.__cast(value23 , Float);
			var _g21 = 0;
			var _g31 = Reflect.field(constraintMap,"bones");
			while(_g21 < _g31.length) {
				var boneName1 = _g31[_g21];
				++_g21;
				var bone = skeletonData.findBone(boneName1);
				if(bone == null) {
					throw new js__$Boot_HaxeError("IK constraint bone not found: " + boneName1);
				}
				ikConstraintData.bones.push(bone);
			}
			var value24 = Reflect.field(constraintMap,"target");
			ikConstraintData.target = skeletonData.findBone(value24 == null ? null : Std.string(value24));
			if(ikConstraintData.target == null) {
				var value25 = Reflect.field(constraintMap,"target");
				throw new js__$Boot_HaxeError("Target bone not found: " + (value25 == null ? null : Std.string(value25)));
			}
			var tmp;
			var tmp1;
			if(!(!Object.prototype.hasOwnProperty.call(constraintMap,"bendPositive"))) {
				var value26 = Reflect.field(constraintMap,"bendPositive");
				if(value26 == null) {
					tmp1 = false;
				} else {
					tmp1 = js_Boot.__cast(value26 , Bool);
				}
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				tmp = 1;
			} else {
				tmp = -1;
			}
			ikConstraintData.bendDirection = tmp;
			var tmp2;
			if(Object.prototype.hasOwnProperty.call(constraintMap,"mix")) {
				var value27 = Reflect.field(constraintMap,"mix");
				if(value27 == null) {
					tmp2 = 0;
				} else {
					tmp2 = js_Boot.__cast(value27 , Float);
				}
			} else {
				tmp2 = 1;
			}
			ikConstraintData.mix = tmp2;
			skeletonData.ikConstraints.push(ikConstraintData);
		}
		var constraints1 = Reflect.field(root,"transform");
		var _g4 = 0;
		var _g13 = Reflect.fields(constraints1);
		while(_g4 < _g13.length) {
			var constraintName1 = _g13[_g4];
			++_g4;
			var constraintMap1 = Reflect.field(constraints1,constraintName1);
			var value28 = Reflect.field(constraintMap1,"name");
			var transformConstraintData = new spinehaxe_TransformConstraintData(value28 == null ? null : Std.string(value28));
			var value29 = Reflect.field(constraintMap1,"order");
			transformConstraintData.order = value29 == null ? 0 : js_Boot.__cast(value29 , Float);
			var _g22 = 0;
			var _g32 = Reflect.field(constraintMap1,"bones");
			while(_g22 < _g32.length) {
				var boneName2 = _g32[_g22];
				++_g22;
				var bone1 = skeletonData.findBone(boneName2);
				if(bone1 == null) {
					throw new js__$Boot_HaxeError("Transform constraint bone not found: " + boneName2);
				}
				transformConstraintData._bones.push(bone1);
			}
			var value30 = Reflect.field(constraintMap1,"target");
			transformConstraintData.target = skeletonData.findBone(value30 == null ? null : Std.string(value30));
			if(transformConstraintData.target == null) {
				var value31 = Reflect.field(constraintMap1,"target");
				throw new js__$Boot_HaxeError("Target bone not found: " + (value31 == null ? null : Std.string(value31)));
			}
			var value32 = Reflect.field(constraintMap1,"rotation");
			transformConstraintData.offsetRotation = value32 == null ? 0 : js_Boot.__cast(value32 , Float);
			var value33 = Reflect.field(constraintMap1,"x");
			transformConstraintData.offsetX = (value33 == null ? 0 : js_Boot.__cast(value33 , Float)) * this.scale;
			var value34 = Reflect.field(constraintMap1,"y");
			transformConstraintData.offsetY = (value34 == null ? 0 : js_Boot.__cast(value34 , Float)) * this.scale;
			var value35 = Reflect.field(constraintMap1,"scaleX");
			transformConstraintData.offsetScaleX = value35 == null ? 0 : js_Boot.__cast(value35 , Float);
			var value36 = Reflect.field(constraintMap1,"scaleY");
			transformConstraintData.offsetScaleY = value36 == null ? 0 : js_Boot.__cast(value36 , Float);
			var value37 = Reflect.field(constraintMap1,"shearY");
			transformConstraintData.offsetShearY = value37 == null ? 0 : js_Boot.__cast(value37 , Float);
			var tmp3;
			if(Object.prototype.hasOwnProperty.call(constraintMap1,"rotateMix")) {
				var value38 = Reflect.field(constraintMap1,"rotateMix");
				if(value38 == null) {
					tmp3 = 0;
				} else {
					tmp3 = js_Boot.__cast(value38 , Float);
				}
			} else {
				tmp3 = 1;
			}
			transformConstraintData.rotateMix = tmp3;
			var tmp4;
			if(Object.prototype.hasOwnProperty.call(constraintMap1,"translateMix")) {
				var value39 = Reflect.field(constraintMap1,"translateMix");
				if(value39 == null) {
					tmp4 = 0;
				} else {
					tmp4 = js_Boot.__cast(value39 , Float);
				}
			} else {
				tmp4 = 1;
			}
			transformConstraintData.translateMix = tmp4;
			var tmp5;
			if(Object.prototype.hasOwnProperty.call(constraintMap1,"scaleMix")) {
				var value40 = Reflect.field(constraintMap1,"scaleMix");
				if(value40 == null) {
					tmp5 = 0;
				} else {
					tmp5 = js_Boot.__cast(value40 , Float);
				}
			} else {
				tmp5 = 1;
			}
			transformConstraintData.scaleMix = tmp5;
			var tmp6;
			if(Object.prototype.hasOwnProperty.call(constraintMap1,"shearMix")) {
				var value41 = Reflect.field(constraintMap1,"shearMix");
				if(value41 == null) {
					tmp6 = 0;
				} else {
					tmp6 = js_Boot.__cast(value41 , Float);
				}
			} else {
				tmp6 = 1;
			}
			transformConstraintData.shearMix = tmp6;
			skeletonData.transformConstraints.push(transformConstraintData);
		}
		var constraints2 = Reflect.field(root,"path");
		var _g5 = 0;
		var _g14 = Reflect.fields(constraints2);
		while(_g5 < _g14.length) {
			var constraintName2 = _g14[_g5];
			++_g5;
			var constraintMap2 = Reflect.field(constraints2,constraintName2);
			var value42 = Reflect.field(constraintMap2,"name");
			var pathConstraintData = new spinehaxe_PathConstraintData(value42 == null ? null : Std.string(value42));
			var value43 = Reflect.field(constraintMap2,"order");
			pathConstraintData.order = value43 == null ? 0 : js_Boot.__cast(value43 , Float);
			var _g23 = 0;
			var _g33 = Reflect.field(constraintMap2,"bones");
			while(_g23 < _g33.length) {
				var boneName3 = _g33[_g23];
				++_g23;
				var bone2 = skeletonData.findBone(boneName3);
				if(bone2 == null) {
					throw new js__$Boot_HaxeError("Path constraint bone not found: " + boneName3);
				}
				pathConstraintData._bones.push(bone2);
			}
			var value44 = Reflect.field(constraintMap2,"target");
			pathConstraintData.target = skeletonData.findSlot(value44 == null ? null : Std.string(value44));
			if(pathConstraintData.target == null) {
				var value45 = Reflect.field(constraintMap2,"target");
				throw new js__$Boot_HaxeError("Path target slot not found: " + (value45 == null ? null : Std.string(value45)));
			}
			var value46 = Reflect.field(constraintMap2,"positionMode");
			pathConstraintData.positionMode = value46 == null ? "percent" : Std.string(value46);
			var value47 = Reflect.field(constraintMap2,"spacingMode");
			pathConstraintData.spacingMode = value47 == null ? "length" : Std.string(value47);
			var value48 = Reflect.field(constraintMap2,"rotateMode");
			pathConstraintData.rotateMode = value48 == null ? "tangent" : Std.string(value48);
			var value49 = Reflect.field(constraintMap2,"rotation");
			pathConstraintData.offsetRotation = value49 == null ? 0 : js_Boot.__cast(value49 , Float);
			var value50 = Reflect.field(constraintMap2,"position");
			pathConstraintData.position = value50 == null ? 0 : js_Boot.__cast(value50 , Float);
			if(pathConstraintData.positionMode == "fixed") {
				pathConstraintData.position *= this.scale;
			}
			var value51 = Reflect.field(constraintMap2,"spacing");
			pathConstraintData.spacing = value51 == null ? 0 : js_Boot.__cast(value51 , Float);
			if(pathConstraintData.spacingMode == "length" || pathConstraintData.spacingMode == "fixed") {
				pathConstraintData.spacing *= this.scale;
			}
			var tmp7;
			if(Object.prototype.hasOwnProperty.call(constraintMap2,"rotateMix")) {
				var value52 = Reflect.field(constraintMap2,"rotateMix");
				if(value52 == null) {
					tmp7 = 0;
				} else {
					tmp7 = js_Boot.__cast(value52 , Float);
				}
			} else {
				tmp7 = 1;
			}
			pathConstraintData.rotateMix = tmp7;
			var tmp8;
			if(Object.prototype.hasOwnProperty.call(constraintMap2,"translateMix")) {
				var value53 = Reflect.field(constraintMap2,"translateMix");
				if(value53 == null) {
					tmp8 = 0;
				} else {
					tmp8 = js_Boot.__cast(value53 , Float);
				}
			} else {
				tmp8 = 1;
			}
			pathConstraintData.translateMix = tmp8;
			skeletonData.pathConstraints.push(pathConstraintData);
		}
		var skins = Reflect.field(root,"skins");
		var _g6 = 0;
		var _g15 = Reflect.fields(skins);
		while(_g6 < _g15.length) {
			var skinName = _g15[_g6];
			++_g6;
			var skinMap = Reflect.field(skins,skinName);
			var skin = new spinehaxe_Skin(skinName);
			var _g24 = 0;
			var _g34 = Reflect.fields(skinMap);
			while(_g24 < _g34.length) {
				var slotName1 = _g34[_g24];
				++_g24;
				var slotIndex = skeletonData.findSlotIndex(slotName1);
				var slotEntry = Reflect.field(skinMap,slotName1);
				var _g41 = 0;
				var _g51 = Reflect.fields(slotEntry);
				while(_g41 < _g51.length) {
					var attachmentName = _g51[_g41];
					++_g41;
					var attachment = this.readAttachment(Reflect.field(slotEntry,attachmentName),skin,slotIndex,attachmentName);
					if(attachment != null) {
						skin.addAttachment(slotIndex,attachmentName,attachment);
					}
				}
			}
			skeletonData.skins.push(skin);
			if(skin.name == "default") {
				skeletonData.defaultSkin = skin;
			}
		}
		var linkedMeshes = this.linkedMeshes;
		var _g7 = 0;
		while(_g7 < linkedMeshes.length) {
			var linkedMesh = linkedMeshes[_g7];
			++_g7;
			var parentSkin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
			if(parentSkin == null) {
				throw new js__$Boot_HaxeError("Skin not found: " + linkedMesh.skin);
			}
			var parentMesh = parentSkin.getAttachment(linkedMesh.slotIndex,linkedMesh.parent);
			if(parentMesh == null) {
				throw new js__$Boot_HaxeError("Parent mesh not found: " + linkedMesh.parent);
			}
			var _this = linkedMesh.mesh;
			if(parentMesh != null) {
				_this.bones = parentMesh.bones;
				_this.vertices = parentMesh.vertices;
				_this.worldVerticesLength = parentMesh.worldVerticesLength;
				_this.regionUVs = parentMesh.regionUVs;
				_this.triangles = parentMesh.triangles;
				_this.hullLength = parentMesh.hullLength;
				_this.edges = parentMesh.edges;
				_this.width = parentMesh.width;
				_this.height = parentMesh.height;
			}
			_this._parentMesh = parentMesh;
			linkedMesh.mesh.updateUVs();
		}
		while(linkedMeshes.length < 0) linkedMeshes.push(null);
		while(linkedMeshes.length > 0) linkedMeshes.pop();
		var events = Reflect.field(root,"events");
		if(events != null) {
			var _g8 = 0;
			var _g16 = Reflect.fields(events);
			while(_g8 < _g16.length) {
				var eventName = _g16[_g8];
				++_g8;
				var eventMap = Reflect.field(events,eventName);
				var eventData = new spinehaxe_EventData(eventName);
				var value54 = Reflect.field(eventMap,"int");
				eventData.intValue = value54 == null ? 0 : js_Boot.__cast(value54 , Int);
				var value55 = Reflect.field(eventMap,"float");
				eventData.floatValue = value55 == null ? 0 : js_Boot.__cast(value55 , Float);
				var value56 = Reflect.field(eventMap,"string");
				eventData.stringValue = value56 == null ? "" : Std.string(value56);
				skeletonData.events.push(eventData);
			}
		}
		var animations = Reflect.field(root,"animations");
		var _g9 = 0;
		var _g17 = Reflect.fields(animations);
		while(_g9 < _g17.length) {
			var animationName = _g17[_g9];
			++_g9;
			this.readAnimation(Reflect.field(animations,animationName),animationName,skeletonData);
		}
		return skeletonData;
	}
	,readVertices: function(map,attachment,verticesLength) {
		attachment.worldVerticesLength = verticesLength;
		var values = Reflect.field(map,"vertices");
		if(verticesLength == values.length) {
			if(this.scale != 1) {
				var _g1 = 0;
				var _g = values.length;
				while(_g1 < _g) values[_g1++] *= this.scale;
			}
			attachment.vertices = values;
			return;
		}
		var weights = [];
		attachment.bones = [];
		attachment.vertices = weights;
	}
	,readAttachment: function(map,skin,slotIndex,name) {
		var value = Reflect.field(map,"name");
		if(value == null) {
			name = name;
		} else {
			name = Std.string(value);
		}
		var value1 = Reflect.field(map,"type");
		var type = value1 == null ? "region" : Std.string(value1);
		var value2 = Reflect.field(map,"path");
		var path = value2 == null ? name : Std.string(value2);
		var scale = this.scale;
		var color;
		switch(type) {
		case "boundingbox":
			var box = this.attachmentLoader.newBoundingBoxAttachment(skin,name);
			if(box == null) {
				return null;
			}
			var value3 = Reflect.field(map,"vertexCount");
			this.readVertices(map,box,(value3 == null ? 0 : js_Boot.__cast(value3 , Int)) << 1);
			return box;
		case "linkedmesh":case "mesh":
			var mesh = this.attachmentLoader.newMeshAttachment(skin,name,path);
			if(mesh == null) {
				return null;
			}
			mesh.path = path;
			var value4 = Reflect.field(map,"color");
			if(value4 == null) {
				color = null;
			} else {
				color = Std.string(value4);
			}
			if(color != null) {
				mesh.r = spinehaxe_SkeletonJson.toColor(color,0);
				mesh.g = spinehaxe_SkeletonJson.toColor(color,1);
				mesh.b = spinehaxe_SkeletonJson.toColor(color,2);
				mesh.a = spinehaxe_SkeletonJson.toColor(color,3);
			}
			var value5 = Reflect.field(map,"width");
			mesh.width = (value5 == null ? 0 : js_Boot.__cast(value5 , Float)) * scale;
			var value6 = Reflect.field(map,"height");
			mesh.height = (value6 == null ? 0 : js_Boot.__cast(value6 , Float)) * scale;
			var value7 = Reflect.field(map,"parent");
			if((value7 == null ? null : Std.string(value7)) != null) {
				var value8 = Reflect.field(map,"deform");
				mesh.inheritDeform = value8 == null ? true : js_Boot.__cast(value8 , Bool);
				var value9 = Reflect.field(map,"skin");
				var value10 = Reflect.field(map,"parent");
				this.linkedMeshes.push(new spinehaxe_LinkedMesh(mesh,value9 == null ? null : Std.string(value9),slotIndex,value10 == null ? null : Std.string(value10)));
				return mesh;
			}
			var values = Reflect.field(map,"uvs");
			this.readVertices(map,mesh,values.length);
			mesh.triangles = Reflect.field(map,"triangles");
			mesh.regionUVs = values;
			mesh.updateUVs();
			var value11 = Reflect.field(map,"hull");
			mesh.hullLength = (value11 == null ? 0 : js_Boot.__cast(value11 , Int)) * 2;
			if(Object.prototype.hasOwnProperty.call(map,"edges")) {
				mesh.edges = Reflect.field(map,"edges");
			}
			return mesh;
		case "path":
			var path1 = this.attachmentLoader.newPathAttachment(skin,name);
			if(path1 == null) {
				return null;
			}
			var value12 = Reflect.field(map,"closed");
			path1.closed = value12 == null ? false : js_Boot.__cast(value12 , Bool);
			var value13 = Reflect.field(map,"constantSpeed");
			path1.constantSpeed = value13 == null ? true : js_Boot.__cast(value13 , Bool);
			var value14 = Reflect.field(map,"vertexCount");
			this.readVertices(map,path1,(value14 == null ? 0 : js_Boot.__cast(value14 , Int)) << 1);
			var lengths = [];
			var _g = 0;
			var values1 = Reflect.field(map,"lengths");
			while(_g < values1.length) {
				var curve = values1[_g];
				++_g;
				lengths.push(curve * scale);
			}
			path1.lengths = lengths;
			return path1;
		case "region":
			var region = this.attachmentLoader.newRegionAttachment(skin,name,path);
			if(region == null) {
				return null;
			}
			region.path = path;
			var value15 = Reflect.field(map,"x");
			region.x = (value15 == null ? 0 : js_Boot.__cast(value15 , Float)) * scale;
			var value16 = Reflect.field(map,"y");
			region.y = (value16 == null ? 0 : js_Boot.__cast(value16 , Float)) * scale;
			var value17 = Reflect.field(map,"scaleX");
			region.scaleX = value17 == null ? 1 : js_Boot.__cast(value17 , Float);
			var value18 = Reflect.field(map,"scaleY");
			region.scaleY = value18 == null ? 1 : js_Boot.__cast(value18 , Float);
			var value19 = Reflect.field(map,"rotation");
			region.rotation = value19 == null ? 0 : js_Boot.__cast(value19 , Float);
			var value20 = Reflect.field(map,"width");
			region.width = (value20 == null ? 0 : js_Boot.__cast(value20 , Float)) * scale;
			var value21 = Reflect.field(map,"height");
			region.height = (value21 == null ? 0 : js_Boot.__cast(value21 , Float)) * scale;
			var value22 = Reflect.field(map,"color");
			if(value22 == null) {
				color = null;
			} else {
				color = Std.string(value22);
			}
			if(color != null) {
				region.r = spinehaxe_SkeletonJson.toColor(color,0);
				region.g = spinehaxe_SkeletonJson.toColor(color,1);
				region.b = spinehaxe_SkeletonJson.toColor(color,2);
				region.a = spinehaxe_SkeletonJson.toColor(color,3);
			}
			region.updateOffset();
			return region;
		default:
			throw new js__$Boot_HaxeError("Attachment type not implemented: " + type);
		}
	}
	,readAnimation: function(map,name,skeletonData) {
		var scale = this.scale;
		var timelines = [];
		var duration = 0;
		var slotMap;
		var slotIndex = 0;
		var slotName;
		var values;
		var valueMap;
		var frameIndex = 0;
		var timelineName;
		var slots = Reflect.field(map,"slots");
		var _g = 0;
		var _g1 = Reflect.fields(slots);
		while(_g < _g1.length) {
			var slotName1 = _g1[_g];
			++_g;
			slotMap = Reflect.getProperty(slots,slotName1);
			slotIndex = skeletonData.findSlotIndex(slotName1);
			var _g2 = 0;
			var _g3 = Reflect.fields(slotMap);
			while(_g2 < _g3.length) {
				var timelineName1 = _g3[_g2];
				++_g2;
				values = Reflect.field(slotMap,timelineName1);
				if(timelineName1 == "color") {
					var colorTimeline = new spinehaxe_animation_ColorTimeline(values.length);
					colorTimeline.slotIndex = slotIndex;
					frameIndex = 0;
					var _g4 = 0;
					while(_g4 < values.length) {
						var valueMap1 = values[_g4];
						++_g4;
						var value = Reflect.field(valueMap1,"color");
						var color = value == null ? null : Std.string(value);
						var r = spinehaxe_SkeletonJson.toColor(color,0);
						var g = spinehaxe_SkeletonJson.toColor(color,1);
						var b = spinehaxe_SkeletonJson.toColor(color,2);
						var a = spinehaxe_SkeletonJson.toColor(color,3);
						var value1 = Reflect.field(valueMap1,"time");
						colorTimeline.setFrame(frameIndex,value1 == null ? 0 : js_Boot.__cast(value1 , Float),r,g,b,a);
						spinehaxe_SkeletonJson.readCurve(valueMap1,colorTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(colorTimeline);
					duration = Math.max(duration,colorTimeline.frames[(colorTimeline.get_frameCount() - 1 | 0) * 5]);
				} else if(timelineName1 == "attachment") {
					var attachmentTimeline = new spinehaxe_animation_AttachmentTimeline(values.length);
					attachmentTimeline.slotIndex = slotIndex;
					frameIndex = 0;
					var _g41 = 0;
					while(_g41 < values.length) {
						var valueMap2 = values[_g41];
						++_g41;
						var value2 = Reflect.field(valueMap2,"time");
						var value3 = Reflect.field(valueMap2,"name");
						attachmentTimeline.setFrame(frameIndex++,value2 == null ? 0 : js_Boot.__cast(value2 , Float),value3 == null ? null : Std.string(value3));
					}
					timelines.push(attachmentTimeline);
					duration = Math.max(duration,attachmentTimeline.frames[attachmentTimeline.get_frameCount() - 1]);
				} else {
					throw new js__$Boot_HaxeError("Invalid timeline type for a slot: " + timelineName1 + " (" + slotName1 + ")");
				}
			}
		}
		var bones = Reflect.field(map,"bones");
		var _g5 = 0;
		var _g11 = Reflect.fields(bones);
		while(_g5 < _g11.length) {
			var boneName = _g11[_g5];
			++_g5;
			var boneIndex = skeletonData.findBoneIndex(boneName);
			if(boneIndex == -1) {
				throw new js__$Boot_HaxeError("Bone not found: " + boneName);
			}
			var boneMap = Reflect.field(bones,boneName);
			var _g21 = 0;
			var _g31 = Reflect.fields(boneMap);
			while(_g21 < _g31.length) {
				var timelineName2 = _g31[_g21];
				++_g21;
				values = Reflect.field(boneMap,timelineName2);
				if(timelineName2 == "rotate") {
					var rotateTimeline = new spinehaxe_animation_RotateTimeline(values.length);
					rotateTimeline.boneIndex = boneIndex;
					frameIndex = 0;
					var _g42 = 0;
					while(_g42 < values.length) {
						var valueMap3 = values[_g42];
						++_g42;
						var value4 = Reflect.field(valueMap3,"time");
						var value5 = Reflect.field(valueMap3,"angle");
						rotateTimeline.setFrame(frameIndex,value4 == null ? 0 : js_Boot.__cast(value4 , Float),value5 == null ? 0 : js_Boot.__cast(value5 , Float));
						spinehaxe_SkeletonJson.readCurve(valueMap3,rotateTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(rotateTimeline);
					duration = Math.max(duration,rotateTimeline.frames[(rotateTimeline.get_frameCount() - 1 | 0) * 2]);
				} else if(timelineName2 == "translate" || timelineName2 == "scale" || timelineName2 == "shear") {
					var translateTimeline;
					var timelineScale = 1;
					if(timelineName2 == "scale") {
						translateTimeline = new spinehaxe_animation_ScaleTimeline(values.length);
					} else if(timelineName2 == "shear") {
						translateTimeline = new spinehaxe_animation_ShearTimeline(values.length);
					} else {
						translateTimeline = new spinehaxe_animation_TranslateTimeline(values.length);
						timelineScale = scale;
					}
					translateTimeline.boneIndex = boneIndex;
					frameIndex = 0;
					var _g43 = 0;
					while(_g43 < values.length) {
						var valueMap4 = values[_g43];
						++_g43;
						var value6 = Reflect.field(valueMap4,"x");
						var value7 = Reflect.field(valueMap4,"y");
						var value8 = Reflect.field(valueMap4,"time");
						translateTimeline.setFrame(frameIndex,value8 == null ? 0 : js_Boot.__cast(value8 , Float),(value6 == null ? 0 : js_Boot.__cast(value6 , Float)) * timelineScale,(value7 == null ? 0 : js_Boot.__cast(value7 , Float)) * timelineScale);
						spinehaxe_SkeletonJson.readCurve(valueMap4,translateTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(translateTimeline);
					duration = Math.max(duration,translateTimeline.frames[(translateTimeline.get_frameCount() - 1 | 0) * 3]);
				} else {
					throw new js__$Boot_HaxeError("Invalid timeline type for a bone: " + timelineName2 + " (" + boneName + ")");
				}
			}
		}
		var ikMap = Reflect.field(map,"ik");
		var _g6 = 0;
		var _g12 = Reflect.fields(ikMap);
		while(_g6 < _g12.length) {
			var ikConstraintName = _g12[_g6];
			++_g6;
			var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);
			values = Reflect.field(ikMap,ikConstraintName);
			var ikTimeline = new spinehaxe_animation_IkConstraintTimeline(values.length);
			ikTimeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);
			frameIndex = 0;
			var _g22 = 0;
			while(_g22 < values.length) {
				var valueMap5 = values[_g22];
				++_g22;
				var value9 = Reflect.field(valueMap5,"mix");
				var bendDirection;
				var value10 = Reflect.field(valueMap5,"bendPositive");
				if(value10 == null ? true : js_Boot.__cast(value10 , Bool)) {
					bendDirection = 1;
				} else {
					bendDirection = -1;
				}
				var value11 = Reflect.field(valueMap5,"time");
				ikTimeline.setFrame(frameIndex,value11 == null ? 0 : js_Boot.__cast(value11 , Float),value9 == null ? 1 : js_Boot.__cast(value9 , Float),bendDirection);
				spinehaxe_SkeletonJson.readCurve(valueMap5,ikTimeline,frameIndex);
				++frameIndex;
			}
			timelines.push(ikTimeline);
			duration = Math.max(duration,ikTimeline.frames[(ikTimeline.get_frameCount() - 1 | 0) * 3]);
		}
		var transformMap = Reflect.field(map,"transform");
		var _g7 = 0;
		var _g13 = Reflect.fields(transformMap);
		while(_g7 < _g13.length) {
			var transformName = _g13[_g7];
			++_g7;
			var transformConstraint = skeletonData.findTransformConstraint(transformName);
			values = Reflect.field(transformMap,transformName);
			var transformTimeline = new spinehaxe_animation_TransformConstraintTimeline(values.length);
			transformTimeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(transformConstraint);
			frameIndex = 0;
			var _g23 = 0;
			while(_g23 < values.length) {
				var valueMap6 = values[_g23];
				++_g23;
				var value12 = Reflect.field(valueMap6,"rotateMix");
				var value13 = Reflect.field(valueMap6,"translateMix");
				var value14 = Reflect.field(valueMap6,"scaleMix");
				var value15 = Reflect.field(valueMap6,"shearMix");
				var value16 = Reflect.field(valueMap6,"time");
				transformTimeline.setFrame(frameIndex,value16 == null ? 0 : js_Boot.__cast(value16 , Float),value12 == null ? 1 : js_Boot.__cast(value12 , Float),value13 == null ? 1 : js_Boot.__cast(value13 , Float),value14 == null ? 1 : js_Boot.__cast(value14 , Float),value15 == null ? 1 : js_Boot.__cast(value15 , Float));
				spinehaxe_SkeletonJson.readCurve(valueMap6,transformTimeline,frameIndex);
				++frameIndex;
			}
			timelines.push(transformTimeline);
			duration = Math.max(duration,transformTimeline.frames[(transformTimeline.get_frameCount() - 1 | 0) * 5]);
		}
		var paths = Reflect.field(map,"paths");
		var _g8 = 0;
		var _g14 = Reflect.fields(paths);
		while(_g8 < _g14.length) {
			var pathName = _g14[_g8];
			++_g8;
			var index = skeletonData.findPathConstraintIndex(pathName);
			if(index == -1) {
				throw new js__$Boot_HaxeError("Path constraint not found: " + pathName);
			}
			var data = skeletonData.pathConstraints[index];
			var pathMap = Reflect.field(paths,pathName);
			var _g24 = 0;
			var _g32 = Reflect.fields(pathMap);
			while(_g24 < _g32.length) {
				var timelineName3 = _g32[_g24];
				++_g24;
				values = Reflect.field(pathMap,timelineName3);
				if(timelineName3 == "position" || timelineName3 == "spacing") {
					var pathTimeline;
					var timelineScale1 = 1;
					if(timelineName3 == "spacing") {
						pathTimeline = new spinehaxe_animation_PathConstraintSpacingTimeline(values.length);
						if(data.spacingMode == "length" || data.spacingMode == "fixed") {
							timelineScale1 = scale;
						}
					} else {
						pathTimeline = new spinehaxe_animation_PathConstraintPositionTimeline(values.length);
						if(data.positionMode == "fixed") {
							timelineScale1 = scale;
						}
					}
					pathTimeline.pathConstraintIndex = index;
					frameIndex = 0;
					var _g44 = 0;
					while(_g44 < values.length) {
						var valueMap7 = values[_g44];
						++_g44;
						var value17 = Reflect.field(valueMap7,timelineName3);
						var value18 = Reflect.field(valueMap7,"time");
						pathTimeline.setFrame(frameIndex,value18 == null ? 0 : js_Boot.__cast(value18 , Float),(value17 == null ? 0 : js_Boot.__cast(value17 , Float)) * timelineScale1);
						spinehaxe_SkeletonJson.readCurve(valueMap7,pathTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(pathTimeline);
					duration = Math.max(duration,pathTimeline.frames[(pathTimeline.get_frameCount() - 1 | 0) * 2]);
				} else if(timelineName3 == "mix") {
					var pathMixTimeline = new spinehaxe_animation_PathConstraintMixTimeline(values.length);
					pathMixTimeline.pathConstraintIndex = index;
					frameIndex = 0;
					var _g45 = 0;
					while(_g45 < values.length) {
						var valueMap8 = values[_g45];
						++_g45;
						var rotateMix;
						if(Object.prototype.hasOwnProperty.call(valueMap8,"rotateMix")) {
							var value19 = Reflect.field(valueMap8,"rotateMix");
							if(value19 == null) {
								rotateMix = 0;
							} else {
								rotateMix = js_Boot.__cast(value19 , Float);
							}
						} else {
							rotateMix = 1;
						}
						var translateMix;
						if(Object.prototype.hasOwnProperty.call(valueMap8,"translateMix")) {
							var value20 = Reflect.field(valueMap8,"translateMix");
							if(value20 == null) {
								translateMix = 0;
							} else {
								translateMix = js_Boot.__cast(value20 , Float);
							}
						} else {
							translateMix = 1;
						}
						var value21 = Reflect.field(valueMap8,"time");
						pathMixTimeline.setFrame(frameIndex,value21 == null ? 0 : js_Boot.__cast(value21 , Float),rotateMix,translateMix);
						spinehaxe_SkeletonJson.readCurve(valueMap8,pathMixTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(pathMixTimeline);
					duration = Math.max(duration,pathMixTimeline.frames[(pathMixTimeline.get_frameCount() - 1 | 0) * 3]);
				}
			}
		}
		var deformMap = Reflect.field(map,"deform");
		var _g9 = 0;
		var _g15 = Reflect.fields(deformMap);
		while(_g9 < _g15.length) {
			var skinName = _g15[_g9];
			++_g9;
			var skin = skeletonData.findSkin(skinName);
			slotMap = Reflect.field(deformMap,skinName);
			var _g25 = 0;
			var _g33 = Reflect.fields(slotMap);
			while(_g25 < _g33.length) {
				var slotName2 = _g33[_g25];
				++_g25;
				slotIndex = skeletonData.findSlotIndex(slotName2);
				var timelineMap = Reflect.field(slotMap,slotName2);
				var _g46 = 0;
				var _g51 = Reflect.fields(timelineMap);
				while(_g46 < _g51.length) {
					var timelineName4 = _g51[_g46];
					++_g46;
					values = Reflect.field(timelineMap,timelineName4);
					var attachment = skin.getAttachment(slotIndex,timelineName4);
					if(attachment == null) {
						throw new js__$Boot_HaxeError("Deform attachment not found: " + timelineName4);
					}
					var weighted = attachment.bones != null;
					var vertices = attachment.vertices;
					var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
					var deformTimeline = new spinehaxe_animation_DeformTimeline(values.length);
					deformTimeline.slotIndex = slotIndex;
					deformTimeline.attachment = attachment;
					frameIndex = 0;
					var _g61 = 0;
					while(_g61 < values.length) {
						var valueMap9 = values[_g61];
						++_g61;
						var deform;
						if(Reflect.field(valueMap9,"vertices") == null) {
							if(weighted) {
								deform = [];
							} else {
								deform = vertices;
							}
						} else {
							deform = [];
							var value22 = Reflect.field(valueMap9,"offset");
							var start = value22 == null ? 0 : js_Boot.__cast(value22 , Int);
							var temp = Reflect.field(valueMap9,"vertices");
							var _g81 = 0;
							var _g71 = start;
							while(_g81 < _g71) deform[_g81++] = 0;
							var _g82 = 0;
							var _g72 = temp.length;
							while(_g82 < _g72) {
								var i = _g82++;
								deform[start + i] = temp[i];
							}
							var _g83 = deform.length;
							var _g73 = deformLength;
							while(_g83 < _g73) deform[_g83++] = 0;
							if(scale != 1) {
								var n;
								var _g84 = start;
								var _g74 = start + temp.length;
								while(_g84 < _g74) deform[_g84++] *= scale;
							}
							if(!weighted) {
								var _g85 = 0;
								var _g75 = deformLength;
								while(_g85 < _g75) {
									var i1 = _g85++;
									deform[i1] += vertices[i1];
								}
							}
						}
						var value23 = Reflect.field(valueMap9,"time");
						deformTimeline.setFrame(frameIndex,value23 == null ? 0 : js_Boot.__cast(value23 , Float),deform);
						spinehaxe_SkeletonJson.readCurve(valueMap9,deformTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = deformTimeline;
					duration = Math.max(duration,deformTimeline.frames[deformTimeline.get_frameCount() - 1 | 0]);
				}
			}
		}
		var drawOrderValues = Reflect.field(map,"drawOrder");
		if(drawOrderValues == null) {
			drawOrderValues = Reflect.field(map,"draworder");
		}
		if(drawOrderValues != null) {
			var drawOrderTimeline = new spinehaxe_animation_DrawOrderTimeline(drawOrderValues.length);
			var slotCount = skeletonData.slots.length;
			frameIndex = 0;
			var _g10 = 0;
			while(_g10 < drawOrderValues.length) {
				var drawOrderMap = drawOrderValues[_g10];
				++_g10;
				var drawOrder = null;
				if(Object.prototype.hasOwnProperty.call(drawOrderMap,"offsets")) {
					drawOrder = [];
					var _g26 = 0;
					var _g16 = slotCount;
					while(_g26 < _g16) drawOrder[_g26++] = -1;
					var offsets = Reflect.field(drawOrderMap,"offsets");
					var length = slotCount - offsets.length;
					var unchanged = new Array(length);
					var originalIndex = 0;
					var unchangedIndex = 0;
					var _g17 = 0;
					while(_g17 < offsets.length) {
						var offsetMap = offsets[_g17];
						++_g17;
						var value24 = Reflect.field(offsetMap,"slot");
						slotIndex = skeletonData.findSlotIndex(value24 == null ? null : Std.string(value24));
						if(slotIndex == -1) {
							var value25 = Reflect.field(offsetMap,"slot");
							throw new js__$Boot_HaxeError("Slot not found: " + (value25 == null ? null : Std.string(value25)));
						}
						while(originalIndex != slotIndex) unchanged[unchangedIndex++] = originalIndex++;
						var value26 = Reflect.field(offsetMap,"offset");
						drawOrder[originalIndex + (value26 == null ? 0 : js_Boot.__cast(value26 , Int))] = originalIndex++;
					}
					while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
					var i2 = slotCount - 1;
					while(i2 >= 0) {
						if(drawOrder[i2] == -1) {
							drawOrder[i2] = unchanged[--unchangedIndex];
						}
						--i2;
					}
				}
				var value27 = Reflect.field(drawOrderMap,"time");
				drawOrderTimeline.setFrame(frameIndex++,value27 == null ? 0 : js_Boot.__cast(value27 , Float),drawOrder);
			}
			timelines[timelines.length] = drawOrderTimeline;
			duration = Math.max(duration,drawOrderTimeline.frames[drawOrderTimeline.frames.length - 1]);
		}
		var eventsMap = Reflect.field(map,"events");
		if(eventsMap != null) {
			var eventTimeline = new spinehaxe_animation_EventTimeline(eventsMap.length);
			frameIndex = 0;
			var _g18 = 0;
			while(_g18 < eventsMap.length) {
				var eventMap = eventsMap[_g18];
				++_g18;
				var value28 = Reflect.field(eventMap,"name");
				var eventData = skeletonData.findEvent(value28 == null ? null : Std.string(value28));
				if(eventData == null) {
					var value29 = Reflect.field(eventMap,"name");
					throw new js__$Boot_HaxeError("Event not found: " + (value29 == null ? null : Std.string(value29)));
				}
				var value30 = Reflect.field(eventMap,"time");
				var event = new spinehaxe_Event(value30 == null ? 0 : js_Boot.__cast(value30 , Float),eventData);
				var tmp;
				if(Object.prototype.hasOwnProperty.call(eventMap,"int")) {
					var value31 = Reflect.field(eventMap,"int");
					if(value31 == null) {
						tmp = 0;
					} else {
						tmp = js_Boot.__cast(value31 , Int);
					}
				} else {
					tmp = eventData.intValue;
				}
				event.intValue = tmp;
				var tmp1;
				if(Object.prototype.hasOwnProperty.call(eventMap,"float")) {
					var value32 = Reflect.field(eventMap,"float");
					if(value32 == null) {
						tmp1 = 0;
					} else {
						tmp1 = js_Boot.__cast(value32 , Float);
					}
				} else {
					tmp1 = eventData.floatValue;
				}
				event.floatValue = tmp1;
				var tmp2;
				if(Object.prototype.hasOwnProperty.call(eventMap,"string")) {
					var value33 = Reflect.field(eventMap,"string");
					if(value33 == null) {
						tmp2 = null;
					} else {
						tmp2 = Std.string(value33);
					}
				} else {
					tmp2 = eventData.stringValue;
				}
				event.stringValue = tmp2;
				eventTimeline.setFrame(frameIndex++,event);
			}
			timelines[timelines.length] = eventTimeline;
			duration = Math.max(duration,eventTimeline.frames[eventTimeline.frames.length - 1]);
		}
		skeletonData.animations[skeletonData.animations.length] = new spinehaxe_animation_Animation(name,timelines,duration);
	}
	,__class__: spinehaxe_SkeletonJson
};
var spinehaxe_Skin = function(name) {
	this.attachments = [];
	if(name == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spinehaxe.Skin"] = spinehaxe_Skin;
spinehaxe_Skin.__name__ = ["spinehaxe","Skin"];
spinehaxe_Skin.prototype = {
	name: null
	,attachments: null
	,addAttachment: function(slotIndex,name,attachment) {
		if(attachment == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("attachment cannot be null."));
		}
		if(this.attachments[slotIndex] == null) {
			this.attachments[slotIndex] = new haxe_ds_StringMap();
		}
		var _this = this.attachments[slotIndex];
		if(__map_reserved[name] != null) {
			_this.setReserved(name,attachment);
		} else {
			_this.h[name] = attachment;
		}
	}
	,getAttachment: function(slotIndex,name) {
		if(this.attachments[slotIndex] == null) {
			return null;
		}
		var _this = this.attachments[slotIndex];
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,attachAll: function(skeleton,oldSkin) {
		var slotIndex = 0;
		var _g = 0;
		var _g1 = skeleton.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			var slotAttachment = slot._attachment;
			if(slotAttachment != null && slotIndex < oldSkin.attachments.length) {
				var dictionary = oldSkin.attachments[slotIndex];
				if(dictionary != null) {
					var name = dictionary.keys();
					while(name.hasNext()) {
						var name1 = name.next();
						if(slotAttachment == (__map_reserved[name1] != null ? dictionary.getReserved(name1) : dictionary.h[name1])) {
							var attachment = this.getAttachment(slotIndex,name1);
							if(attachment != null) {
								if(slot._attachment != attachment) {
									slot._attachment = attachment;
									slot._attachmentTime = slot._bone._skeleton.time;
									var array = slot.attachmentVertices;
									while(array.length < 0) array.push(null);
									while(array.length > 0) array.pop();
								}
							}
							break;
						}
					}
				}
			}
			++slotIndex;
		}
	}
	,__class__: spinehaxe_Skin
};
var spinehaxe_Slot = function(data,bone) {
	this.attachmentVertices = [];
	this._attachmentTime = 0;
	this.a = 0;
	this.b = 0;
	this.g = 0;
	this.r = 0;
	if(data == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("data cannot be null."));
	}
	if(bone == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("bone cannot be null."));
	}
	this._data = data;
	this._bone = bone;
	this.setToSetupPose();
};
$hxClasses["spinehaxe.Slot"] = spinehaxe_Slot;
spinehaxe_Slot.__name__ = ["spinehaxe","Slot"];
spinehaxe_Slot.prototype = {
	_data: null
	,_bone: null
	,_attachment: null
	,r: null
	,g: null
	,b: null
	,a: null
	,_attachmentTime: null
	,attachmentVertices: null
	,setToSetupPose: function() {
		this.r = this._data.r;
		this.g = this._data.g;
		this.b = this._data.b;
		this.a = this._data.a;
		if(this._data.attachmentName == null) {
			this._attachment = null;
		} else {
			this._attachment = null;
			var attachment = this._bone._skeleton.getAttachmentForSlotIndex(this._data._index,this._data.attachmentName);
			if(this._attachment != attachment) {
				this._attachment = attachment;
				this._attachmentTime = this._bone._skeleton.time;
				var array = this.attachmentVertices;
				while(array.length < 0) array.push(null);
				while(array.length > 0) array.pop();
			}
		}
	}
	,__class__: spinehaxe_Slot
};
var spinehaxe_SlotData = function(index,name,boneData) {
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	if(index < 0) {
		throw new js__$Boot_HaxeError("index must be >= 0.");
	}
	if(name == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("name cannot be null."));
	}
	if(boneData == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("boneData cannot be null."));
	}
	this._index = index;
	this._name = name;
	this._boneData = boneData;
};
$hxClasses["spinehaxe.SlotData"] = spinehaxe_SlotData;
spinehaxe_SlotData.__name__ = ["spinehaxe","SlotData"];
spinehaxe_SlotData.prototype = {
	_index: null
	,_name: null
	,_boneData: null
	,r: null
	,g: null
	,b: null
	,a: null
	,attachmentName: null
	,blendMode: null
	,__class__: spinehaxe_SlotData
};
var spinehaxe_TransformConstraint = function(data,skeleton) {
	this._temp = new Array(2);
	if(data == null) {
		throw new js__$Boot_HaxeError("data cannot be null.");
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError("skeleton cannot be null.");
	}
	this._data = data;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
	this.scaleMix = data.scaleMix;
	this.shearMix = data.shearMix;
	this._bones = [];
	var _g = 0;
	var _g1 = data._bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this._bones.push(skeleton.findBone(boneData._name));
	}
	this.target = skeleton.findBone(data.target._name);
};
$hxClasses["spinehaxe.TransformConstraint"] = spinehaxe_TransformConstraint;
spinehaxe_TransformConstraint.__name__ = ["spinehaxe","TransformConstraint"];
spinehaxe_TransformConstraint.__interfaces__ = [spinehaxe_Constraint];
spinehaxe_TransformConstraint.prototype = {
	_data: null
	,_bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,_temp: null
	,update: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		var ta = target._a;
		var tb = target._b;
		var tc = target._c;
		var td = target._d;
		var degRadReflect = ta * td - tb * tc > 0 ? spinehaxe_MathUtils.degRad : -spinehaxe_MathUtils.degRad;
		var offsetRotation = this._data.offsetRotation * degRadReflect;
		var offsetShearY = this._data.offsetShearY * degRadReflect;
		var bones = this._bones;
		var _g1 = 0;
		var _g = bones.length;
		while(_g1 < _g) {
			var bone = bones[_g1++];
			var modified = false;
			if(rotateMix != 0) {
				var a = bone._a;
				var b = bone._b;
				var c = bone._c;
				var d = bone._d;
				var r = Math.atan2(tc,ta) - Math.atan2(c,a) + offsetRotation;
				if(r > Math.PI) {
					r -= Math.PI * 2;
				} else if(r < -Math.PI) {
					r += Math.PI * 2;
				}
				r *= rotateMix;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
				bone._a = cos * a - sin * c;
				bone._b = cos * b - sin * d;
				bone._c = sin * a + cos * c;
				bone._d = sin * b + cos * d;
				modified = true;
			}
			if(translateMix != 0) {
				this._temp[0] = this._data.offsetX;
				this._temp[1] = this._data.offsetY;
				target.localToWorld(this._temp);
				bone._worldX += (this._temp[0] - bone._worldX) * translateMix;
				bone._worldY += (this._temp[1] - bone._worldY) * translateMix;
				modified = true;
			}
			if(scaleMix > 0) {
				var s = Math.sqrt(bone._a * bone._a + bone._c * bone._c);
				var ts = Math.sqrt(ta * ta + tc * tc);
				if(s > 0.00001) {
					s = (s + (ts - s + this._data.offsetScaleX) * scaleMix) / s;
				}
				bone._a *= s;
				bone._c *= s;
				s = Math.sqrt(bone._b * bone._b + bone._d * bone._d);
				ts = Math.sqrt(tb * tb + td * td);
				if(s > 0.00001) {
					s = (s + (ts - s + this._data.offsetScaleY) * scaleMix) / s;
				}
				bone._b *= s;
				bone._d *= s;
				modified = true;
			}
			if(shearMix > 0) {
				var b1 = bone._b;
				var d1 = bone._d;
				var by = Math.atan2(d1,b1);
				var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta) - (by - Math.atan2(bone._c,bone._a));
				if(r1 > Math.PI) {
					r1 -= Math.PI * 2;
				} else if(r1 < -Math.PI) {
					r1 += Math.PI * 2;
				}
				r1 = by + (r1 + offsetShearY) * shearMix;
				var s1 = Math.sqrt(b1 * b1 + d1 * d1);
				bone._b = Math.cos(r1) * s1;
				bone._d = Math.sin(r1) * s1;
				modified = true;
			}
			if(modified) {
				bone.appliedValid = false;
			}
		}
	}
	,__class__: spinehaxe_TransformConstraint
};
var spinehaxe_TransformConstraintData = function(name) {
	this._bones = [];
	if(name == null) {
		throw new js__$Boot_HaxeError("name cannot be null.");
	}
	this._name = name;
};
$hxClasses["spinehaxe.TransformConstraintData"] = spinehaxe_TransformConstraintData;
spinehaxe_TransformConstraintData.__name__ = ["spinehaxe","TransformConstraintData"];
spinehaxe_TransformConstraintData.prototype = {
	_name: null
	,order: null
	,_bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,offsetRotation: null
	,offsetX: null
	,offsetY: null
	,offsetScaleX: null
	,offsetScaleY: null
	,offsetShearY: null
	,__class__: spinehaxe_TransformConstraintData
};
var spinehaxe_animation_Animation = function(name,timelines,duration) {
	this.duration = 0;
	if(name == null) {
		throw new js__$Boot_HaxeError("name cannot be null.");
	}
	if(timelines == null) {
		throw new js__$Boot_HaxeError("timelines cannot be null.");
	}
	this.name = name;
	this.timelines = timelines;
	this.duration = duration;
};
$hxClasses["spinehaxe.animation.Animation"] = spinehaxe_animation_Animation;
spinehaxe_animation_Animation.__name__ = ["spinehaxe","animation","Animation"];
spinehaxe_animation_Animation.binarySearch = function(values,target,step) {
	var low = 0;
	var high = values.length / step - 2 | 0;
	if(high == 0) {
		return step;
	}
	var current = high >>> 1;
	while(true) {
		if(values[(current + 1) * step] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return (low + 1) * step;
		}
		current = low + high >>> 1;
	}
};
spinehaxe_animation_Animation.binarySearch1 = function(values,target) {
	var low = 0;
	var high = values.length - 2;
	if(high == 0) {
		return 1;
	}
	var current = high >>> 1;
	while(true) {
		if(values[current + 1] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return low + 1;
		}
		current = low + high >>> 1;
	}
};
spinehaxe_animation_Animation.prototype = {
	timelines: null
	,name: null
	,duration: null
	,__class__: spinehaxe_animation_Animation
};
var spinehaxe_animation_AnimationState = function(data) {
	this.timeScale = 1;
	this.propertyIDs = new haxe_ds_StringMap();
	this.onEvent = new spinehaxe_animation_EventListeners();
	this.onComplete = new spinehaxe_animation_Listeners();
	this.onDispose = new spinehaxe_animation_Listeners();
	this.onEnd = new spinehaxe_animation_Listeners();
	this.onInterrupt = new spinehaxe_animation_Listeners();
	this.onStart = new spinehaxe_animation_Listeners();
	this.events = [];
	this.tracks = [];
	if(data == null) {
		throw new js__$Boot_HaxeError("data can not be null");
	}
	this.data = data;
	this.queue = new spinehaxe_animation_EventQueue(this);
	this.trackEntryPool = new spinehaxe_Pool_$spinehaxe_$animation_$TrackEntry(function() {
		return new spinehaxe_animation_TrackEntry();
	});
};
$hxClasses["spinehaxe.animation.AnimationState"] = spinehaxe_animation_AnimationState;
spinehaxe_animation_AnimationState.__name__ = ["spinehaxe","animation","AnimationState"];
spinehaxe_animation_AnimationState.prototype = {
	data: null
	,tracks: null
	,events: null
	,onStart: null
	,onInterrupt: null
	,onEnd: null
	,onDispose: null
	,onComplete: null
	,onEvent: null
	,queue: null
	,propertyIDs: null
	,animationsChanged: null
	,timeScale: null
	,trackEntryPool: null
	,update: function(delta) {
		delta *= this.timeScale;
		var _g1 = 0;
		var _g = this.tracks.length;
		while(_g1 < _g) {
			var i = _g1++;
			var current = this.tracks[i];
			if(current == null) {
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime = nextTime + delta * next.timeScale;
					current.trackTime += currentDelta;
					this.setCurrent(i,next);
					while(next.mixingFrom != null) {
						next.mixTime += currentDelta;
						next = next.mixingFrom;
					}
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				this.tracks[i] = null;
				this.queue.end(current);
				this.disposeNext(current);
				continue;
			}
			this.updateMixingFrom(current,delta);
			current.trackTime += currentDelta;
		}
		this.queue.drain();
	}
	,updateMixingFrom: function(entry,delta) {
		var _from = entry.mixingFrom;
		if(_from == null) {
			return;
		}
		this.updateMixingFrom(_from,delta);
		if(entry.mixTime >= entry.mixDuration && _from.mixingFrom == null && entry.mixTime > 0) {
			entry.mixingFrom = null;
			this.queue.end(_from);
			return;
		}
		_from.animationLast = _from.nextAnimationLast;
		_from.trackLast = _from.nextTrackLast;
		_from.trackTime += delta * _from.timeScale;
		entry.mixTime += delta * entry.timeScale;
	}
	,apply: function(skeleton) {
		if(skeleton == null) {
			throw new js__$Boot_HaxeError("skeleton cannot be null.");
		}
		if(this.animationsChanged) {
			this._animationsChanged();
		}
		var events = this.events;
		var _g1 = 0;
		var _g = this.tracks.length;
		while(_g1 < _g) {
			var current = this.tracks[_g1++];
			if(current == null || current.delay > 0) {
				continue;
			}
			var mix = current.alpha;
			if(current.mixingFrom != null) {
				mix *= this.applyMixingFrom(current,skeleton);
			} else if(current.trackTime >= current.trackEnd) {
				mix = 0;
			}
			var animationLast = current.animationLast;
			var animationTime = current.getAnimationTime();
			var timelineCount = current.animation.timelines.length;
			var timelines = current.animation.timelines;
			if(mix == 1) {
				var _g3 = 0;
				while(_g3 < timelineCount) timelines[_g3++].apply(skeleton,animationLast,animationTime,events,1,true,false);
			} else {
				var firstFrame = current.timelinesRotation.length == 0;
				if(firstFrame) {
					var array = current.timelinesRotation;
					var length = timelineCount << 1;
					while(array.length < length) array.push(0);
					while(array.length > length) array.pop();
				}
				var timelinesRotation = current.timelinesRotation;
				var timelinesFirst = current.timelinesFirst;
				var _g31 = 0;
				while(_g31 < timelineCount) {
					var ii = _g31++;
					var timeline = timelines[ii];
					if(js_Boot.__instanceof(timeline,spinehaxe_animation_RotateTimeline)) {
						this.applyRotateTimeline(timeline,skeleton,animationTime,mix,timelinesFirst[ii],timelinesRotation,ii << 1,firstFrame);
					} else {
						timeline.apply(skeleton,animationLast,animationTime,events,mix,timelinesFirst[ii],false);
					}
				}
			}
			this.queueEvents(current,animationTime);
			current.nextAnimationLast = animationTime;
			current.nextTrackLast = current.trackTime;
		}
		this.queue.drain();
	}
	,applyMixingFrom: function(entry,skeleton) {
		var _from = entry.mixingFrom;
		if(_from.mixingFrom != null) {
			this.applyMixingFrom(_from,skeleton);
		}
		var mix = 0;
		if(entry.mixDuration == 0) {
			mix = 1;
		} else {
			mix = entry.mixTime / entry.mixDuration;
			if(mix > 1) {
				mix = 1;
			}
		}
		var events = mix < _from.eventThreshold ? this.events : null;
		var attachments = mix < _from.attachmentThreshold;
		var drawOrder = mix < _from.drawOrderThreshold;
		var animationLast = _from.animationLast;
		var animationTime = _from.getAnimationTime();
		var timelineCount = _from.animation.timelines.length;
		var timelines = _from.animation.timelines;
		var timelinesFirst = _from.timelinesFirst;
		var alpha = _from.alpha * entry.mixAlpha * (1 - mix);
		var firstFrame = _from.timelinesRotation.length == 0;
		if(firstFrame) {
			var array = _from.timelinesRotation;
			var length = timelineCount << 1;
			while(array.length < length) array.push(0);
			while(array.length > length) array.pop();
		}
		var timelinesRotation = _from.timelinesRotation;
		var _g1 = 0;
		while(_g1 < timelineCount) {
			var i = _g1++;
			var timeline = timelines[i];
			var setupPose = timelinesFirst[i];
			if(js_Boot.__instanceof(timeline,spinehaxe_animation_RotateTimeline)) {
				this.applyRotateTimeline(timeline,skeleton,animationTime,alpha,setupPose,timelinesRotation,i << 1,firstFrame);
			} else {
				if(!setupPose) {
					if(!attachments && js_Boot.__instanceof(timeline,spinehaxe_animation_AttachmentTimeline)) {
						continue;
					}
					if(!drawOrder && js_Boot.__instanceof(timeline,spinehaxe_animation_DrawOrderTimeline)) {
						continue;
					}
				}
				timeline.apply(skeleton,animationLast,animationTime,events,alpha,setupPose,true);
			}
		}
		this.queueEvents(_from,animationTime);
		_from.nextAnimationLast = animationTime;
		_from.nextTrackLast = _from.trackTime;
		return mix;
	}
	,applyRotateTimeline: function(timeline,skeleton,time,alpha,setupPose,timelinesRotation,i,firstFrame) {
		if(alpha == 1) {
			timeline.apply(skeleton,0,time,null,1,setupPose,false);
			return;
		}
		var rotateTimeline = timeline;
		var frames = rotateTimeline.frames;
		var bone = skeleton.bones[rotateTimeline.boneIndex];
		if(time < frames[0]) {
			if(setupPose) {
				bone.rotation = bone._data.rotation;
			}
			return;
		}
		var r2;
		if(time >= frames[frames.length - 2]) {
			r2 = bone._data.rotation + frames[frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(frames,time,2);
			var prevRotation = frames[frame + -1];
			var frameTime = frames[frame];
			r2 = frames[frame + 1] - prevRotation;
			r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
			r2 = prevRotation + r2 * rotateTimeline.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (frames[frame + -2] - frameTime)) + bone._data.rotation;
			r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
		}
		var r1 = setupPose ? bone._data.rotation : bone.rotation;
		var total = 0;
		var diff = r2 - r1;
		if(diff == 0) {
			if(firstFrame) {
				timelinesRotation[i] = 0;
				total = 0;
			} else {
				total = timelinesRotation[i];
			}
		} else {
			diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
			var lastTotal;
			var lastDiff;
			if(firstFrame) {
				lastTotal = 0;
				lastDiff = diff;
			} else {
				lastTotal = timelinesRotation[i];
				lastDiff = timelinesRotation[i + 1];
			}
			var current = diff > 0;
			var dir = lastTotal >= 0;
			if((lastDiff > 0 ? 1 : lastDiff < 0 ? -1 : 0) != (diff > 0 ? 1 : diff < 0 ? -1 : 0) && Math.abs(lastDiff) <= 90) {
				if(Math.abs(lastTotal) > 180) {
					lastTotal += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
				}
				dir = current;
			}
			total = diff + lastTotal - lastTotal % 360;
			if(dir != current) {
				total += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
			}
			timelinesRotation[i] = total;
		}
		timelinesRotation[i + 1] = diff;
		r1 += total * alpha;
		bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
	}
	,queueEvents: function(entry,animationTime) {
		var animationStart = entry.animationStart;
		var animationEnd = entry.animationEnd;
		var duration = animationEnd - animationStart;
		var trackLastWrapped = entry.trackLast % duration;
		var events = this.events;
		var event;
		var i = 0;
		var n = events.length;
		while(i < n) {
			event = events[i];
			if(event.time < trackLastWrapped) {
				break;
			}
			if(event.time > animationEnd) {
				++i;
				continue;
			}
			this.queue.event(entry,event);
			++i;
		}
		if(entry.loop ? trackLastWrapped > entry.trackTime % duration : animationTime >= animationEnd && entry.animationLast < animationEnd) {
			this.queue.complete(entry);
		}
		while(i < n) {
			event = events[i];
			if(event.time < animationStart) {
				++i;
				continue;
			}
			this.queue.event(entry,events[i]);
			++i;
		}
		while(events.length < 0) events.push(null);
		while(events.length > 0) events.pop();
	}
	,setCurrent: function(index,current) {
		var _from = this.expandToIndex(index);
		this.tracks[index] = current;
		if(_from != null) {
			this.queue.interrupt(_from);
			current.mixingFrom = _from;
			current.mixTime = 0;
			var array = _from.timelinesRotation;
			while(array.length < 0) array.push(null);
			while(array.length > 0) array.pop();
			if(_from.mixingFrom != null) {
				current.mixAlpha *= Math.min(_from.mixTime / _from.mixDuration,1);
			}
		}
		this.queue.start(current);
	}
	,setAnimationByName: function(trackIndex,animationName,loop) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if(animation == null) {
			throw new js__$Boot_HaxeError("Animation not found: " + animationName);
		}
		return this.setAnimation(trackIndex,animation,loop);
	}
	,setAnimation: function(trackIndex,animation,loop) {
		if(animation == null) {
			throw new js__$Boot_HaxeError("animation cannot be null.");
		}
		var current = this.expandToIndex(trackIndex);
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				this.queue.interrupt(current);
				this.queue.end(current);
				this.disposeNext(current);
				current = current.mixingFrom;
			} else {
				this.disposeNext(current);
			}
		}
		var entry = this.trackEntry(trackIndex,animation,loop,current);
		this.setCurrent(trackIndex,entry);
		this.queue.drain();
		return entry;
	}
	,expandToIndex: function(index) {
		if(index < this.tracks.length) {
			return this.tracks[index];
		}
		var array = this.tracks;
		var length = index + 1;
		while(array.length < length) array.push(null);
		while(array.length > length) array.pop();
		return null;
	}
	,trackEntry: function(trackIndex,animation,loop,last) {
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.duration;
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = loop ? 2147483647 : entry.animationEnd;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.mixAlpha = 1;
		entry.mixTime = 0;
		entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation,animation);
		return entry;
	}
	,disposeNext: function(entry) {
		var next = entry.next;
		while(next != null) {
			this.queue.dispose(next);
			next = next.next;
		}
		entry.next = null;
	}
	,_animationsChanged: function() {
		this.animationsChanged = false;
		var propertyIDs = this.propertyIDs = new haxe_ds_StringMap();
		var i = 0;
		var n = this.tracks.length;
		var key = new haxe_ds__$StringMap_StringMapIterator(propertyIDs,propertyIDs.arrayKeys());
		while(key.hasNext()) propertyIDs.remove(key.next());
		var entry;
		while(i < n) {
			entry = this.tracks[i];
			if(entry == null) {
				++i;
				continue;
			}
			this.setTimelinesFirst(entry);
			break;
		}
		while(i < n) {
			entry = this.tracks[i];
			if(entry != null) {
				this.checkTimelinesFirst(entry);
			}
			++i;
		}
	}
	,setTimelinesFirst: function(entry) {
		if(entry.mixingFrom != null) {
			this.setTimelinesFirst(entry.mixingFrom);
			this.checkTimelinesUsage(entry,entry.timelinesFirst);
			return;
		}
		var propertyIDs = this.propertyIDs;
		var timelines = entry.animation.timelines;
		var n = timelines.length;
		var usage = entry.timelinesFirst;
		while(usage.length < n) usage.push(false);
		while(usage.length > n) usage.pop();
		var _g1 = 0;
		while(_g1 < n) {
			var i = _g1++;
			var id = Std.string(timelines[i].getPropertyId());
			if(__map_reserved[id] != null) {
				propertyIDs.setReserved(id,id);
			} else {
				propertyIDs.h[id] = id;
			}
			usage[i] = true;
		}
	}
	,checkTimelinesFirst: function(entry) {
		if(entry.mixingFrom != null) {
			this.checkTimelinesFirst(entry.mixingFrom);
		}
		this.checkTimelinesUsage(entry,entry.timelinesFirst);
	}
	,checkTimelinesUsage: function(entry,usageArray) {
		var propertyIDs = this.propertyIDs;
		var timelines = entry.animation.timelines;
		var n = timelines.length;
		while(usageArray.length < n) usageArray.push(false);
		while(usageArray.length > n) usageArray.pop();
		var _g1 = 0;
		while(_g1 < n) {
			var i = _g1++;
			var id = Std.string(timelines[i].getPropertyId());
			usageArray[i] = !(__map_reserved[id] != null ? propertyIDs.existsReserved(id) : propertyIDs.h.hasOwnProperty(id));
			if(__map_reserved[id] != null) {
				propertyIDs.setReserved(id,id);
			} else {
				propertyIDs.h[id] = id;
			}
		}
	}
	,__class__: spinehaxe_animation_AnimationState
};
var spinehaxe_animation_AnimationStateData = function(skeletonData) {
	this.defaultMix = 0;
	this.animationToMixTime = new haxe_ds_StringMap();
	this.defaultMix = 0;
	this.skeletonData = skeletonData;
};
$hxClasses["spinehaxe.animation.AnimationStateData"] = spinehaxe_animation_AnimationStateData;
spinehaxe_animation_AnimationStateData.__name__ = ["spinehaxe","animation","AnimationStateData"];
spinehaxe_animation_AnimationStateData.prototype = {
	skeletonData: null
	,animationToMixTime: null
	,defaultMix: null
	,setMixByName: function(fromName,toName,duration) {
		var from = this.skeletonData.findAnimation(fromName);
		if(from == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("Animation not found: " + fromName));
		}
		var to = this.skeletonData.findAnimation(toName);
		if(to == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("Animation not found: " + toName));
		}
		this.setMix(from,to,duration);
	}
	,setMix: function(from,to,duration) {
		if(from == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("from cannot be null."));
		}
		if(to == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("to cannot be null."));
		}
		var k = from.name + ":" + to.name;
		var _this = this.animationToMixTime;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,duration);
		} else {
			_this.h[k] = duration;
		}
	}
	,getMix: function(from,to) {
		var key = from.name + ":" + to.name;
		var _this = this.animationToMixTime;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			return this.defaultMix;
		}
		var _this1 = this.animationToMixTime;
		if(__map_reserved[key] != null) {
			return _this1.getReserved(key);
		} else {
			return _this1.h[key];
		}
	}
	,__class__: spinehaxe_animation_AnimationStateData
};
var spinehaxe_animation_Timeline = function() { };
$hxClasses["spinehaxe.animation.Timeline"] = spinehaxe_animation_Timeline;
spinehaxe_animation_Timeline.__name__ = ["spinehaxe","animation","Timeline"];
spinehaxe_animation_Timeline.prototype = {
	apply: null
	,getPropertyId: null
	,__class__: spinehaxe_animation_Timeline
};
var spinehaxe_animation_AttachmentTimeline = function(frameCount) {
	var v = new Array(frameCount);
	var _g1 = 0;
	var _g = frameCount;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
	this.attachmentNames = new Array(frameCount);
};
$hxClasses["spinehaxe.animation.AttachmentTimeline"] = spinehaxe_animation_AttachmentTimeline;
spinehaxe_animation_AttachmentTimeline.__name__ = ["spinehaxe","animation","AttachmentTimeline"];
spinehaxe_animation_AttachmentTimeline.__interfaces__ = [spinehaxe_animation_Timeline];
spinehaxe_animation_AttachmentTimeline.prototype = {
	slotIndex: null
	,frames: null
	,attachmentNames: null
	,get_frameCount: function() {
		return this.frames.length;
	}
	,getPropertyId: function() {
		return 67108864 + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,attachmentName) {
		this.frames[frameIndex] = time;
		this.attachmentNames[frameIndex] = attachmentName;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var attachmentName;
		var slot = skeleton.slots[this.slotIndex];
		if(mixingOut && setupPose) {
			attachmentName = slot._data.attachmentName;
			var attachment = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex,attachmentName);
			if(slot._attachment != attachment) {
				slot._attachment = attachment;
				slot._attachmentTime = slot._bone._skeleton.time;
				var array = slot.attachmentVertices;
				while(array.length < 0) array.push(null);
				while(array.length > 0) array.pop();
			}
			return;
		}
		if(time < this.frames[0]) {
			if(setupPose) {
				attachmentName = slot._data.attachmentName;
				var attachment1 = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex,attachmentName);
				if(slot._attachment != attachment1) {
					slot._attachment = attachment1;
					slot._attachmentTime = slot._bone._skeleton.time;
					var array1 = slot.attachmentVertices;
					while(array1.length < 0) array1.push(null);
					while(array1.length > 0) array1.pop();
				}
			}
			return;
		}
		var frameIndex;
		if(time >= this.frames[this.frames.length - 1]) {
			frameIndex = this.frames.length - 1;
		} else {
			frameIndex = spinehaxe_animation_Animation.binarySearch(this.frames,time,1) - 1;
		}
		attachmentName = this.attachmentNames[frameIndex];
		var _this = skeleton.slots[this.slotIndex];
		var attachment2 = attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex,attachmentName);
		if(_this._attachment != attachment2) {
			_this._attachment = attachment2;
			_this._attachmentTime = _this._bone._skeleton.time;
			var array2 = _this.attachmentVertices;
			while(array2.length < 0) array2.push(null);
			while(array2.length > 0) array2.pop();
		}
	}
	,__class__: spinehaxe_animation_AttachmentTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spinehaxe_animation_CurveTimeline = function(frameCount) {
	var n = (frameCount - 1) * 19;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.curves = v;
};
$hxClasses["spinehaxe.animation.CurveTimeline"] = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_CurveTimeline.__name__ = ["spinehaxe","animation","CurveTimeline"];
spinehaxe_animation_CurveTimeline.__interfaces__ = [spinehaxe_animation_Timeline];
spinehaxe_animation_CurveTimeline.prototype = {
	curves: null
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
	}
	,getPropertyId: function() {
		return 0;
	}
	,get_frameCount: function() {
		return this.curves.length / 19 + 1 | 0;
	}
	,setStepped: function(frameIndex) {
		this.curves[frameIndex * 19 | 0] = 1;
	}
	,setCurve: function(frameIndex,cx1,cy1,cx2,cy2) {
		var tmpx = (-cx1 * 2 + cx2) * 0.03;
		var tmpy = (-cy1 * 2 + cy2) * 0.03;
		var dddfx = ((cx1 - cx2) * 3 + 1) * 0.006;
		var dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;
		var ddfx = tmpx * 2 + dddfx;
		var ddfy = tmpy * 2 + dddfy;
		var dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667;
		var dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;
		var i = frameIndex * 19;
		this.curves[i++ | 0] = 2;
		var x = dfx;
		var y = dfy;
		var n = i + 19 - 1;
		while(i < n) {
			this.curves[i] = x;
			this.curves[i + 1 | 0] = y;
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			x += dfx;
			y += dfy;
			i += 2;
		}
	}
	,getCurvePercent: function(frameIndex,percent) {
		if(percent < 0) {
			percent = 0;
		} else if(percent > 1) {
			percent = 1;
		} else {
			percent = percent;
		}
		var i = frameIndex * 19;
		var type = this.curves[i];
		if(type == 0) {
			return percent;
		}
		if(type == 1) {
			return 0;
		}
		++i;
		var x = 0;
		var start = i;
		var n = i + 19 - 1;
		while(i < n) {
			x = this.curves[i];
			if(x >= percent) {
				var prevX;
				var prevY;
				if(i == start) {
					prevX = 0;
					prevY = 0;
				} else {
					prevX = this.curves[i - 2 | 0];
					prevY = this.curves[i - 1 | 0];
				}
				return prevY + (this.curves[i + 1 | 0] - prevY) * (percent - prevX) / (x - prevX);
			}
			i += 2;
		}
		var y = this.curves[i - 1 | 0];
		return y + (1 - y) * (percent - x) / (1 - x);
	}
	,__class__: spinehaxe_animation_CurveTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spinehaxe_animation_ColorTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 5;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.ColorTimeline"] = spinehaxe_animation_ColorTimeline;
spinehaxe_animation_ColorTimeline.__name__ = ["spinehaxe","animation","ColorTimeline"];
spinehaxe_animation_ColorTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_ColorTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,getPropertyId: function() {
		return 83886080 + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,r,g,b,a) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1 | 0] = r;
		this.frames[frameIndex + 2 | 0] = g;
		this.frames[frameIndex + 3 | 0] = b;
		this.frames[frameIndex + 4 | 0] = a;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var slot = skeleton.slots[this.slotIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				slot.r = slot._data.r;
				slot.g = slot._data.g;
				slot.b = slot._data.b;
				slot.a = slot._data.a;
			}
			return;
		}
		var r;
		var g;
		var b;
		var a;
		if(time >= this.frames[this.frames.length - 5]) {
			var i = this.frames.length;
			r = this.frames[i + -4];
			g = this.frames[i + -3];
			b = this.frames[i + -2];
			a = this.frames[i + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,5);
			r = this.frames[frame + -4];
			g = this.frames[frame + -3];
			b = this.frames[frame + -2];
			a = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -5] - frameTime));
			r += (this.frames[frame + 1] - r) * percent;
			g += (this.frames[frame + 2] - g) * percent;
			b += (this.frames[frame + 3] - b) * percent;
			a += (this.frames[frame + 4] - a) * percent;
		}
		if(alpha == 1) {
			slot.r = r;
			slot.g = g;
			slot.b = b;
			slot.a = a;
		} else {
			if(setupPose) {
				slot.r = slot._data.r;
				slot.g = slot._data.g;
				slot.b = slot._data.b;
				slot.a = slot._data.a;
			}
			slot.r += (r - slot.r) * alpha;
			slot.g += (g - slot.g) * alpha;
			slot.b += (b - slot.b) * alpha;
			slot.a += (a - slot.a) * alpha;
		}
	}
	,__class__: spinehaxe_animation_ColorTimeline
});
var spinehaxe_animation_DeformTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var v = new Array(frameCount);
	var _g1 = 0;
	var _g = frameCount;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
	this.frameVertices = new Array(frameCount);
};
$hxClasses["spinehaxe.animation.DeformTimeline"] = spinehaxe_animation_DeformTimeline;
spinehaxe_animation_DeformTimeline.__name__ = ["spinehaxe","animation","DeformTimeline"];
spinehaxe_animation_DeformTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_DeformTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,frameVertices: null
	,attachment: null
	,getPropertyId: function() {
		return 100663296 + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,vertices) {
		this.frames[frameIndex] = time;
		this.frameVertices[frameIndex] = vertices;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var slot = skeleton.slots[this.slotIndex];
		var slotAttachment = slot._attachment;
		if(!js_Boot.__instanceof(slotAttachment,spinehaxe_attachments_VertexAttachment) || !(js_Boot.__cast(slotAttachment , spinehaxe_attachments_VertexAttachment)).applyDeform(this.attachment)) {
			return;
		}
		var verticesArray = slot.attachmentVertices;
		if(time < this.frames[0]) {
			if(setupPose) {
				while(verticesArray.length < 0) verticesArray.push(null);
				while(verticesArray.length > 0) verticesArray.pop();
			}
			return;
		}
		var frameVertices = this.frameVertices;
		var vertexCount = frameVertices[0].length;
		if(verticesArray.length != vertexCount) {
			alpha = 1;
		}
		while(verticesArray.length < vertexCount) verticesArray.push(0);
		while(verticesArray.length > vertexCount) verticesArray.pop();
		var vertexAttachment;
		var setupVertices;
		var setup;
		var prev;
		if(time >= this.frames[this.frames.length - 1]) {
			var lastVertices = frameVertices[this.frames.length - 1];
			if(alpha == 1) {
				var _g1 = 0;
				while(_g1 < vertexCount) {
					var i = _g1++;
					verticesArray[i] = lastVertices[i];
				}
			} else if(setupPose) {
				vertexAttachment = slotAttachment;
				if(vertexAttachment.bones == null) {
					setupVertices = vertexAttachment.vertices;
					var _g11 = 0;
					while(_g11 < vertexCount) {
						var i1 = _g11++;
						setup = setupVertices[i1];
						verticesArray[i1] = setup + (lastVertices[i1] - setup) * alpha;
					}
				} else {
					var _g12 = 0;
					while(_g12 < vertexCount) {
						var i2 = _g12++;
						verticesArray[i2] = lastVertices[i2] * alpha;
					}
				}
			} else {
				var _g13 = 0;
				while(_g13 < vertexCount) {
					var i3 = _g13++;
					verticesArray[i3] += (lastVertices[i3] - verticesArray[i3]) * alpha;
				}
			}
			return;
		}
		var frame = spinehaxe_animation_Animation.binarySearch1(this.frames,time);
		var prevVertices = frameVertices[frame - 1];
		var nextVertices = frameVertices[frame];
		var frameTime = this.frames[frame];
		var percent = this.getCurvePercent(frame - 1,1 - (time - frameTime) / (this.frames[frame - 1] - frameTime));
		if(alpha == 1) {
			var _g14 = 0;
			while(_g14 < vertexCount) {
				var i4 = _g14++;
				prev = prevVertices[i4];
				verticesArray[i4] = prev + (nextVertices[i4] - prev) * percent;
			}
		} else if(setupPose) {
			vertexAttachment = slotAttachment;
			if(vertexAttachment.bones == null) {
				setupVertices = vertexAttachment.vertices;
				var _g15 = 0;
				while(_g15 < vertexCount) {
					var i5 = _g15++;
					prev = prevVertices[i5];
					setup = setupVertices[i5];
					verticesArray[i5] = setup + (prev + (nextVertices[i5] - prev) * percent - setup) * alpha;
				}
			} else {
				var _g16 = 0;
				while(_g16 < vertexCount) {
					var i6 = _g16++;
					prev = prevVertices[i6];
					verticesArray[i6] = (prev + (nextVertices[i6] - prev) * percent) * alpha;
				}
			}
		} else {
			var _g17 = 0;
			while(_g17 < vertexCount) {
				var i7 = _g17++;
				prev = prevVertices[i7];
				verticesArray[i7] += (prev + (nextVertices[i7] - prev) * percent - verticesArray[i7]) * alpha;
			}
		}
	}
	,__class__: spinehaxe_animation_DeformTimeline
});
var spinehaxe_animation_DrawOrderTimeline = function(frameCount) {
	var v = new Array(frameCount);
	var _g1 = 0;
	var _g = frameCount;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
	this.drawOrders = new Array(frameCount);
};
$hxClasses["spinehaxe.animation.DrawOrderTimeline"] = spinehaxe_animation_DrawOrderTimeline;
spinehaxe_animation_DrawOrderTimeline.__name__ = ["spinehaxe","animation","DrawOrderTimeline"];
spinehaxe_animation_DrawOrderTimeline.__interfaces__ = [spinehaxe_animation_Timeline];
spinehaxe_animation_DrawOrderTimeline.prototype = {
	frames: null
	,drawOrders: null
	,getPropertyId: function() {
		return 8 << 24;
	}
	,setFrame: function(frameIndex,time,drawOrder) {
		this.frames[frameIndex] = time;
		this.drawOrders[frameIndex] = drawOrder;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		if(mixingOut && setupPose) {
			var _g1 = 0;
			var _g = skeleton.slots.length;
			while(_g1 < _g) {
				var ii = _g1++;
				skeleton.drawOrder[ii] = skeleton.slots[ii];
			}
			return;
		}
		var drawOrder = skeleton.drawOrder;
		var slots = skeleton.slots;
		var i = 0;
		if(time < this.frames[0]) {
			if(setupPose) {
				var _g2 = 0;
				while(_g2 < slots.length) {
					var slot = slots[_g2];
					++_g2;
					drawOrder[i++] = slot;
				}
			}
			return;
		}
		var frameIndex;
		if(time >= this.frames[this.frames.length - 1 | 0]) {
			frameIndex = this.frames.length - 1;
		} else {
			frameIndex = spinehaxe_animation_Animation.binarySearch1(this.frames,time) - 1;
		}
		var drawOrderToSetupIndex = this.drawOrders[frameIndex];
		i = 0;
		if(drawOrderToSetupIndex == null) {
			var _g3 = 0;
			while(_g3 < slots.length) {
				var slot1 = slots[_g3];
				++_g3;
				drawOrder[i++] = slot1;
			}
		} else {
			var _g4 = 0;
			while(_g4 < drawOrderToSetupIndex.length) {
				var setupIndex = drawOrderToSetupIndex[_g4];
				++_g4;
				drawOrder[i++] = slots[setupIndex];
			}
		}
	}
	,__class__: spinehaxe_animation_DrawOrderTimeline
};
var spinehaxe_animation_EventQueue = function(animationState) {
	this.events = [];
	this.eventTypes = [];
	this.entries = [];
	this.animationState = animationState;
};
$hxClasses["spinehaxe.animation.EventQueue"] = spinehaxe_animation_EventQueue;
spinehaxe_animation_EventQueue.__name__ = ["spinehaxe","animation","EventQueue"];
spinehaxe_animation_EventQueue.prototype = {
	entries: null
	,eventTypes: null
	,events: null
	,animationState: null
	,drainDisabled: null
	,start: function(entry) {
		this.eventTypes.push(1);
		this.entries.push(entry);
		this.animationState.animationsChanged = true;
	}
	,interrupt: function(entry) {
		this.eventTypes.push(2);
		this.entries.push(entry);
	}
	,end: function(entry) {
		this.eventTypes.push(3);
		this.entries.push(entry);
		this.animationState.animationsChanged = true;
	}
	,dispose: function(entry) {
		this.eventTypes.push(4);
		this.entries.push(entry);
	}
	,complete: function(entry) {
		this.eventTypes.push(5);
		this.entries.push(entry);
	}
	,event: function(entry,event) {
		this.eventTypes.push(6);
		this.entries.push(entry);
		this.events.push(event);
	}
	,drain: function() {
		if(this.drainDisabled) {
			return;
		}
		this.drainDisabled = true;
		var eventIndex = 0;
		var _g1 = 0;
		var _g = this.entries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.entries[i];
			switch(this.eventTypes[i]) {
			case 1:
				entry.onStart.invoke(entry);
				this.animationState.onStart.invoke(entry);
				break;
			case 2:
				entry.onInterrupt.invoke(entry);
				this.animationState.onInterrupt.invoke(entry);
				break;
			case 3:
				entry.onEnd.invoke(entry);
				this.animationState.onEnd.invoke(entry);
				entry.onDispose.invoke(entry);
				this.animationState.onDispose.invoke(entry);
				this.animationState.trackEntryPool.free(entry);
				break;
			case 4:
				entry.onDispose.invoke(entry);
				this.animationState.onDispose.invoke(entry);
				this.animationState.trackEntryPool.free(entry);
				break;
			case 5:
				entry.onComplete.invoke(entry);
				this.animationState.onComplete.invoke(entry);
				break;
			case 6:
				var event = this.events[eventIndex++];
				entry.onEvent.invoke(entry,event);
				this.animationState.onEvent.invoke(entry,event);
				break;
			}
		}
		this.clear();
		this.drainDisabled = false;
	}
	,clear: function() {
		var array = this.eventTypes;
		while(array.length < 0) array.push(null);
		while(array.length > 0) array.pop();
		var array1 = this.entries;
		while(array1.length < 0) array1.push(null);
		while(array1.length > 0) array1.pop();
		var array2 = this.events;
		while(array2.length < 0) array2.push(null);
		while(array2.length > 0) array2.pop();
	}
	,__class__: spinehaxe_animation_EventQueue
};
var spinehaxe_animation_EventTimeline = function(frameCount) {
	var v = new Array(frameCount);
	var _g1 = 0;
	var _g = frameCount;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
	this.events = new Array(frameCount);
};
$hxClasses["spinehaxe.animation.EventTimeline"] = spinehaxe_animation_EventTimeline;
spinehaxe_animation_EventTimeline.__name__ = ["spinehaxe","animation","EventTimeline"];
spinehaxe_animation_EventTimeline.__interfaces__ = [spinehaxe_animation_Timeline];
spinehaxe_animation_EventTimeline.prototype = {
	frames: null
	,events: null
	,getPropertyId: function() {
		return 7 << 24;
	}
	,setFrame: function(frameIndex,event) {
		this.frames[frameIndex] = event.time;
		this.events[frameIndex] = event;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		if(firedEvents == null) {
			return;
		}
		if(lastTime > time) {
			this.apply(skeleton,lastTime,2147483647,firedEvents,alpha,setupPose,mixingOut);
			lastTime = -1;
		} else if(lastTime >= this.frames[this.frames.length - 1 | 0]) {
			return;
		}
		if(time < this.frames[0]) {
			return;
		}
		var frame;
		if(lastTime < this.frames[0]) {
			frame = 0;
		} else {
			frame = spinehaxe_animation_Animation.binarySearch1(this.frames,lastTime);
			var frameTime = this.frames[frame];
			while(frame > 0) {
				if(this.frames[frame - 1] != frameTime) {
					break;
				}
				--frame;
			}
		}
		while(frame < this.frames.length && time >= this.frames[frame]) {
			firedEvents[firedEvents.length] = this.events[frame];
			++frame;
		}
	}
	,__class__: spinehaxe_animation_EventTimeline
};
var spinehaxe_animation_IkConstraintTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	this.frames = new Array(frameCount * 3);
};
$hxClasses["spinehaxe.animation.IkConstraintTimeline"] = spinehaxe_animation_IkConstraintTimeline;
spinehaxe_animation_IkConstraintTimeline.__name__ = ["spinehaxe","animation","IkConstraintTimeline"];
spinehaxe_animation_IkConstraintTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_IkConstraintTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	ikConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return 150994944 + this.ikConstraintIndex;
	}
	,setFrame: function(frameIndex,time,mix,bendDirection) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1 | 0] = mix;
		this.frames[frameIndex + 2 | 0] = bendDirection;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				constraint.mix = constraint._data.mix;
				constraint.bendDirection = constraint._data.bendDirection;
			}
			return;
		}
		if(time >= this.frames[this.frames.length - 3 | 0]) {
			if(setupPose) {
				constraint.mix = constraint._data.mix + (this.frames[this.frames.length + -2] - constraint._data.mix) * alpha;
				constraint.bendDirection = mixingOut ? constraint._data.bendDirection : this.frames[this.frames.length + -1] | 0;
			} else {
				constraint.mix += (this.frames[this.frames.length + -2] - constraint.mix) * alpha;
				if(!mixingOut) {
					constraint.bendDirection = this.frames[this.frames.length + -1] | 0;
				}
			}
			return;
		}
		var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,3);
		var mix = this.frames[frame + -2];
		var frameTime = this.frames[frame];
		var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -3] - frameTime));
		if(setupPose) {
			constraint.mix = constraint._data.mix + (mix + (this.frames[frame + 1] - mix) * percent - constraint._data.mix) * alpha;
			constraint.bendDirection = mixingOut ? constraint._data.bendDirection : this.frames[frame + -1] | 0;
		} else {
			constraint.mix += (mix + (this.frames[frame + 1] - mix) * percent - constraint.mix) * alpha;
			if(!mixingOut) {
				constraint.bendDirection = this.frames[frame + -1] | 0;
			}
		}
	}
	,__class__: spinehaxe_animation_IkConstraintTimeline
});
var spinehaxe_animation_BaseListeners = function() {
	this._listeners = [];
};
$hxClasses["spinehaxe.animation.BaseListeners"] = spinehaxe_animation_BaseListeners;
spinehaxe_animation_BaseListeners.__name__ = ["spinehaxe","animation","BaseListeners"];
spinehaxe_animation_BaseListeners.prototype = {
	_listeners: null
	,add: function(listener) {
		if(listener == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("listener cannot be null."));
		}
		if(this._listeners.indexOf(listener) == -1) {
			this._listeners.push(listener);
		}
	}
	,__class__: spinehaxe_animation_BaseListeners
};
var spinehaxe_animation_Listeners = function() {
	spinehaxe_animation_BaseListeners.call(this);
};
$hxClasses["spinehaxe.animation.Listeners"] = spinehaxe_animation_Listeners;
spinehaxe_animation_Listeners.__name__ = ["spinehaxe","animation","Listeners"];
spinehaxe_animation_Listeners.__super__ = spinehaxe_animation_BaseListeners;
spinehaxe_animation_Listeners.prototype = $extend(spinehaxe_animation_BaseListeners.prototype,{
	invoke: function(entry) {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(entry);
		}
	}
	,__class__: spinehaxe_animation_Listeners
});
var spinehaxe_animation_EventListeners = function() {
	spinehaxe_animation_BaseListeners.call(this);
};
$hxClasses["spinehaxe.animation.EventListeners"] = spinehaxe_animation_EventListeners;
spinehaxe_animation_EventListeners.__name__ = ["spinehaxe","animation","EventListeners"];
spinehaxe_animation_EventListeners.__super__ = spinehaxe_animation_BaseListeners;
spinehaxe_animation_EventListeners.prototype = $extend(spinehaxe_animation_BaseListeners.prototype,{
	invoke: function(entry,event) {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(entry,event);
		}
	}
	,__class__: spinehaxe_animation_EventListeners
});
var spinehaxe_animation_PathConstraintMixTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 3;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.PathConstraintMixTimeline"] = spinehaxe_animation_PathConstraintMixTimeline;
spinehaxe_animation_PathConstraintMixTimeline.__name__ = ["spinehaxe","animation","PathConstraintMixTimeline"];
spinehaxe_animation_PathConstraintMixTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_PathConstraintMixTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return 218103808 + this.pathConstraintIndex;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				constraint.rotateMix = constraint._data.rotateMix;
				constraint.translateMix = constraint._data.translateMix;
			}
			return;
		}
		var rotate;
		var translate;
		if(time >= this.frames[this.frames.length - 3]) {
			rotate = this.frames[this.frames.length + -2];
			translate = this.frames[this.frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,3);
			rotate = this.frames[frame + -2];
			translate = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -3] - frameTime));
			rotate += (this.frames[frame + 1] - rotate) * percent;
			translate += (this.frames[frame + 2] - translate) * percent;
		}
		if(setupPose) {
			constraint.rotateMix = constraint._data.rotateMix + (rotate - constraint._data.rotateMix) * alpha;
			constraint.translateMix = constraint._data.translateMix + (translate - constraint._data.translateMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
		}
	}
	,__class__: spinehaxe_animation_PathConstraintMixTimeline
});
var spinehaxe_animation_PathConstraintPositionTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 2;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.PathConstraintPositionTimeline"] = spinehaxe_animation_PathConstraintPositionTimeline;
spinehaxe_animation_PathConstraintPositionTimeline.__name__ = ["spinehaxe","animation","PathConstraintPositionTimeline"];
spinehaxe_animation_PathConstraintPositionTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_PathConstraintPositionTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return 184549376 + this.pathConstraintIndex;
	}
	,setFrame: function(frameIndex,time,value) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = value;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				constraint.position = constraint._data.position;
			}
			return;
		}
		var position;
		if(time >= this.frames[this.frames.length - 2]) {
			position = this.frames[this.frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,2);
			position = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			position += (this.frames[frame + 1] - position) * this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -2] - frameTime));
		}
		if(setupPose) {
			constraint.position = constraint._data.position + (position - constraint._data.position) * alpha;
		} else {
			constraint.position += (position - constraint.position) * alpha;
		}
	}
	,__class__: spinehaxe_animation_PathConstraintPositionTimeline
});
var spinehaxe_animation_PathConstraintSpacingTimeline = function(frameCount) {
	spinehaxe_animation_PathConstraintPositionTimeline.call(this,frameCount);
};
$hxClasses["spinehaxe.animation.PathConstraintSpacingTimeline"] = spinehaxe_animation_PathConstraintSpacingTimeline;
spinehaxe_animation_PathConstraintSpacingTimeline.__name__ = ["spinehaxe","animation","PathConstraintSpacingTimeline"];
spinehaxe_animation_PathConstraintSpacingTimeline.__super__ = spinehaxe_animation_PathConstraintPositionTimeline;
spinehaxe_animation_PathConstraintSpacingTimeline.prototype = $extend(spinehaxe_animation_PathConstraintPositionTimeline.prototype,{
	getPropertyId: function() {
		return 201326592 + this.pathConstraintIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				constraint.spacing = constraint._data.spacing;
			}
			return;
		}
		var spacing;
		if(time >= this.frames[this.frames.length - 2]) {
			spacing = this.frames[this.frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,2);
			spacing = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			spacing += (this.frames[frame + 1] - spacing) * this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -2] - frameTime));
		}
		if(setupPose) {
			constraint.spacing = constraint._data.spacing + (spacing - constraint._data.spacing) * alpha;
		} else {
			constraint.spacing += (spacing - constraint.spacing) * alpha;
		}
	}
	,__class__: spinehaxe_animation_PathConstraintSpacingTimeline
});
var spinehaxe_animation_RotateTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 2;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.RotateTimeline"] = spinehaxe_animation_RotateTimeline;
spinehaxe_animation_RotateTimeline.__name__ = ["spinehaxe","animation","RotateTimeline"];
spinehaxe_animation_RotateTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_RotateTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return this.boneIndex;
	}
	,setFrame: function(frameIndex,time,degrees) {
		frameIndex <<= 1;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1 | 0] = degrees;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var bone = skeleton.bones[this.boneIndex];
		var r;
		if(time < this.frames[0]) {
			if(setupPose) {
				bone.rotation = bone._data.rotation;
			}
			return;
		}
		if(time >= this.frames[this.frames.length - 2]) {
			if(setupPose) {
				bone.rotation = bone._data.rotation + this.frames[this.frames.length + -1] * alpha;
			} else {
				r = bone._data.rotation + this.frames[this.frames.length + -1] - bone.rotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
				bone.rotation += r * alpha;
			}
			return;
		}
		var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,2);
		var prevRotation = this.frames[frame + -1];
		var frameTime = this.frames[frame];
		r = this.frames[frame + 1] - prevRotation;
		r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
		r = prevRotation + r * this.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (this.frames[frame + -2] - frameTime));
		if(setupPose) {
			r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
			bone.rotation = bone._data.rotation + r * alpha;
		} else {
			r = bone._data.rotation + r - bone.rotation;
			r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
			bone.rotation += r * alpha;
		}
	}
	,__class__: spinehaxe_animation_RotateTimeline
});
var spinehaxe_animation_TranslateTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 3;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.TranslateTimeline"] = spinehaxe_animation_TranslateTimeline;
spinehaxe_animation_TranslateTimeline.__name__ = ["spinehaxe","animation","TranslateTimeline"];
spinehaxe_animation_TranslateTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_TranslateTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return 16777216 + this.boneIndex;
	}
	,setFrame: function(frameIndex,time,x,y) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1 | 0] = x;
		this.frames[frameIndex + 2 | 0] = y;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var bone = skeleton.bones[this.boneIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				bone.x = bone._data.x;
				bone.y = bone._data.y;
			}
			return;
		}
		var x;
		var y;
		if(time >= this.frames[this.frames.length - 3]) {
			x = this.frames[this.frames.length + -2];
			y = this.frames[this.frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,3);
			x = this.frames[frame + -2];
			y = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -3] - frameTime));
			x += (this.frames[frame + 1] - x) * percent;
			y += (this.frames[frame + 2] - y) * percent;
		}
		if(setupPose) {
			bone.x = bone._data.x + x * alpha;
			bone.y = bone._data.y + y * alpha;
		} else {
			bone.x += (bone._data.x + x - bone.x) * alpha;
			bone.y += (bone._data.y + y - bone.y) * alpha;
		}
	}
	,__class__: spinehaxe_animation_TranslateTimeline
});
var spinehaxe_animation_ScaleTimeline = function(frameCount) {
	spinehaxe_animation_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spinehaxe.animation.ScaleTimeline"] = spinehaxe_animation_ScaleTimeline;
spinehaxe_animation_ScaleTimeline.__name__ = ["spinehaxe","animation","ScaleTimeline"];
spinehaxe_animation_ScaleTimeline.__super__ = spinehaxe_animation_TranslateTimeline;
spinehaxe_animation_ScaleTimeline.prototype = $extend(spinehaxe_animation_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return 33554432 + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var bone = skeleton.bones[this.boneIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				bone.scaleX = bone._data.scaleX;
				bone.scaleY = bone._data.scaleY;
			}
			return;
		}
		var x;
		var y;
		if(time >= this.frames[this.frames.length - 3]) {
			x = this.frames[this.frames.length + -2] * bone._data.scaleX;
			y = this.frames[this.frames.length + -1] * bone._data.scaleY;
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,3);
			x = this.frames[frame + -2];
			y = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -3] - frameTime));
			x = (x + (this.frames[frame + 1] - x) * percent) * bone._data.scaleX;
			y = (y + (this.frames[frame + 2] - y) * percent) * bone._data.scaleY;
		}
		if(alpha == 1) {
			bone.scaleX = x;
			bone.scaleY = y;
		} else {
			var bx;
			var by;
			if(setupPose) {
				bx = bone._data.scaleX;
				by = bone._data.scaleY;
			} else {
				bx = bone.scaleX;
				by = bone.scaleY;
			}
			if(mixingOut) {
				x = Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0);
				y = Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0);
			} else {
				bx = Math.abs(bx) * (x > 0 ? 1 : x < 0 ? -1 : 0);
				by = Math.abs(by) * (y > 0 ? 1 : y < 0 ? -1 : 0);
			}
			bone.scaleX = bx + (x - bx) * alpha;
			bone.scaleY = by + (y - by) * alpha;
		}
	}
	,__class__: spinehaxe_animation_ScaleTimeline
});
var spinehaxe_animation_ShearTimeline = function(frameCount) {
	spinehaxe_animation_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spinehaxe.animation.ShearTimeline"] = spinehaxe_animation_ShearTimeline;
spinehaxe_animation_ShearTimeline.__name__ = ["spinehaxe","animation","ShearTimeline"];
spinehaxe_animation_ShearTimeline.__super__ = spinehaxe_animation_TranslateTimeline;
spinehaxe_animation_ShearTimeline.prototype = $extend(spinehaxe_animation_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return 50331648 + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var bone = skeleton.bones[this.boneIndex];
		if(time < this.frames[0]) {
			if(setupPose) {
				bone.shearX = bone._data.shearX;
				bone.shearY = bone._data.shearY;
			}
			return;
		}
		var x;
		var y;
		if(time >= this.frames[this.frames.length - 3]) {
			x = this.frames[this.frames.length + -2];
			y = this.frames[this.frames.length + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,3);
			x = this.frames[frame + -2];
			y = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -3] - frameTime));
			x += (this.frames[frame + 1] - x) * percent;
			y += (this.frames[frame + 2] - y) * percent;
		}
		if(setupPose) {
			bone.shearX = bone._data.shearX + x * alpha;
			bone.shearY = bone._data.shearY + y * alpha;
		} else {
			bone.shearX += (bone._data.shearX + x - bone.shearX) * alpha;
			bone.shearY += (bone._data.shearY + y - bone.shearY) * alpha;
		}
	}
	,__class__: spinehaxe_animation_ShearTimeline
});
var spinehaxe_animation_TrackEntry = function() {
	this.timelinesRotation = [];
	this.timelinesFirst = [];
	this.onEvent = new spinehaxe_animation_EventListeners();
	this.onComplete = new spinehaxe_animation_Listeners();
	this.onDispose = new spinehaxe_animation_Listeners();
	this.onEnd = new spinehaxe_animation_Listeners();
	this.onInterrupt = new spinehaxe_animation_Listeners();
	this.onStart = new spinehaxe_animation_Listeners();
};
$hxClasses["spinehaxe.animation.TrackEntry"] = spinehaxe_animation_TrackEntry;
spinehaxe_animation_TrackEntry.__name__ = ["spinehaxe","animation","TrackEntry"];
spinehaxe_animation_TrackEntry.__interfaces__ = [spinehaxe_Poolable];
spinehaxe_animation_TrackEntry.prototype = {
	animation: null
	,next: null
	,mixingFrom: null
	,onStart: null
	,onInterrupt: null
	,onEnd: null
	,onDispose: null
	,onComplete: null
	,onEvent: null
	,trackIndex: null
	,loop: null
	,eventThreshold: null
	,attachmentThreshold: null
	,drawOrderThreshold: null
	,animationStart: null
	,animationEnd: null
	,animationLast: null
	,nextAnimationLast: null
	,delay: null
	,trackTime: null
	,trackLast: null
	,nextTrackLast: null
	,trackEnd: null
	,timeScale: null
	,alpha: null
	,mixTime: null
	,mixDuration: null
	,mixAlpha: null
	,timelinesFirst: null
	,timelinesRotation: null
	,getAnimationTime: function() {
		if(this.loop) {
			var duration = this.animationEnd - this.animationStart;
			if(duration == 0) {
				return this.animationStart;
			}
			return this.trackTime % duration + this.animationStart;
		}
		return Math.min(this.trackTime + this.animationStart,this.animationEnd);
	}
	,reset: function() {
		this.next = null;
		this.mixingFrom = null;
		this.animation = null;
		var array = this.onStart._listeners;
		while(array.length < 0) array.push(null);
		while(array.length > 0) array.pop();
		var array1 = this.onInterrupt._listeners;
		while(array1.length < 0) array1.push(null);
		while(array1.length > 0) array1.pop();
		var array2 = this.onEnd._listeners;
		while(array2.length < 0) array2.push(null);
		while(array2.length > 0) array2.pop();
		var array3 = this.onDispose._listeners;
		while(array3.length < 0) array3.push(null);
		while(array3.length > 0) array3.pop();
		var array4 = this.onComplete._listeners;
		while(array4.length < 0) array4.push(null);
		while(array4.length > 0) array4.pop();
		var array5 = this.onEvent._listeners;
		while(array5.length < 0) array5.push(null);
		while(array5.length > 0) array5.pop();
		var array6 = this.timelinesFirst;
		while(array6.length < 0) array6.push(null);
		while(array6.length > 0) array6.pop();
		var array7 = this.timelinesRotation;
		while(array7.length < 0) array7.push(null);
		while(array7.length > 0) array7.pop();
	}
	,__class__: spinehaxe_animation_TrackEntry
};
var spinehaxe_animation_TransformConstraintTimeline = function(frameCount) {
	spinehaxe_animation_CurveTimeline.call(this,frameCount);
	var n = frameCount * 5;
	var v = new Array(n);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) v[_g1++] = 0;
	this.frames = v;
};
$hxClasses["spinehaxe.animation.TransformConstraintTimeline"] = spinehaxe_animation_TransformConstraintTimeline;
spinehaxe_animation_TransformConstraintTimeline.__name__ = ["spinehaxe","animation","TransformConstraintTimeline"];
spinehaxe_animation_TransformConstraintTimeline.__super__ = spinehaxe_animation_CurveTimeline;
spinehaxe_animation_TransformConstraintTimeline.prototype = $extend(spinehaxe_animation_CurveTimeline.prototype,{
	transformConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return 167772160 + this.transformConstraintIndex;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix,scaleMix,shearMix) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
		this.frames[frameIndex + 3] = scaleMix;
		this.frames[frameIndex + 4] = shearMix;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,setupPose,mixingOut) {
		var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
		var data;
		if(time < this.frames[0]) {
			if(setupPose) {
				constraint.rotateMix = constraint._data.rotateMix;
				constraint.translateMix = constraint._data.translateMix;
				constraint.scaleMix = constraint._data.scaleMix;
				constraint.shearMix = constraint._data.shearMix;
			}
			return;
		}
		var rotate;
		var translate;
		var scale;
		var shear;
		if(time >= this.frames[this.frames.length - 5]) {
			var i = this.frames.length;
			rotate = this.frames[i + -4];
			translate = this.frames[i + -3];
			scale = this.frames[i + -2];
			shear = this.frames[i + -1];
		} else {
			var frame = spinehaxe_animation_Animation.binarySearch(this.frames,time,5);
			rotate = this.frames[frame + -4];
			translate = this.frames[frame + -3];
			scale = this.frames[frame + -2];
			shear = this.frames[frame + -1];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + -5] - frameTime));
			rotate += (this.frames[frame + 1] - rotate) * percent;
			translate += (this.frames[frame + 2] - translate) * percent;
			scale += (this.frames[frame + 3] - scale) * percent;
			shear += (this.frames[frame + 4] - shear) * percent;
		}
		if(setupPose) {
			data = constraint._data;
			constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;
			constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;
			constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;
			constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
			constraint.scaleMix += (scale - constraint.scaleMix) * alpha;
			constraint.shearMix += (shear - constraint.shearMix) * alpha;
		}
	}
	,__class__: spinehaxe_animation_TransformConstraintTimeline
});
var spinehaxe_atlas_Atlas = function(object,textureLoader) {
	this.regions = [];
	this.pages = [];
	this.load(object,textureLoader);
};
$hxClasses["spinehaxe.atlas.Atlas"] = spinehaxe_atlas_Atlas;
spinehaxe_atlas_Atlas.__name__ = ["spinehaxe","atlas","Atlas"];
spinehaxe_atlas_Atlas.prototype = {
	pages: null
	,regions: null
	,textureLoader: null
	,load: function(atlasText,textureLoader) {
		if(textureLoader == null) {
			throw new js__$Boot_HaxeError(new spinehaxe_Exception("textureLoader cannot be null."));
		}
		this.textureLoader = textureLoader;
		var reader = new spinehaxe_atlas_Reader(atlasText);
		var tuple = [];
		var page = null;
		while(true) {
			var line = reader.readLine();
			if(line == null) {
				break;
			}
			line = reader.trim(line);
			if(line.length == 0) {
				page = null;
			} else if(page == null) {
				page = new spinehaxe_atlas_AtlasPage();
				page.name = line;
				if(reader.readTuple(tuple) == 2) {
					page.width = Std.parseInt(tuple[0]);
					page.height = Std.parseInt(tuple[1]);
					reader.readTuple(tuple);
				}
				page.format = tuple[0];
				reader.readTuple(tuple);
				page.minFilter = tuple[0];
				page.magFilter = tuple[1];
				var direction = reader.readValue();
				page.uWrap = "clampToEdge";
				page.vWrap = "clampToEdge";
				if(direction == "x") {
					page.uWrap = "repeat";
				} else if(direction == "y") {
					page.vWrap = "repeat";
				} else if(direction == "xy") {
					page.uWrap = page.vWrap = "repeat";
				}
				textureLoader.loadPage(page,line);
				this.pages.push(page);
			} else {
				var region = new spinehaxe_atlas_AtlasRegion();
				region.name = line;
				region.page = page;
				region.rotate = reader.readValue() == "true";
				reader.readTuple(tuple);
				var x = Std.parseInt(tuple[0]);
				var y = Std.parseInt(tuple[1]);
				reader.readTuple(tuple);
				var width = Std.parseInt(tuple[0]);
				var height = Std.parseInt(tuple[1]);
				region.u = x / page.width;
				region.v = y / page.height;
				if(region.rotate) {
					region.u2 = (x + height) / page.width;
					region.v2 = (y + width) / page.height;
				} else {
					region.u2 = (x + width) / page.width;
					region.v2 = (y + height) / page.height;
				}
				region.x = x;
				region.y = y;
				region.width = Math.abs(width) | 0;
				region.height = Math.abs(height) | 0;
				if(reader.readTuple(tuple) == 4) {
					region.splits = [Std.parseInt(tuple[0]),Std.parseInt(tuple[1]),Std.parseInt(tuple[2]),Std.parseInt(tuple[3])];
					if(reader.readTuple(tuple) == 4) {
						region.pads = [Std.parseInt(tuple[0]),Std.parseInt(tuple[1]),Std.parseInt(tuple[2]),Std.parseInt(tuple[3])];
						reader.readTuple(tuple);
					}
				}
				region.originalWidth = Std.parseInt(tuple[0]);
				region.originalHeight = Std.parseInt(tuple[1]);
				reader.readTuple(tuple);
				region.offsetX = Std.parseInt(tuple[0]);
				region.offsetY = Std.parseInt(tuple[1]);
				region.index = Std.parseInt(reader.readValue());
				textureLoader.loadRegion(region);
				this.regions.push(region);
			}
		}
	}
	,findRegion: function(name) {
		var _g1 = 0;
		var _g = this.regions.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.regions[i].name == name) {
				return this.regions[i];
			}
		}
		return null;
	}
	,__class__: spinehaxe_atlas_Atlas
};
var spinehaxe_atlas_Reader = function(text) {
	this.index = 0;
	this.lines = new EReg("[ \t]*((\r\n)|\r|\n)[ \t]*","g").split(text);
};
$hxClasses["spinehaxe.atlas.Reader"] = spinehaxe_atlas_Reader;
spinehaxe_atlas_Reader.__name__ = ["spinehaxe","atlas","Reader"];
spinehaxe_atlas_Reader.prototype = {
	lines: null
	,index: null
	,trim: function(value) {
		return StringTools.trim(value);
	}
	,readLine: function() {
		if(this.index >= this.lines.length) {
			return null;
		}
		return this.lines[this.index++];
	}
	,readValue: function() {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw new js__$Boot_HaxeError("Invalid line: " + line);
		}
		return this.trim(line.substring(colon + 1));
	}
	,readTuple: function(tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw new js__$Boot_HaxeError("Invalid line: " + line);
		}
		var i = 0;
		var lastMatch = colon + 1;
		while(i < 3) {
			var comma = line.indexOf(",",lastMatch);
			if(comma == -1) {
				break;
			}
			tuple[i] = this.trim(HxOverrides.substr(line,lastMatch,comma - lastMatch));
			lastMatch = comma + 1;
			++i;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
	,__class__: spinehaxe_atlas_Reader
};
var spinehaxe_atlas_AtlasPage = function() {
	this.height = 0;
	this.width = 0;
};
$hxClasses["spinehaxe.atlas.AtlasPage"] = spinehaxe_atlas_AtlasPage;
spinehaxe_atlas_AtlasPage.__name__ = ["spinehaxe","atlas","AtlasPage"];
spinehaxe_atlas_AtlasPage.prototype = {
	name: null
	,format: null
	,minFilter: null
	,magFilter: null
	,uWrap: null
	,vWrap: null
	,rendererObject: null
	,width: null
	,height: null
	,__class__: spinehaxe_atlas_AtlasPage
};
var spinehaxe_atlas_AtlasRegion = function() {
	this.rotate = false;
	this.index = 0;
	this.originalHeight = 0;
	this.originalWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.v2 = 0;
	this.u2 = 0;
	this.v = 0;
	this.u = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["spinehaxe.atlas.AtlasRegion"] = spinehaxe_atlas_AtlasRegion;
spinehaxe_atlas_AtlasRegion.__name__ = ["spinehaxe","atlas","AtlasRegion"];
spinehaxe_atlas_AtlasRegion.prototype = {
	page: null
	,name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,u: null
	,v: null
	,u2: null
	,v2: null
	,offsetX: null
	,offsetY: null
	,originalWidth: null
	,originalHeight: null
	,index: null
	,rotate: null
	,splits: null
	,pads: null
	,__class__: spinehaxe_atlas_AtlasRegion
};
var spinehaxe_atlas_TextureLoader = function() { };
$hxClasses["spinehaxe.atlas.TextureLoader"] = spinehaxe_atlas_TextureLoader;
spinehaxe_atlas_TextureLoader.__name__ = ["spinehaxe","atlas","TextureLoader"];
spinehaxe_atlas_TextureLoader.prototype = {
	loadPage: null
	,loadRegion: null
	,__class__: spinehaxe_atlas_TextureLoader
};
var spinehaxe_attachments_AttachmentLoader = function() { };
$hxClasses["spinehaxe.attachments.AttachmentLoader"] = spinehaxe_attachments_AttachmentLoader;
spinehaxe_attachments_AttachmentLoader.__name__ = ["spinehaxe","attachments","AttachmentLoader"];
spinehaxe_attachments_AttachmentLoader.prototype = {
	newRegionAttachment: null
	,newMeshAttachment: null
	,newBoundingBoxAttachment: null
	,newPathAttachment: null
	,__class__: spinehaxe_attachments_AttachmentLoader
};
var spinehaxe_attachments_AtlasAttachmentLoader = function(atlas) {
	if(atlas == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("atlas cannot be null."));
	}
	this.atlas = atlas;
};
$hxClasses["spinehaxe.attachments.AtlasAttachmentLoader"] = spinehaxe_attachments_AtlasAttachmentLoader;
spinehaxe_attachments_AtlasAttachmentLoader.__name__ = ["spinehaxe","attachments","AtlasAttachmentLoader"];
spinehaxe_attachments_AtlasAttachmentLoader.__interfaces__ = [spinehaxe_attachments_AttachmentLoader];
spinehaxe_attachments_AtlasAttachmentLoader.nextPOT = function(value) {
	--value;
	value |= value >> 1;
	value |= value >> 2;
	value |= value >> 4;
	value |= value >> 8;
	value |= value >> 16;
	return value + 1;
};
spinehaxe_attachments_AtlasAttachmentLoader.prototype = {
	atlas: null
	,newRegionAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw new js__$Boot_HaxeError("Region not found in atlas: " + path + " (region attachment: " + name + ")");
		}
		var attachment = new spinehaxe_attachments_RegionAttachment(name);
		attachment.rendererObject = region;
		var scaleX = region.page.width / spinehaxe_attachments_AtlasAttachmentLoader.nextPOT(region.page.width);
		var scaleY = region.page.height / spinehaxe_attachments_AtlasAttachmentLoader.nextPOT(region.page.height);
		attachment.setUVs(region.u * scaleX,region.v * scaleY,region.u2 * scaleX,region.v2 * scaleY,region.rotate);
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	}
	,newMeshAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw new js__$Boot_HaxeError("Region not found in atlas: " + path + " (mesh attachment: " + name + ")");
		}
		var attachment = new spinehaxe_attachments_MeshAttachment(name);
		attachment.rendererObject = region;
		var scaleX = region.page.width / spinehaxe_attachments_AtlasAttachmentLoader.nextPOT(region.page.width);
		var scaleY = region.page.height / spinehaxe_attachments_AtlasAttachmentLoader.nextPOT(region.page.height);
		attachment.regionU = region.u * scaleX;
		attachment.regionV = region.v * scaleY;
		attachment.regionU2 = region.u2 * scaleX;
		attachment.regionV2 = region.v2 * scaleY;
		attachment.regionRotate = region.rotate;
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	}
	,newBoundingBoxAttachment: function(skin,name) {
		return new spinehaxe_attachments_BoundingBoxAttachment(name);
	}
	,newPathAttachment: function(skin,name) {
		return new spinehaxe_attachments_PathAttachment(name);
	}
	,__class__: spinehaxe_attachments_AtlasAttachmentLoader
};
var spinehaxe_attachments_Attachment = function(name) {
	if(name == null) {
		throw new js__$Boot_HaxeError(new spinehaxe_Exception("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spinehaxe.attachments.Attachment"] = spinehaxe_attachments_Attachment;
spinehaxe_attachments_Attachment.__name__ = ["spinehaxe","attachments","Attachment"];
spinehaxe_attachments_Attachment.prototype = {
	name: null
	,toString: function() {
		return this.name;
	}
	,__class__: spinehaxe_attachments_Attachment
};
var spinehaxe_attachments_VertexAttachment = function(name) {
	this.worldVerticesLength = 0;
	spinehaxe_attachments_Attachment.call(this,name);
};
$hxClasses["spinehaxe.attachments.VertexAttachment"] = spinehaxe_attachments_VertexAttachment;
spinehaxe_attachments_VertexAttachment.__name__ = ["spinehaxe","attachments","VertexAttachment"];
spinehaxe_attachments_VertexAttachment.__super__ = spinehaxe_attachments_Attachment;
spinehaxe_attachments_VertexAttachment.prototype = $extend(spinehaxe_attachments_Attachment.prototype,{
	bones: null
	,vertices: null
	,worldVerticesLength: null
	,computeWorldVertices: function(slot,worldVertices) {
		this.computeWorldVertices2(slot,0,this.worldVerticesLength,worldVertices,0);
	}
	,computeWorldVertices2: function(slot,start,count,worldVertices,offset) {
		count += offset;
		var skeleton = slot._bone._skeleton;
		var deformArray = slot.attachmentVertices;
		var vertices = this.vertices;
		var bones = this.bones;
		var v;
		var w;
		var n;
		var i;
		var skip;
		var b;
		var f;
		var vx;
		var vy;
		var wx;
		var wy;
		var bone;
		if(bones == null) {
			if(deformArray.length > 0) {
				vertices = deformArray;
			}
			bone = slot._bone;
			var x = bone._worldX;
			var y = bone._worldY;
			var a = bone._a;
			var bb = bone._b;
			var c = bone._c;
			var d = bone._d;
			v = start;
			w = offset;
			while(w < count) {
				vx = vertices[v];
				vy = vertices[v + 1];
				worldVertices[w] = vx * a + vy * bb + x;
				worldVertices[w + 1] = vx * c + vy * d + y;
				v += 2;
				w += 2;
			}
			return;
		}
		v = 0;
		skip = 0;
		i = 0;
		while(i < start) {
			n = bones[v];
			v += n + 1;
			skip += n;
			i += 2;
		}
		var skeletonBones = skeleton.bones;
		if(deformArray.length == 0) {
			w = offset;
			b = skip * 3;
			while(w < count) {
				wx = 0;
				wy = 0;
				n = bones[v++];
				n += v;
				while(v < n) {
					bone = skeletonBones[bones[v]];
					vx = vertices[b];
					vy = vertices[b + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone._a + vy * bone._b + bone._worldX) * weight;
					wy += (vx * bone._c + vy * bone._d + bone._worldY) * weight;
					++v;
					b += 3;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += 2;
			}
		} else {
			w = offset;
			b = skip * 3;
			f = skip << 1;
			while(w < count) {
				wx = 0;
				wy = 0;
				n = bones[v++];
				n += v;
				while(v < n) {
					bone = skeletonBones[bones[v]];
					vx = vertices[b] + deformArray[f];
					vy = vertices[b + 1] + deformArray[f + 1];
					var weight1 = vertices[b + 2];
					wx += (vx * bone._a + vy * bone._b + bone._worldX) * weight1;
					wy += (vx * bone._c + vy * bone._d + bone._worldY) * weight1;
					++v;
					b += 3;
					f += 2;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += 2;
			}
		}
	}
	,applyDeform: function(sourceAttachment) {
		return this == sourceAttachment;
	}
	,__class__: spinehaxe_attachments_VertexAttachment
});
var spinehaxe_attachments_BoundingBoxAttachment = function(name) {
	spinehaxe_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spinehaxe.attachments.BoundingBoxAttachment"] = spinehaxe_attachments_BoundingBoxAttachment;
spinehaxe_attachments_BoundingBoxAttachment.__name__ = ["spinehaxe","attachments","BoundingBoxAttachment"];
spinehaxe_attachments_BoundingBoxAttachment.__super__ = spinehaxe_attachments_VertexAttachment;
spinehaxe_attachments_BoundingBoxAttachment.prototype = $extend(spinehaxe_attachments_VertexAttachment.prototype,{
	__class__: spinehaxe_attachments_BoundingBoxAttachment
});
var spinehaxe_attachments_MeshAttachment = function(name) {
	this.height = 0;
	this.width = 0;
	this.regionOriginalHeight = 0;
	this.regionOriginalWidth = 0;
	this.regionHeight = 0;
	this.regionWidth = 0;
	this.regionOffsetY = 0;
	this.regionOffsetX = 0;
	this.regionRotate = false;
	this.regionV2 = 0;
	this.regionU2 = 0;
	this.regionV = 0;
	this.regionU = 0;
	this.inheritDeform = true;
	this.hullLength = 0;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	spinehaxe_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spinehaxe.attachments.MeshAttachment"] = spinehaxe_attachments_MeshAttachment;
spinehaxe_attachments_MeshAttachment.__name__ = ["spinehaxe","attachments","MeshAttachment"];
spinehaxe_attachments_MeshAttachment.__super__ = spinehaxe_attachments_VertexAttachment;
spinehaxe_attachments_MeshAttachment.prototype = $extend(spinehaxe_attachments_VertexAttachment.prototype,{
	_parentMesh: null
	,uvs: null
	,regionUVs: null
	,triangles: null
	,r: null
	,g: null
	,b: null
	,a: null
	,hullLength: null
	,inheritDeform: null
	,path: null
	,rendererObject: null
	,regionU: null
	,regionV: null
	,regionU2: null
	,regionV2: null
	,regionRotate: null
	,regionOffsetX: null
	,regionOffsetY: null
	,regionWidth: null
	,regionHeight: null
	,regionOriginalWidth: null
	,regionOriginalHeight: null
	,edges: null
	,width: null
	,height: null
	,updateUVs: function() {
		var width = this.regionU2 - this.regionU;
		var height = this.regionV2 - this.regionV;
		var n = this.regionUVs.length;
		if(this.uvs == null || this.uvs.length != n) {
			this.uvs = [];
		}
		if(this.regionRotate) {
			var i = 0;
			while(i < n) {
				this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;
				this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;
				i += 2;
			}
		} else {
			var i1 = 0;
			while(i1 < n) {
				this.uvs[i1] = this.regionU + this.regionUVs[i1] * width;
				this.uvs[i1 + 1] = this.regionV + this.regionUVs[i1 + 1] * height;
				i1 += 2;
			}
		}
	}
	,applyDeform: function(sourceAttachment) {
		if(this != sourceAttachment) {
			if(this.inheritDeform) {
				return this._parentMesh == sourceAttachment;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: spinehaxe_attachments_MeshAttachment
});
var spinehaxe_attachments_PathAttachment = function(name) {
	spinehaxe_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spinehaxe.attachments.PathAttachment"] = spinehaxe_attachments_PathAttachment;
spinehaxe_attachments_PathAttachment.__name__ = ["spinehaxe","attachments","PathAttachment"];
spinehaxe_attachments_PathAttachment.__super__ = spinehaxe_attachments_VertexAttachment;
spinehaxe_attachments_PathAttachment.prototype = $extend(spinehaxe_attachments_VertexAttachment.prototype,{
	lengths: null
	,closed: null
	,constantSpeed: null
	,__class__: spinehaxe_attachments_PathAttachment
});
var spinehaxe_attachments_RegionAttachment = function(name) {
	this.regionOriginalHeight = 0;
	this.regionOriginalWidth = 0;
	this.regionHeight = 0;
	this.regionWidth = 0;
	this.regionOffsetY = 0;
	this.regionOffsetX = 0;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	this.height = 0;
	this.width = 0;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	spinehaxe_attachments_Attachment.call(this,name);
	var v = new Array(8);
	var _g1 = 0;
	var _g = 8;
	while(_g1 < _g) v[_g1++] = 0;
	this.offset = v;
	this.uvs = [];
	var _g2 = 0;
	while(_g2 < 8) this.uvs[_g2++] = 0;
};
$hxClasses["spinehaxe.attachments.RegionAttachment"] = spinehaxe_attachments_RegionAttachment;
spinehaxe_attachments_RegionAttachment.__name__ = ["spinehaxe","attachments","RegionAttachment"];
spinehaxe_attachments_RegionAttachment.__super__ = spinehaxe_attachments_Attachment;
spinehaxe_attachments_RegionAttachment.prototype = $extend(spinehaxe_attachments_Attachment.prototype,{
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,width: null
	,height: null
	,r: null
	,g: null
	,b: null
	,a: null
	,path: null
	,rendererObject: null
	,regionOffsetX: null
	,regionOffsetY: null
	,regionWidth: null
	,regionHeight: null
	,regionOriginalWidth: null
	,regionOriginalHeight: null
	,offset: null
	,uvs: null
	,setUVs: function(u,v,u2,v2,rotate) {
		if(rotate) {
			this.uvs[2] = u;
			this.uvs[3] = v2;
			this.uvs[4] = u;
			this.uvs[5] = v;
			this.uvs[6] = u2;
			this.uvs[7] = v;
			this.uvs[0] = u2;
			this.uvs[1] = v2;
		} else {
			this.uvs[0] = u;
			this.uvs[1] = v2;
			this.uvs[2] = u;
			this.uvs[3] = v;
			this.uvs[4] = u2;
			this.uvs[5] = v;
			this.uvs[6] = u2;
			this.uvs[7] = v2;
		}
	}
	,updateOffset: function() {
		var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;
		var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;
		var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;
		var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;
		var localX2 = localX + this.regionWidth * regionScaleX;
		var localY2 = localY + this.regionHeight * regionScaleY;
		var radians = this.rotation * Math.PI / 180;
		var cos = Math.cos(radians);
		var sin = Math.sin(radians);
		var localXCos = localX * cos + this.x;
		var localXSin = localX * sin;
		var localYCos = localY * cos + this.y;
		var localYSin = localY * sin;
		var localX2Cos = localX2 * cos + this.x;
		var localX2Sin = localX2 * sin;
		var localY2Cos = localY2 * cos + this.y;
		var localY2Sin = localY2 * sin;
		this.offset[0] = localXCos - localYSin;
		this.offset[1] = localYCos + localXSin;
		this.offset[2] = localXCos - localY2Sin;
		this.offset[3] = localY2Cos + localXSin;
		this.offset[4] = localX2Cos - localY2Sin;
		this.offset[5] = localY2Cos + localX2Sin;
		this.offset[6] = localX2Cos - localYSin;
		this.offset[7] = localYCos + localX2Sin;
	}
	,computeWorldVertices: function(x,y,bone,worldVertices) {
		x += bone._worldX;
		y += bone._worldY;
		var m00 = bone._a;
		var m01 = bone._b;
		var m10 = bone._c;
		var m11 = bone._d;
		var x1 = this.offset[0];
		var y1 = this.offset[1];
		var x2 = this.offset[2];
		var y2 = this.offset[3];
		var x3 = this.offset[4];
		var y3 = this.offset[5];
		var x4 = this.offset[6];
		var y4 = this.offset[7];
		worldVertices[0] = x1 * m00 + y1 * m01 + x;
		worldVertices[1] = x1 * m10 + y1 * m11 + y;
		worldVertices[2] = x2 * m00 + y2 * m01 + x;
		worldVertices[3] = x2 * m10 + y2 * m11 + y;
		worldVertices[4] = x3 * m00 + y3 * m01 + x;
		worldVertices[5] = x3 * m10 + y3 * m11 + y;
		worldVertices[6] = x4 * m00 + y4 * m01 + x;
		worldVertices[7] = x4 * m10 + y4 * m11 + y;
	}
	,__class__: spinehaxe_attachments_RegionAttachment
});
var spinepunk_HaxePunkTextureLoader = function(prefix,assetCache) {
	this.prefix = prefix;
	this.assetCache = assetCache == null ? haxepunk_assets_AssetCache.global : assetCache;
};
$hxClasses["spinepunk.HaxePunkTextureLoader"] = spinepunk_HaxePunkTextureLoader;
spinepunk_HaxePunkTextureLoader.__name__ = ["spinepunk","HaxePunkTextureLoader"];
spinepunk_HaxePunkTextureLoader.__interfaces__ = [spinehaxe_atlas_TextureLoader];
spinepunk_HaxePunkTextureLoader.prototype = {
	prefix: null
	,assetCache: null
	,loadPage: function(page,path) {
		var texture = this.assetCache.getTexture(this.prefix + path,false);
		page.rendererObject = texture;
		page.width = texture == null ? 0 : texture.width;
		page.height = texture == null ? 0 : texture.height;
	}
	,loadRegion: function(region) {
	}
	,__class__: spinepunk_HaxePunkTextureLoader
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
lime_utils_Log.throwErrors = true;
if(typeof(window) != "undefined") {
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = window.document.createElement("canvas");
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
}
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
Main._sineTime = 0;
Main._rainbowColors = (function($this) {
	var $r;
	var a = [];
	{
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			a.push(((Math.sin(i * 0.6) * 127 + 128 | 0) & 255) << 16 | ((Math.sin(i * 0.6 + 2 * Math.PI / 3) * 127 + 128 | 0) & 255) << 8 | (Math.sin(i * 0.6 + 4 * Math.PI / 3) * 127 + 128 | 0) & 255);
		}
	}
	$r = a;
	return $r;
}(this));
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.CLASSES = [];
catalyst_Battle.CRIT_FAIL_WIDTH = 0.05;
catalyst_Battle.MAX_DEBUFF = 20;
catalyst_Battle.TURN_TIME = 0.0166666666666666664;
catalyst_Battle.weights = [];
catalyst_Battle.__clid = hxbit_Serializer.registerClass(catalyst_Battle);
catalyst__$BattleData_BattleData_$Impl_$.ordered = ["battle1","battle2","battle3","battle4","battle5","battle6","battle7","battle8","battle9","battle10","battle11","battle12","battle13","battle14","battle15","battle16","battle17","battle18","battle19","battle20","battle21","battle22","battle23","battle24","battle25","battle26","battle27","battle28","battle29","battle30","battle31","battle32","battle33","battle34","battle35","battle36","battle37","battle38","battle39","battle40","battle41","battle42","battle43","battle44","battle45"];
catalyst_Cat.INJURY_TYPES = 12;
catalyst_Cat.MAX_MUTATIONS = 10;
catalyst_Cat.STAR_XP_BONUS = 0.1;
catalyst_Cat.MUTATION_XP_BONUS = 0.5;
catalyst_Cat.STARVATION_MULTIPLIER = 0.01;
catalyst_Cat.CHILD_MAX_LEVEL_GAIN = 5;
catalyst_Cat.PETTING_MULTIPLIER = 1.5;
catalyst_Cat.MAX_SIZE_DIFFERENCE = 0.1;
catalyst_Cat.MIN_SIZE = 0.5;
catalyst_Cat.MAX_SIZE = 1;
catalyst_Cat.LEVEL_AT_MATURITY = 500;
catalyst_Cat.KITTEN_SIZE = 0.75;
catalyst_Cat.DEFAULT_MAX_LEVEL = 10;
catalyst_Cat.INITIAL_XP_PER_SEC = 1;
catalyst_Cat.MAX_STAT_PER_MAX_LEVEL = 5;
catalyst_Cat.ACTUAL_MAX_STAT = 999;
catalyst_Cat.MAX_INBREED = 10;
catalyst_Cat.MUTATION_STAT_INC_CHANCE = 0.01;
catalyst_Cat.MAX_OWN_MUTATIONS = 1;
catalyst_Cat.STRAY_ATTRIBUTE_TOTAL = 10;
catalyst_Cat.CRIT_WIDTH = 0.05;
catalyst_Cat.STAR_COST_BASE = 50;
catalyst_Cat.STAR_COST_MULT = 1.065;
catalyst_Cat._partition = [1,1,1];
catalyst_Cat._stats = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["str"] != null) {
		_g.setReserved("str",1);
	} else {
		_g.h["str"] = 1;
	}
	if(__map_reserved["int"] != null) {
		_g.setReserved("int",1);
	} else {
		_g.h["int"] = 1;
	}
	if(__map_reserved["cha"] != null) {
		_g.setReserved("cha",1);
	} else {
		_g.h["cha"] = 1;
	}
	$r = _g;
	return $r;
}(this));
catalyst_Cat.__clid = hxbit_Serializer.registerClass(catalyst_Cat);
catalyst__$CatBreed_CatBreed_$Impl_$.ordered = ["dragon","claws","bunny","pig","monkey","fly","gator","jack","elephant","beaver","dog","sheep","hearts","rain","swirls","lightning","stars","chubby","human","original"];
catalyst__$CatBreed_CatBreed_$Impl_$.__parts = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["back wing"] != null) {
		_g.setReserved("back wing","dragon");
	} else {
		_g.h["back wing"] = "dragon";
	}
	if(__map_reserved["front wing"] != null) {
		_g.setReserved("front wing","dragon");
	} else {
		_g.h["front wing"] = "dragon";
	}
	var _g1 = new haxe_ds_StringMap();
	if(__map_reserved["back fore leg"] != null) {
		_g1.setReserved("back fore leg","crab");
	} else {
		_g1.h["back fore leg"] = "crab";
	}
	if(__map_reserved["front fore leg"] != null) {
		_g1.setReserved("front fore leg","crab");
	} else {
		_g1.h["front fore leg"] = "crab";
	}
	var _g2 = new haxe_ds_StringMap();
	if(__map_reserved["back ear"] != null) {
		_g2.setReserved("back ear","bunny");
	} else {
		_g2.h["back ear"] = "bunny";
	}
	if(__map_reserved["front ear"] != null) {
		_g2.setReserved("front ear","bunny");
	} else {
		_g2.h["front ear"] = "bunny";
	}
	if(__map_reserved["tail"] != null) {
		_g2.setReserved("tail","bunny");
	} else {
		_g2.h["tail"] = "bunny";
	}
	var _g3 = new haxe_ds_StringMap();
	if(__map_reserved["nose"] != null) {
		_g3.setReserved("nose","pig");
	} else {
		_g3.h["nose"] = "pig";
	}
	if(__map_reserved["tail"] != null) {
		_g3.setReserved("tail","pig");
	} else {
		_g3.h["tail"] = "pig";
	}
	var _g4 = new haxe_ds_StringMap();
	if(__map_reserved["back ear"] != null) {
		_g4.setReserved("back ear","monkey");
	} else {
		_g4.h["back ear"] = "monkey";
	}
	if(__map_reserved["front ear"] != null) {
		_g4.setReserved("front ear","monkey");
	} else {
		_g4.h["front ear"] = "monkey";
	}
	if(__map_reserved["tail"] != null) {
		_g4.setReserved("tail","monkey");
	} else {
		_g4.h["tail"] = "monkey";
	}
	var _g5 = new haxe_ds_StringMap();
	if(__map_reserved["back wing"] != null) {
		_g5.setReserved("back wing","fly");
	} else {
		_g5.h["back wing"] = "fly";
	}
	if(__map_reserved["eyes wing"] != null) {
		_g5.setReserved("eyes wing","fly");
	} else {
		_g5.h["eyes wing"] = "fly";
	}
	if(__map_reserved["front wing"] != null) {
		_g5.setReserved("front wing","fly");
	} else {
		_g5.h["front wing"] = "fly";
	}
	var _g6 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g6.setReserved("body","spikes");
	} else {
		_g6.h["body"] = "spikes";
	}
	if(__map_reserved["tail"] != null) {
		_g6.setReserved("tail","spikes");
	} else {
		_g6.h["tail"] = "spikes";
	}
	var _g7 = new haxe_ds_StringMap();
	if(__map_reserved["eyes"] != null) {
		_g7.setReserved("eyes","skeleton");
	} else {
		_g7.h["eyes"] = "skeleton";
	}
	if(__map_reserved["mouth"] != null) {
		_g7.setReserved("mouth","skeleton");
	} else {
		_g7.h["mouth"] = "skeleton";
	}
	if(__map_reserved["nose"] != null) {
		_g7.setReserved("nose","skeleton");
	} else {
		_g7.h["nose"] = "skeleton";
	}
	var _g8 = new haxe_ds_StringMap();
	if(__map_reserved["back ear"] != null) {
		_g8.setReserved("back ear","elephant");
	} else {
		_g8.h["back ear"] = "elephant";
	}
	if(__map_reserved["front ear"] != null) {
		_g8.setReserved("front ear","elephant");
	} else {
		_g8.h["front ear"] = "elephant";
	}
	if(__map_reserved["nose"] != null) {
		_g8.setReserved("nose","elephant");
	} else {
		_g8.h["nose"] = "elephant";
	}
	var _g9 = new haxe_ds_StringMap();
	if(__map_reserved["mouth"] != null) {
		_g9.setReserved("mouth","11");
	} else {
		_g9.h["mouth"] = "11";
	}
	if(__map_reserved["tail"] != null) {
		_g9.setReserved("tail","6");
	} else {
		_g9.h["tail"] = "6";
	}
	var _g10 = new haxe_ds_StringMap();
	if(__map_reserved["back ear"] != null) {
		_g10.setReserved("back ear","6");
	} else {
		_g10.h["back ear"] = "6";
	}
	if(__map_reserved["front ear"] != null) {
		_g10.setReserved("front ear","6");
	} else {
		_g10.h["front ear"] = "6";
	}
	if(__map_reserved["tail"] != null) {
		_g10.setReserved("tail","4");
	} else {
		_g10.h["tail"] = "4";
	}
	var _g11 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g11.setReserved("body","11");
	} else {
		_g11.h["body"] = "11";
	}
	if(__map_reserved["tail"] != null) {
		_g11.setReserved("tail","8");
	} else {
		_g11.h["tail"] = "8";
	}
	var _g12 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g12.setReserved("body","16");
	} else {
		_g12.h["body"] = "16";
	}
	if(__map_reserved["decal"] != null) {
		_g12.setReserved("decal","1");
	} else {
		_g12.h["decal"] = "1";
	}
	var _g13 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g13.setReserved("body","15");
	} else {
		_g13.h["body"] = "15";
	}
	if(__map_reserved["decal"] != null) {
		_g13.setReserved("decal","5");
	} else {
		_g13.h["decal"] = "5";
	}
	var _g14 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g14.setReserved("body","14");
	} else {
		_g14.h["body"] = "14";
	}
	if(__map_reserved["decal"] != null) {
		_g14.setReserved("decal","4");
	} else {
		_g14.h["decal"] = "4";
	}
	var _g15 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g15.setReserved("body","9");
	} else {
		_g15.h["body"] = "9";
	}
	if(__map_reserved["decal"] != null) {
		_g15.setReserved("decal","3");
	} else {
		_g15.h["decal"] = "3";
	}
	var _g16 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g16.setReserved("body","6");
	} else {
		_g16.h["body"] = "6";
	}
	if(__map_reserved["decal"] != null) {
		_g16.setReserved("decal","2");
	} else {
		_g16.h["decal"] = "2";
	}
	if(__map_reserved["detail"] != null) {
		_g16.setReserved("detail","15");
	} else {
		_g16.h["detail"] = "15";
	}
	var _g17 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g17.setReserved("body","5");
	} else {
		_g17.h["body"] = "5";
	}
	if(__map_reserved["eyes"] != null) {
		_g17.setReserved("eyes","15");
	} else {
		_g17.h["eyes"] = "15";
	}
	if(__map_reserved["mouth"] != null) {
		_g17.setReserved("mouth","8");
	} else {
		_g17.h["mouth"] = "8";
	}
	var _g18 = new haxe_ds_StringMap();
	if(__map_reserved["ears"] != null) {
		_g18.setReserved("ears","human");
	} else {
		_g18.h["ears"] = "human";
	}
	if(__map_reserved["eyes"] != null) {
		_g18.setReserved("eyes","16");
	} else {
		_g18.h["eyes"] = "16";
	}
	var _g19 = new haxe_ds_StringMap();
	if(__map_reserved["back ear"] != null) {
		_g19.setReserved("back ear","1");
	} else {
		_g19.h["back ear"] = "1";
	}
	if(__map_reserved["body"] != null) {
		_g19.setReserved("body","1");
	} else {
		_g19.h["body"] = "1";
	}
	if(__map_reserved["eyes"] != null) {
		_g19.setReserved("eyes","1");
	} else {
		_g19.h["eyes"] = "1";
	}
	if(__map_reserved["front ear"] != null) {
		_g19.setReserved("front ear","1");
	} else {
		_g19.h["front ear"] = "1";
	}
	if(__map_reserved["mouth"] != null) {
		_g19.setReserved("mouth","1");
	} else {
		_g19.h["mouth"] = "1";
	}
	if(__map_reserved["nose"] != null) {
		_g19.setReserved("nose","1");
	} else {
		_g19.h["nose"] = "1";
	}
	if(__map_reserved["tail"] != null) {
		_g19.setReserved("tail","1");
	} else {
		_g19.h["tail"] = "1";
	}
	$r = [_g,_g1,_g2,_g3,_g4,_g5,_g6,_g7,_g8,_g9,_g10,_g11,_g12,_g13,_g14,_g15,_g16,_g17,_g18,_g19];
	return $r;
}(this));
catalyst__$CatJob_CatJob_$Impl_$.ordered = ["knight","warden","commander","rogue","wizard","paladin","cleric","druid","bard","basecat","supercat"];
catalyst__$CatJob_CatJob_$Impl_$._ordinals = new haxe_ds_StringMap();
catalyst__$CatJob_CatJob_$Impl_$.__int = [[2],[3],[2],[1],[1],[1],[3],[2],[2],[1,3],[1]];
catalyst__$CatJob_CatJob_$Impl_$.__cha = [[3],[2],[2],[3],[2],[2],[1],[1],[1],[1,3],[1]];
catalyst__$CatJob_CatJob_$Impl_$.__str = [[1],[1],[1],[2],[3],[2],[2],[3],[2],[1,3],[1]];
catalyst__$CatName_MaleCatName_$Impl_$.ordered = ["Aaron","Aba","Abdel","Abel","Abelard","Abenzio","Aber","Abercio","Abie","Abir","Abner","Abraham","Aby","Acacio","Acario","Accursius","Ace","Achilles","Ackley","Action","Acton","Adair","Adalardo","Adam","Addis","Addison","Addo","Adelais","Adelbert","Adelfried","Adelino","Adelmo","Adelphos","Ademaro","Adiran","Adler","Adley","Admes","Admon","Adolph","Adon","Adonis","Adony","Adrian","Adriel","Aetos","Afro","Ahearn","Aidan","Aiken","Ailen","Aimery","Aitan","Akando","Akella","Akil","Akira","Akshay","Alan","Aland","Alaric","Alastair","Alban","Albert","Albion","Alcander","Alcott","Alden","Alder","Aldous","Aldrich","Aleron","Aleser","Alex","Alexander","Alfred","Alger","Algernon","Ali","Alladar","Allard","Alphonse","Alston","Altair","Alvin","Amadeus","Amado","Amador","Amal","Amar","Amarus","Amato","Amazing","Amiel","Amir","Amistad","Amit","Amol","Amon","Amory","Amos","Amul","Anand","Anant","Anatole","Ancel","Anderson","Andreus","Andrew","Ang","Angel","Angelo","Angus","Anil","Aniston","Anker","Ankur","Ansley","Anson","Anthony","Anwar","Apostolos","Aram","Aramis","Archer","Archibald","Arden","Ardon","Aren","Ares","Argus","Arie","Arion","Aristo","Arland","Arley","Arlo","Armand","Armen","Armon","Arnold","Arnon","Arsen","Arsenio","Artemis","Arthur","Arthus","Arvind","Arwin","Asher","Ashon","Ashton","Assyrian","Astin","Astley","Asvin","Athan","Atherol","Athol","Atilla","Atman","Atrayl","Atrus","Attis","Auburn","Audric","Augustus","Aurek","Aurelio","Avalon","Avant","Averill","Avery","Avion","Axel","Ayer","Bae","Bailey","Baird","Bairn","Baker","Balbo","Baldasare","Balder","Baldwin","Bale","Bali","Balint","Ballard","Balram","Balthazar","Bandele","Bane","Barabas","Barak","Baran","Barber","Barclay","Barden","Bardo","Bardon","Barend","Barnabas","Barnett","Baron","Barrett","Barry","Bars","Barse","Barsik","Bartolome","Barton","Baruch","Basil","Bastian","Bates","Baul","Bavol","Baxter","Bay","Bayard","Beacan","Beacher","Beaman","Beardsley","Beau","Beaumont","Beaver","Bebe","Beck","Becse","Bede","Beldon","Belen","Bellamy","Bem","Bence","Benedict","Benito","Benjamin","Benson","Bentley","Berenger","Bergen","Berk","Bernard","Bersh","Berthold","Bertram","Beryl","Beverly","Bevin","Beyers","Bingham","Birch","Bishop","Bitalo","Bjorn","Blade","Blaine","Blair","Blaise","Blake","Blazer","Boa","Bob","Boden","Bogart","Bolton","Bond","Booker","Boone","Booth","Borden","Boswell","Botan","Botond","Bowen","Bowman","Boyce","Boyd","Boyden","Bradford","Bradley","Bram","Bramwell","Branch","Brand","Brandon","Branko","Brant","Braxton","Bray","Brayden","Brazil","Brencis","Brendan","Brennan","Brent","Brett","Brewster","Briac","Brian","Briand","Brice","Brigham","Brighton","Brinley","Bristol","Britt","Brock","Brody","Brom","Bromley","Bronson","Brown","Bruce","Bruto","Brutus","Bryce","Buckley","Bud","Buddy","Burgess","Burian","Burke","Burle","Burne","Burr","Burt","Burton","Byron","Cable","Cade","Cadell","Cadeo","Cadmus","Caedmon","Caesar","Cailan","Cain","Caius","Calder","Caldwell","Calhoun","Calisto","Callis","Calvin","Cam","Cameron","Camlin","Campbell","Candan","Candle","Cannon","Capers","Carden","Carel","Carey","Carington","Carl","Carleton","Carlin","Carlson","Carr","Carrick","Carson","Carter","Carver","Cary","Case","Casey","Casper","Cassidy","Cassius","Castel","Cathan","Cato","Caton","Cavan","Cayden","Cedric","Celtic","Cemal","Chad","Chaika","Chaim","Chale","Chalmers","Chancelor","Chander","Chandler","Chane","Chaney","Channing","Chapman","Charles","Charley","Charlie","Chase","Chat","Chatton","Chauncey","Chen","Cheney","Chet","Chilton","Christian","Chuck","Cian","Cisco","Clancy","Clarence","Clark","Clay","Clement","Clifford","Clinton","Clyde","Colby","Cole","Coleman","Colin","Coltin","Colton","Coman","Comfort","Conan","Condor","Conn","Conner","Conrad","Consuelo","Conway","Cooper","Corban","Corbin","Cordell","Corey","Corin","Cornelius","Cort","Cosmo","Coty","Craig","Crasher","Creighton","Crispin","Cristo","Cristophe","Crosby","Cullen","Curran","Currier","Curtis","Cynric","Cyrano","Cyric","Cyril","Cyrus","Dabney","Dacey","Dakota","Dalbert","Dale","Daley","Dali","Damas","Damian","Damon","Dandy","Dane","Daniel","Danny","Dante","Darby","Darcy","Darien","Darius","Darnell","Darren","Darwin","Dave","David","Davidson","Deacon","Dean","Dearborn","Delano","Delmar","Delwyn","Demas","Demetrius","Dempsey","Denby","Dennis","Derby","Derek","Derwin","Desmond","Detective","Devlin","Dexter","Dick","Dickens","Diego","Diesel","Digby","Dilbert","Dixie","Dominic","Donald","Donatien","Donnelly","Donovan","Dooley","Dooly","Dorian","Doron","Dorset","Douglas","Dove","Dover","Doyle","Drake","Drew","Dudley","Duff","Dugan","Duglas","Duke","Duncan","Dunn","Dunstan","Durand","Durriken","Durward","Dustin","Dutch","Dwarf","Dwennon","Dwight","Dylan","Dymas","Eagle","Eamon","Earl","Eaton","Eban","Eberhard","Edan","Eden","Edgardo","Edison","Edmond","Edward","Edwin","Egan","Egbert","Egerton","Egil","Egmont","Egyed","Einar","Eisig","Elan","Elden","Eldon","Eldridge","Eldwin","Eleck","Elgan","Eli","Elias","Eliot","Elkan","Ellery","Elmar","Elmo","Elton","Elu","Elvin","Elvis","Emerson","Emery","Emil","Emilio","Emir","Emrick","Ennis","Enrique","Ephraim","Erek","Eric","Ernest","Erskine","Eryx","Esmond","Essien","Esteban","Estes","Ethan","Ethel","Etienne","Eudor","Eugene","Eustace","Evan","Evander","Ewan","Ewing","Excel","Exie","Eyan","Ezio","Ezra","Fabian","Fairfax","Fane","Fariel","Farkas","Farley","Farrar","Farrell","Faxon","Fear","Februs","Felix","Felton","Fenn","Fenton","Ferdinand","Fergus","Ferguson","Ferran","Ferris","Fidel","Fielding","Fineas","Finian","Finlay","Finn","Fionn","Fisk","Fist","Fitz","Flannery","Flavian","Fleming","Fletcher","Flint","Floke","Flower","Floyd","Flynn","Foebus","Folkus","Fond","Forbes","Ford","Forrester","Foster","Francis","Franklin","Fraser","Frayne","Freddy","Frederick","Free","Fremont","Fuller","Fulton","Gabriel","Gage","Galen","Galeno","Galip","Gallagher","Galloway","Galvin","Gamal","Gaman","Gamble","Gannon","Gardener","Gareth","Garfield","Garin","Garland","Garner","Garnet","Garou","Garrett","Garrick","Garridan","Garvais","Gary","Garyson","Gaspar","Gaston","Gavin","Gavrie","Gawain","Gay","Gaylord","Gaynor","Geary","Gedeon","Geert","Geet","Geir","Genesis","Geoffrey","George","Gerad","Gerald","Gerbert","German","Gersh","Gianni","Gideon","Gil","Ginton","Giordano","Givon","Glenn","Gordon","Grady","Graham","Graison","Gram","Granger","Grant","Granville","Grayson","Greg","Greger","Gregory","Gresham","Griffith","Guess","Gunnar","Gunther","Guy","Habib","Hackett","Hadar","Hadden","Hadley","Hadrian","Hahn","Haile","Haines","Hakan","Halden","Hale","Haley","Halian","Halsey","Halton","Hamal","Hamilton","Hamlin","Haney","Hank","Hannes","Harden","Hardik","Hardy","Hare","Harish","Harith","Harlan","Harman","Harold","Harper","Harrison","Harry","Harsh","Hart","Hartley","Harvey","Hassan","Hastin","Hastings","Haven","Hayden","Hayes","Hector","Heller","Helmuth","Hemal","Hemant","Henning","Henry","Herbert","Herman","Hilton","Hiten","Holden","Holt","Honey","Hont","Horace","Horst","Houston","Howard","Howell","Hubert","Hugh","Hulk","Hunor","Hunter","Huntley","Hussein","Hyam","Iaap","Iago","Iain","Ibrahim","Ignacio","Igor","Ilias","Imre","Ince","Indra","Ingmar","Ingo","Ingolf","Ingram","Iravan","Irvin","Irving","Isaac","Isaiah","Ishver","Isidro","Israel","Ivar","Ives","Jack","Jackson","Jacob","Jaedon","Jael","Jafar","Jagger","Jaleel","Jalen","Jamal","James","Jamison","Jan","Jarek","Jarel","Jarman","Jaron","Jarrah","Jarvis","Jaryn","Jason","Jasper","Jatin","Javan","Javier","Jay","Jayant","Jed","Jeff","Jefferson","Jeffrey","Jenkins","Jensen","Jeremy","Jerod","Jerolin","Jerome","Jerry","Jesse","Jessie","Jetmir","Jiger","Jiro","Joakim","Joel","Johann","John","Jolon","Jonah","Jonathan","Jordan","Jorgen","Joseph","Joshua","Jove","Judd","Jude","Julian","Julius","Juma","Jung","Junior","Justin","Justus","Kabos","Kadin","Kadir","Kahn","Kailash","Kalb","Kale","Kaleo","Kalkin","Kalman","Kamal","Kami","Kanak","Kanan","Kanaye","Kane","Kaniel","Kaplony","Kardal","Kardos","Karim","Karsten","Kartal","Kartik","Kasch","Kasen","Kasimir","Kaspar","Kater","Kay","Kayin","Keane","Kearney","Keary","Keaton","Kedar","Keefe","Keegan","Keeland","Keen","Keenan","Kegan","Keir","Keith","Kelby","Keleman","Kell","Kellen","Kelsey","Kelvin","Kemenes","Kemp","Ken","Kenan","Kend","Kendall","Kendrick","Kenelm","Kenley","Kenn","Kennard","Kennedy","Kenneth","Kenrich","Kent","Kenton","Kenyon","Keon","Ker","Kerk","Kermit","Kern","Kerr","Kerry","Kers","Kersen","Kester","Ketan","Kevin","Keyon","Kiefer","Kieran","Killer","Killian","Kim","Kimberley","Kin","King","Kinnel","Kinsey","Kintan","Kipling","Kipp","Kirit","Kirk","Knox","Knut","Kont","Kontar","Korvin","Kovak","Kovan","Krischnan","Kund","Kush","Kyle","Kyler","Kyne","Label","Laborc","Ladd","Ladomer","Laertes","Lafayette","Laird","Laith","Lakota","Lakshman","Lam","Laman","Lamar","Lamberto","Lamont","Lance","Lander","Landon","Lane","Lang","Lantos","Laoghaire","Latimer","Latin","Lawler","Lawrence","Lawson","Lazarus","Leander","Lear","Lee","Leif","Leith","Leland","Lemuel","Len","Lennon","Lennox","Lensar","Leon","Leonard","Leopold","Leron","Leroy","Lester","Levent","Levi","Li","Licker","Lincoln","Lind","Linton","Linus","Linwood","Lionel","Litton","Lloyd","Logan","Lokesh","Lomar","Lon","London","Lorand","Lorenzo","Lorne","Louis","Lucien","Luke","Lunt","Luther","Lux","Lyle","Lyman","Lyndon","Lyre","Lysander","Maarten","Mac","Mace","Mackenzie","Macon","Macy","Madan","Maddock","Madison","Magne","Magnus","Maitland","Major","Makis","Malcolm","Malise","Manco","Mander","Manfred","Manley","Manning","Mannix","Manuel","Manx","Marcel","Marcin","Marden","Mario","Marion","Mark","Markus","Marlon","Marlow","Mars","Marshall","Martin","Marvin","Marx","Maslin","Mason","Maurice","Max","Maxwell","Mayer","Maynard","Mayon","Mead","Medard","Melancton","Melor","Melville","Melvin","Mendel","Mercer","Merlin","Merrick","Merrill","Mert","Meyer","Michael","Midas","Mihaly","Miko","Milan","Miles","Milind","Millard","Miller","Milton","Miner","Mladen","Monroe","Monte","Mordehai","Moriarty","Morley","Morris","Mortimer","Morton","Morven","Moses","Mull","Murdock","Murphy","Murray","Myles","Myron","Nabend","Nachmanke","Naeem","Nail","Nairne","Nalren","Nandin","Nandor","Nantan","Naples","Napoleon","Narcissus","Nartan","Nash","Nassir","Nathaniel","Naveen","Nayan","Neal","Nedim","Neel","Nek","Nelson","Nemo","Neo","Neroli","Neron","Nesim","Nestor","Nevan","Neville","Newell","Newlyn","Newman","Nicholas","Nico","Nigel","Nilay","Nils","Nimbus","Nino","Nipple","Nirel","Noah","Noble","Nodin","Noe","Noel","Nolan","Norbert","Norman","Norris","North","Nurr","Nyall","Nyle","Oak","Oakes","Oakley","Obelix","Octavius","Odell","Odil","Odin","Odion","Odon","Odvar","Odysseus","Ogden","Ogilvy","Okan","Olaf","Olcay","Oldrich","Oleos","Olier","Olin","Oliver","Omar","Ompoly","Ond","Onde","Onur","Oran","Orban","Oregon","Orelious","Oren","Orion","Orkeny","Orlando","Orman","Ormos","Orrin","Ors","Orson","Orton","Orville","Osbert","Osborne","Oscar","Osmond","Ossian","Oswald","Oswin","Otis","Ove","Ovid","Owen","Oxford","Oz","Ozaner","Packard","Paco","Page","Pager","Paine","Palmer","Pancrazio","Panos","Paras","Paris","Parker","Parlan","Parr","Parry","Parth","Pascal","Patamon","Patony","Patrick","Pattern","Paul","Paxton","Payton","Peace","Pearson","Peder","Pell","Pembroke","Penley","Penn","Penrod","Pentele","Pepper","Percival","Peril","Perry","Pers","Perth","Peter","Phelan","Philip","Phoebe","Phoebus","Phoenix","Pierce","Piero","Pierson","Pilan","Piper","Placido","Platon","Porter","Powell","Power","Praveen","Preetish","Prem","Prentice","Preston","Prewitt","Price","Prime","Primel","Primo","Pryor","Ptolemy","Purr","Puss","Quake","Quasim","Quasimodo","Quennel","Quentin","Quillan","Quinby","Quincy","Quinlan","Quinn","Quintus","Quitte","Radcliff","Radman","Radomer","Rae","Raeburn","Rafe","Rafferty","Raidon","Raimy","Rainer","Rainier","Raleigh","Ralph","Ram","Raman","Ramiro","Ramsey","Rance","Randolph","Ranen","Ranger","Ransford","Ransley","Ransom","Raphael","Rashid","Raven","Ravid","Ravinger","Rawlins","Ray","Rayburn","Raymond","Raynard","Read","Redford","Redmond","Reece","Reese","Reeve","Regan","Reginald","Regis","Remington","Remus","Renard","Rendor","Renee","Renfrew","Renny","Reuben","Reuel","Rex","Rhodes","Richard","Rico","Rider","Ridgley","Ridley","Rigby","Riley","Rimon","Rinako","Ring","Ringo","Riordan","Ripley","Rishon","Risk","Ritchell","Ritter","Rivers","Roald","Roarke","Robbie","Robert","Rocco","Rochester","Roderick","Rodman","Rodney","Rogan","Rogelio","Roger","Rokus","Roland","Roldan","Roman","Romeo","Ronald","Ronan","Ronin","Rooney","Roosevelt","Rory","Roscoe","Ross","Roth","Rowan","Roy","Royce","Ruben","Rudd","Rudolph","Rudyard","Rufus","Rune","Rush","Russel","Ryan","Ryder","Rylan","Sabian","Sacha","Sachiel","Sad","Saddie","Sage","Salim","Salman","Sam","Samien","Samir","Sammon","Samson","Samuel","Sancho","Sanders","Sandler","Sandon","Sandor","Sandow","Sandy","Sanford","Santiago","Santo","Sargent","Sarkis","Saul","Sawyer","Saxton","Sayer","Schuler","Scott","Scottie","Scully","Seabert","Sean","Seaton","Sebastian","Sebes","Seff","Seif","Sencer","Senon","Septimus","Serge","Servan","Seth","Severin","Seward","Seymour","Shalin","Shaman","Shane","Shaw","Sheldon","Shelley","Shen","Shepherd","Sheridon","Sherlock","Sherman","Sherwood","Shipley","Shrey","Shunnar","Siddel","Sigebryht","Sigfried","Sigmund","Silas","Siler","Silver","Silvester","Silvio","Similien","Simon","Singh","Sivan","Skeet","Skipp","Sklaer","Skye","Slade","Slevin","Sloan","Slovenian","Smith","Snorre","Snowden","Sofronio","Sol","Solan","Solomon","Solt","Soma","Sonnagh","Soren","Soterios","Spalding","Spencer","Spike","Standish","Stanley","Stass","Steed","Stein","Stephen","Sterling","Sterne","Stewart","Stoke","Stokley","Stoyan","Strom","Stroud","Stud","Studs","Sulio","Sullivan","Sully","Sumit","Sumner","Sunny","Surya","Sutherlan","Sven","Swain","Swayne","Sweeny","Tab","Tabby","Taddie","Tadeo","Tadeus","Tai","Taksa","Taksony","Talbot","Talman","Talon","Talorg","Talos","Tamer","Tamir","Tancredo","Taner","Tanicus","Tanner","Tano","Tansy","Tao","Tapan","Tarang","Tarasios","Tarcal","Tardos","Tarkan","Taro","Tass","Tate","Taurin","Taurinus","Taurus","Tavis","Taylor","Teague","Tearlach","Tecer","Tee","Tegan","Telo","Tem","Teman","Tenenan","Tennis","Tennyson","Terence","Terrel","Terro","Thai","Thanos","Thatcher","Theodore","Theofilus","Theron","Thierry","Thomas","Thor","Thoralf","Thord","Thore","Thorfinn","Thorgeirr","Thorgils","Thorgrim","Thorkell","Thorne","Thorpe","Thorstein","Thorvald","Thurlow","Thurston","Tibalt","Tiernan","Tierney","Timeus","Timoleon","Timon","Timothy","Timur","Titus","Tivon","Tobias","Todd","Toker","Tom","Tong","Tormod","Torrance","Torsten","Toste","Townsend","Toyo","Tranter","Travis","Tremeur","Trent","Trenus","Trevor","Trey","Tripp","Tristan","Troilus","Truman","Tucker","Tuncer","Ture","Turner","Turpin","Twain","Tye","Tyee","Tyler","Tymon","Tyne","Tyre","Tyrone","Tyrus","Tyson","Udo","Ugo","Ugod","Uilleam","Uisdean","Uland","Ulani","Ulf","Ulprus","Ulrich","Ultan","Ulucan","Ulysses","Umar","Unai","Uncle","Unni","Upen","Upton","Uran","Urban","Uren","Uri","Uriah","Urian","Uriel","Urien","Urmas","Ursus","Uwain","Uxio","Uzi","Vachel","Vadim","Val","Valentin","Valeray","Valerian","Van","Vance","Varden","Varocher","Vasant","Vasilios","Vaughan","Veda","Vedas","Veer","Vencel","Venec","Vernon","Viau","Victor","Vid","Vidas","Vidor","Vikas","Vimal","Vinay","Vincent","Vineet","Vinod","Virat","Virgil","Visant","Vitesse","Vito","Vladilen","Vladimir","Volker","Voteporix","Vougay","Wade","Wagner","Waite","Wakefield","Walden","Waldo","Waleran","Walker","Wallace","Walter","Walton","Ward","Warner","Warren","Washinton","Watson","Waverly","Wayde","Wayland","Wayne","Webster","Welcome","Wells","Welshman","Wendell","Werner","Wesley","West","Weston","Wetherby","Wheaton","Wheeler","White","Whitfield","Wilbur","Wilfred","Willard","William","Willow","Wilmer","Winifred","Winslow","Winston","Winter","Wolf","Wolfgang","Wolfram","Woodrow","Wren","Wright","Wulfhere","Wulfnoth","Wyatt","Wylie","Wyndam","Wystan","Xan","Xander","Xanthippe","Xanthus","Xantous","Xany","Xavier","X-Axis","X-Bit","Xcell","Xenial","Xenon","Xenophon","Xenos","Xerox","Xerxes","Xilonite","Ximen","Xit","X-Man","Xmas","Xo","X-Ray","Xtra","Xury","Xylon","Xylophone","Xyster","Yadon","Yago","Yahto","Yale","Yan","Yancy","Yang","Yanis","Yankee","Yannick","Yappy","Yardley","Yarin","Yasar","Yash","Yasir","Yasuo","Yates","Yeep","Yeller","Yellow","Yener","Yerik","Yervant","Yeshaya","Yeti","Yeux","Yngvar","Yodel","Yogi","Yogurt","Yorcat","York","Yoshi","Young","Yoyo","Yukio","Yul","Yummy","Yves","Zabar","Zabriskie","Zabu","Zac","Zach","Zacharius","Zachary","Zachie","Zachy","Zack","Zackery","Zafer","Zag","Zahlman","Zake","Zaki","Zalian","Zalman","Zamm","Zane","Zang","Zanuck","Zany","Zanzibar","Zap","Zapelli","Zapper","Zarko","Zathras","Zathrus","Zatney","Zaun","Zaw","Zazou","Zazu","Zazzy","Zealot","Zeb","Zeberdy","Zebra","Zebu","Zed","Zee","Zeek","Zeerox","Zeezee","Zeff","Zeffer","Zeit","Zelig","Zen","Zenith","Zeno","Zentaur","Zenzero","Zepellin","Zeph","Zephan","Zephyr","Zephyrus","Zeppelin","Zeppo","Zerkle","Zero","Zethus","Zeus","Zevo","Zezalier","Zico","Ziegfeld","Ziescat","Zig","Ziggy","Zigi","Zigzag","Zinc","Zing","Zinger","Zion","Zip","Zipcode","Zipes","Zipper","Zippo","Zippy","Zither","Zodiac","Zody","Zoeller","Zoltan","Zoltar","Zombie","Zonker","Zoom","Zoomer","Zoppico","Zorch","Zork","Zorro","Zucker","Zuedo","Zukerman","Zurich","Zutty","Zwing","ZZ Cat","ZZ Top"];
catalyst__$CatName_FemaleCatName_$Impl_$.ordered = ["Abbra","Abella","Abigail","Abra","Acasha","Ada","Adalia","Adara","Addie","Adelina","Adina","Adiva","Adora","Afina","Aggie","Agnes","Agneta","Ahava","Aida","Aimee","Aina","Ainslie","Aisha","Alatea","Alberta","Alda","Alex","Alexx","Alia","Alice","Alicia","Alika","Alina","Alix","Aliza","Allegra","Allira","Allix","Alma","Alona","Aloysia","Althena","Alva","Alvita","Amaia","Amalie","Amalita","Amanda","Amani","Amaris","Amber","Amelia","Amissa","Amita","Amy","Anais","Ancelin","Andras","Andrea","Aneira","Anesa","Angela","Anica","Anika","Anira","Anisa","Anise","Ankita","Annie","Annora","Anthea","Anvita","April","Arabelle","Araminta","Araxie","Arcadia","Ardis","Argenta","Aria","Ariana","Ariane","Aricia","Ariel","Arielle","Arti","Asha","Ashima","Ashira","Asisa","Astra","Athena","Athenia","Atiya","Aurelia","Aurora","Ausiana","Axelia","Azalia","Azaria","Azura","Babette","Babs","Babsy","Baby","Bambi","Barbara","Barbie","Barretta","Basia","Bates","Beata","Beatrice","Beatrix","Beau","Bebe","Beck","Bela","Belicia","Belinda","Belle","Benita","Bernice","Berta","Bertie","Bess","Beta","Beth","Bethany","Betty","Bex","Bian","Bianca","Bianne","Blaine","Blayne","Blenda","Bliss","Blossom","Bluma","Bonamy","Bonnie","Brandy","Brea","Brenda","Brenna","Bretta","Bria","Briana","Brianna","Brianne","Brice","Bridget","Brienna","Brienne","Brietta","Brina","Briony","Brites","Buffy","Burdette","Cadena","Cailin","Caja","Caley","Calista","Callie","Candra","Candi","Candy","Capri","Caprice","Carey","Carine","Caris","Carita","Carla","Carmel","Carol","Carole","Caroline","Carolyn","Carrie","Cassia","Cassie","Cathy","Caya","Cecil","Celeste","Ceres","Cerise","Chandra","Charis","Charity","Cherie","Cherise","Cherry","Chiara","Ciara","Ciera","Cindi","Cindy","Cleo","Cleopatra","Clickie","Colette","Connie","Cookie","Cora","Cotton","Cressa","Cressida","Crystal","Dacey","Dacie","Dae","Dagna","Dai","Daisy","Dalia","Dalila","Damaris","Dame","Damiana","Damita","Dana","Danae","Danica","Daniela","Darcy","Daya","Deena","Delanna","Delicia","Delilah","Della","Demi","Dennie","Deny","Desdemona","Despina","Desta","Destinee","Destry","Diamanta","Diana","Diella","Disa","Dita","Dominga","Donata","Donna","Dora","Doris","Dorothy","Dory","Dreama","Drina","Dulcinea","Dyna","Dysis","Easter","Ebba","Ebere","Ebony","Echo","Edana","Edda","Eden","Edith","Edlyn","Edna","Edolie","Edria","Edsel","Edwina","Ekta","Elaine","Eleanor","Electra","Elexus","Elina","Elisa","Elisabeth","Elisha","Elissa","Elita","Ella","Elle","Ellen","Elmira","Else","Elvina","Elvira","Elysia","Ema","Emalia","Emanuela","Ember","Emerald","Emily","Emma","Erika","Erlina","Esme","Esmeralda","Esperanza","Esta","Estelle","Eva","Evelina","Eyota","Fabiana","Faina","Fairlee","Faith","Fantasia","Fantine","Fatima","Felicia","Felicite","Femi","Fennella","Fiona","Fiorenza","Flavia","Fleta","Florence","Flossie","Flower","Fola","Frances","Francesca","Frieda","Fruma","Fuscienne","Gabrielle","Gail","Gaines","Gala","Gale","Gali","Gana","Ganessa","Gazelle","Gelsey","Gemma","Genesis","Geneva","Genevieve","Georgia","Geraldine","Gerda","Gertrude","Gila","Gilana","Gilda","Gillian","Gilly","Gina","Ginger","Giselle","Gita","Gizane","Gleda","Glenna","Gloria","Goldie","Gordana","Grace","Gracie","Grania","Greta","Gretchen","Gwen","Gytha","Hadassa","Haidee","Haifa","Haimi","Haja","Haldis","Hale","Haley","Hali","Halima","Hallie","Halona","Hana","Hanne","Harmony","Harriet","Harva","Hattie","Hava","Haya","Hayden","Haylee","Hazel","Hea","Heather","Heba","Hedda","Heidi","Helen","Helga","Heli","Hema","Heng","Henka","Henrietta","Hera","Herschell","Hessie","Hester","Higera","Hilary","Hilda","Hina","Hisa","Holly","Honey","Honna","Honora","Hope","Hue","Huyana","Hye","Ida","Idola","Idonia","Ila","Ilana","Ilona","Ina","Incognita","India","Indira","Ines","Inga","Inna","Iolanthe","Iona","Ira","Irene","Iris","Irma","Isabel","Isabella","Isadora","Isaura","Isis","Ismelda","Isolde","Iva","Ivy","Jacinda","Jacquelin","Jacquelyn","Jada","Jade","Jael","Jaen","Jaimie","Jaina","Jala","Jamarie","Jamee","Jamilah","Jana","Jane","Janisa","Janna","Jardena","Jarvia","Jasmine","Jaunie","Jaya","Jayanie","Jayne","Jaythen","Jazzy","Jemima","Jenara","Jenay","Jenell","Jenica","Jennifer","Jenny","Jeno","Jerrica","Jess","Jessica","Jessie","Jewel","Jillian","Jin","Jina","Joanne","Jocelyn","Jody","Joelle","Jolene","Jolie","Jordane","Josephine","Joy","Joyce","Juana","Julie","June","Justice","Justine","Kaelyn","Kaia","Kaie","Kaisa","Kaitlyn","Kala","Kalea","Kali","Kalie","Kalila","Kalinda","Kalonice","Kalpana","Kama","Kamala","Kamali","Kamaria","Kamea","Kamilia","Kamryn","Kane","Kantha","Kara","Kari","Karissa","Karka","Karli","Kasa","Kasinda","Kasmira","Katherine","Kathleen","Katie","Kaula","Kaveri","Kavita","Kaya","Kayla","Kayley","Kazanna","Keandra","Keara","Keelin","Keely","Kefira","Kei","Keiko","Keilana","Keisha","Kelda","Kellan","Kelly","Kelsey","Kendra","Kennis","Kenyatta","Kerensa","Kerry","Kerstin","Kesare","Kesi","Kesia","Kessie","Ketika","Kezia","Kiana","Kiele","Kiera","Kiley","Kim","Kineta","Kiona","Kira","Kirby","Kirsten","Kisa","Kiska","Kismet","Kiss","Kissa","Kissie","Kita","Klea","Kohana","Koko","Koren","Kristen","Krysten","Kyla","Kylie","Kyna","Kynthia","Kyra","Lacy","Lae","Laila","Lailie","Lainey","Lakeisha","Lakota","Lala","Lalaine","Lalima","Lalita","Lana","Lane","Lanette","Lanie","Laquetta","Lara","Laraine","Larie","Larissa","Lassie","Latonia","Latrice","Laura","Lavender","Laverne","Layna","Leandra","Lee","Leigh","Leila","Leola","Leopolda","Lesh","Leslie","Less","Letha","Letitia","Levana","Lexi","Lexine","Leyna","Lia","Liana","Liberty","Lien","Liese","Lily","Limber","Lina","Linda","Linette","Linnea","Lioness","Liora","Lisa","Lissa","Llewelyn","Locke","Lola","Lorelei","Lorinda","Lorna","Lotta","Lotti","Louise","Love","Lovenia","Lucina","Lucinda","Lucine","Lucretia","Lucy","Luella","Luna","Lydia","Lynn","Lyra","Lyris","Mab","Mabel","Machiko","Madeira","Madeline","Madison","Madonna","Madra","Maeve","Magara","Magda","Magena","Maggie","Magna","Magnolia","Maia","Maida","Maiko","Maine","Maisie","Maitane","Mala","Malaya","Malca","Malika","Malila","Mallory","Malvina","Mami","Manda","Mandara","Mandisa","Mangena","Mansi","Manuela","Marabelle","Marabella","Marcella","Marcia","Maren","Margaret","Maria","Mariabela","Mariam","Marianne","Maribel","Mariel","Marilee","Marilyn","Mariola","Marissa","Marlene","Marny","Martha","Martina","Marvelle","Mary","Massie","Matana","Mathea","Mathilda","Maud","Maura","Maureen","May","Maya","Medea","Meena","Meera","Megan","Megara","Meira","Melanie","Melba","Melia","Melina","Melinda","Melisenda","Melissa","Melody","Melosa","Mercedes","Mercy","Meredith","Merle","Merry","Merryl","Messina","Meta","Mia","Michaela","Mignon","Mily","Mina","Minda","Mine","Minerva","Minna","Minta","Mira","Mirabelle","Miranda","Miriam","Missy","Misty","Mitena","Modesty","Mona","Monica","Moon","Mora","Morgen","Moselle","Muriel","Musetta","Myra","Nadine","Naia","Naida","Naila","Naina","Nala","Nalanie","Nana","Nancy","Nanda","Nantale","Naomi","Nara","Narcissa","Narda","Narella","Narmada","Natalie","Natanie","Nataniela","Nattie","Naveena","Neala","Neda","Nediva","Neena","Neha","Nellie","Neola","Neria","Nerissa","Nerolie","Nessa","Nessie","Netta","Neva","Nevada","Neysa","Nia","Nicia","Nickita","Nicole","Niece","Nike","Nilima","Nima","Nimisha","Nimmi","Nina","Nira","Nirvana","Nisha","Nisie","Nissa","Nita","Nittie","Niverta","Nixie","Noella","Nora","Norberta","Nordica","Norie","Norma","Nova","Novyanna","Noya","Nuray","Obelia","Octavia","Oda","Odea","Odelia","Odera","Odessa","Odetta","Ohanna","Olesia","Oliana","Olinda","Olivia","Olympia","Omega","Ona","Onida","Ophelia","Ophira","Oralia","Orane","Orenda","Orianna","Oriel","Orinda","Oriole","Orla","Orlanda","Orlantha","Ortensia","Ove","Oxy","Padma","Palma","Paloma","Pamee","Pamela","Pandora","Pansy","Papillon","Parisa","Pascale","Patia","Patience","Patricia","Patty","Paula","Peace","Pearl","Peggy","Pemba","Penda","Penelope","Penina","Pennie","Peony","Perdita","Peregrine","Perrie","Petara","Petite","Petra","Petty","Petula","Petunia","Phedra","Philana","Philippa","Philomena","Phineas","Phoebe","Phoena","Phyllis","Pia","Pilar","Pixie","Placida","Polona","Poppy","Portia","Prama","Pramada","Pratima","Preita","Prema","Premila","Prerana","Pretty","Prima","Priscilla","Prisha","Priss","Prita","Prunella","Psyche","Ptolema","Punita","Pyrena","Pythia","Qamra","Queen","Queena","Queenie","Quella","Quenby","Quinella","Quintessa","Quintina","Quirita","Quiterie","Quorra","Rachel","Radella","Raelin","Raimy","Rain","Raissa","Ramona","Raphaella","Rasine","Rayelle","Raylene","Rayma","Rayna","Rebecca","Reena","Regina","Remy","Rena","Renata","Renee","Renita","Rhea","Rhoda","Rhonda","Ria","Riane","Richelle","Rickena","Rieko","Rihana","Rika","Riley","Rima","Rina","Rinako","Risa","Rita","Riva","Robin","Rochelle","Roderica","Rohana","Romana","Rona","Ronalda","Rosalinda","Rosanne","Rose","Roxanne","Ruby","Rue","Rumer","Runa","Ruth","Rye","Ryesen","Saba","Sabina","Sabine","Sabra","Sabrina","Sade","Saffie","Sagara","Sahana","Sahara","Sahila","Saida","Sakura","Salina","Sally","Saloma","Salwa","Samantha","Samara","Samma","Samta","Samuela","Sana","Sancia","Sandia","Sandra","Sandrine","Sangita","Sanrevele","Sapphira","Sarah","Sarea","Saree","Sarita","Sassy","Savanna","Savarna","Savita","Saxonia","Scarlet","Scota","Seanna","Season","Seema","Sela","Selby","Selena","Selima","Selma","Semele","Semine","Semra","Sennette","Senta","Septima","Seraphina","Serena","Serilda","Seve","Sevita","Shaine","Shandy","Shanessa","Shanley","Shannelle","Shannon","Shantelle","Shantina","Sharmila","Sharon","Shayla","Sheena","Sheila","Shela","Shelby","Sheryl","Shira","Shirley","Sibel","Sidra","Sienna","Sierra","Signe","Sila","Silvia","Simba","Simone","Sine","Sirena","Sissy","Sitara","Skyla","Smita","Solace","Solana","Solange","Soleil","Solita","Somatra","Sona","Sonia","Sophie","Sorano","Sparrow","Spica","Springi","Sprinkles","Stacey","Stacia","Stefania","Stella","Stephanie","Suma","Summer","Sun","Sunita","Sunny","Susan","Sydelle","Sydney","Syna","Tabitha","Tacie","Tacita","Tadie","Taffy","Tai","Tailynn","Taima","Tainn","Taipa","Taka","Takoda","Tala","Tale","Taleen","Talia","Talitha","Tama","Tamara","Tammy","Tanasha","Tanie","Tansy","Tara","Tarsha","Tasha","Tasmin","Tate","Tayen","Tekla","Temina","Temira","Terena","Terra","Tess","Tessa","Tessie","Thais","Thalassa","Thalia","Thana","Thara","Thea","Thelma","Theodora","Theone","Thera","Theresa","Thisbe","Thistle","Thomasa","Thora","Thyra","Tia","Tiara","Tienette","Tierra","Tiffany","Tigress","Tilly","Timandra","Timothea","Tina","Tionne","Tiponya","Tirza","Titania","Tivona","Tola","Tolena","Tomi","Tona","Torie","Tosia","Tracy","Treasa","Tresa","Treva","Trifine","Trilby","Trina","Trinity","Trisha","Trista","Tully","Tusti","Twila","Tyanne","Ulla","Ulrika","Ultima","Ultreia","Uma","Una","Unaiza","Undine","Unica","Unity","Unnati","Unni","Urania","Urbana","Uriah","Uriana","Urmila","Ursanne","Ursula","Usha","Ushma","Usoa","Uta","Uttara","Vada","Vail","Vala","Valda","Valencia","Valentine","Valerie","Valeska","Valisa","Valonia","Valora","Vandana","Vandita","Vanessa","Vanora","Varanese","Varda","Varsha","Vasanta","Veena","Vega","Velika","Velvet","Vendela","Venetia","Venice","Venulla","Venus","Vera","Verena","Verity","Veronica","Vesna","Vesta","Vevila","Vevina","Vickie","Victoria","Vidonia","Vidya","Vienna","Vimala","Vinata","Vinaya","Vinita","Vinvella","Violetta","Virginia","Viridis","Vita","Vivian","Vlada","Wanda","Wanetta","Waseme","Wavy","Wendy","Whitney","Whoopy","Willa","Willow","Wilona","Winda","Windy","Winema","Winona","Winter","Wynn","Xanda","Xandy","Xanthe","Xaviera","Xena","Xenia","Xenobia","Ximena","Xiomara","Xyla","Xylia","Xylona","Xyza","Yachne","Yaksha","Yamura","Yanira","Yarmilla","Yasmine","Yavonna","Ydel","Yedda","Yemena","Yesmina","Ylwa","Yogita","Yolanda","Yomaris","Yovela","Yrsa","Yuka","Yumie","Yuna","Yvette","Zabia","Zada","Zahara","Zaida","Zaira","Zalia","Zaltana","Zana","Zandra","Zanita","Zara","Zarina","Zarna","Zeanes","Zebina","Zee","Zeeba","Zeitia","Zelda","Zelia","Zelinda","Zelpha","Zena","Zenaide","Zenia","Zephyr","Zera","Zeva","Zevida","Zia","Zigana","Zila","Zilia","Zina","Zingara","Zinnia","Ziona","Zisel","Zita","Zizi","Zoe","Zoila","Zola","Zona","Zonda","Zora","Zosima","Zotia","Zula","Zulema","Zuriaa","Zuriela"];
catalyst__$CatPartColorSet_CatPartColorSet_$Impl_$.__colors = [["white","offwhite","gray","light_gray","black","dark_brown","light_brown","rust","yellow","green","red","orange","blue","purple","pink","cyan","hot_pink","cocoa","charcoal","midnight","peanut_butter","tan"],["white","offwhite","gray","black","dark_brown","light_brown","rust"]];
catalyst__$CatPartType_CatPartType_$Impl_$.ordered = ["head","tail","body","whiskers","detail","fluff","nose","mouth","eyes","front ear","back ear","front fore leg","front rear leg","back fore leg","back rear leg","accessory","protrusion","front wing","back wing","decal","face decal"];
catalyst__$CatPartType_CatPartType_$Impl_$.partCounts = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["head"] != null) {
		_g.setReserved("head",1);
	} else {
		_g.h["head"] = 1;
	}
	if(__map_reserved["accessory"] != null) {
		_g.setReserved("accessory",0);
	} else {
		_g.h["accessory"] = 0;
	}
	if(__map_reserved["back ear"] != null) {
		_g.setReserved("back ear",12);
	} else {
		_g.h["back ear"] = 12;
	}
	if(__map_reserved["nose"] != null) {
		_g.setReserved("nose",14);
	} else {
		_g.h["nose"] = 14;
	}
	if(__map_reserved["protrusion"] != null) {
		_g.setReserved("protrusion",0);
	} else {
		_g.h["protrusion"] = 0;
	}
	if(__map_reserved["whiskers"] != null) {
		_g.setReserved("whiskers",12);
	} else {
		_g.h["whiskers"] = 12;
	}
	if(__map_reserved["face decal"] != null) {
		_g.setReserved("face decal",3);
	} else {
		_g.h["face decal"] = 3;
	}
	if(__map_reserved["body"] != null) {
		_g.setReserved("body",16);
	} else {
		_g.h["body"] = 16;
	}
	if(__map_reserved["tail"] != null) {
		_g.setReserved("tail",8);
	} else {
		_g.h["tail"] = 8;
	}
	if(__map_reserved["fluff"] != null) {
		_g.setReserved("fluff",8);
	} else {
		_g.h["fluff"] = 8;
	}
	if(__map_reserved["front ear"] != null) {
		_g.setReserved("front ear",12);
	} else {
		_g.h["front ear"] = 12;
	}
	if(__map_reserved["back fore leg"] != null) {
		_g.setReserved("back fore leg",6);
	} else {
		_g.h["back fore leg"] = 6;
	}
	if(__map_reserved["front wing"] != null) {
		_g.setReserved("front wing",0);
	} else {
		_g.h["front wing"] = 0;
	}
	if(__map_reserved["detail"] != null) {
		_g.setReserved("detail",18);
	} else {
		_g.h["detail"] = 18;
	}
	if(__map_reserved["front fore leg"] != null) {
		_g.setReserved("front fore leg",6);
	} else {
		_g.h["front fore leg"] = 6;
	}
	if(__map_reserved["front rear leg"] != null) {
		_g.setReserved("front rear leg",6);
	} else {
		_g.h["front rear leg"] = 6;
	}
	if(__map_reserved["back rear leg"] != null) {
		_g.setReserved("back rear leg",6);
	} else {
		_g.h["back rear leg"] = 6;
	}
	if(__map_reserved["decal"] != null) {
		_g.setReserved("decal",9);
	} else {
		_g.h["decal"] = 9;
	}
	if(__map_reserved["mouth"] != null) {
		_g.setReserved("mouth",21);
	} else {
		_g.h["mouth"] = 21;
	}
	if(__map_reserved["eyes"] != null) {
		_g.setReserved("eyes",25);
	} else {
		_g.h["eyes"] = 25;
	}
	if(__map_reserved["back wing"] != null) {
		_g.setReserved("back wing",0);
	} else {
		_g.h["back wing"] = 0;
	}
	$r = _g;
	return $r;
}(this));
catalyst_CatShow.INITIAL_REWARD = 5;
catalyst_CatShow.REWARD_RAMP = 1;
catalyst_CatShow.INITIAL_DIFFICULTY = 5;
catalyst_CatShow.DIFFICULTY_RAMP = 1.075;
catalyst_CatShow.MAX_PHASE = 50;
catalyst_CatShow.__clid = hxbit_Serializer.registerClass(catalyst_CatShow);
catalyst__$CatStat_CatStat_$Impl_$.ordered = ["str","int","cha"];
catalyst__$CatType_CatType_$Impl_$.__advantageTypes = [["cha"],["str"],["int"],["str","int","cha"],["str","int","cha","basecat"]];
catalyst__$CatType_CatType_$Impl_$.__disadvantageTypes = [["int","supercat"],["cha","supercat"],["str","supercat"],["supercat"],[]];
catalyst__$CatVariant_CatVariant_$Impl_$.__attachments = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g.setReserved("body","long");
	} else {
		_g.h["body"] = "long";
	}
	var _g1 = new haxe_ds_StringMap();
	if(__map_reserved["body"] != null) {
		_g1.setReserved("body","long_neck");
	} else {
		_g1.h["body"] = "long_neck";
	}
	$r = [_g,_g1];
	return $r;
}(this));
catalyst_Cats.jobBonuses = (function($this) {
	var $r;
	var m = new haxe_ds_StringMap();
	{
		var _g = 0;
		var _g1 = catalyst__$CatJob_CatJob_$Impl_$.ordered;
		while(_g < _g1.length) {
			var job = _g1[_g];
			++_g;
			var u = catalyst__$CatJob_CatJob_$Impl_$.get_bonus(job);
			if(u != null) {
				if(!(__map_reserved[u] != null ? m.existsReserved(u) : m.h.hasOwnProperty(u))) {
					var v = [];
					if(__map_reserved[u] != null) {
						m.setReserved(u,v);
					} else {
						m.h[u] = v;
					}
				}
				(__map_reserved[u] != null ? m.getReserved(u) : m.h[u]).push(job);
			}
		}
	}
	$r = m;
	return $r;
}(this));
catalyst_Cats.__clid = hxbit_Serializer.registerClass(catalyst_Cats);
catalyst_Client.popupTimer = 0;
catalyst_GameData.SAVE_DELAY = 2;
catalyst_GameData.MAX_SAVE_DELAY = 10;
catalyst_GameData.MIN_SAVE_INTERVAL = 60;
catalyst_GameData.INCENT_AD_DELAY = 1800;
catalyst_GameData.GOURMET_FISH_COST = 5;
catalyst_GameData.SAVE_DATA_KEY = "catscatscats";
catalyst_GameData.catnipThisUpdate = 0;
catalyst_GameData.xpThisUpdate = 0;
catalyst_GameData.lvThisUpdate = 0;
catalyst_GameData.fishThisUpdate = 0;
catalyst_GameData.workThisUpdate = 0;
catalyst_GameData.onLoad = new haxepunk_Signal0();
catalyst_GameData.onSave = new haxepunk_Signal0();
catalyst_GameData.__clid = hxbit_Serializer.registerClass(catalyst_GameData);
catalyst__$Gift_Gift_$Impl_$.ordered = ["catnip","potion_ingredient","work","fish","potion","healing","upgrade","piety","empty"];
catalyst__$HelpType_HelpType_$Impl_$.ordered = ["cats","breeding","potions","combat","temple"];
catalyst__$HelpType_HelpType_$Impl_$.__messages = [["\nTo adopt a cat, move to the <tree-icon/><blue>backyard</blue> and $(click) on the one you want. Press the <door-enter-icon/><blue>adopt</blue> button to bring it inside.\n\nIf you already have too many cats, the <blue>Litterboxes</blue> upgrade in the living room will increase the number you can have.\n\t\t","\nAs long as there's <food-icon/><blue>food</blue> in their bowl, cats in the living room will gain <blue>XP</blue> automatically. When the <blue>XP</blue> meter fills, they will level up. Cats' attributes increase when they level up.\n\nA <red>hurt</red> cat won't gain any XP until they recover.\n\t\t","\nWhen cats reach their maximum level, they will no longer gain <blue>XP</blue>. There's no way to increase a cat's maximum level, but their kittens might have a higher maximum.\n\t\t","\nIncreasing a cat's <max-stars/><blue>star level</blue> makes them gain <blue>XP</blue> faster, and gives them a small chance of getting an extra attribute bonus each level.\n\nCats also grow faster with <gourmet-icon/><blue>gourmet food</blue> or by sleeping in the <nap-icon/><blue>nap room</blue>.\n\t\t"],["\nIf you have room in the <couch-icon/><blue>living room</blue> and a <male-icon/><blue>male</blue> and <female-icon/><red>female</red> cat, you can $(click) on one and drag it onto the other to <heart-icon/><blue>breed</blue>.\n\t\t","\nAfter breeding, you can choose to keep a <cat-icon/><blue>kitten</blue> from the litter, or keep the parents. If you choose a kitten, you'll lose both parents.\n\n<cat-icon/><blue>Kittens</blue> will have a combination of their parents' attributes and appearance; you can choose any one kitten from the litter to keep.\n\t\t","\nIf you breed parents that are at their <blue>max level</blue>, the kitten's <blue>max level</blue> will be even higher.\n\nAs long as you breed parents that are close in level and always let them reach their maximum level first, your kittens should always be even better than their parents.\n\t\t","\n<red>Injured</red> parents can't breed! Wait until they recover first.\n\t\t"],["\nPotions require ingredients. A cat sent to the <potion-icon/><blue>alchemy lab</blue> will search for ingredients automatically. You can call it back to see what it found by pressing the <search-icon/><blue>search</blue> button.\n\t\t","\nOnce you have enough ingredients, you can <brew-icon/><blue>brew</blue> a <potion-icon/><blue>potion</blue>. Each ingredient causes the potions' attribute bonuses to change.\n\t\t","\nPotions also have a <mutagen-icon/><blue>mutagen</blue> level based on the ingredients it contains; this is the probability that your cat will mutate after drinking it.\n\nAs a cat's <dna-icon/><purple>mutation</purple> level goes up, there's a chance that its attributes will increase by more than one point each time it levels up.\n\t\t","\nA single cat can only add one to its <dna-icon/><purple>mutation</purple> level, no matter how many potions it drinks. However, a kitten will inherit the sum of its parents' mutations and can develop one additional mutation of its own.\n\t\t"],["\nIn the <sword-icon/><blue>coliseum</blue> you can challenge other cats in combat. Click the <sword-icon/><blue>sword button</blue> to place your cats, and they'll begin fighting automatically.\n\nCats will use different attacks depending on their strengths, and the fight will continue until one side is defeated.\n\t\t","\nCats can use any of three attacks:\n\n<claws-icon/> - hit for extra damage.\n<lightbulb-icon/> - normal damage, may reduce (debuff) the target's strength.\n<heart-icon/> - heals and removes debuffs from your cats.\n\t\t","\nIf a cat has one highest stat, that stat is their type. Types determine <blue>advantage</blue> or <red>disadvantage</red>:\n\n<claws-icon/><blue>strength</blue> beats <heart-icon/><red>charisma</red>\n<heart-icon/><blue>charisma</blue> beats <lightbulb-icon/><red>intelligence</red>\n<lightbulb-icon/><blue>intelligence</blue> beats <claws-icon/><red>strength</red>\n\t\t","\nAdvantage gives greater chance to hit, extra damage, and a higher crit rate, no matter what type of attack you use.\n\nIf two stats are tied for highest, the cat is <cat-icon/><blue>cat type</blue> and has <blue>advantage</blue> against all types. There's also rumor of a <supercat-icon/><blue>supercat type</blue>...\n\t\t","\nIf your cat is hurt, it will gradually recover <red>HP</red> after the fight, so don't rush back in with the same cat.\n\t\t"],["\nThis <temple-icon/><blue>temple</blue> has been here longer than our labs. We don't know who built it.\n\t\t","\nOnce you have a sufficient tribute, you can offer up all of your cats, as well as all of our research progress, to start over.\n\t\t","\nThat means you'll <red>lose everything</red> and have to unlock all rooms and upgrades again!\n\nHowever, the next time around, you should be able to reach <green>even greater heights</green>. Your maximum upgrade levels will be higher, and the first few upgrade levels will cost less.\n\t\t"]];
catalyst_IngredientSearch.AVG_TIME_TO_INGREDIENT = 300;
catalyst_IngredientSearch.RARITY_TIME = 45;
catalyst_IngredientSearch.__clid = hxbit_Serializer.registerClass(catalyst_IngredientSearch);
catalyst__$IngredientType_IngredientCatPart_$Impl_$.__parts = [["tail"],["protrusion"],["back wing","front wing"],["front ear","back ear"],["accessory"],["front fore leg","back fore leg"],["tail","front ear","back ear"],["tail","nose"],["front ear","back ear","tail"],["protrusion"],["front wing","back wing","eyes"],["mouth"],["body","tail"],["eyes","nose","mouth"],["front ear","back ear","nose","front fore leg","front rear leg","back fore leg","back rear leg","nose"],["accessory"],["front fore leg","back fore leg","front rear leg","back rear leg"]];
catalyst__$IngredientType_IngredientType_$Impl_$.ordered = ["garlic","chives","pepper","elderberry","melon","coffee","apple","cherry","banana","vanilla","sugar","newt","pumpkin","peanut","icecream","boot"];
catalyst__$IngredientType_IngredientType_$Impl_$.__stats = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["str"] != null) {
		_g.setReserved("str",1);
	} else {
		_g.h["str"] = 1;
	}
	var _g1 = new haxe_ds_StringMap();
	if(__map_reserved["int"] != null) {
		_g1.setReserved("int",-1);
	} else {
		_g1.h["int"] = -1;
	}
	if(__map_reserved["str"] != null) {
		_g1.setReserved("str",2);
	} else {
		_g1.h["str"] = 2;
	}
	var _g2 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g2.setReserved("cha",-1);
	} else {
		_g2.h["cha"] = -1;
	}
	if(__map_reserved["str"] != null) {
		_g2.setReserved("str",2);
	} else {
		_g2.h["str"] = 2;
	}
	var _g3 = new haxe_ds_StringMap();
	if(__map_reserved["int"] != null) {
		_g3.setReserved("int",1);
	} else {
		_g3.h["int"] = 1;
	}
	var _g4 = new haxe_ds_StringMap();
	if(__map_reserved["int"] != null) {
		_g4.setReserved("int",2);
	} else {
		_g4.h["int"] = 2;
	}
	if(__map_reserved["str"] != null) {
		_g4.setReserved("str",-1);
	} else {
		_g4.h["str"] = -1;
	}
	var _g5 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g5.setReserved("cha",-1);
	} else {
		_g5.h["cha"] = -1;
	}
	if(__map_reserved["int"] != null) {
		_g5.setReserved("int",2);
	} else {
		_g5.h["int"] = 2;
	}
	var _g6 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g6.setReserved("cha",1);
	} else {
		_g6.h["cha"] = 1;
	}
	var _g7 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g7.setReserved("cha",2);
	} else {
		_g7.h["cha"] = 2;
	}
	if(__map_reserved["str"] != null) {
		_g7.setReserved("str",-1);
	} else {
		_g7.h["str"] = -1;
	}
	var _g8 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g8.setReserved("cha",2);
	} else {
		_g8.h["cha"] = 2;
	}
	if(__map_reserved["int"] != null) {
		_g8.setReserved("int",-1);
	} else {
		_g8.h["int"] = -1;
	}
	var _g9 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g9.setReserved("cha",1);
	} else {
		_g9.h["cha"] = 1;
	}
	if(__map_reserved["int"] != null) {
		_g9.setReserved("int",-2);
	} else {
		_g9.h["int"] = -2;
	}
	if(__map_reserved["str"] != null) {
		_g9.setReserved("str",2);
	} else {
		_g9.h["str"] = 2;
	}
	var _g10 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g10.setReserved("cha",2);
	} else {
		_g10.h["cha"] = 2;
	}
	if(__map_reserved["int"] != null) {
		_g10.setReserved("int",1);
	} else {
		_g10.h["int"] = 1;
	}
	if(__map_reserved["str"] != null) {
		_g10.setReserved("str",-2);
	} else {
		_g10.h["str"] = -2;
	}
	var _g11 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g11.setReserved("cha",-2);
	} else {
		_g11.h["cha"] = -2;
	}
	if(__map_reserved["int"] != null) {
		_g11.setReserved("int",2);
	} else {
		_g11.h["int"] = 2;
	}
	if(__map_reserved["str"] != null) {
		_g11.setReserved("str",1);
	} else {
		_g11.h["str"] = 1;
	}
	var _g12 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g12.setReserved("cha",-4);
	} else {
		_g12.h["cha"] = -4;
	}
	if(__map_reserved["int"] != null) {
		_g12.setReserved("int",2);
	} else {
		_g12.h["int"] = 2;
	}
	if(__map_reserved["str"] != null) {
		_g12.setReserved("str",3);
	} else {
		_g12.h["str"] = 3;
	}
	var _g13 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g13.setReserved("cha",-1);
	} else {
		_g13.h["cha"] = -1;
	}
	if(__map_reserved["int"] != null) {
		_g13.setReserved("int",-1);
	} else {
		_g13.h["int"] = -1;
	}
	if(__map_reserved["str"] != null) {
		_g13.setReserved("str",3);
	} else {
		_g13.h["str"] = 3;
	}
	var _g14 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g14.setReserved("cha",3);
	} else {
		_g14.h["cha"] = 3;
	}
	if(__map_reserved["int"] != null) {
		_g14.setReserved("int",-1);
	} else {
		_g14.h["int"] = -1;
	}
	if(__map_reserved["str"] != null) {
		_g14.setReserved("str",-1);
	} else {
		_g14.h["str"] = -1;
	}
	var _g15 = new haxe_ds_StringMap();
	if(__map_reserved["cha"] != null) {
		_g15.setReserved("cha",1);
	} else {
		_g15.h["cha"] = 1;
	}
	if(__map_reserved["str"] != null) {
		_g15.setReserved("str",1);
	} else {
		_g15.h["str"] = 1;
	}
	$r = [_g,_g1,_g2,_g3,_g4,_g5,_g6,_g7,_g8,_g9,_g10,_g11,_g12,_g13,_g14,_g15];
	return $r;
}(this));
catalyst__$IngredientType_IngredientType_$Impl_$.__partModifications = [["devil"],["horn"],["dragon"],["human"],["glasses"],["crab"],["bunny"],["pig"],["monkey"],["tusks"],["fly","chubby_mouth"],["spikes"],["skeleton"],["elephant"],["sunglasses"],["boot"]];
catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered = ["cat_capacity1","litter_size","food_capacity1","food_capacity2","food_capacity3","food_capacity4","catnip_production1","catnip_production2","catnip_production3","catnip_plants1","catnip_capacity1","catnip_capacity2","catnip_capacity3","catnip_capacity4","max_strays1","max_found_ingredients1","ingredient_hunting1","max_ingredients1","max_freeze1","nap_xp_rate1","nap_xp_rate2","max_nap1","cat_xp_rate1","cat_xp_rate2","gourmet_duration1","initiative1","recovery1","max_work1","max_fish1","fishing_speed1","fishing_poles1","breed_max_level1","work_gen_speed1","cat_damage_base1","cat_damage_reduction_base1","cat_xp_base1"];
catalyst_Lab.STRAY_CYCLE_TIME = 180;
catalyst_Lab.EXPEL_LOW_LEVEL_CATS_MULT = 10;
catalyst_Lab.MIN_PRESTIGE_CAT_LEVEL = 60;
catalyst_Lab.PRESTIGE_CAT_LEVEL_INCREASE = 10;
catalyst_Lab.MIN_PRESTIGE_BATTLE_LEVEL = 10;
catalyst_Lab.PRESTIGE_BATTLE_LEVEL_INCREASE = 4;
catalyst_Lab.MIN_PRESTIGE_FAME = 40;
catalyst_Lab.PRESTIGE_FAME_INCREASE = 5;
catalyst_Lab.FAST_CATNIP_MULTIPLIER = 1.5;
catalyst_Lab.MAX_FAME = 250;
catalyst_Lab.STRAY_MAX_LEVEL = 10;
catalyst_Lab.AUTO_BREED_TIME = 150;
catalyst_Lab.FOOD_PER_FISH = 60;
catalyst_Lab.MAX_POTIONS = 12;
catalyst_Lab.MAX_PRESTIGE = (function($this) {
	var $r;
	var highest = 1;
	{
		var _g = 0;
		var _g1 = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.ordered;
		while(_g < _g1.length) {
			var phase = _g1[_g];
			++_g;
			if(catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxPrestige(phase) > highest) {
				highest = catalyst__$UpgradePhase_UpgradePhase_$Impl_$.get_maxPrestige(phase);
			}
		}
	}
	$r = highest;
	return $r;
}(this));
catalyst_Lab.INGREDIENT_MAX_QUANTITY = 99;
catalyst_Lab.GIFT_ROOM_CAT_BONUS = 1.35;
catalyst_Lab.MAX_PIETY = 100000;
catalyst_Lab.REQUIRED_PIETY_BASE = 7777;
catalyst_Lab.REQUIRED_PIETY_MULT = 1.5;
catalyst_Lab.TECH_TIME = 86400;
catalyst_Lab.TECH_INCREASE = 5;
catalyst_Lab.TECH_LEVEL = 100;
catalyst_Lab.TECH_LEVEL_INCREASE = 5;
catalyst_Lab.__clid = hxbit_Serializer.registerClass(catalyst_Lab);
catalyst_Music.FORMAT = "ogg";
catalyst_Music._muted = false;
catalyst_Potion.MAX_INGREDIENTS = 6;
catalyst_Potion.BASE_COST = 100;
catalyst_Potion.COST_MULT = 1.75;
catalyst_Potion.__clid = hxbit_Serializer.registerClass(catalyst_Potion);
catalyst__$Region_Region_$Impl_$.ordered = ["pleasanton"];
catalyst__$Room_Room_$Impl_$.ordered = ["living_room","backyard","plant_lab","gift_room","workshop","potion_lab","fairgrounds","fishing_hole","cryo_lab","coliseum","cat_cafe","nap_room","breeding_room","exercise_room","travel_agency","temple"];
catalyst__$Room_Room_$Impl_$.containerRooms = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		var _g2 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g1 < _g2.length) {
			var room = _g2[_g1];
			++_g1;
			if(catalyst__$Room_Room_$Impl_$.get_holdsCats(room)) {
				_g.push(room);
			}
		}
	}
	$r = _g;
	return $r;
}(this));
catalyst__$Room_Room_$Impl_$.activeCountRooms = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		var _g2 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g1 < _g2.length) {
			var room = _g2[_g1];
			++_g1;
			if(catalyst__$Room_Room_$Impl_$.get_countsAsActive(room)) {
				_g.push(room);
			}
		}
	}
	$r = _g;
	return $r;
}(this));
catalyst__$Room_Room_$Impl_$.updateRooms = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		var _g2 = catalyst__$Room_Room_$Impl_$.ordered;
		while(_g1 < _g2.length) {
			var room = _g2[_g1];
			++_g1;
			if(catalyst__$Room_Room_$Impl_$.get_catsUpdate(room)) {
				_g.push(room);
			}
		}
	}
	$r = _g;
	return $r;
}(this));
catalyst_Sound.FORMAT = "ogg";
catalyst_Sound._muted = false;
catalyst_Sound.loaded = new haxe_ds_StringMap();
catalyst_Sound.sfxQueue = [];
catalyst_Sound.volumeQueue = [];
catalyst__$Trophy_Trophy_$Impl_$.ordered = ["cat_level","supercat","battle_level","one_shot","narrow_win","mutations","ingredients","upgrade_level","rooms","fame","prestige","trophies"];
catalyst__$Trophy_Trophy_$Impl_$.__names = [["Apprentice Breeder","Journeyman Breeder","Master Breeder","Catalyst","Catalyst"],["Supercat!","Dupercat!"],["Pugilist","Gladiator","Champion"],["One Shot"],["Close Call","Narrow Win"],["Lab Tech","Felinologist","Mammalogist","Biologist","Scientist"],["Scavenging Champ","Master Scavenger"],["Student","Lecturer","Professor"],["Builder","Architect"],["Rising Star","Celebrity","VIP","Legend","Superstar"],["Acolyte","Initiate","Disciple","Oracle","Demigod"],["Platinum"]];
catalyst__$Trophy_Trophy_$Impl_$.__colors = [[15314863,14583687,13852511,13121335,13121335],[11220936,11220936],[14601607,13876319,13151031],[7099219],[16755370,16755370],[15040767,14505471,13904639,13904639,13904639],[11158528,16737792],[4476950,11257911,5624832],[2193441,2924588],[11528669,8904397,6280124,3655851,26367],[4210752,8421504,12632256,16777215,2105376],[16777215]];
catalyst__$Trophy_Trophy_$Impl_$.__values = [[25,50,100,150,200],[10,50],[10,20,30],[1],[75,90],[2,4,6,8,10],[Math.round(catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length / 2) | 0,catalyst__$IngredientType_IngredientType_$Impl_$.ordered.length],[25,50,75],[catalyst__$Room_Room_$Impl_$.ordered.length / 2 | 0,catalyst__$Room_Room_$Impl_$.ordered.length],[50,100,150,200,250],[1,2,3,4,5],[35]];
catalyst__$Trophies_Trophies_$Impl_$.upgradeTrophies = (function($this) {
	var $r;
	var m = new haxe_ds_StringMap();
	{
		var _g = 0;
		var _g1 = catalyst__$Trophy_Trophy_$Impl_$.ordered;
		while(_g < _g1.length) {
			var trophy = _g1[_g];
			++_g;
			var u = catalyst__$Trophy_Trophy_$Impl_$.get_upgrade(trophy);
			if(!(__map_reserved[u] != null ? m.existsReserved(u) : m.h.hasOwnProperty(u))) {
				var v = [];
				if(__map_reserved[u] != null) {
					m.setReserved(u,v);
				} else {
					m.h[u] = v;
				}
			}
			(__map_reserved[u] != null ? m.getReserved(u) : m.h[u]).push(trophy);
		}
	}
	$r = m;
	return $r;
}(this));
catalyst__$TutorialType_TutorialType_$Impl_$.__requires = [[],[],[],[],[],[],[],[],[],[],["gain_level"],["gain_level"],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],["catnip"],[]];
catalyst__$TutorialType_TutorialType_$Impl_$.__unless = [[],[],[],[],[],[],[],[],[],[],[],[],[],["can_breed"],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],["cat_cafe_bonus"],[],[],[],[],[],[],["plant_lab_bonus","gift_room_bonus","ingredient_search","cat_cafe_bonus","work_room_bonus"],[]];
catalyst__$TutorialType_TutorialType_$Impl_$.__messages = [["Hello! I'm Professor Kit Meowingsworth. Welcome to\n\n  <sine><cat-icon/><rainbow>Kitty</rainbow>\t<potion-icon/><rainbow>Catalyst!</rainbow></sine>\n\nI'm thrilled to have you here\t- it's hard to find assistants willing to work for such low wages.\n","This is your <blue>living room.</blue> This is where your <blue>cats</blue> would live... if you had any!\n\nStray cats usually congregate in the <blue>backyard.</blue> You should check back there.\n"],["<center><food-icon/> <red>Food</red> <food-icon/></center>\nYour <food-icon/><blue>food dish</blue> is now full.\n\nThe more cats you have, the faster they'll consume your food. If the food runs out, your cats will <red>gain XP very slowly</red>, and you'll <red>lose all room bonuses</red> until it's refilled.\n"],["<center><cat-icon/> <red>Adoption</red> <cat-icon/></center>\nLooks like we have some fine specimens today!\n\nChoose the one you like and <blue>$(click)</blue> it to analyze its data.\n\nIf you like what you see, press <blue>adopt</blue> to bring it inside.\n"],["Hm, yes, this is a good one. This kitty has been rated for\n  <claws-icon/><blue>attack power</blue>,\n  <lightbulb-icon/><blue>intelligence</blue>, and\n  <heart-icon/><blue>cuddliness.</blue>\n\nPick whichever you like most - it doesn't make much difference at this point!\n"],["Your <food-icon/><blue>food</blue> is getting dangerously low.\n\nWithout enough food, your cats won't grow. Press the <food-icon/><blue>food</blue> button to refill it.\n"],["<center><catnip-icon/> <red>Catnip</red> <catnip-icon/></center>\nIn this room, your <plant-lab/><blue>catnip plants</blue> will generate <catnip-icon/><green>catnip</green> over time.\n\nYou'll use this for <upgrade-icon/><green>upgrades</green>, training, and more.\n"],["<center><cat-icon/> <red>Bonus</red> <cat-icon/></center>\nWhen a cat is in the <plant-lab/><blue>horticulture lab</blue>, you'll receive a bonus to your <catnip-icon/><blue>catnip production</blue>, which scales with the cat's level.\n"],["<center><upgrade-icon/> <red>Upgrades</red> <upgrade-icon/></center>\nHere you can use <catnip-icon/><green>catnip</green> to enhance your work.\n\nOther rooms have their own unique upgrades available, so be sure to check them all.\n"],["<center><hammer-icon/> <red>Work</red> <hammer-icon/></center>\nSome upgrades or rooms require <hammer-icon/><red>work</red> to complete. Send cats to the workshop to become <blue>workers</blue> - you'll gain one <red>work</red> point for each of the cat's levels.\n\n<sine><red>Be careful!</red></sine> If you assign a cat to be a worker, you can't take it back!\n"],["Your kitty <blue>gained a level</blue>!\n\nKitties will get\n<claws-icon/><blue>stronger</blue>,\n<lightbulb-icon/><blue>smarter</blue>, or\n<heart-icon/><blue>cuddlier</blue>\nas they gain levels.\n"],["This kitty has reached its <blue>maximum level.</blue> It won't continue to grow.\n\nPerhaps this is all we can hope for from this generation. Maybe if it had <blue>kittens...</blue>\n"],["<center><max-stars/> <red>Training</red> <max-stars/></center>\nPress the <max-stars/><blue>training</blue> button to increase your kitty's <max-stars/><blue>star level.</blue> Higher stars means faster XP growth!\n"],["<center><heart-icon/> <red>Breeding</red> <heart-icon/></center>\n<blue>$(Click)</blue> and hold on one of your kitties to pick it up. Drag it over another eligible kitty and release to have them perform the <sine><heart-icon/><rainbow>kitten\tdance</rainbow></sine>!\n","What's the <sine><heart-icon/><rainbow>kitten\tdance</rainbow></sine>, you ask? I, er, uh...\n\nI've prepared this diagram to illustrate.\n\nKeep in mind, you should <red>wait</red> until both parents reach their <blue>max level</blue> before breeding for the best results! (Cats must be at least Lv. 5 to breed.)\n"],["You have a <male-icon/><cat-icon/> and a <female-icon/><cat-icon/>, but they can't breed yet. They need to be at least <blue>Lv. 5</blue>.\n\nFor best results you should wait until they both reach their <blue>maximum level</blue>.\n"],["You can choose to keep any one <cat-icon/><blue>kitten</blue> from this litter!\n\n<red><sine>Be warned</sine></red> - if you choose to keep a kitten, you'll <red>lose</red> both parents, so choose carefully.\n\nPress the close button to keep the <male-icon/><cat-icon/><blue>parents</blue><female-icon/><cat-icon/> instead.\n"],["Hrm, well, that's, er...\n\nJust as I expected!\n\nIt's an adorable <cat-icon/><blue>kitten</blue>!\n"],["To brew potions, you'll need ingredients. <door-exit-icon/><blue>Send</blue> a cat to this room to get started.\n"],["Your cat has left on a <search-icon/><blue>search</blue> for potion ingredients.\n\nWhen it finds some, press the <search-icon/><blue>search</blue> button to call it back and collect them. It'll head out again automatically until you send it to another room.\n"],["<center><potion-icon/> <red>Potions</red> <potion-icon/></center>\n\nAdd some ingredients to the pot, and press <potion-icon/><blue>Distill</blue> to make a potion, which can improve your cats' abilities.\n","Ingredients may contain different levels of <mutagen-icon/><blue>mutagen</blue>, which may cause growth-enhancing mutation. The more mutagen, the greater the chance a cat will mutate.\n"],["We're equipped with the latest in <cryo-icon/><blue>cryo technology</blue>. If you have too many cats, you can freeze some here.\n\nFrozen cats won't count against your limit, and they won't gain XP or require food until they're thawed.\n"],["Use <catnip-icon/><green>catnip</green> to build additional <blue>rooms</blue>. Each room will provide unique research and cat-raising capabilities.\n\nHidden rooms will be revealed after completing certain objectives in the game.\n"],["Looks like you have a <gift-icon/><blue>present</blue>! Press the gift button to see what's inside.\n"],["<center><cat-icon/> <red>Bonus</red> <cat-icon/></center>\nA cat in the <gift-icon/><blue>gift room</blue> will work on sorting your mail, and you'll receive gifts more often. The higher the cat's level, the faster you'll get gifts!\n"],["Welcome to the <sword-icon/>Coliseum!\n\nPress the <sword-icon/><blue>fight button</blue> to select a cat. Once you've filled your lineup, the battle will begin.\n","The more battles you win, the higher you can raise your cats' <max-stars/><blue>star level</blue>.\n"],["The fight is on! Your cat will choose its attacks automatically.\n  <claws-icon/> - hit for extra damage.\n  <lightbulb-icon/> - normal damage, may reduce (debuff) the target's strength.\n  <heart-icon/> - heals and removes debuffs from your cats.\n"],["Looks like your cat was <red>hurt</red> in battle. It won't gain XP until it recovers, and if you fight again too soon, you won't stand a chance.\n\nWait until your cat's <red>HP</red> is full - it takes a while to recover from <red>1 HP</red>, so be patient.\n\nHurt cats need to recover before breeding.\n"],["Sick of me talking, eh? I get it, I do go on sometimes.\n\nYou can turn off these <help-icon/><blue>tutorials</blue> from the Settings menu!\n","Yes, I do see the irony of a tutorial that tells you how to disable tutorials!\n\n...\n"],["With this new state-of-the-art culinary facility, you can cook up <food-icon/><blue>gourmet food</blue>!\n\nJust press the <gourmet-icon/><blue>gourmet food button</blue> to serve some gourmet food. Your cats will get an XP bonus until the timer runs out. Gourmet food requires one <fish-icon/><blue>fish</blue> each time you refill.\n"],["<center><cat-icon/> <red>Bonus</red> <cat-icon/></center>\nGourmet food doesn't last long, but a cat in the Cat Cafe will keep it warm, prolonging its duration. Higher level cats add additional time.\n"],["With no cat in the cat cafe, your <gourmet-icon/><blue>gourmet food</blue> will go bad.\n\n<door-exit-icon/><blue>Send</blue> a cat to the cat cafe and it'll keep the food warm, prolonging its duration. The duration also gets a boost which increases with the cat's level.\n"],["Well, that was...unexpected.\n\nEverything seems to be gone, but a <red>strange power</red> permeates the whole building, almost as if we're being aided by an unseen force.\n","You have a few advantages this time around:\n\n(1) When you see the <temple-icon/><blue>eye</blue> next to an upgrade price, the <blue>cost won't increase</blue> when you upgrade! This effect lasts a fixed number of upgrades, until the eye disappears.\n","(2) In the settings menu, you can toggle <fast-icon/><blue>fast mode</blue>. This will disable skippable animations and speed up popup transitions and battles, so you can move more quickly.\n"],["Here you can compete in <blue>cat shows</blue>, where your cat will need to:\n\n  <claws-icon/>fight rats,\n  <lightbulb-icon/>jump through hoops, or\n  <heart-icon/>play with yarn.\n\nTricks will get progressively harder over time.\n","Your cat will be judged on its performance, and will earn <ribbon-icon/><blue>fame</blue> for successes and <red>lose HP and fame</red> for failures. When it runs out of HP, it's over.\n\nYour high score is your <ribbon-icon/><blue>fame</blue> rating and can be used to unlock new upgrades!\n","If you're not doing well, you can quit at any time and keep any <ribbon-icon/><blue>fame</blue> you've earned so far.\n"],["<center><dna-icon/> <red>Mutation</red> <dna-icon/></center>\nYour cat has <dna-icon/><blue>mutated</blue>! Mutations increase the cat's growth rate and give it a chance of growing even more every time they level up.\n","Each cat can only develop one additional <dna-icon/><blue>mutation</blue>, but parents may pass mutations on to their offspring, who can then develop their own unique mutation too.\n"],["<center><fish-icon/> <red>Fish</red> <fish-icon/></center>\nCats love <fish-icon/><blue>fish</blue>! You can assign a cat to catch them here.\n\n<door-exit-icon/><blue>Send</blue> a cat here and they'll begin fishing. The cat will continue fishing until your buckets are full.\n","Press the <fish-can-icon/><blue>fish food icon</blue> to toggle <blue>fish food</blue> mode. When this is active, if your cats run out of food, it'll be refilled using fish if any are available. A fish will feed one <cat-icon/><blue>cat</blue> for one minute.\n"],["This room gives you an easy source of high potential cats! Cats will breed on their own in here as long as all requirements are met, producing a new kitten with a high <blue>max level</blue>.\n","Press the <heart-icon/><blue>heart</blue> button to begin. Two stray cats will be let in, and they'll get ready to breed.\n\nOnce they do, another stray cat will be pulled in, and so on, increasing the <blue>max level</blue> of the resulting kittens.\n\nEach time the max level increases, more <fish-icon/><blue>fish</blue> will be required.\n","When you're ready to stop, just press the <heart-icon/><blue>heart</blue> button again and choose a kitten to adopt!\n","If there aren't enough <blue>stray cats</blue> in the backyard or you run out of <fish-icon/><blue>fish</blue>, progress will pause temporarily.\n"],["<center><cat-icon/> <red>Bonus</red> <cat-icon/></center>\nA cat in the <blue>exercise room</blue> will generate <hammer-icon/><red>work</red> automatically! The rate scales with the cat's level.\n"],["If you <blue>$(click)</blue> a cat and choose <door-exit-icon/><blue>send to...</blue>, you can send cats to other rooms.\n\nYou'll get bonuses for having a cat in certain rooms, like the <plant-lab/><blue>horticulture lab</blue>. Try it out!\n"],["<center><globe-icon/> <blue>Exploration</blue> <globe-icon/></center>\nA Level 100 or higher cat can explore the world; when they finish exploring, they'll bring back information about new cultures and technology they encountered, which will give all of your cats a max level bonus.\n"]];
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.ordered = ["cat_upgrades","food_upgrades","catnip_upgrades","catnip_cap","stray","potion","cryo","nap","gourmet","battle","work","fish","heart","exercise","misc"];
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$._emptyUpgrades = [];
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__phases = [["cat_capacity1","litter_size"],["food_capacity1","food_capacity2","food_capacity3","food_capacity4"],["catnip_production1","catnip_production2","catnip_production3","catnip_plants1"],["catnip_capacity1","catnip_capacity2","catnip_capacity3","catnip_capacity4"],["max_strays1"],["max_found_ingredients1","ingredient_hunting1","max_ingredients1"],["max_freeze1"],["nap_xp_rate1","nap_xp_rate2","max_nap1"],["cat_xp_rate1","cat_xp_rate2","gourmet_duration1"],["initiative1","recovery1"],["max_work1"],["max_fish1","fishing_speed1","fishing_poles1"],["breed_max_level1"],["work_gen_speed1"],["cat_damage_base1","cat_damage_reduction_base1","cat_xp_base1"]];
catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$._upgradesForRoom = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = ["cat_upgrades","food_upgrades"];
		if(__map_reserved["living_room"] != null) {
			_g.setReserved("living_room",value);
		} else {
			_g.h["living_room"] = value;
		}
	}
	{
		var value1 = ["catnip_upgrades","catnip_cap"];
		if(__map_reserved["plant_lab"] != null) {
			_g.setReserved("plant_lab",value1);
		} else {
			_g.h["plant_lab"] = value1;
		}
	}
	{
		var value2 = ["stray"];
		if(__map_reserved["backyard"] != null) {
			_g.setReserved("backyard",value2);
		} else {
			_g.h["backyard"] = value2;
		}
	}
	{
		var value3 = ["potion"];
		if(__map_reserved["potion_lab"] != null) {
			_g.setReserved("potion_lab",value3);
		} else {
			_g.h["potion_lab"] = value3;
		}
	}
	{
		var value4 = ["cryo"];
		if(__map_reserved["cryo_lab"] != null) {
			_g.setReserved("cryo_lab",value4);
		} else {
			_g.h["cryo_lab"] = value4;
		}
	}
	{
		var value5 = ["nap"];
		if(__map_reserved["nap_room"] != null) {
			_g.setReserved("nap_room",value5);
		} else {
			_g.h["nap_room"] = value5;
		}
	}
	{
		var value6 = ["gourmet"];
		if(__map_reserved["cat_cafe"] != null) {
			_g.setReserved("cat_cafe",value6);
		} else {
			_g.h["cat_cafe"] = value6;
		}
	}
	{
		var value7 = ["battle"];
		if(__map_reserved["coliseum"] != null) {
			_g.setReserved("coliseum",value7);
		} else {
			_g.h["coliseum"] = value7;
		}
	}
	{
		var value8 = ["work"];
		if(__map_reserved["workshop"] != null) {
			_g.setReserved("workshop",value8);
		} else {
			_g.h["workshop"] = value8;
		}
	}
	{
		var value9 = ["fish"];
		if(__map_reserved["fishing_hole"] != null) {
			_g.setReserved("fishing_hole",value9);
		} else {
			_g.h["fishing_hole"] = value9;
		}
	}
	{
		var value10 = ["heart"];
		if(__map_reserved["breeding_room"] != null) {
			_g.setReserved("breeding_room",value10);
		} else {
			_g.h["breeding_room"] = value10;
		}
	}
	{
		var value11 = ["exercise"];
		if(__map_reserved["exercise_room"] != null) {
			_g.setReserved("exercise_room",value11);
		} else {
			_g.h["exercise_room"] = value11;
		}
	}
	$r = _g;
	return $r;
}(this));
catalyst__$UpgradeType_UpgradeType_$Impl_$.__phases = [["cat_capacity1"],["litter_size"],["food_capacity1","food_capacity2","food_capacity3","food_capacity4"],["catnip_production1","catnip_production2","catnip_production3"],["catnip_plants1"],["catnip_capacity1","catnip_capacity2","catnip_capacity3","catnip_capacity4"],["max_strays1"],["max_found_ingredients1"],["ingredient_hunting1"],["max_ingredients1"],["max_freeze1"],["nap_xp_rate1","nap_xp_rate2"],["max_nap1"],["cat_xp_rate1","cat_xp_rate2"],["gourmet_duration1"],["initiative1"],["recovery1"],["max_work1"],["max_fish1"],["fishing_speed1"],["fishing_poles1"],["breed_max_level1"],["work_gen_speed1"],["cat_damage_base1"],["cat_damage_reduction_base1"],["cat_xp_base1"]];
js_Boot.__toStr = ({ }).toString;
haxepunk_Entity._EMPTY = new haxepunk_Entity();
haxepunk_Entity._point = new haxepunk_math_Vector2();
catalyst_entities_BattleCatEntity.BASE_MOVE_PER_SEC = 512;
catalyst_entities_BattleCatEntity.FLASH_TIME = 0.0833333333333333287;
catalyst_entities_BattleCatEntity.SHAKE_MAGNITUDE = 16;
catalyst_entities_BattleCatEntity.TRAIL_TIME = 0.0333333333333333329;
catalyst_entities_BattleCatEntity.TRAIL_ALPHA = 0.25;
catalyst_entities_CatEntity._collisionArray = [];
spinepunk_SpinePunk._triangles = [0,1,2,0,2,3];
spinepunk_SpinePunk._vertices = [];
catalyst_graphics_CatSpinePunk._loaded = false;
haxepunk_assets_AssetCache.global = new haxepunk_assets_AssetCache("global");
haxepunk_assets_AssetCache.active = [haxepunk_assets_AssetCache.global];
haxepunk_assets_AssetCache.customLoaders = new haxe_ds_StringMap();
haxepunk_graphics_shader_Shader.idSeq = 0;
haxepunk_graphics_shader_TextureShader.VERTEX_SHADER = "// HaxePunk texture vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec2 aTexCoord;\nattribute vec4 aColor;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tvTexCoord = aTexCoord;\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_TextureShader.FRAGMENT_SHADER = "// HaxePunk texture fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\n\nvoid main(void) {\n\tvec4 color = texture2D(uImage0, vTexCoord);\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t} else {\n\t\tgl_FragColor = color * vColor;\n\t}\n}";
haxepunk_graphics_text_BitmapText.FORMAT_TAG_RE = new EReg("<(([A-Za-z_-]+)( ([a-zA-Z-_]+)=\"([^\"]*)\")?/?|(/[A-Za-z_-]+))>","");
haxepunk_graphics_text_BitmapText.formatTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [haxepunk_graphics_text_TextOpcode.NewLine(0,0,0)];
		if(__map_reserved["br"] != null) {
			_g.setReserved("br",value);
		} else {
			_g.h["br"] = value;
		}
	}
	{
		var value1 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["left"] != null) {
			_g.setReserved("left",value1);
		} else {
			_g.h["left"] = value1;
		}
	}
	{
		var value2 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/left"] != null) {
			_g.setReserved("/left",value2);
		} else {
			_g.h["/left"] = value2;
		}
	}
	{
		var value3 = [haxepunk_graphics_text_TextOpcode.Align(2)];
		if(__map_reserved["right"] != null) {
			_g.setReserved("right",value3);
		} else {
			_g.h["right"] = value3;
		}
	}
	{
		var value4 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/right"] != null) {
			_g.setReserved("/right",value4);
		} else {
			_g.h["/right"] = value4;
		}
	}
	{
		var value5 = [haxepunk_graphics_text_TextOpcode.Align(1)];
		if(__map_reserved["center"] != null) {
			_g.setReserved("center",value5);
		} else {
			_g.h["center"] = value5;
		}
	}
	{
		var value6 = [haxepunk_graphics_text_TextOpcode.Align(0)];
		if(__map_reserved["/center"] != null) {
			_g.setReserved("/center",value6);
		} else {
			_g.h["/center"] = value6;
		}
	}
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText.dynamicTags = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = haxepunk_graphics_text_BitmapText.dynamicImage;
		if(__map_reserved["img"] != null) {
			_g.setReserved("img",value);
		} else {
			_g.h["img"] = value;
		}
	}
	$r = _g;
	return $r;
}(this));
haxepunk_graphics_text_BitmapText._colorStack = [];
haxepunk_graphics_text_BitmapText._alphaStack = [];
haxepunk_graphics_text_BitmapText._scaleStack = [];
haxepunk_graphics_text_BitmapText._fontStack = [];
haxepunk_graphics_text_BitmapText._sizeStack = [];
haxepunk_graphics_text_BitmapText._word = [];
haxepunk_graphics_text_BitmapText._customStack = [];
haxepunk_graphics_text_BitmapText._renderData = new haxepunk_graphics_text_RenderData();
haxepunk_graphics_text_BitmapText._imgArray = [];
catalyst_graphics_TrackEntity.MIN_SCALE = 0.0625;
haxepunk_Scene.drawContext = new haxepunk_utils_DrawContext();
haxepunk_Scene._pooledEntityLists = [];
catalyst_scenes_PopupScene.FADE_IN_TIME = 0.2;
catalyst_scenes_PopupScene.FADE_OUT_TIME = 0.2;
catalyst_scenes_GameScene._workingCats = [];
catalyst_scenes_GameScene._collide = [];
catalyst_scenes_LogoScene.FADE_OUT_TIME = 0.75;
catalyst_scenes_SingleCatScene.purrTime = 0;
catalyst_scenes_TutorialScene.specialVars = catalyst_scenes_TutorialScene.getSpecialVars();
catalyst_scenes_UpgradeScene.lastSelected = new haxe_ds_StringMap();
catalyst_scenes_UpgradeScene.lastSelectedInCategory = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.ordered;
		while(_g1 < _g2.length) {
			var category = _g2[_g1];
			++_g1;
			var value = catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.__phases[catalyst__$UpgradeCategory_UpgradeCategory_$Impl_$.get___dataIndex(category)][0];
			if(__map_reserved[category] != null) {
				_g.setReserved(category,value);
			} else {
				_g.h[category] = value;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
catalyst_shaders_NoiseShader.UIMAGE1 = "uImage1";
catalyst_shaders_NoiseShader.UIMAGE2 = "uImage2";
catalyst_shaders_NoiseShader.UINDEX2 = "uIndex2";
catalyst_shaders_NoiseShader.UINDEX1 = "uIndex1";
catalyst_shaders_NoiseShader.UOFFSET1 = "uOffset1";
catalyst_shaders_NoiseShader.UOFFSET2 = "uOffset2";
catalyst_shaders_NoiseShader.UTIMER = "uTimer";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxepunk_HXP.windowWidth = 0;
haxepunk_HXP.windowHeight = 0;
haxepunk_HXP.frameRate = 0;
haxepunk_HXP.rate = 1;
haxepunk_HXP.defaultFont = "font/monofonto";
haxepunk_HXP.tweener = new haxepunk_Tweener();
haxepunk_HXP.focused = false;
haxepunk_HXP.needsResize = false;
haxepunk_HXP.volume = 1;
haxepunk_HXP._pan = 0;
haxepunk_HXP.point = new haxepunk_math_Vector2();
haxepunk_HXP.zeroCamera = new haxepunk_Camera();
haxepunk_HXP.rect = new haxepunk_math_Rectangle();
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.data.set_length(0);
});
haxepunk_Sfx._sounds = new haxe_ds_StringMap();
haxepunk_Sfx._typePlaying = new haxe_ds_StringMap();
haxepunk_Sfx._typeTransforms = new haxe_ds_StringMap();
haxepunk_graphics_hardware_DrawCommand._pool = haxepunk_graphics_hardware_DrawCommand._prePopulatePool(32,4);
haxepunk_graphics_hardware_DrawCommandBatch.maxTriangleChecks = 128;
haxepunk_graphics_hardware_DrawCommandBatch._bounds = new haxepunk_math_Rectangle();
haxepunk_graphics_hardware_HardwareRenderer.drawCallLimit = -1;
haxepunk_graphics_hardware_HardwareRenderer.triangleCount = 0;
haxepunk_graphics_hardware_HardwareRenderer.drawCallCount = 0;
haxepunk_graphics_hardware_HardwareRenderer._tracking = true;
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
haxepunk_graphics_hardware__$Texture_Texture_$Impl_$._zero = new openfl_geom_Point(0,0);
haxepunk_graphics_shader_ColorShader.VERTEX_SHADER = "// HaxePunk color vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = vec4(aColor.bgr * aColor.a, aColor.a);\n\tgl_Position = uMatrix * aPosition;\n}";
haxepunk_graphics_shader_ColorShader.FRAGMENT_SHADER = "// HaxePunk color fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\tgl_FragColor = vColor;\n}";
haxepunk_graphics_shader_SceneShader._vertices = [-1.0,-1.0,0,0,1.0,-1.0,1,0,-1.0,1.0,0,1,1.0,-1.0,1,0,1.0,1.0,1,1,-1.0,1.0,0,1];
haxepunk_graphics_text_BitmapFontAtlas._DEFAULT_GLYPHS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
haxepunk_input_Gamepad.deadZone = 0.15;
haxepunk_input_Gamepad.gamepads = new haxe_ds_IntMap();
haxepunk_input_Gamepad.onConnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.onDisconnect = new haxepunk_Signal1();
haxepunk_input_Gamepad.gamepadCount = 0;
haxepunk_input__$Gesture_Gesture_$Impl_$.longPressTime = 0.5;
haxepunk_input__$Gesture_Gesture_$Impl_$.doubleTapTime = 0.5;
haxepunk_input__$Gesture_Gesture_$Impl_$.deadZone = 5;
haxepunk_input__$Gesture_Gesture_$Impl_$.enabled = false;
haxepunk_input__$Gesture_Gesture_$Impl_$.gestures = new haxe_ds_IntMap();
haxepunk_input__$Gesture_Gesture_$Impl_$._lastTap = 0;
haxepunk_input__$Key_Key_$Impl_$.keyString = "";
haxepunk_input__$Key_Key_$Impl_$.ANY = -1;
haxepunk_input__$Key_Key_$Impl_$.LEFT = 37;
haxepunk_input__$Key_Key_$Impl_$.UP = 38;
haxepunk_input__$Key_Key_$Impl_$.RIGHT = 39;
haxepunk_input__$Key_Key_$Impl_$.DOWN = 40;
haxepunk_input__$Key_Key_$Impl_$.ENTER = 13;
haxepunk_input__$Key_Key_$Impl_$.COMMAND = 15;
haxepunk_input__$Key_Key_$Impl_$.CONTROL = 17;
haxepunk_input__$Key_Key_$Impl_$.SPACE = 32;
haxepunk_input__$Key_Key_$Impl_$.SHIFT = 16;
haxepunk_input__$Key_Key_$Impl_$.BACKSPACE = 8;
haxepunk_input__$Key_Key_$Impl_$.CAPS_LOCK = 20;
haxepunk_input__$Key_Key_$Impl_$.DELETE = 46;
haxepunk_input__$Key_Key_$Impl_$.END = 35;
haxepunk_input__$Key_Key_$Impl_$.ESCAPE = 27;
haxepunk_input__$Key_Key_$Impl_$.HOME = 36;
haxepunk_input__$Key_Key_$Impl_$.INSERT = 45;
haxepunk_input__$Key_Key_$Impl_$.TAB = 9;
haxepunk_input__$Key_Key_$Impl_$.PAGE_DOWN = 34;
haxepunk_input__$Key_Key_$Impl_$.PAGE_UP = 33;
haxepunk_input__$Key_Key_$Impl_$.LEFT_SQUARE_BRACKET = 219;
haxepunk_input__$Key_Key_$Impl_$.RIGHT_SQUARE_BRACKET = 221;
haxepunk_input__$Key_Key_$Impl_$.TILDE = 192;
haxepunk_input__$Key_Key_$Impl_$.A = 65;
haxepunk_input__$Key_Key_$Impl_$.B = 66;
haxepunk_input__$Key_Key_$Impl_$.C = 67;
haxepunk_input__$Key_Key_$Impl_$.D = 68;
haxepunk_input__$Key_Key_$Impl_$.E = 69;
haxepunk_input__$Key_Key_$Impl_$.F = 70;
haxepunk_input__$Key_Key_$Impl_$.G = 71;
haxepunk_input__$Key_Key_$Impl_$.H = 72;
haxepunk_input__$Key_Key_$Impl_$.I = 73;
haxepunk_input__$Key_Key_$Impl_$.J = 74;
haxepunk_input__$Key_Key_$Impl_$.K = 75;
haxepunk_input__$Key_Key_$Impl_$.L = 76;
haxepunk_input__$Key_Key_$Impl_$.M = 77;
haxepunk_input__$Key_Key_$Impl_$.N = 78;
haxepunk_input__$Key_Key_$Impl_$.O = 79;
haxepunk_input__$Key_Key_$Impl_$.P = 80;
haxepunk_input__$Key_Key_$Impl_$.Q = 81;
haxepunk_input__$Key_Key_$Impl_$.R = 82;
haxepunk_input__$Key_Key_$Impl_$.S = 83;
haxepunk_input__$Key_Key_$Impl_$.T = 84;
haxepunk_input__$Key_Key_$Impl_$.U = 85;
haxepunk_input__$Key_Key_$Impl_$.V = 86;
haxepunk_input__$Key_Key_$Impl_$.W = 87;
haxepunk_input__$Key_Key_$Impl_$.X = 88;
haxepunk_input__$Key_Key_$Impl_$.Y = 89;
haxepunk_input__$Key_Key_$Impl_$.Z = 90;
haxepunk_input__$Key_Key_$Impl_$.F1 = 112;
haxepunk_input__$Key_Key_$Impl_$.F2 = 113;
haxepunk_input__$Key_Key_$Impl_$.F3 = 114;
haxepunk_input__$Key_Key_$Impl_$.F4 = 115;
haxepunk_input__$Key_Key_$Impl_$.F5 = 116;
haxepunk_input__$Key_Key_$Impl_$.F6 = 117;
haxepunk_input__$Key_Key_$Impl_$.F7 = 118;
haxepunk_input__$Key_Key_$Impl_$.F8 = 119;
haxepunk_input__$Key_Key_$Impl_$.F9 = 120;
haxepunk_input__$Key_Key_$Impl_$.F10 = 121;
haxepunk_input__$Key_Key_$Impl_$.F11 = 122;
haxepunk_input__$Key_Key_$Impl_$.F12 = 123;
haxepunk_input__$Key_Key_$Impl_$.F13 = 124;
haxepunk_input__$Key_Key_$Impl_$.F14 = 125;
haxepunk_input__$Key_Key_$Impl_$.F15 = 126;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_0 = 48;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_1 = 49;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_2 = 50;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_3 = 51;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_4 = 52;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_5 = 53;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_6 = 54;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_7 = 55;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_8 = 56;
haxepunk_input__$Key_Key_$Impl_$.DIGIT_9 = 57;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_0 = 96;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_1 = 97;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_2 = 98;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_3 = 99;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_4 = 100;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_5 = 101;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_6 = 102;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_7 = 103;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_8 = 104;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_9 = 105;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_ADD = 107;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_DECIMAL = 110;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_DIVIDE = 111;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_ENTER = 108;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_MULTIPLY = 106;
haxepunk_input__$Key_Key_$Impl_$.NUMPAD_SUBTRACT = 109;
haxepunk_input__$Key_Key_$Impl_$.kKeyStringMax = 100;
haxepunk_input__$Key_Key_$Impl_$._key = new haxe_ds_IntMap();
haxepunk_input__$Key_Key_$Impl_$._keyNum = 0;
haxepunk_input__$Key_Key_$Impl_$._press = [];
haxepunk_input__$Key_Key_$Impl_$._pressNum = 0;
haxepunk_input__$Key_Key_$Impl_$._release = [];
haxepunk_input__$Key_Key_$Impl_$._releaseNum = 0;
haxepunk_input__$Key_Key_$Impl_$._control = new haxe_ds_StringMap();
haxepunk_input__$Key_Key_$Impl_$._keyMap = new haxe_ds_IntMap();
haxepunk_input_Mouse.mouseDown = false;
haxepunk_input_Mouse.mouseUp = false;
haxepunk_input_Mouse.mousePressed = false;
haxepunk_input_Mouse.mouseReleased = false;
haxepunk_input_Mouse.rightMouseDown = false;
haxepunk_input_Mouse.rightMouseUp = false;
haxepunk_input_Mouse.rightMousePressed = false;
haxepunk_input_Mouse.rightMouseReleased = false;
haxepunk_input_Mouse.middleMouseDown = false;
haxepunk_input_Mouse.middleMouseUp = false;
haxepunk_input_Mouse.middleMousePressed = false;
haxepunk_input_Mouse.middleMouseReleased = false;
haxepunk_input_Mouse.mouseWheel = false;
haxepunk_input_Mouse._control = new haxe_ds_StringMap();
haxepunk_input_Mouse._buttonMap = new haxe_ds_IntMap();
haxepunk_input_Mouse._mouseWheelDelta = 0;
haxepunk_input_Mouse._mouseOnScreen = true;
haxepunk_input_Input.handlers = [haxepunk_input__$Key_Key_$Impl_$,haxepunk_input_Mouse];
haxepunk_input_Input.multiTouchSupported = false;
haxepunk_input_Input._signals = [];
haxepunk_input_Touch._touches = new haxe_ds_IntMap();
haxepunk_input_Touch._touchOrder = [];
haxepunk_layout__$Measurement_Measurement_$Impl_$._percent = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 101) _g.push(haxepunk_layout__$Measurement_Measurement_$Impl_$._new(_g1++,"%"));
	}
	$r = _g;
	return $r;
}(this));
haxepunk_masks_Polygon.EPSILON = 0.000000001;
haxepunk_masks_Polygon.firstProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.secondProj = new haxepunk_math_Projection();
haxepunk_masks_Polygon.vertical = new haxepunk_math_Vector2(0,1);
haxepunk_masks_Polygon.horizontal = new haxepunk_math_Vector2(1,0);
haxepunk_math_Random._seed = 0;
haxepunk_utils_Data.PREFIX = "HaxePunk";
haxepunk_utils_Data.id = "";
haxepunk_utils_Data._data = new haxe_ds_StringMap();
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
openfl__$internal_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl__$internal_TouchData();
},function(data) {
	data.reset();
});
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasRenderer.scale = 1;
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_opengl_GLMaskManager.maskShader = new openfl__$internal_renderer_opengl_GLMaskShader();
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display_BitmapData.__bufferStride = 26;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display_LoaderInfo.__rootURL = typeof(window) != "undefined" ? window.document.URL : "";
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D_Context3D.DEPTH_STENCIL = 0;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_Mouse.__cursor = "auto";
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
spinehaxe_Bone.yDown = true;
spinehaxe_MathUtils.radDeg = 180 / Math.PI;
spinehaxe_MathUtils.degRad = Math.PI / 180;
spinehaxe_animation_RotateTimeline.ENTRIES = 2;
spinehaxe_animation_RotateTimeline.PREV_TIME = -2;
spinehaxe_animation_RotateTimeline.PREV_ROTATION = -1;
spinehaxe_animation_RotateTimeline.ROTATION = 1;
spinehaxe_attachments_RegionAttachment.X1 = 0;
spinehaxe_attachments_RegionAttachment.Y1 = 1;
spinehaxe_attachments_RegionAttachment.X2 = 2;
spinehaxe_attachments_RegionAttachment.Y2 = 3;
spinehaxe_attachments_RegionAttachment.X3 = 4;
spinehaxe_attachments_RegionAttachment.Y3 = 5;
spinehaxe_attachments_RegionAttachment.X4 = 6;
spinehaxe_attachments_RegionAttachment.Y4 = 7;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
